{"version":3,"file":"static/js/691.3debd93b.chunk.js","mappings":"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","sources":["../../simulator/src/chip/builder.ts","../../simulator/src/chip/builtins/computer/computer.tsx","../../simulator/src/chip/builtins/logic/and.ts","../../simulator/src/chip/builtins/logic/dmux.ts","../../simulator/src/chip/builtins/logic/mux.ts","../../simulator/src/chip/builtins/logic/nand.ts","../../simulator/src/chip/builtins/logic/not.ts","../../simulator/src/chip/builtins/logic/or.ts","../../simulator/src/chip/builtins/logic/xor.ts","../../simulator/src/chip/builtins/arithmetic/add_16.ts","../../simulator/src/chip/builtins/arithmetic/alu.tsx","../../simulator/src/chip/builtins/arithmetic/half_adder.ts","../../simulator/src/chip/builtins/arithmetic/full_adder.ts","../../simulator/src/chip/builtins/arithmetic/inc16.ts","../../simulator/src/chip/builtins/sequential/dff.ts","../../simulator/src/chip/builtins/index.ts","../../simulator/src/chip/builtins/sequential/bit.tsx","../../simulator/src/chip/builtins/sequential/ram.tsx","../../simulator/src/languages/grammars/hdl.ohm.js","../../simulator/src/languages/hdl.ts"],"sourcesContent":["import { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport {\n  Err,\n  isErr,\n  isOk,\n  Ok,\n  Result,\n} from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { HDL, HdlParse } from \"../languages/hdl.js\";\nimport { getBuiltinChip, hasBuiltinChip } from \"./builtins/index.js\";\nimport { Chip, Connection } from \"./chip.js\";\n\nfunction pinWidth(start: number, end: number | undefined): number | undefined {\n  if (end === undefined) {\n    return undefined;\n  }\n  if (end >= start) {\n    return end - start + 1;\n  }\n  if (start > 0 && end === 0) {\n    return 1;\n  }\n  throw new Error(`Bus specification has start > end (${start} > ${end})`);\n}\n\nexport async function parse(\n  code: string\n): Promise<Result<Chip, Error | { message: string; shortMessage: string }>> {\n  const parsed = HDL.parse(code.toString());\n  if (isErr(parsed)) return parsed;\n  return build(Ok(parsed));\n}\n\nexport async function loadChip(\n  name: string,\n  fs?: FileSystem\n): Promise<Result<Chip>> {\n  if (hasBuiltinChip(name) || fs === undefined) {\n    return getBuiltinChip(name);\n  }\n  try {\n    const file = await fs.readFile(`${name}.hdl`);\n    const maybeParsedHDL = HDL.parse(file);\n    const chip = isOk(maybeParsedHDL)\n      ? build(Ok(maybeParsedHDL), fs)\n      : Err(new Error(\"HDL Was not parsed\"));\n    return chip;\n  } catch (e) {\n    return Err(new Error(`Could not load chip ${name}.hdl` /*, { cause: e }*/));\n  }\n}\n\nexport async function build(\n  parts: HdlParse,\n  fs?: FileSystem\n): Promise<Result<Chip, Error>> {\n  if (parts.parts === \"BUILTIN\") {\n    return getBuiltinChip(parts.name.toString());\n  }\n\n  const buildChip = new Chip(\n    parts.ins.map(({ pin, width }) => ({ pin: pin.toString(), width })),\n    parts.outs.map(({ pin, width }) => ({ pin: pin.toString(), width })),\n    parts.name.toString(),\n    [],\n    parts.clocked\n  );\n\n  for (const part of parts.parts) {\n    const builtin = await loadChip(part.name.toString(), fs);\n    if (isErr(builtin)) return builtin;\n    const partChip = Ok(builtin);\n\n    const wires = part.wires.map<Connection>(({ lhs, rhs }) => ({\n      to: {\n        name: lhs.pin.toString(),\n        start: lhs.start ?? 0,\n        width: pinWidth(lhs.start ?? 0, lhs.end),\n      },\n      from: {\n        name: rhs.pin.toString(),\n        start: rhs.start ?? 0,\n        width: pinWidth(rhs.start ?? 0, rhs.end),\n      },\n    }));\n\n    try {\n      buildChip.wire(partChip, wires);\n    } catch (e) {\n      return Err(e as Error);\n    }\n  }\n\n  return Ok(buildChip);\n}\n","import { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport { Chip, ClockedChip, ConstantBus, HIGH, LOW, Pin } from \"../../chip.js\";\nimport { RAM, RAM16K } from \"../sequential/ram.js\";\nimport {\n  CPUInput,\n  CPUState,\n  cpuTick,\n  cpuTock,\n  emptyState,\n} from \"../../../cpu/cpu.js\";\nimport { int10 } from \"../../../util/twos.js\";\nimport { load } from \"../../../fs.js\";\nimport {\n  KEYBOARD_OFFSET,\n  KeyboardAdapter,\n  SCREEN_OFFSET,\n  SCREEN_SIZE,\n} from \"../../../cpu/memory.js\";\n\nexport class ROM32K extends RAM {\n  constructor() {\n    super(16, \"ROM\");\n  }\n\n  override async load(fs: FileSystem, path: string) {\n    try {\n      (await load(fs, path)).map((v, i) => (this.at(i).busVoltage = v));\n    } catch (cause) {\n      // throw new Error(`ROM32K Failed to load file ${path}`, { cause });\n      throw new Error(`ROM32K Failed to load file ${path}`);\n    }\n  }\n}\n\nexport class Screen extends RAM {\n  static readonly SIZE = SCREEN_SIZE;\n  static readonly OFFSET = SCREEN_OFFSET;\n\n  constructor() {\n    super(13, \"Screen\");\n  }\n}\n\nexport class Keyboard extends Chip implements KeyboardAdapter {\n  static readonly OFFSET = KEYBOARD_OFFSET;\n\n  constructor() {\n    super([], [\"out[16]\"], \"Keyboard\");\n  }\n\n  getKey() {\n    return this.out().busVoltage;\n  }\n\n  setKey(key: number) {\n    this.out().busVoltage = key & 0xffff;\n  }\n\n  clearKey() {\n    this.out().busVoltage = 0;\n  }\n}\n\nexport class Memory extends ClockedChip {\n  private ram = new RAM16K();\n  private screen = new Screen();\n  private keyboard = new Keyboard();\n  private address = 0;\n\n  constructor() {\n    super([\"in[16]\", \"load\", \"address[15])\"], [\"out[16]\"], \"Memory\");\n    this.parts.add(this.keyboard);\n    this.parts.add(this.screen);\n    this.parts.add(this.ram);\n  }\n\n  override tick() {\n    const load = this.in(\"load\").voltage();\n    this.address = this.in(\"address\").busVoltage;\n    if (load) {\n      const inn = this.in().busVoltage;\n      if (this.address >= Keyboard.OFFSET) {\n        // Keyboard, do nothing\n      } else if (this.address >= Screen.OFFSET) {\n        this.screen.at(this.address - Screen.OFFSET).busVoltage = inn;\n      } else {\n        this.ram.at(this.address).busVoltage = inn;\n      }\n    }\n  }\n\n  override tock() {\n    this.eval();\n  }\n\n  override eval() {\n    if (!this.ram) return;\n    this.address = this.in(\"address\").busVoltage;\n    let out = 0;\n    if (this.address >= Keyboard.OFFSET) {\n      // Keyboard, do nothing\n      out = this.keyboard?.out().busVoltage ?? 0;\n    } else if (this.address >= Screen.OFFSET) {\n      out = this.screen?.at(this.address - Screen.OFFSET).busVoltage ?? 0;\n    } else {\n      out = this.ram?.at(this.address).busVoltage ?? 0;\n    }\n    this.out().busVoltage = out;\n  }\n\n  override in(pin?: string): Pin {\n    if (pin?.startsWith(\"RAM16K\")) {\n      const idx = int10(pin.match(/\\[(?<idx>\\d+)]/)?.groups?.idx ?? \"0\");\n      return this.ram.at(idx);\n    }\n    if (pin?.startsWith(\"Screen\")) {\n      const idx = int10(pin.match(/\\[(?<idx>\\d+)]/)?.groups?.idx ?? \"0\");\n      return this.screen.at(idx);\n    }\n    return super.in(pin);\n  }\n\n  override get(name: string, offset = 0): Pin | undefined {\n    if (name.startsWith(\"RAM16K\")) {\n      return this.at(offset & 0x3fff);\n    }\n    if (name.startsWith(\"Screen\")) {\n      return this.at(offset & (0x1fff + Screen.OFFSET));\n    }\n    if (name.startsWith(\"Keyboard\")) {\n      return this.at(Keyboard.OFFSET);\n    }\n    if (name.startsWith(\"Memory\")) {\n      return this.at(offset);\n    }\n    return super.get(name, offset);\n  }\n\n  at(offset: number): Pin {\n    if (offset >= Keyboard.OFFSET) {\n      return this.keyboard.out();\n    }\n    if (offset >= Screen.OFFSET) {\n      return this.screen.at(offset - Screen.OFFSET);\n    } else {\n      return this.ram.at(offset);\n    }\n  }\n\n  override reset(): void {\n    this.address = 0;\n    this.ram.reset();\n    this.screen.reset();\n    super.reset();\n  }\n}\n\nexport class CPU extends ClockedChip {\n  private _state: CPUState = emptyState();\n\n  get state(): CPUState {\n    return this._state;\n  }\n\n  constructor() {\n    super(\n      [\"inM[16]\", \"instruction[16]\", \"reset\"],\n      [\"outM[16]\", \"writeM\", \"addressM[15]\", \"pc[15]\"]\n    );\n  }\n\n  override tick(): void {\n    const [state, writeM] = cpuTick(this.cpuInput(), this._state);\n    this._state = state;\n    this.out(\"writeM\").pull(writeM ? HIGH : LOW);\n    this.out(\"outM\").busVoltage = this._state.ALU ?? 0;\n  }\n\n  override tock(): void {\n    if (!this._state) return; // Skip initial tock\n    const [output, state] = cpuTock(this.cpuInput(), this._state);\n    this._state = state;\n\n    this.out(\"addressM\").busVoltage = output.addressM ?? 0;\n    this.out(\"outM\").busVoltage = output.outM ?? 0;\n    this.out(\"writeM\").pull(output.writeM ? HIGH : LOW);\n    this.out(\"pc\").busVoltage = this._state?.PC ?? 0;\n  }\n\n  private cpuInput(): CPUInput {\n    const inM = this.in(\"inM\").busVoltage;\n    const instruction = this.in(\"instruction\").busVoltage;\n    const reset = this.in(\"reset\").busVoltage === 1;\n    return { inM, instruction, reset };\n  }\n\n  override get(pin: string, offset?: number): Pin | undefined {\n    if (pin?.startsWith(\"ARegister\")) {\n      return new ConstantBus(\"ARegister\", this._state.A);\n    }\n    if (pin?.startsWith(\"DRegister\")) {\n      return new ConstantBus(\"DRegister\", this._state.D);\n    }\n    if (pin?.startsWith(\"PC\")) {\n      return new ConstantBus(\"PC\", this._state.PC);\n    }\n    return super.get(pin, offset);\n  }\n\n  override reset() {\n    this._state = emptyState();\n    \n    // This is a bit of a hack, but because super.reset() does ticktock,\n    // we need to set PC to -1, so that it will be 0 after the reset\n    this._state.PC = -1;\n    \n    super.reset();\n  }\n}\n\nexport class Computer extends Chip {\n  #ram = new Memory();\n  #rom = new ROM32K();\n  #cpu = new CPU();\n\n  constructor() {\n    super([\"reset\"], []);\n\n    this.wire(this.#cpu, [\n      { from: { name: \"reset\", start: 0 }, to: { name: \"reset\", start: 0 } },\n      {\n        from: { name: \"instruction\", start: 0 },\n        to: { name: \"instruction\", start: 0 },\n      },\n      { from: { name: \"outM\", start: 0 }, to: { name: \"inM\", start: 0 } },\n      { from: { name: \"writeM\", start: 0 }, to: { name: \"writeM\", start: 0 } },\n      {\n        from: { name: \"addressM\", start: 0 },\n        to: { name: \"addressM\", start: 0 },\n      },\n    ]);\n\n    this.wire(this.#rom, [\n      { from: { name: \"pc\", start: 0 }, to: { name: \"address\", start: 0 } },\n      {\n        from: { name: \"instruction\", start: 0 },\n        to: { name: \"out\", start: 0 },\n      },\n    ]);\n\n    this.wire(this.#ram, [\n      { from: { name: \"inM\", start: 0 }, to: { name: \"in\", start: 0 } },\n      { from: { name: \"writeM\", start: 0 }, to: { name: \"load\", start: 0 } },\n      {\n        from: { name: \"addressM\", start: 0 },\n        to: { name: \"address\", start: 0 },\n      },\n      { from: { name: \"outM\", start: 0 }, to: { name: \"out\", start: 0 } },\n    ]);\n  }\n\n  override eval() {\n    super.eval();\n  }\n\n  override get(name: string, offset?: number): Pin | undefined {\n    if (\n      name.startsWith(\"PC\") ||\n      name.startsWith(\"ARegister\") ||\n      name.startsWith(\"DRegister\")\n    ) {\n      return this.#cpu.get(name);\n    }\n    if (name.startsWith(\"RAM16K\")) {\n      return this.#ram.get(name, offset);\n    }\n    return super.get(name, offset);\n  }\n\n  override load(fs: FileSystem, path: string): Promise<void> {\n    return this.#rom.load(fs, path);\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function and(a: Voltage, b: Voltage): [Voltage] {\n  return [a === 1 && b === 1 ? HIGH : LOW];\n}\n\nexport function and16(a: number, b: number): [number] {\n  return [a & b & 0xffff];\n}\n\nexport class And extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [n] = and(a, b);\n    this.out().pull(n);\n  }\n}\n\nexport class And16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const [n] = and16(a, b);\n    this.out().busVoltage = n;\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function dmux(inn: Voltage, sel: Voltage): [Voltage, Voltage] {\n  const a = sel === LOW && inn === HIGH ? HIGH : LOW;\n  const b = sel === HIGH && inn === HIGH ? HIGH : LOW;\n  return [a, b];\n}\n\nexport function dmux4way(\n  inn: Voltage,\n  sel: number\n): [Voltage, Voltage, Voltage, Voltage] {\n  const a = sel === 0b00 && inn === HIGH ? HIGH : LOW;\n  const b = sel === 0b01 && inn === HIGH ? HIGH : LOW;\n  const c = sel === 0b10 && inn === HIGH ? HIGH : LOW;\n  const d = sel === 0b11 && inn === HIGH ? HIGH : LOW;\n  return [a, b, c, d];\n}\n\nexport function dmux8way(\n  inn: Voltage,\n  sel: number\n): [Voltage, Voltage, Voltage, Voltage, Voltage, Voltage, Voltage, Voltage] {\n  const a = sel === 0b000 && inn === HIGH ? HIGH : LOW;\n  const b = sel === 0b001 && inn === HIGH ? HIGH : LOW;\n  const c = sel === 0b010 && inn === HIGH ? HIGH : LOW;\n  const d = sel === 0b011 && inn === HIGH ? HIGH : LOW;\n  const e = sel === 0b100 && inn === HIGH ? HIGH : LOW;\n  const f = sel === 0b101 && inn === HIGH ? HIGH : LOW;\n  const g = sel === 0b110 && inn === HIGH ? HIGH : LOW;\n  const h = sel === 0b111 && inn === HIGH ? HIGH : LOW;\n  return [a, b, c, d, e, f, g, h];\n}\n\nexport class DMux extends Chip {\n  constructor() {\n    super([\"in\", \"sel\"], [\"a\", \"b\"]);\n  }\n\n  override eval() {\n    const inn = this.in(\"in\").voltage();\n    const sel = this.in(\"sel\").voltage();\n\n    const [a, b] = dmux(inn, sel);\n    this.out(\"a\").pull(a);\n    this.out(\"b\").pull(b);\n  }\n}\n\nexport class DMux4Way extends Chip {\n  constructor() {\n    super([\"in\", \"sel[2]\"], [\"a\", \"b\", \"c\", \"d\"]);\n  }\n\n  override eval() {\n    const inn = this.in(\"in\").voltage();\n    const sel = this.in(\"sel\").busVoltage;\n\n    const [a, b, c, d] = dmux4way(inn, sel);\n    this.out(\"a\").pull(a);\n    this.out(\"b\").pull(b);\n    this.out(\"c\").pull(c);\n    this.out(\"d\").pull(d);\n  }\n}\n\nexport class DMux8Way extends Chip {\n  constructor() {\n    super([\"in\", \"sel[3]\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]);\n  }\n\n  override eval() {\n    const inn = this.in(\"in\").voltage();\n    const sel = this.in(\"sel\").busVoltage;\n\n    const [a, b, c, d, e, f, g, h] = dmux8way(inn, sel);\n    this.out(\"a\").pull(a);\n    this.out(\"b\").pull(b);\n    this.out(\"c\").pull(c);\n    this.out(\"d\").pull(d);\n    this.out(\"e\").pull(e);\n    this.out(\"f\").pull(f);\n    this.out(\"g\").pull(g);\n    this.out(\"h\").pull(h);\n  }\n}\n","import { Chip, LOW, Voltage } from \"../../chip.js\";\n\nexport function mux(a: Voltage, b: Voltage, sel: Voltage): [Voltage] {\n  return [sel === LOW ? a : b];\n}\n\nexport function mux16(a: number, b: number, sel: Voltage): [number] {\n  return [sel === LOW ? a : b];\n}\n\nexport function mux16_4(\n  a: number,\n  b: number,\n  c: number,\n  d: number,\n  sel: number\n): [number] {\n  const s2 = (sel & 0b01) as Voltage;\n  return (sel & 0b10) === 0b00 ? mux16(a, b, s2) : mux16(c, d, s2);\n}\n\nexport function mux16_8(\n  a: number,\n  b: number,\n  c: number,\n  d: number,\n  e: number,\n  f: number,\n  g: number,\n  h: number,\n  sel: number\n): [number] {\n  const s2 = (sel & 0b11) as Voltage;\n  return (sel & 0b100) === 0b000\n    ? mux16_4(a, b, c, d, s2)\n    : mux16_4(e, f, g, h, s2);\n}\n\nexport class Mux extends Chip {\n  constructor() {\n    super([\"a\", \"b\", \"sel\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const sel = this.in(\"sel\").voltage();\n\n    const [set] = mux(a, b, sel);\n    this.out().pull(set);\n  }\n}\n\nexport class Mux16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\", \"sel\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const sel = this.in(\"sel\").voltage();\n    const [out] = mux16(a, b, sel);\n    this.out().busVoltage = out;\n  }\n}\n\nexport class Mux4Way16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\", \"c[16]\", \"d[16]\", \"sel[2]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const c = this.in(\"c\").busVoltage;\n    const d = this.in(\"d\").busVoltage;\n    const sel = this.in(\"sel\").busVoltage;\n    const [out] = mux16_4(a, b, c, d, sel);\n\n    this.out().busVoltage = out;\n  }\n}\n\nexport class Mux8Way16 extends Chip {\n  constructor() {\n    super(\n      [\n        \"a[16]\",\n        \"b[16]\",\n        \"c[16]\",\n        \"d[16]\",\n        \"e[16]\",\n        \"f[16]\",\n        \"g[16]\",\n        \"h[16]\",\n        \"sel[3]\",\n      ],\n      [\"out[16]\"]\n    );\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const c = this.in(\"c\").busVoltage;\n    const d = this.in(\"d\").busVoltage;\n    const e = this.in(\"e\").busVoltage;\n    const f = this.in(\"f\").busVoltage;\n    const g = this.in(\"g\").busVoltage;\n    const h = this.in(\"h\").busVoltage;\n    const sel = this.in(\"sel\").busVoltage;\n    const [out] = mux16_8(a, b, c, d, e, f, g, h, sel);\n\n    this.out().busVoltage = out;\n  }\n}\n","import { nand16 } from \"../../../util/twos.js\";\nimport { HIGH, LOW, Chip, Voltage } from \"../../chip.js\";\n\nexport function nand(a: Voltage, b: Voltage): [Voltage] {\n  return [a === 1 && b === 1 ? LOW : HIGH];\n}\n\nexport class Nand extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [out] = nand(a, b);\n    this.out().pull(out);\n  }\n}\n\nexport class Nand16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    this.out().busVoltage = nand16(a, b);\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function not(inn: Voltage): [Voltage] {\n  return [inn === LOW ? HIGH : LOW];\n}\n\nexport function not16(inn: number): [number] {\n  return [~inn & 0xffff];\n}\n\nexport class Not extends Chip {\n  constructor() {\n    super([\"in\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"in\").voltage();\n    const [out] = not(a);\n    this.out().pull(out);\n  }\n}\n\nexport class Not16 extends Chip {\n  constructor() {\n    super([\"in[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const [n] = not16(this.in().busVoltage);\n    this.out().busVoltage = n;\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function or(a: Voltage, b: Voltage): [Voltage] {\n  return [a === 1 || b === 1 ? HIGH : LOW];\n}\n\nexport function or16(a: number, b: number): [number] {\n  return [(a | b) & 0xffff];\n}\n\nexport function or8way(a: number): [Voltage] {\n  return [(a & 0xff) === 0 ? LOW : HIGH];\n}\n\nexport class Or extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [out] = or(a, b);\n    this.out().pull(out);\n  }\n}\n\nexport class Or16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const [out] = or16(a, b);\n    this.out().busVoltage = out;\n  }\n}\n\nexport class Or8way extends Chip {\n  constructor() {\n    super([\"in[8]\"], [\"out\"], \"Or8way\");\n  }\n\n  override eval() {\n    const inn = this.in().busVoltage;\n    const [out] = or8way(inn);\n    this.out().pull(out);\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function xor(a: Voltage, b: Voltage): [Voltage] {\n  return [(a === HIGH && b === LOW) || (a === LOW && b === HIGH) ? HIGH : LOW];\n}\n\nexport function xor16(a: number, b: number): [number] {\n  return [(a ^ b) & 0xffff];\n}\n\nexport class Xor extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [out] = xor(a, b);\n    this.out().pull(out);\n  }\n}\n\nexport class Xor16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const [out] = xor16(a, b);\n    this.out().busVoltage = out;\n  }\n}\n","import { Chip } from \"../../chip.js\";\n\nexport function add16(a: number, b: number): [number] {\n  return [(a + b) & 0xffff];\n}\n\nexport class Add16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"], \"Add16\");\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const [out] = add16(a, b);\n    this.out().busVoltage = out;\n  }\n}\n","import { alu, alua, COMMANDS_OP, Flags } from \"../../../cpu/alu.js\";\nimport { Chip, HIGH, LOW } from \"../../chip.js\";\n\nexport class ALUNoStat extends Chip {\n  constructor() {\n    super(\n      [\n        \"x[16]\",\n        \"y[16]\", // 16-bit inputs\n        \"zx\", // zero the x input?\n        \"nx\", // negate the x input?\n        \"zy\", // zero the y input?\n        \"ny\", // negate the y input?\n        \"f\", // compute out = x + y (if 1) or x & y (if 0)\n        \"no\", // negate the out output?\n      ],\n      [\n        \"out[16]\", // 16-bit output\n      ],\n      \"ALU\"\n    );\n  }\n\n  override eval() {\n    const x = this.in(\"x\").busVoltage;\n    const y = this.in(\"y\").busVoltage;\n    const zx = this.in(\"zx\").busVoltage << 5;\n    const nx = this.in(\"nx\").busVoltage << 4;\n    const zy = this.in(\"zy\").busVoltage << 3;\n    const ny = this.in(\"ny\").busVoltage << 2;\n    const f = this.in(\"f\").busVoltage << 1;\n    const no = this.in(\"no\").busVoltage << 0;\n    const op = zx + nx + zy + ny + f + no;\n\n    const [out] = alu(op, x, y);\n\n    this.out().busVoltage = out;\n  }\n}\n\nexport class ALU extends Chip {\n  constructor() {\n    super(\n      [\n        \"x[16]\",\n        \"y[16]\", // 16-bit inputs\n        \"zx\", // zero the x input?\n        \"nx\", // negate the x input?\n        \"zy\", // zero the y input?\n        \"ny\", // negate the y input?\n        \"f\", // compute out = x + y (if 1) or x & y (if 0)\n        \"no\", // negate the out output?\n      ],\n      [\n        \"out[16]\", // 16-bit output\n        \"zr\", // 1 if (out === 0), 0 otherwise\n        \"ng\", // 1 if (out < 0),  0 otherwise\n      ],\n      \"ALU\"\n    );\n  }\n\n  override eval() {\n    const x = this.in(\"x\").busVoltage;\n    const y = this.in(\"y\").busVoltage;\n    const zx = this.in(\"zx\").busVoltage << 5;\n    const nx = this.in(\"nx\").busVoltage << 4;\n    const zy = this.in(\"zy\").busVoltage << 3;\n    const ny = this.in(\"ny\").busVoltage << 2;\n    const f = this.in(\"f\").busVoltage << 1;\n    const no = this.in(\"no\").busVoltage << 0;\n    const op = zx + nx + zy + ny + f + no;\n\n    const [out, flags] = alu(op, x, y);\n\n    const ng = flags === Flags.Negative ? HIGH : LOW;\n    const zr = flags === Flags.Zero ? HIGH : LOW;\n    this.out(\"out\").busVoltage = out;\n    this.out(\"ng\").pull(ng);\n    this.out(\"zr\").pull(zr);\n  }\n\n  op(): COMMANDS_OP {\n    const zx = this.in(\"zx\").busVoltage << 5;\n    const nx = this.in(\"nx\").busVoltage << 4;\n    const zy = this.in(\"zy\").busVoltage << 3;\n    const ny = this.in(\"ny\").busVoltage << 2;\n    const f = this.in(\"f\").busVoltage << 1;\n    const no = this.in(\"no\").busVoltage << 0;\n    const op = zx + nx + zy + ny + f + no;\n    return op as COMMANDS_OP;\n  }\n}\n\nexport class ALUAll extends Chip {\n  constructor() {\n    super(\n      [\n        \"x[16]\",\n        \"y[16]\", // 16-bit inputs\n        \"zx\", // zero the x input?\n        \"nx\", // negate the x input?\n        \"zy\", // zero the y input?\n        \"ny\", // negate the y input?\n        \"f\", // compute out = x + y (if 1) or x & y (if 0)\n        \"no\", // negate the out output?\n      ],\n      [\n        \"out[16]\", // 16-bit output\n        \"zr\", // 1 if (out === 0), 0 otherwise\n        \"ng\", // 1 if (out < 0),  0 otherwise\n      ],\n      \"ALU\"\n    );\n  }\n\n  override eval() {\n    const x = this.in(\"x\").busVoltage;\n    const y = this.in(\"y\").busVoltage;\n    const zx = this.in(\"zx\").busVoltage << 5;\n    const nx = this.in(\"nx\").busVoltage << 4;\n    const zy = this.in(\"zy\").busVoltage << 3;\n    const ny = this.in(\"ny\").busVoltage << 2;\n    const f = this.in(\"f\").busVoltage << 1;\n    const no = this.in(\"no\").busVoltage << 0;\n    const op = zx + nx + zy + ny + f + no;\n\n    const [out, flags] = alua(op, x, y);\n\n    const ng = flags === Flags.Negative ? HIGH : LOW;\n    const zr = flags === Flags.Zero ? HIGH : LOW;\n    this.out(\"out\").busVoltage = out;\n    this.out(\"ng\").pull(ng);\n    this.out(\"zr\").pull(zr);\n  }\n\n  op(): COMMANDS_OP {\n    const zx = this.in(\"zx\").busVoltage << 5;\n    const nx = this.in(\"nx\").busVoltage << 4;\n    const zy = this.in(\"zy\").busVoltage << 3;\n    const ny = this.in(\"ny\").busVoltage << 2;\n    const f = this.in(\"f\").busVoltage << 1;\n    const no = this.in(\"no\").busVoltage << 0;\n    const op = zx + nx + zy + ny + f + no;\n    return op as COMMANDS_OP;\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function halfAdder(a: Voltage, b: Voltage): [Voltage, Voltage] {\n  const sum = (a === 1 && b === 0) || (a === 0 && b === 1) ? HIGH : LOW;\n  const car = a === 1 && b === 1 ? HIGH : LOW;\n\n  return [sum, car];\n}\n\nexport class HalfAdder extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"sum\", \"carry\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [sum, carry] = halfAdder(a, b);\n    this.out(\"sum\").pull(sum);\n    this.out(\"carry\").pull(carry);\n  }\n}\n","import { Chip, Voltage } from \"../../chip.js\";\nimport { or } from \"../logic/or.js\";\nimport { halfAdder } from \"./half_adder.js\";\n\nexport function fullAdder(\n  a: Voltage,\n  b: Voltage,\n  c: Voltage\n): [Voltage, Voltage] {\n  const [s, ca] = halfAdder(a, b);\n  const [sum, cb] = halfAdder(s, c);\n  const [carry] = or(ca, cb);\n\n  return [sum, carry];\n}\n\nexport class FullAdder extends Chip {\n  constructor() {\n    super([\"a\", \"b\", \"c\"], [\"sum\", \"carry\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const c = this.in(\"c\").voltage();\n    const [sum, carry] = fullAdder(a, b, c);\n    this.out(\"sum\").pull(sum);\n    this.out(\"carry\").pull(carry);\n  }\n}\n","import { Chip } from \"../../chip.js\";\nimport { add16 } from \"./add_16.js\";\n\nexport function inc16(n: number): [number] {\n  return add16(n, 1);\n}\n\nexport class Inc16 extends Chip {\n  constructor() {\n    super([\"in[16]\"], [\"out[16]\"], \"Inc16\");\n  }\n\n  override eval() {\n    const a = this.in().busVoltage;\n    const [out] = inc16(a);\n    this.out().busVoltage = out;\n  }\n}\n","import { ClockedChip } from \"../../chip.js\";\n\nexport class DFF extends ClockedChip {\n  constructor(name?: string) {\n    super([\"in\"], [\"out\"], name, [\"t\"]);\n  }\n\n  override tick() {\n    // Read in into t\n    const t = this.in().voltage();\n    this.pin(\"t\").pull(t);\n  }\n\n  override tock() {\n    // write t into out\n    const t = this.pin(\"t\").voltage();\n    this.out().pull(t);\n  }\n}\n","import { Err, Ok, Result } from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { Chip } from \"../chip.js\";\n\nimport { And, And16 } from \"./logic/and.js\";\nimport { DMux, DMux4Way, DMux8Way } from \"./logic/dmux.js\";\nimport { Mux, Mux16, Mux4Way16, Mux8Way16 } from \"./logic/mux.js\";\nimport { Nand, Nand16 } from \"./logic/nand.js\";\nimport { Not, Not16 } from \"./logic/not.js\";\nimport { Or, Or16, Or8way } from \"./logic/or.js\";\nimport { Xor, Xor16 } from \"./logic/xor.js\";\n\nimport { Add16 } from \"./arithmetic/add_16.js\";\nimport { ALU, ALUNoStat } from \"./arithmetic/alu.js\";\nimport { FullAdder } from \"./arithmetic/full_adder.js\";\nimport { HalfAdder } from \"./arithmetic/half_adder.js\";\nimport { Inc16 } from \"./arithmetic/inc16.js\";\n\nimport {\n  Computer,\n  CPU,\n  Keyboard,\n  Memory,\n  ROM32K,\n  Screen,\n} from \"./computer/computer.js\";\nimport { Bit, PC, Register, VRegister } from \"./sequential/bit.js\";\nimport { DFF } from \"./sequential/dff.js\";\nimport { RAM16K, RAM4K, RAM512, RAM64, RAM8 } from \"./sequential/ram.js\";\n\nexport {\n  And,\n  And16,\n  DMux,\n  Mux,\n  Mux16,\n  Mux4Way16,\n  Mux8Way16,\n  Nand,\n  Nand16,\n  Not,\n  Not16,\n  Or,\n  Or16,\n  Or8way,\n  Xor,\n  Xor16,\n  HalfAdder,\n  FullAdder,\n  Add16,\n  Inc16,\n  ALU,\n  Bit,\n  Register,\n  VRegister as ARegister,\n  VRegister as DRegister,\n  DFF,\n  RAM8,\n  RAM64,\n  RAM512,\n  RAM4K,\n  RAM16K,\n};\n\nexport const REGISTRY = new Map<string, () => Chip>(\n  (\n    [\n      [\"Nand\", Nand],\n      [\"Nand16\", Nand16],\n      [\"Not\", Not],\n      [\"Not16\", Not16],\n      [\"And\", And],\n      [\"And16\", And16],\n      [\"Or\", Or],\n      [\"Or16\", Or16],\n      [\"Or8Way\", Or8way],\n      [\"XOr\", Xor],\n      [\"XOr16\", Xor16],\n      [\"Xor\", Xor],\n      [\"Xor16\", Xor16],\n      [\"Mux\", Mux],\n      [\"Mux16\", Mux16],\n      [\"Mux4Way16\", Mux4Way16],\n      [\"Mux8Way16\", Mux8Way16],\n      [\"DMux\", DMux],\n      [\"DMux4Way\", DMux4Way],\n      [\"DMux8Way\", DMux8Way],\n      [\"HalfAdder\", HalfAdder],\n      [\"FullAdder\", FullAdder],\n      [\"Add16\", Add16],\n      [\"Inc16\", Inc16],\n      [\"ALU\", ALU],\n      [\"ALUNoStat\", ALUNoStat],\n      [\"DFF\", DFF],\n      [\"Bit\", Bit],\n      [\"Register\", Register],\n      [\"ARegister\", Register],\n      [\"DRegister\", Register],\n      [\"PC\", PC],\n      [\"RAM8\", RAM8],\n      [\"RAM64\", RAM64],\n      [\"RAM512\", RAM512],\n      [\"RAM4K\", RAM4K],\n      [\"RAM16K\", RAM16K],\n      [\"ROM32K\", ROM32K],\n      [\"Screen\", Screen],\n      [\"Keyboard\", Keyboard],\n      [\"CPU\", CPU],\n      [\"Computer\", Computer],\n      [\"Memory\", Memory],\n      [\"ARegister\", VRegister],\n      [\"DRegister\", VRegister],\n    ] as [string, { new (): Chip }][]\n  ).map(([name, ChipCtor]) => [\n    name,\n    () => {\n      const chip = new ChipCtor();\n      chip.name = name;\n      return chip;\n    },\n  ])\n);\n\nexport function hasBuiltinChip(name: string): boolean {\n  return REGISTRY.has(name);\n}\n\nexport function getBuiltinChip(name: string): Result<Chip> {\n  const chip = REGISTRY.get(name);\n  return chip\n    ? Ok(chip())\n    : Err(new Error(`Chip ${name} not in builtin registry`));\n}\n","import { ClockedChip, HIGH, LOW, Pin, Voltage } from \"../../chip.js\";\n\nexport class Bit extends ClockedChip {\n  bit: Voltage = LOW;\n\n  constructor(name?: string) {\n    super([\"in\", \"load\"], [\"out\"], name);\n  }\n\n  override tick() {\n    if (this.in(\"load\").voltage() === HIGH) {\n      this.bit = this.in().voltage();\n    }\n  }\n\n  override tock() {\n    this.out().pull(this.bit ?? 0);\n  }\n\n  override reset() {\n    this.bit = LOW;\n    super.reset();\n  }\n}\n\nexport class Register extends ClockedChip {\n  bits = 0x00;\n\n  constructor(name?: string) {\n    super([\"in[16]\", \"load\"], [\"out[16]\"], name);\n  }\n\n  override tick() {\n    if (this.in(\"load\").voltage() === HIGH) {\n      this.bits = this.in().busVoltage & 0xffff;\n    }\n  }\n\n  override tock() {\n    this.out().busVoltage = this.bits & 0xffff;\n  }\n\n  override get(name: string, offset?: number): Pin | undefined {\n    return name === this.name ? this.out() : super.get(name, offset);\n  }\n\n  override reset() {\n    this.bits = 0x00;\n    super.reset();\n  }\n}\n\nexport class VRegister extends Register {}\n\nexport class PC extends ClockedChip {\n  bits = 0x00;\n\n  constructor(name?: string) {\n    super([\"in[16]\", \"load\", \"inc\", \"reset\"], [\"out[16]\"], name);\n  }\n\n  override tick() {\n    if (this.in(\"reset\").voltage() === HIGH) {\n      this.bits = 0;\n    } else if (this.in(\"load\").voltage() === HIGH) {\n      this.bits = this.in().busVoltage & 0xffff;\n    } else if (this.in(\"inc\").voltage() === HIGH) {\n      this.bits += 1;\n    }\n  }\n\n  override tock() {\n    this.out().busVoltage = this.bits & 0xffff;\n  }\n\n  override get(name: string, offset?: number): Pin | undefined {\n    return name === this.name ? this.out() : super.get(name, offset);\n  }\n\n  override reset() {\n    this.bits = 0x00;\n    super.reset();\n  }\n}\n","import { Bus, ClockedChip, Pin } from \"../../chip.js\";\nimport { assert } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { Memory, Memory as MemoryChip } from \"../../../cpu/memory.js\";\n\nexport class RAM extends ClockedChip {\n  protected _memory: MemoryChip;\n  private _nextData = 0;\n  private _address = 0;\n\n  get memory() {\n    return this._memory;\n  }\n  get address() {\n    return this._address;\n  }\n\n  constructor(readonly width: number, name?: string) {\n    super([\"in[16]\", \"load\", `address[${width}]`], [`out[16]`], name);\n    this._memory = new MemoryChip(Math.pow(2, this.width));\n  }\n\n  override tick() {\n    const load = this.in(\"load\").voltage();\n    this._address = this.in(\"address\").busVoltage;\n    if (load) {\n      this._nextData = this.in().busVoltage;\n      this._memory.set(this._address, this._nextData);\n    }\n  }\n\n  override tock() {\n    this.out().busVoltage = this._memory?.get(this._address) ?? 0;\n  }\n\n  override eval() {\n    const address = this.in(\"address\").busVoltage;\n    this.out().busVoltage = this._memory?.get(address) ?? 0;\n  }\n\n  at(idx: number): Pin {\n    assert(\n      idx < this._memory.size,\n      () => `Request out of bounds (${idx} >= ${this._memory.size})`\n    );\n    return new RamBus(`${this.name}[${idx}]`, idx, this._memory);\n  }\n\n  override reset(): void {\n    console.log(\"ram reset\");\n    this._memory.reset();\n    super.reset();\n  }\n}\n\nexport class RamBus extends Bus {\n  constructor(\n    name: string,\n    private readonly index: number,\n    private ram: Memory\n  ) {\n    super(name);\n  }\n\n  override get busVoltage(): number {\n    return this.ram.get(this.index);\n  }\n\n  override set busVoltage(num: number) {\n    this.ram.set(this.index, num);\n  }\n}\n\nexport class RAM8 extends RAM {\n  constructor(name?: string) {\n    super(3, name);\n  }\n}\n\nexport class RAM64 extends RAM {\n  constructor(name?: string) {\n    super(6, name);\n  }\n}\n\nexport class RAM512 extends RAM {\n  constructor(name?: string) {\n    super(9, name);\n  }\n}\n\nexport class RAM4K extends RAM {\n  constructor(name?: string) {\n    super(12, name);\n  }\n}\n\nexport class RAM16K extends RAM {\n  constructor(name?: string) {\n    super(14, name);\n  }\n}\n","const hdl = `\nHdl <: Base{\n  Root := Chip\n  Chip = \"CHIP\" Name OpenBrace ChipBody CloseBrace\n  ChipBody = InList? OutList? PartList ClockedList?\n  InList = \"IN\" PinList Semi\n  OutList = \"OUT\" PinList Semi\n  PartList = BuiltinPart | Parts\n  PinList = List<PinDecl, Comma>\n  PinDecl = Name PinWidth?\n  PinWidth = OpenSquare decNumber CloseSquare\n  BuiltinPart = \"BUILTIN\" Semi\n  Parts = \"PARTS:\" Part*\n  Part = Name \"(\" Wires \")\" Semi\n  Wires = List<Wire, Comma>\n  Wire = WireSide Equal (WireSide | True | False) \n  WireSide = Name SubBus? \n  SubBus = OpenSquare decNumber subBusRest? CloseSquare\n  subBusRest = \"..\" decNumber\n  ClockedList = \"CLOCKED\" SimplePinList Semi\n  SimplePinList = List<Name, Comma>\n}`;\nexport default hdl;\n","/** Reads and parses HDL chip descriptions. */\nimport ohm from \"ohm-js\";\nimport { grammars, baseSemantics } from \"./base.js\";\nimport { makeParser } from \"./base.js\";\n\nexport interface PinIndex {\n  start?: number | undefined;\n  end?: number | undefined;\n}\n\nexport interface PinParts extends PinIndex {\n  pin: string;\n}\n\nexport interface PinDeclaration {\n  pin: string | string;\n  width: number;\n}\n\nexport interface Wire {\n  lhs: PinParts;\n  rhs: PinParts;\n}\n\nexport interface Part {\n  name: string;\n  wires: Wire[];\n}\n\nexport interface HdlParse {\n  name: string;\n  ins: PinDeclaration[];\n  outs: PinDeclaration[];\n  clocked: string[];\n  parts: \"BUILTIN\" | Part[];\n}\n\nimport hdlGrammar from \"./grammars/hdl.ohm.js\";\nexport const grammar = ohm.grammar(hdlGrammar, grammars);\n\nexport const hdlSemantics = grammar.extendSemantics(baseSemantics);\n\nhdlSemantics.addAttribute<PinIndex>(\"SubBus\", {\n  SubBus(_a, startNode, endNode, _b) {\n    const start = startNode.value;\n    const end = endNode.child(0)?.child(1)?.value ?? start;\n    return { start, end };\n  },\n});\n\nhdlSemantics.addAttribute<PinParts>(\"WireSide\", {\n  WireSide({ name }, index) {\n    const { start, end } = (index.child(0)?.SubBus as PinIndex) ?? {\n      start: undefined,\n      end: undefined,\n    };\n    return { pin: name, start, end };\n  },\n});\n\nhdlSemantics.addAttribute<Wire>(\"Wire\", {\n  Wire(left, _, right) {\n    const rhs: PinParts = right.isTerminal()\n      ? { pin: right.sourceString }\n      : right.WireSide;\n    return { lhs: left.WireSide as PinParts, rhs };\n  },\n});\n\nhdlSemantics.addAttribute<Wire[]>(\"Wires\", {\n  Wires(list) {\n    return list.asIteration().children.map((node) => node.Wire as Wire);\n  },\n});\n\nhdlSemantics.addAttribute<Part>(\"Part\", {\n  Part({ name }, _a, { Wires }, _b, _c) {\n    return { name: name as string, wires: Wires as Wire[] };\n  },\n});\n\nhdlSemantics.addAttribute<Part[] | \"BUILTIN\">(\"Parts\", {\n  Parts(_, parts) {\n    return parts.children.map((c) => c.Part);\n  },\n  BuiltinPart(_a, _b) {\n    return \"BUILTIN\";\n  },\n});\n\nhdlSemantics.addAttribute<\"BUILTIN\" | Part[]>(\"PartList\", {\n  PartList(list) {\n    return list.Parts;\n  },\n});\n\nhdlSemantics.addAttribute<string[]>(\"Clocked\", {\n  ClockedList(_a, clocked, _b) {\n    return (\n      clocked\n        .asIteration()\n        .children.map(\n          ({ sourceString }: { sourceString: string }) => sourceString\n        ) ?? []\n    );\n  },\n});\n\nhdlSemantics.addAttribute<PinDeclaration>(\"PinDecl\", {\n  PinDecl({ name }, width) {\n    return {\n      pin: name,\n      width: width.child(0)?.child(1)?.value ?? 1,\n    };\n  },\n});\n\nhdlSemantics.addAttribute<PinDeclaration[]>(\"PinList\", {\n  PinList(list) {\n    return list\n      .asIteration()\n      .children.map((node) => node.PinDecl as PinDeclaration);\n  },\n});\n\nhdlSemantics.addAttribute<HdlParse>(\"Chip\", {\n  Chip(_a, { name }, _b, body, _c) {\n    return {\n      name,\n      ins: body.child(0).child(0)?.child(1)?.PinList ?? [],\n      outs: body.child(1).child(0)?.child(1)?.PinList ?? [],\n      parts: body.child(2).PartList ?? [],\n      clocked: body.child(3).child(0)?.Clocked,\n    };\n  },\n});\n\nhdlSemantics.addAttribute<HdlParse>(\"Root\", {\n  Root(root) {\n    return root.child(0)?.Chip;\n  },\n});\n\nexport const HDL = {\n  parser: grammar,\n  grammar: hdlGrammar,\n  semantics: hdlSemantics,\n  parse: makeParser<HdlParse>(grammar, hdlSemantics, (n) => n.Chip),\n};\n"],"names":["pinWidth","start","end","undefined","Error","loadChip","name","fs","hasBuiltinChip","getBuiltinChip","readFile","file","maybeParsedHDL","HDL","chip","isOk","build","Ok","Err","parts","toString","buildChip","Chip","ins","map","pin","width","outs","clocked","part","builtin","isErr","partChip","wires","lhs","rhs","to","from","wire","ROM32K","path","load","v","i","at","busVoltage","RAM","Screen","SCREEN_SIZE","SCREEN_OFFSET","Keyboard","this","out","key","KEYBOARD_OFFSET","Memory","RAM16K","add","keyboard","screen","ram","in","voltage","address","inn","OFFSET","eval","startsWith","idx","int10","match","groups","offset","reset","ClockedChip","CPU","emptyState","_state","cpuTick","cpuInput","state","writeM","pull","HIGH","LOW","ALU","cpuTock","output","addressM","outM","PC","inM","instruction","ConstantBus","A","D","Computer","get","And","a","b","and","n","And16","and16","DMux","sel","dmux","DMux4Way","dmux4way","c","d","DMux8Way","dmux8way","e","f","g","h","mux16","mux16_4","s2","Mux","mux","set","Mux16","Mux4Way16","Mux8Way16","mux16_8","Nand","nand","Nand16","nand16","Not","Not16","or","Or","Or16","or16","Or8way","Xor","xor","Xor16","xor16","add16","Add16","ALUNoStat","x","y","op","alu","flags","ng","Flags","zr","halfAdder","HalfAdder","sum","carry","FullAdder","s","ca","fullAdder","Inc16","DFF","t","REGISTRY","Map","Bit","Register","RAM8","RAM64","RAM512","RAM4K","VRegister","ChipCtor","has","bit","bits","_memory","MemoryChip","Math","pow","_address","_nextData","assert","size","RamBus","console","log","index","num","Bus","grammar","ohm","hdlGrammar","grammars","hdlSemantics","extendSemantics","baseSemantics","addAttribute","SubBus","_a","startNode","endNode","_b","value","child","WireSide","Wire","left","_","right","isTerminal","sourceString","Wires","list","asIteration","children","node","Part","_c","Parts","BuiltinPart","PartList","ClockedList","PinDecl","PinList","body","Clocked","Root","root","parser","semantics","parse","makeParser"],"sourceRoot":""}