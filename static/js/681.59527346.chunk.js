"use strict";(self.webpackChunk_nand2tetris_web=self.webpackChunk_nand2tetris_web||[]).push([[681],{2681:function(n,t,u){u.r(t),u.d(t,{ChipProjects:function(){return M},default:function(){return S},loadSolutions:function(){return y},loaders:function(){return m}});var e={};u.r(e),u.d(e,{SOLS:function(){return c},loadSolutions:function(){return i}});var r={};u.r(r),u.d(r,{SOLS:function(){return h},loadSolutions:function(){return p}});var a={};u.r(a),u.d(a,{SOLS:function(){return b},loadSolutions:function(){return f}});var o={};u.r(o),u.d(o,{SOLS:function(){return x},loadSolutions:function(){return R}});var d=u(1092),s=u(7791),l=u(9956),c={Not:{"Not.hdl":"// REDACTED"},And:{"And.hdl":"CHIP And {\n    IN a, b;\n    OUT out;\n\n    PARTS:\n    Nand(a=a, b=b, out=x);\n    Not(in=x, out=out);\n}"},Or:{"Or.hdl":"// REDACTED"},XOr:{"XOr.hdl":"// REDACTED"},Mux:{"Mux.hdl":"// REDACTED"},DMux:{"DMux.hdl":"// REDACTED"},Not16:{"Not16.hdl":"// REDACTED"},And16:{"And16.hdl":"CHIP And16 {\n    IN a[16], b[16];\n    OUT out[16];\n\n    PARTS:\n    And (a=a[0],  b=b[0],  out=out[0]);\n    And (a=a[1],  b=b[1],  out=out[1]);\n    And (a=a[2],  b=b[2],  out=out[2]);\n    And (a=a[3],  b=b[3],  out=out[3]);\n    And (a=a[4],  b=b[4],  out=out[4]);\n    And (a=a[5],  b=b[5],  out=out[5]);\n    And (a=a[6],  b=b[6],  out=out[6]);\n    And (a=a[7],  b=b[7],  out=out[7]);\n    And (a=a[8],  b=b[8],  out=out[8]);\n    And (a=a[9],  b=b[9],  out=out[9]);\n    And (a=a[10], b=b[10], out=out[10]);\n    And (a=a[11], b=b[11], out=out[11]);\n    And (a=a[12], b=b[12], out=out[12]);\n    And (a=a[13], b=b[13], out=out[13]);\n    And (a=a[14], b=b[14], out=out[14]);\n    And (a=a[15], b=b[15], out=out[15]);\n}"},Or16:{"Or16.hdl":"// REDACTED"},Mux16:{"Mux16.hdl":"// REDACTED"},Mux4Way16:{"Mux4Way16.hdl":"// REDACTED"},Mux8Way16:{"Mux8Way16.hdl":"CHIP Mux8Way16 {\n    IN a[16], b[16], c[16], d[16],\n       e[16], f[16], g[16], h[16],\n       sel[3];\n    OUT out[16];\n\n    PARTS:\n    // Binary tree of 2-way multiplexors\n    Mux16 (a=a,    b=b,    sel=sel[0], out=ab);\n    Mux16 (a=c,    b=d,    sel=sel[0], out=cd);\n    Mux16 (a=e,    b=f,    sel=sel[0], out=ef);\n    Mux16 (a=g,    b=h,    sel=sel[0], out=gh);\n    Mux16 (a=ab,   b=cd,   sel=sel[1], out=abcd);\n    Mux16 (a=ef,   b=gh,   sel=sel[1], out=efgh);\n    Mux16 (a=abcd, b=efgh, sel=sel[2], out=out);\n\n\n// Alternate implementation\n//\n// This implementation replaces the upper two layers of the\n// tree with 4-way multiplexors.\n/*\n    Mux4Way16 (a=a, b=b, c=c, d=d, sel=sel[0..1], out=abcd);\n    Mux4Way16 (a=e, b=f, c=g, d=h, sel=sel[0..1], out=efgh);\n    Mux16     (a=abcd, b=efgh, sel=sel[2], out=out);\n*/\n\n// Alternate implementation\n//\n// Some students make a Mux8Way chip and apply it 16 times as in Not16.\n}"},DMux4Way:{"DMux4Way.hdl":"// REDACTED"},DMux8Way:{"DMux8Way.hdl":"// REDACTED"},Or8Way:{"Or8Way.hdl":"// REDACTED"}};function i(n){return A.apply(this,arguments)}function A(){return(A=(0,s.Z)((0,d.Z)().mark((function n(t){return(0,d.Z)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,t.pushd("/projects/01");case 2:return n.next=4,(0,l.mc)(t,c);case 4:return n.next=6,t.popd();case 6:case"end":return n.stop()}}),n)})))).apply(this,arguments)}var h={HalfAdder:{"HalfAdder.hdl":"// REDACTED"},FullAdder:{"FullAdder.hdl":"// REDACTED"},Add16:{"Add16.hdl":"// REDACTED"},Inc16:{"Inc16.hdl":"// REDACTED"},AluNoStat:{"AluNoStat.hdl":"// REDACTED"},ALU:{"ALU.hdl":"// REDACTED"}};function p(n){return D.apply(this,arguments)}function D(){return(D=(0,s.Z)((0,d.Z)().mark((function n(t){return(0,d.Z)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,t.pushd("/projects/02");case 2:return n.next=4,(0,l.mc)(t,h);case 4:return n.next=6,t.popd();case 6:case"end":return n.stop()}}),n)})))).apply(this,arguments)}var b={Bit:{"Bit.hdl":"CHIP Bit {\n    IN in, load;\n    OUT out;\n\n    PARTS:\n    \n    Mux (a=dffOut, b=in, sel=load, out=muxOut);\n    DFF (in=muxOut, out=dffOut, out=out);\n}"},Register:{"Register.hdl":"// REDACTED"},PC:{"PC.hdl":"// REDACTED"},RAM8:{"RAM8.hdl":"// REDACTED"},RAM64:{"RAM64.hdl":"// REDACTED"},RAM512:{"RAM512.hdl":"// REDACTED"},RAM4k:{"RAM4k.hdl":"// REDACTED"},RAM16k:{"RAM16k.hdl":"// REDACTED"}};function f(n){return E.apply(this,arguments)}function E(){return(E=(0,s.Z)((0,d.Z)().mark((function n(t){return(0,d.Z)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,t.pushd("/projects/03");case 2:return n.next=4,(0,l.mc)(t,b);case 4:return n.next=6,t.popd();case 6:case"end":return n.stop()}}),n)})))).apply(this,arguments)}var x={Memory:{"Memory.hdl":"// REDACTED"},CPU:{"CPU.hdl":"// REDACTED"},Computer:{"Computer.hdl":"// REDACTED"}};function R(n){return C.apply(this,arguments)}function C(){return(C=(0,s.Z)((0,d.Z)().mark((function n(t){return(0,d.Z)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,t.pushd("/projects/05");case 2:return n.next=4,(0,l.mc)(t,x);case 4:return n.next=6,t.popd();case 6:case"end":return n.stop()}}),n)})))).apply(this,arguments)}var M={"01":e,"02":r,"03":a,"05":o},T=!1,y=function(){var n=(0,s.Z)((0,d.Z)().mark((function n(t){return(0,d.Z)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(!T){n.next=2;break}return n.abrupt("return");case 2:return T=!0,n.next=5,i(t);case 5:return n.next=7,p(t);case 7:return n.next=9,f(t);case 9:return n.next=11,R(t);case 11:T=!1;case 12:case"end":return n.stop()}}),n)})));return function(t){return n.apply(this,arguments)}}(),m={loadSolutions:y},S=m}}]);
//# sourceMappingURL=681.59527346.chunk.js.map