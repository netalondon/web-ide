{"version":3,"file":"static/js/255.5b60a914.chunk.js","mappings":"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","sources":["../../simulator/src/testing/mult.ts","../../components/src/stores/cpu.store.ts","shell/test_panel.tsx","pages/cpu.tsx"],"sourcesContent":["export const JACK = `\nwhile (R0 > 0) {\n    R2 = R2 + R1\n    R0 = R0 - 1\n}`;\n\nexport const ASM = `\n@R2\nM=0\n(LOOP)\n  @R0\n  D=M\n  @END\n  D;JEQ\n\n  @R1\n  D=M\n  @R2\n  D=D+M\n  M=D\n\n  @R0\n  M=M-1\n  @LOOP\n  0;JMP\n(END)\n  @END\n  0;JMP\n`;\n\nexport const HACK = new Int16Array([\n  0x0002, // @R2\n  0xda88, // M=0\n  0x0000, // (LOOP) @R0\n  0xfc10, // D=M\n  0x000f, // @END\n  0xd302, // D;JEQ\n  0x0001, // @R1\n  0xfc10, // D=M\n  0x0002, // @R2\n  0xf090, // D=D+M\n  0xd308, // M=D\n  0x0000, // @R0\n  0xfc88, // M=M-1\n  0x0002, // @LOOP\n  0xda87, // 0;JMP\n  0x000f, // (END) @END\n  0xda87, // 0;JMP\n]);\n","import { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs\";\nimport {\n  KeyboardAdapter,\n  MemoryAdapter,\n  MemoryKeyboard,\n  ROM,\n  SubMemory,\n} from \"@nand2tetris/simulator/cpu/memory.js\";\nimport { Span } from \"@nand2tetris/simulator/languages/base.js\";\nimport { HACK } from \"@nand2tetris/simulator/testing/mult.js\";\nimport { CPUTest } from \"@nand2tetris/simulator/tst.js\";\nimport { Dispatch, MutableRefObject, useContext, useMemo, useRef } from \"react\";\nimport { useImmerReducer } from \"../react.js\";\nimport { BaseContext } from \"./base.context.js\";\n\nexport interface CpuSim {\n  A: number;\n  D: number;\n  PC: number;\n  RAM: MemoryAdapter;\n  ROM: MemoryAdapter;\n  Screen: MemoryAdapter;\n  Keyboard: KeyboardAdapter;\n}\n\nexport interface CPUTestSim {\n  highlight: Span | undefined;\n}\n\nexport interface CpuPageState {\n  sim: CpuSim;\n  test: CPUTestSim;\n}\n\nclass ImmMemory extends SubMemory {\n  constructor(\n    parent: MemoryAdapter,\n    private dispatch: MutableRefObject<CpuStoreDispatch>\n  ) {\n    super(parent, parent.size, 0);\n  }\n\n  override async load(fs: FileSystem, path: string): Promise<void> {\n    await super.load(fs, path);\n    this.dispatch.current({ action: \"update\" });\n  }\n}\n\nfunction reduceCPUTest(\n  cpuTest: CPUTest,\n  dispatch: MutableRefObject<CpuStoreDispatch>\n): CpuSim {\n  const RAM = new ImmMemory(cpuTest.cpu.RAM, dispatch);\n  const ROM = new ImmMemory(cpuTest.cpu.ROM, dispatch);\n  const Screen = new ImmMemory(cpuTest.cpu.Screen, dispatch);\n  const Keyboard = new MemoryKeyboard(new ImmMemory(cpuTest.cpu.RAM, dispatch));\n\n  return {\n    A: cpuTest.cpu.A,\n    D: cpuTest.cpu.D,\n    PC: cpuTest.cpu.PC,\n    RAM,\n    ROM,\n    Screen,\n    Keyboard,\n  };\n}\n\nexport type CpuStoreDispatch = Dispatch<{\n  action: keyof ReturnType<typeof makeCpuStore>[\"reducers\"];\n  payload?: unknown;\n}>;\n\nexport function makeCpuStore(\n  fs: FileSystem,\n  setStatus: (status: string) => void,\n  storage: Record<string, string>,\n  dispatch: MutableRefObject<CpuStoreDispatch>\n) {\n  const test = new CPUTest(new ROM(HACK));\n\n  const reducers = {\n    update(state: CpuPageState) {\n      state.sim = reduceCPUTest(test, dispatch);\n      state.test.highlight = test.currentStep?.span;\n    },\n  };\n\n  const actions = {\n    tick() {\n      test.cpu.tick();\n    },\n\n    testStep() {\n      test.step();\n    },\n\n    resetRAM() {\n      // test.cpu.RAM.set(0, 3);\n      // test.cpu.RAM.set(1, 2);\n      test.cpu.RAM.loadBytes([]);\n      dispatch.current({ action: \"update\" });\n      setStatus(\"Reset RAM\");\n    },\n\n    toggleUseTest() {\n      dispatch.current({ action: \"update\" });\n    },\n\n    resetCPU() {\n      test.reset();\n      dispatch.current({ action: \"update\" });\n      setStatus(\"Reset CPU\");\n    },\n\n    reset() {\n      this.resetRAM();\n      this.resetCPU();\n      setStatus(\"Reset CPU & RAM\");\n    },\n  };\n\n  const initialState = {\n    sim: reduceCPUTest(test, dispatch),\n    test: {\n      highlight: test.currentStep?.span,\n    },\n  };\n\n  return { initialState, reducers, actions };\n}\n\nexport function useCpuPageStore() {\n  const { fs, setStatus, storage } = useContext(BaseContext);\n\n  const dispatch = useRef<CpuStoreDispatch>(() => undefined);\n\n  const { initialState, reducers, actions } = useMemo(\n    () => makeCpuStore(fs, setStatus, storage, dispatch),\n    [fs, setStatus, storage, dispatch]\n  );\n\n  const [state, dispatcher] = useImmerReducer(reducers, initialState);\n  dispatch.current = dispatcher;\n\n  return { state, dispatch, actions };\n}\n","import {\n  CSSProperties,\n  Dispatch,\n  RefObject,\n  useCallback,\n  useContext,\n  useState,\n} from \"react\";\nimport { Trans } from \"@lingui/macro\";\nimport { DiffTable } from \"@nand2tetris/components/difftable.js\";\nimport { Runbar } from \"@nand2tetris/components/runbar.js\";\nimport { CMP } from \"@nand2tetris/simulator/languages/cmp.js\";\nimport { BaseContext } from \"@nand2tetris/components/stores/base.context.js\";\nimport { Timer } from \"@nand2tetris/simulator/timer.js\";\nimport { TST } from \"@nand2tetris/simulator/languages/tst.js\";\nimport { AppContext } from \"../App.context\";\nimport { Editor } from \"./editor\";\nimport { Panel } from \"./panel\";\nimport { Span } from \"@nand2tetris/simulator/languages/base\";\n\nexport const TestPanel = ({\n  runner,\n  tst: [tst, setTst, tstHighlight],\n  cmp: [cmp, setCmp],\n  out: [out],\n  disabled = false,\n}: {\n  runner: RefObject<Timer | undefined>;\n  tst: [string, Dispatch<string>, Span | undefined];\n  cmp: [string, Dispatch<string>];\n  out: [string, Dispatch<string>];\n  disabled?: boolean;\n}) => {\n  const { fs, setStatus } = useContext(BaseContext);\n  const { filePicker, tracking } = useContext(AppContext);\n\n  const [selectedTestTab, doSetSelectedTestTab] = useState<\n    \"tst\" | \"cmp\" | \"out\"\n  >(\"tst\");\n\n  const setSelectedTestTab = useCallback(\n    (tab: typeof selectedTestTab) => {\n      doSetSelectedTestTab(tab);\n      tracking.trackEvent(\"tab\", \"change\", tab);\n    },\n    [tracking]\n  );\n\n  const loadTest = useCallback(async () => {\n    try {\n      const path = await filePicker.select();\n      const tst = await fs.readFile(path);\n      setTst(tst);\n      // await compile.current({ tst });\n    } catch (e) {\n      console.error(e);\n      setStatus(`Failed to load test`);\n    }\n  }, [filePicker, setStatus, fs]);\n\n  return (\n    <Panel\n      className=\"_test_panel\"\n      header={\n        <>\n          <div className=\"flex-0\">\n            <Trans>Test</Trans>\n          </div>\n          <div className=\"flex-1\">\n            {runner.current && <Runbar runner={runner.current} />}\n          </div>\n          <div>\n            <fieldset role=\"group\">\n              <button onClick={loadTest}>📂</button>\n            </fieldset>\n          </div>\n        </>\n      }\n    >\n      <div role=\"tablist\" style={{ \"--tab-count\": \"3\" } as CSSProperties}>\n        <div\n          role=\"tab\"\n          id=\"test-tab-tst\"\n          aria-controls=\"test-tabpanel-tst\"\n          aria-selected={selectedTestTab === \"tst\"}\n        >\n          <label>\n            <input\n              type=\"radio\"\n              name=\"test-tabs\"\n              aria-controls=\"test-tabpanel-tst\"\n              value=\"tst\"\n              checked={selectedTestTab === \"tst\"}\n              onChange={() => setSelectedTestTab(\"tst\")}\n            />\n            Test Script\n          </label>\n        </div>\n        <div\n          role=\"tabpanel\"\n          aria-labelledby=\"test-tab-tst\"\n          id=\"test-tabpanel-tst\"\n        >\n          <Editor\n            value={tst}\n            onChange={setTst}\n            grammar={TST.parser}\n            language={\"tst\"}\n            highlight={tstHighlight}\n            disabled={disabled}\n          />\n        </div>\n        <div\n          role=\"tab\"\n          id=\"test-tab-cmp\"\n          aria-controls=\"test-tablpanel-cmp\"\n          aria-selected={selectedTestTab === \"cmp\"}\n        >\n          <label>\n            <input\n              type=\"radio\"\n              name=\"test-tabs\"\n              aria-controls=\"test-tabpanel-cmp\"\n              value=\"cmp\"\n              checked={selectedTestTab === \"cmp\"}\n              onChange={() => setSelectedTestTab(\"cmp\")}\n            />\n            Compare File\n          </label>\n        </div>\n        <div\n          role=\"tabpanel\"\n          aria-labelledby=\"test-tab-cmp\"\n          id=\"test-tabpanel-cmp\"\n          style={{ position: \"relative\" }}\n        >\n          <Editor\n            value={cmp}\n            onChange={setCmp}\n            grammar={CMP.parser}\n            language={\"cmp\"}\n            disabled={disabled}\n          />\n        </div>\n        <div\n          role=\"tab\"\n          id=\"test-tab-out\"\n          aria-controls=\"test-tabpanel-out\"\n          aria-selected={selectedTestTab === \"out\"}\n        >\n          <label>\n            <input\n              type=\"radio\"\n              name=\"test-tabs\"\n              aria-controls=\"test-tabpanel-out\"\n              value=\"out\"\n              checked={selectedTestTab === \"out\"}\n              onChange={() => setSelectedTestTab(\"out\")}\n            />\n            Output File\n          </label>\n        </div>\n        <div\n          role=\"tabpanel\"\n          id=\"test-tabpanel-out\"\n          aria-labelledby=\"test-tab-out\"\n        >\n          <DiffTable cmp={cmp} out={out} />\n        </div>\n      </div>\n    </Panel>\n  );\n};\n","import { Timer } from \"@nand2tetris/simulator/timer.js\";\n\nimport { Keyboard } from \"@nand2tetris/components/chips/keyboard\";\nimport MemoryComponent from \"@nand2tetris/components/chips/memory.js\";\nimport { Screen } from \"@nand2tetris/components/chips/screen.js\";\nimport { useCpuPageStore } from \"@nand2tetris/components/stores/cpu.store\";\nimport { useEffect, useRef, useState } from \"react\";\n\nimport { Trans } from \"@lingui/macro\";\nimport { Runbar } from \"@nand2tetris/components/runbar\";\nimport { Panel } from \"src/shell/panel\";\nimport { TestPanel } from \"src/shell/test_panel\";\nimport \"./cpu.scss\";\n\nexport const CPU = () => {\n  const { state, actions, dispatch } = useCpuPageStore();\n\n  const [tst, setTst] = useState(\"repeat {\\n\\tticktock;\\n}\");\n  const [out, setOut] = useState(\"\");\n  const [cmp, setCmp] = useState(\"\");\n  const [fileName, setFileName] = useState<string | null>(null);\n  const [displayEnabled, setDisplayEnabled] = useState(true);\n\n  const toggleDisplayEnabled = () => {\n    setDisplayEnabled(!displayEnabled);\n  };\n\n  const cpuRunner = useRef<Timer>();\n  const testRunner = useRef<Timer>();\n  const [runnersAssigned, setRunnersAssigned] = useState(false);\n  useEffect(() => {\n    cpuRunner.current = new (class CPUTimer extends Timer {\n      override tick() {\n        actions.tick();\n        return false;\n      }\n\n      override finishFrame() {\n        dispatch.current({ action: \"update\" });\n      }\n\n      override reset() {\n        actions.reset();\n      }\n\n      override toggle() {\n        dispatch.current({ action: \"update\" });\n      }\n    })();\n\n    testRunner.current = new (class CPUTestTimer extends Timer {\n      override tick() {\n        actions.testStep();\n        return false;\n      }\n\n      override finishFrame() {\n        dispatch.current({ action: \"update\" });\n      }\n\n      override reset() {\n        actions.reset();\n      }\n\n      override toggle() {\n        dispatch.current({ action: \"update\" });\n      }\n    })();\n    setRunnersAssigned(true);\n\n    return () => {\n      cpuRunner.current?.stop();\n      testRunner.current?.stop();\n    };\n  }, [actions, dispatch]);\n\n  const onUpload = (fileName: string) => {\n    setFileName(fileName);\n    actions.reset();\n  };\n\n  return (\n    <div className=\"CpuPage grid\">\n      <MemoryComponent\n        name=\"ROM\"\n        displayEnabled={displayEnabled}\n        memory={state.sim.ROM}\n        highlight={state.sim.PC}\n        format=\"asm\"\n        onUpload={onUpload}\n      />\n      <MemoryComponent\n        name=\"RAM\"\n        displayEnabled={displayEnabled}\n        memory={state.sim.RAM}\n        format=\"hex\"\n      />\n      <Panel\n        className=\"IO\"\n        header={\n          <>\n            {fileName && <div className=\"flex-0\">{fileName}</div>}\n            <div className=\"flex-1\">\n              {runnersAssigned && cpuRunner.current && (\n                <Runbar runner={cpuRunner.current} />\n              )}\n            </div>\n          </>\n        }\n      >\n        <Screen memory={state.sim.Screen}></Screen>\n        <Keyboard keyboard={state.sim.Keyboard} />\n        <label>\n          <input\n            type=\"checkbox\"\n            role=\"switch\"\n            checked={displayEnabled}\n            onChange={toggleDisplayEnabled}\n          />\n          <Trans>{displayEnabled ? \"Disable display\" : \"Enable display\"}</Trans>\n        </label>\n        {displayEnabled && (\n          <div>\n            <dl>\n              <dt>PC</dt>\n              <dd>{state.sim.PC}</dd>\n              <dt>A</dt>\n              <dd>{state.sim.A}</dd>\n              <dt>D</dt>\n              <dd>{state.sim.D}</dd>\n            </dl>\n          </div>\n        )}\n      </Panel>\n      {runnersAssigned && (\n        <TestPanel\n          runner={testRunner}\n          tst={[tst, setTst, state.test.highlight]}\n          out={[out, setOut]}\n          cmp={[cmp, setCmp]}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default CPU;\n"],"names":["HACK","Int16Array","ImmMemory","SubMemory","dispatch","constructor","parent","super","size","async","fs","path","load","this","current","action","reduceCPUTest","cpuTest","RAM","cpu","ROM","Screen","Keyboard","MemoryKeyboard","A","D","PC","useCpuPageStore","setStatus","storage","useContext","BaseContext","useRef","initialState","reducers","actions","useMemo","test","CPUTest","update","state","sim","highlight","currentStep","span","tick","testStep","step","resetRAM","loadBytes","toggleUseTest","resetCPU","reset","makeCpuStore","dispatcher","useImmerReducer","TestPanel","runner","tst","setTst","tstHighlight","cmp","setCmp","out","disabled","filePicker","tracking","AppContext","selectedTestTab","doSetSelectedTestTab","useState","setSelectedTestTab","useCallback","tab","trackEvent","loadTest","select","readFile","e","console","error","className","header","role","onClick","style","id","type","name","value","checked","onChange","grammar","TST","language","position","CMP","CPU","setOut","fileName","setFileName","displayEnabled","setDisplayEnabled","cpuRunner","testRunner","runnersAssigned","setRunnersAssigned","useEffect","Timer","finishFrame","toggle","stop","memory","format","onUpload","keyboard"],"sourceRoot":""}