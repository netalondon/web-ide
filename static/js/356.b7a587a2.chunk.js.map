{"version":3,"file":"static/js/356.b7a587a2.chunk.js","mappings":"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","sources":["../../components/src/difftable.tsx","../../simulator/src/chip/builder.ts","../../simulator/src/chip/builtins/computer/computer.tsx","../../simulator/src/chip/builtins/logic/and.ts","../../simulator/src/chip/builtins/logic/dmux.ts","../../simulator/src/chip/builtins/logic/mux.ts","../../simulator/src/chip/builtins/logic/nand.ts","../../simulator/src/chip/builtins/logic/not.ts","../../simulator/src/chip/builtins/logic/or.ts","../../simulator/src/chip/builtins/logic/xor.ts","../../simulator/src/chip/builtins/arithmetic/add_16.ts","../../simulator/src/chip/builtins/arithmetic/alu.tsx","../../simulator/src/chip/builtins/arithmetic/half_adder.ts","../../simulator/src/chip/builtins/arithmetic/full_adder.ts","../../simulator/src/chip/builtins/arithmetic/inc16.ts","../../simulator/src/chip/builtins/sequential/dff.ts","../../simulator/src/chip/builtins/index.ts","../../simulator/src/chip/builtins/sequential/bit.tsx","../../simulator/src/chip/builtins/sequential/ram.tsx","../../simulator/src/chip/chip.tsx","../../simulator/src/chip/clock.ts","../../simulator/src/cpu/alu.ts","../../simulator/src/cpu/cpu.ts","../../simulator/src/cpu/memory.ts","../../simulator/src/languages/grammars/asm.ohm.js","../../simulator/src/languages/asm.ts","../../simulator/src/fs.ts","../../simulator/src/languages/base.ts","../../simulator/src/languages/grammars/base.ohm.js","../../simulator/src/languages/grammars/cmp.ohm.js","../../simulator/src/languages/cmp.ts","../../simulator/src/languages/grammars/hdl.ohm.js","../../simulator/src/languages/hdl.ts","../../simulator/src/languages/grammars/tst.ohm.js","../../simulator/src/languages/tst.ts","../../simulator/src/output.ts","../../simulator/src/tst.ts","../../simulator/src/util/asm.ts","../../simulator/src/util/twos.ts"],"sourcesContent":["import { CMP } from \"@nand2tetris/simulator/languages/cmp.js\";\nimport { display } from \"@davidsouther/jiffies/lib/esm/display.js\";\nimport { range } from \"@davidsouther/jiffies/lib/esm/range.js\";\nimport { Err, isErr, Ok } from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { ReactElement } from \"react\";\n\nexport const DiffTable = ({\n  className = \"\",\n  out,\n  cmp,\n  zeroState,\n}: {\n  out: string;\n  cmp: string;\n  className?: string;\n  zeroState?: ReactElement;\n}) => {\n  const output = CMP.parse(out);\n  const compare = CMP.parse(cmp);\n\n  if (isErr(output)) {\n    return (\n      <details>\n        <summary>Failed to parse output</summary>\n        <pre>{display(Err(output))}</pre>\n        <code>\n          <pre>{out}</pre>\n        </code>\n      </details>\n    );\n  }\n\n  if (isErr(compare)) {\n    return (\n      <details>\n        <summary>Failed to parse compare</summary>\n        <code>\n          <pre>{display(Err(compare))}</pre>\n          <pre>{cmp}</pre>\n        </code>\n      </details>\n    );\n  }\n\n  const cmpData = Ok(compare);\n  const outData = Ok(output);\n  let failures = 0;\n  const table = range(0, Math.min(cmpData.length, outData.length)).map((i) => {\n    const cmpI = cmpData[i] ?? [];\n    const outI = outData[i] ?? [];\n    return range(0, Math.max(cmpI.length, outI.length))\n      .map((_, j) => [cmpI[j] ?? \"\", outI[j] ?? \"\"])\n      .map(([cmp, out]) => {\n        const cell = {\n          cmp: cmp ?? '\"',\n          out: out ?? '\"',\n          pass:\n            cmp?.trim().match(/^\\*+$/) !== null || out?.trim() === cmp?.trim(),\n        };\n        if (!cell.pass) {\n          failures += 1;\n        }\n        return cell;\n      });\n  });\n\n  return (\n    <div className={\"scroll-x \" + className}>\n      {failures > 0 && (\n        <p>\n          {failures} failure{failures === 1 ? \"\" : \"s\"}\n        </p>\n      )}\n      {table.length > 0 ? (\n        <table\n          style={{\n            fontFamily: \"var(--font-family-monospace)\",\n            marginBottom: \"none\",\n          }}\n        >\n          <tbody>\n            {table.map((row, i) => (\n              <tr key={i}>\n                {row.map(({ cmp, out, pass }, i) => (\n                  <DiffCell cmp={cmp} out={out} pass={pass} key={i} />\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        zeroState ?? <p>Execute test script to compare output.</p>\n      )}\n    </div>\n  );\n};\n\nconst DiffCell = ({\n  cmp,\n  out,\n  pass,\n}: {\n  cmp: string;\n  out: string;\n  pass: boolean;\n}) => {\n  return pass ? (\n    <>\n      <td>{cmp}</td>\n    </>\n  ) : (\n    <>\n      <td>\n        <ins>{cmp}</ins>\n        <br />\n        <del>{out}</del>\n      </td>\n    </>\n  );\n};\n","import { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport {\n  Err,\n  isErr,\n  isOk,\n  Ok,\n  Result,\n} from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { HDL, HdlParse } from \"../languages/hdl.js\";\nimport { getBuiltinChip, hasBuiltinChip } from \"./builtins/index.js\";\nimport { Chip, Connection } from \"./chip.js\";\n\nfunction pinWidth(start: number, end: number | undefined): number | undefined {\n  if (end === undefined) {\n    return undefined;\n  }\n  if (end >= start) {\n    return end - start + 1;\n  }\n  if (start > 0 && end === 0) {\n    return 1;\n  }\n  throw new Error(`Bus specification has start > end (${start} > ${end})`);\n}\n\nexport async function parse(\n  code: string\n): Promise<Result<Chip, Error | { message: string; shortMessage: string }>> {\n  const parsed = HDL.parse(code.toString());\n  if (isErr(parsed)) return parsed;\n  return build(Ok(parsed));\n}\n\nexport async function loadChip(\n  name: string,\n  fs?: FileSystem\n): Promise<Result<Chip>> {\n  if (hasBuiltinChip(name) || fs === undefined) {\n    return getBuiltinChip(name);\n  }\n  try {\n    const file = await fs.readFile(`${name}.hdl`);\n    const maybeParsedHDL = HDL.parse(file);\n    const chip = isOk(maybeParsedHDL)\n      ? build(Ok(maybeParsedHDL), fs)\n      : Err(new Error(\"HDL Was not parsed\"));\n    return chip;\n  } catch (e) {\n    return Err(new Error(`Could not load chip ${name}.hdl` /*, { cause: e }*/));\n  }\n}\n\nexport async function build(\n  parts: HdlParse,\n  fs?: FileSystem\n): Promise<Result<Chip, Error>> {\n  if (parts.parts === \"BUILTIN\") {\n    return getBuiltinChip(parts.name.toString());\n  }\n\n  const buildChip = new Chip(\n    parts.ins.map(({ pin, width }) => ({ pin: pin.toString(), width })),\n    parts.outs.map(({ pin, width }) => ({ pin: pin.toString(), width })),\n    parts.name.toString(),\n    [],\n    parts.clocked\n  );\n\n  for (const part of parts.parts) {\n    const builtin = await loadChip(part.name.toString(), fs);\n    if (isErr(builtin)) return builtin;\n    const partChip = Ok(builtin);\n\n    const wires = part.wires.map<Connection>(({ lhs, rhs }) => ({\n      to: {\n        name: lhs.pin.toString(),\n        start: lhs.start ?? 0,\n        width: pinWidth(lhs.start ?? 0, lhs.end),\n      },\n      from: {\n        name: rhs.pin.toString(),\n        start: rhs.start ?? 0,\n        width: pinWidth(rhs.start ?? 0, rhs.end),\n      },\n    }));\n\n    try {\n      buildChip.wire(partChip, wires);\n    } catch (e) {\n      return Err(e as Error);\n    }\n  }\n\n  return Ok(buildChip);\n}\n","import { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\n// import { Screen as ScreenComponent } from \"../../../../app/components/chips/screen.js\";\n// import { Keyboard as KeyboardComponent } from \"../../../../app/components/chips/keyboard.js\";\n// import { RegisterComponent } from \"../../../../app/components/chips/register.js\";\n// import { ALUComponent } from \"../../../../app/components/chips/alu.js\";\n// import { Flags } from \"../../../cpu/alu.js\";\nimport { Chip, ClockedChip, ConstantBus, HIGH, LOW, Pin } from \"../../chip.js\";\nimport { RAM, RAM16K } from \"../sequential/ram.js\";\nimport {\n  CPUInput,\n  CPUState,\n  cpuTick,\n  cpuTock,\n  emptyState,\n} from \"../../../cpu/cpu.js\";\nimport { int10 } from \"../../../util/twos.js\";\nimport { load } from \"../../../fs.js\";\nimport { KEYBOARD, SCREEN } from \"../../../cpu/memory.js\";\n\nexport class ROM32K extends RAM {\n  constructor() {\n    super(16, \"ROM\");\n  }\n\n  override async load(fs: FileSystem, path: string) {\n    try {\n      (await load(fs, path)).map((v, i) => (this.at(i).busVoltage = v));\n    } catch (cause) {\n      // throw new Error(`ROM32K Failed to load file ${path}`, { cause });\n      throw new Error(`ROM32K Failed to load file ${path}`);\n    }\n  }\n}\n\nexport class Screen extends RAM {\n  static readonly OFFSET = SCREEN;\n\n  constructor() {\n    super(13, \"Screen\");\n  }\n}\n\nexport class Keyboard extends Chip {\n  static readonly OFFSET = KEYBOARD;\n\n  constructor() {\n    super([], [\"out[16]\"], \"Keyboard\");\n  }\n\n  setKey(key: number) {\n    this.out().busVoltage = key & 0xffff;\n  }\n\n  clearKey() {\n    this.out().busVoltage = 0;\n  }\n}\n\nexport class Memory extends ClockedChip {\n  private ram = new RAM16K();\n  private screen = new Screen();\n  private keyboard = new Keyboard();\n  private address = 0;\n\n  constructor() {\n    super([\"in[16]\", \"load\", \"address[15])\"], [\"out[16]\"], \"Memory\");\n    this.parts.add(this.keyboard);\n    this.parts.add(this.screen);\n    this.parts.add(this.ram);\n  }\n\n  override tick() {\n    const load = this.in(\"load\").voltage();\n    this.address = this.in(\"address\").busVoltage;\n    if (load) {\n      const inn = this.in().busVoltage;\n      if (this.address >= Keyboard.OFFSET) {\n        // Keyboard, do nothing\n      } else if (this.address >= Screen.OFFSET) {\n        this.screen.at(this.address - Screen.OFFSET).busVoltage = inn;\n      } else {\n        this.ram.at(this.address).busVoltage = inn;\n      }\n    }\n  }\n\n  override tock() {\n    this.eval();\n  }\n\n  override eval() {\n    if (!this.ram) return;\n    this.address = this.in(\"address\").busVoltage;\n    let out = 0;\n    if (this.address >= Keyboard.OFFSET) {\n      // Keyboard, do nothing\n      out = this.keyboard?.out().busVoltage ?? 0;\n    } else if (this.address >= Screen.OFFSET) {\n      out = this.screen?.at(this.address - Screen.OFFSET).busVoltage ?? 0;\n    } else {\n      out = this.ram?.at(this.address).busVoltage ?? 0;\n    }\n    this.out().busVoltage = out;\n  }\n\n  override in(pin?: string): Pin {\n    if (pin?.startsWith(\"RAM16K\")) {\n      const idx = int10(pin.match(/\\[(?<idx>\\d+)]/)?.groups?.idx ?? \"0\");\n      return this.ram.at(idx);\n    }\n    if (pin?.startsWith(\"Screen\")) {\n      const idx = int10(pin.match(/\\[(?<idx>\\d+)]/)?.groups?.idx ?? \"0\");\n      return this.screen.at(idx);\n    }\n    return super.in(pin);\n  }\n\n  override get(name: string, offset = 0): Pin | undefined {\n    if (name.startsWith(\"RAM16K\")) {\n      return this.at(offset & 0x3fff);\n    }\n    if (name.startsWith(\"Screen\")) {\n      return this.at(offset & (0x1fff + Screen.OFFSET));\n    }\n    if (name.startsWith(\"Keyboard\")) {\n      return this.at(Keyboard.OFFSET);\n    }\n    if (name.startsWith(\"Memory\")) {\n      return this.at(offset);\n    }\n    return super.get(name, offset);\n  }\n\n  at(offset: number): Pin {\n    if (offset >= Keyboard.OFFSET) {\n      return this.keyboard.out();\n    }\n    if (offset >= Screen.OFFSET) {\n      return this.screen.at(offset - Screen.OFFSET);\n    } else {\n      return this.ram.at(offset);\n    }\n  }\n}\n\nexport class CPU extends ClockedChip {\n  private _state: CPUState = emptyState();\n\n  get state(): CPUState {\n    return this._state;\n  }\n\n  constructor() {\n    super(\n      [\"inM[16]\", \"instruction[16]\", \"reset\"],\n      [\"outM[16]\", \"writeM\", \"addressM[15]\", \"pc[15]\"]\n    );\n  }\n\n  override tick(): void {\n    const [state, writeM] = cpuTick(this.cpuInput(), this._state);\n    this._state = state;\n    this.out(\"writeM\").pull(writeM ? HIGH : LOW);\n    this.out(\"outM\").busVoltage = this._state.ALU ?? 0;\n  }\n\n  override tock(): void {\n    if (!this._state) return; // Skip initial tock\n    const [output, state] = cpuTock(this.cpuInput(), this._state);\n    this._state = state;\n\n    this.out(\"addressM\").busVoltage = output.addressM ?? 0;\n    this.out(\"outM\").busVoltage = output.outM ?? 0;\n    this.out(\"writeM\").pull(output.writeM ? HIGH : LOW);\n    this.out(\"pc\").busVoltage = this._state?.PC ?? 0;\n  }\n\n  private cpuInput(): CPUInput {\n    const inM = this.in(\"inM\").busVoltage;\n    const instruction = this.in(\"instruction\").busVoltage;\n    const reset = this.in(\"reset\").busVoltage === 1;\n    return { inM, instruction, reset };\n  }\n\n  override get(pin: string, offset?: number): Pin | undefined {\n    if (pin?.startsWith(\"ARegister\")) {\n      return new ConstantBus(\"ARegister\", this._state.A);\n    }\n    if (pin?.startsWith(\"DRegister\")) {\n      return new ConstantBus(\"DRegister\", this._state.D);\n    }\n    if (pin?.startsWith(\"PC\")) {\n      return new ConstantBus(\"PC\", this._state.PC);\n    }\n    return super.get(pin, offset);\n  }\n\n  override reset() {\n    this._state = emptyState();\n    super.reset();\n  }\n}\n\nexport class Computer extends Chip {\n  #ram = new Memory();\n  #rom = new ROM32K();\n  #cpu = new CPU();\n\n  constructor() {\n    super([\"reset\"], []);\n\n    this.wire(this.#cpu, [\n      { from: { name: \"reset\", start: 0 }, to: { name: \"reset\", start: 0 } },\n      {\n        from: { name: \"instruction\", start: 0 },\n        to: { name: \"instruction\", start: 0 },\n      },\n      { from: { name: \"outM\", start: 0 }, to: { name: \"inM\", start: 0 } },\n      { from: { name: \"writeM\", start: 0 }, to: { name: \"writeM\", start: 0 } },\n      {\n        from: { name: \"addressM\", start: 0 },\n        to: { name: \"addressM\", start: 0 },\n      },\n    ]);\n\n    this.wire(this.#rom, [\n      { from: { name: \"pc\", start: 0 }, to: { name: \"address\", start: 0 } },\n      {\n        from: { name: \"instruction\", start: 0 },\n        to: { name: \"out\", start: 0 },\n      },\n    ]);\n\n    this.wire(this.#ram, [\n      { from: { name: \"inM\", start: 0 }, to: { name: \"in\", start: 0 } },\n      { from: { name: \"writeM\", start: 0 }, to: { name: \"load\", start: 0 } },\n      {\n        from: { name: \"addressM\", start: 0 },\n        to: { name: \"address\", start: 0 },\n      },\n      { from: { name: \"outM\", start: 0 }, to: { name: \"out\", start: 0 } },\n    ]);\n  }\n\n  override eval() {\n    super.eval();\n  }\n\n  override get(name: string, offset?: number): Pin | undefined {\n    if (\n      name.startsWith(\"PC\") ||\n      name.startsWith(\"ARegister\") ||\n      name.startsWith(\"DRegister\")\n    ) {\n      return this.#cpu.get(name);\n    }\n    if (name.startsWith(\"RAM16K\")) {\n      return this.#ram.get(name, offset);\n    }\n    return super.get(name, offset);\n  }\n\n  override load(fs: FileSystem, path: string): Promise<void> {\n    return this.#rom.load(fs, path);\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function and(a: Voltage, b: Voltage): [Voltage] {\n  return [a === 1 && b === 1 ? HIGH : LOW];\n}\n\nexport function and16(a: number, b: number): [number] {\n  return [a & b & 0xffff];\n}\n\nexport class And extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [n] = and(a, b);\n    this.out().pull(n);\n  }\n}\n\nexport class And16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const [n] = and16(a, b);\n    this.out().busVoltage = n;\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function dmux(inn: Voltage, sel: Voltage): [Voltage, Voltage] {\n  const a = sel === LOW && inn === HIGH ? HIGH : LOW;\n  const b = sel === HIGH && inn === HIGH ? HIGH : LOW;\n  return [a, b];\n}\n\nexport function dmux4way(\n  inn: Voltage,\n  sel: number\n): [Voltage, Voltage, Voltage, Voltage] {\n  const a = sel === 0b00 && inn === HIGH ? HIGH : LOW;\n  const b = sel === 0b01 && inn === HIGH ? HIGH : LOW;\n  const c = sel === 0b10 && inn === HIGH ? HIGH : LOW;\n  const d = sel === 0b11 && inn === HIGH ? HIGH : LOW;\n  return [a, b, c, d];\n}\n\nexport function dmux8way(\n  inn: Voltage,\n  sel: number\n): [Voltage, Voltage, Voltage, Voltage, Voltage, Voltage, Voltage, Voltage] {\n  const a = sel === 0b000 && inn === HIGH ? HIGH : LOW;\n  const b = sel === 0b001 && inn === HIGH ? HIGH : LOW;\n  const c = sel === 0b010 && inn === HIGH ? HIGH : LOW;\n  const d = sel === 0b011 && inn === HIGH ? HIGH : LOW;\n  const e = sel === 0b100 && inn === HIGH ? HIGH : LOW;\n  const f = sel === 0b101 && inn === HIGH ? HIGH : LOW;\n  const g = sel === 0b110 && inn === HIGH ? HIGH : LOW;\n  const h = sel === 0b111 && inn === HIGH ? HIGH : LOW;\n  return [a, b, c, d, e, f, g, h];\n}\n\nexport class DMux extends Chip {\n  constructor() {\n    super([\"in\", \"sel\"], [\"a\", \"b\"]);\n  }\n\n  override eval() {\n    const inn = this.in(\"in\").voltage();\n    const sel = this.in(\"sel\").voltage();\n\n    const [a, b] = dmux(inn, sel);\n    this.out(\"a\").pull(a);\n    this.out(\"b\").pull(b);\n  }\n}\n\nexport class DMux4Way extends Chip {\n  constructor() {\n    super([\"in\", \"sel[2]\"], [\"a\", \"b\", \"c\", \"d\"]);\n  }\n\n  override eval() {\n    const inn = this.in(\"in\").voltage();\n    const sel = this.in(\"sel\").busVoltage;\n\n    const [a, b, c, d] = dmux4way(inn, sel);\n    this.out(\"a\").pull(a);\n    this.out(\"b\").pull(b);\n    this.out(\"c\").pull(c);\n    this.out(\"d\").pull(d);\n  }\n}\n\nexport class DMux8Way extends Chip {\n  constructor() {\n    super([\"in\", \"sel[3]\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]);\n  }\n\n  override eval() {\n    const inn = this.in(\"in\").voltage();\n    const sel = this.in(\"sel\").busVoltage;\n\n    const [a, b, c, d, e, f, g, h] = dmux8way(inn, sel);\n    this.out(\"a\").pull(a);\n    this.out(\"b\").pull(b);\n    this.out(\"c\").pull(c);\n    this.out(\"d\").pull(d);\n    this.out(\"e\").pull(e);\n    this.out(\"f\").pull(f);\n    this.out(\"g\").pull(g);\n    this.out(\"h\").pull(h);\n  }\n}\n","import { Chip, LOW, Voltage } from \"../../chip.js\";\n\nexport function mux(a: Voltage, b: Voltage, sel: Voltage): [Voltage] {\n  return [sel === LOW ? a : b];\n}\n\nexport function mux16(a: number, b: number, sel: Voltage): [number] {\n  return [sel === LOW ? a : b];\n}\n\nexport function mux16_4(\n  a: number,\n  b: number,\n  c: number,\n  d: number,\n  sel: number\n): [number] {\n  const s2 = (sel & 0b01) as Voltage;\n  return (sel & 0b10) === 0b00 ? mux16(a, b, s2) : mux16(c, d, s2);\n}\n\nexport function mux16_8(\n  a: number,\n  b: number,\n  c: number,\n  d: number,\n  e: number,\n  f: number,\n  g: number,\n  h: number,\n  sel: number\n): [number] {\n  const s2 = (sel & 0b11) as Voltage;\n  return (sel & 0b100) === 0b000\n    ? mux16_4(a, b, c, d, s2)\n    : mux16_4(e, f, g, h, s2);\n}\n\nexport class Mux extends Chip {\n  constructor() {\n    super([\"a\", \"b\", \"sel\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const sel = this.in(\"sel\").voltage();\n\n    const [set] = mux(a, b, sel);\n    this.out().pull(set);\n  }\n}\n\nexport class Mux16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\", \"sel\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const sel = this.in(\"sel\").voltage();\n    const [out] = mux16(a, b, sel);\n    this.out().busVoltage = out;\n  }\n}\n\nexport class Mux4Way16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\", \"c[16]\", \"d[16]\", \"sel[2]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const c = this.in(\"c\").busVoltage;\n    const d = this.in(\"d\").busVoltage;\n    const sel = this.in(\"sel\").busVoltage;\n    const [out] = mux16_4(a, b, c, d, sel);\n\n    this.out().busVoltage = out;\n  }\n}\n\nexport class Mux8Way16 extends Chip {\n  constructor() {\n    super(\n      [\n        \"a[16]\",\n        \"b[16]\",\n        \"c[16]\",\n        \"d[16]\",\n        \"e[16]\",\n        \"f[16]\",\n        \"g[16]\",\n        \"h[16]\",\n        \"sel[3]\",\n      ],\n      [\"out[16]\"]\n    );\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const c = this.in(\"c\").busVoltage;\n    const d = this.in(\"d\").busVoltage;\n    const e = this.in(\"e\").busVoltage;\n    const f = this.in(\"f\").busVoltage;\n    const g = this.in(\"g\").busVoltage;\n    const h = this.in(\"h\").busVoltage;\n    const sel = this.in(\"sel\").busVoltage;\n    const [out] = mux16_8(a, b, c, d, e, f, g, h, sel);\n\n    this.out().busVoltage = out;\n  }\n}\n","import { nand16 } from \"../../../util/twos.js\";\nimport { HIGH, LOW, Chip, Voltage } from \"../../chip.js\";\n\nexport function nand(a: Voltage, b: Voltage): [Voltage] {\n  return [a === 1 && b === 1 ? LOW : HIGH];\n}\n\nexport class Nand extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [out] = nand(a, b);\n    this.out().pull(out);\n  }\n}\n\nexport class Nand16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    this.out().busVoltage = nand16(a, b);\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function not(inn: Voltage): [Voltage] {\n  return [inn === LOW ? HIGH : LOW];\n}\n\nexport function not16(inn: number): [number] {\n  return [~inn & 0xffff];\n}\n\nexport class Not extends Chip {\n  constructor() {\n    super([\"in\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"in\").voltage();\n    const [out] = not(a);\n    this.out().pull(out);\n  }\n}\n\nexport class Not16 extends Chip {\n  constructor() {\n    super([\"in[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const [n] = not16(this.in().busVoltage);\n    this.out().busVoltage = n;\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function or(a: Voltage, b: Voltage): [Voltage] {\n  return [a === 1 || b === 1 ? HIGH : LOW];\n}\n\nexport function or16(a: number, b: number): [number] {\n  return [(a | b) & 0xffff];\n}\n\nexport function or8way(a: number): [Voltage] {\n  return [(a & 0xff) === 0 ? LOW : HIGH];\n}\n\nexport class Or extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [out] = or(a, b);\n    this.out().pull(out);\n  }\n}\n\nexport class Or16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const [out] = or16(a, b);\n    this.out().busVoltage = out;\n  }\n}\n\nexport class Or8way extends Chip {\n  constructor() {\n    super([\"in[8]\"], [\"out\"], \"Or8way\");\n  }\n\n  override eval() {\n    const inn = this.in().busVoltage;\n    const [out] = or8way(inn);\n    this.out().pull(out);\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function xor(a: Voltage, b: Voltage): [Voltage] {\n  return [(a === HIGH && b === LOW) || (a === LOW && b === HIGH) ? HIGH : LOW];\n}\n\nexport function xor16(a: number, b: number): [number] {\n  return [(a ^ b) & 0xffff];\n}\n\nexport class Xor extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [out] = xor(a, b);\n    this.out().pull(out);\n  }\n}\n\nexport class Xor16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const [out] = xor16(a, b);\n    this.out().busVoltage = out;\n  }\n}\n","import { Chip } from \"../../chip.js\";\n\nexport function add16(a: number, b: number): [number] {\n  return [(a + b) & 0xffff];\n}\n\nexport class Add16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"], \"Add16\");\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const [out] = add16(a, b);\n    this.out().busVoltage = out;\n  }\n}\n","import { alu, alua, COMMANDS_OP, Flags } from \"../../../cpu/alu.js\";\nimport { Chip, HIGH, LOW } from \"../../chip.js\";\n\nexport class ALUNoStat extends Chip {\n  constructor() {\n    super(\n      [\n        \"x[16]\",\n        \"y[16]\", // 16-bit inputs\n        \"zx\", // zero the x input?\n        \"nx\", // negate the x input?\n        \"zy\", // zero the y input?\n        \"ny\", // negate the y input?\n        \"f\", // compute out = x + y (if 1) or x & y (if 0)\n        \"no\", // negate the out output?\n      ],\n      [\n        \"out[16]\", // 16-bit output\n      ],\n      \"ALU\"\n    );\n  }\n\n  override eval() {\n    const x = this.in(\"x\").busVoltage;\n    const y = this.in(\"y\").busVoltage;\n    const zx = this.in(\"zx\").busVoltage << 5;\n    const nx = this.in(\"nx\").busVoltage << 4;\n    const zy = this.in(\"zy\").busVoltage << 3;\n    const ny = this.in(\"ny\").busVoltage << 2;\n    const f = this.in(\"f\").busVoltage << 1;\n    const no = this.in(\"no\").busVoltage << 0;\n    const op = zx + nx + zy + ny + f + no;\n\n    const [out] = alu(op, x, y);\n\n    this.out().busVoltage = out;\n  }\n}\n\nexport class ALU extends Chip {\n  constructor() {\n    super(\n      [\n        \"x[16]\",\n        \"y[16]\", // 16-bit inputs\n        \"zx\", // zero the x input?\n        \"nx\", // negate the x input?\n        \"zy\", // zero the y input?\n        \"ny\", // negate the y input?\n        \"f\", // compute out = x + y (if 1) or x & y (if 0)\n        \"no\", // negate the out output?\n      ],\n      [\n        \"out[16]\", // 16-bit output\n        \"zr\", // 1 if (out === 0), 0 otherwise\n        \"ng\", // 1 if (out < 0),  0 otherwise\n      ],\n      \"ALU\"\n    );\n  }\n\n  override eval() {\n    const x = this.in(\"x\").busVoltage;\n    const y = this.in(\"y\").busVoltage;\n    const zx = this.in(\"zx\").busVoltage << 5;\n    const nx = this.in(\"nx\").busVoltage << 4;\n    const zy = this.in(\"zy\").busVoltage << 3;\n    const ny = this.in(\"ny\").busVoltage << 2;\n    const f = this.in(\"f\").busVoltage << 1;\n    const no = this.in(\"no\").busVoltage << 0;\n    const op = zx + nx + zy + ny + f + no;\n\n    const [out, flags] = alu(op, x, y);\n\n    const ng = flags === Flags.Negative ? HIGH : LOW;\n    const zr = flags === Flags.Zero ? HIGH : LOW;\n    this.out(\"out\").busVoltage = out;\n    this.out(\"ng\").pull(ng);\n    this.out(\"zr\").pull(zr);\n  }\n\n  op(): COMMANDS_OP {\n    const zx = this.in(\"zx\").busVoltage << 5;\n    const nx = this.in(\"nx\").busVoltage << 4;\n    const zy = this.in(\"zy\").busVoltage << 3;\n    const ny = this.in(\"ny\").busVoltage << 2;\n    const f = this.in(\"f\").busVoltage << 1;\n    const no = this.in(\"no\").busVoltage << 0;\n    const op = zx + nx + zy + ny + f + no;\n    return op as COMMANDS_OP;\n  }\n}\n\nexport class ALUAll extends Chip {\n  constructor() {\n    super(\n      [\n        \"x[16]\",\n        \"y[16]\", // 16-bit inputs\n        \"zx\", // zero the x input?\n        \"nx\", // negate the x input?\n        \"zy\", // zero the y input?\n        \"ny\", // negate the y input?\n        \"f\", // compute out = x + y (if 1) or x & y (if 0)\n        \"no\", // negate the out output?\n      ],\n      [\n        \"out[16]\", // 16-bit output\n        \"zr\", // 1 if (out === 0), 0 otherwise\n        \"ng\", // 1 if (out < 0),  0 otherwise\n      ],\n      \"ALU\"\n    );\n  }\n\n  override eval() {\n    const x = this.in(\"x\").busVoltage;\n    const y = this.in(\"y\").busVoltage;\n    const zx = this.in(\"zx\").busVoltage << 5;\n    const nx = this.in(\"nx\").busVoltage << 4;\n    const zy = this.in(\"zy\").busVoltage << 3;\n    const ny = this.in(\"ny\").busVoltage << 2;\n    const f = this.in(\"f\").busVoltage << 1;\n    const no = this.in(\"no\").busVoltage << 0;\n    const op = zx + nx + zy + ny + f + no;\n\n    const [out, flags] = alua(op, x, y);\n\n    const ng = flags === Flags.Negative ? HIGH : LOW;\n    const zr = flags === Flags.Zero ? HIGH : LOW;\n    this.out(\"out\").busVoltage = out;\n    this.out(\"ng\").pull(ng);\n    this.out(\"zr\").pull(zr);\n  }\n\n  op(): COMMANDS_OP {\n    const zx = this.in(\"zx\").busVoltage << 5;\n    const nx = this.in(\"nx\").busVoltage << 4;\n    const zy = this.in(\"zy\").busVoltage << 3;\n    const ny = this.in(\"ny\").busVoltage << 2;\n    const f = this.in(\"f\").busVoltage << 1;\n    const no = this.in(\"no\").busVoltage << 0;\n    const op = zx + nx + zy + ny + f + no;\n    return op as COMMANDS_OP;\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function halfAdder(a: Voltage, b: Voltage): [Voltage, Voltage] {\n  const sum = (a === 1 && b === 0) || (a === 0 && b === 1) ? HIGH : LOW;\n  const car = a === 1 && b === 1 ? HIGH : LOW;\n\n  return [sum, car];\n}\n\nexport class HalfAdder extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"sum\", \"carry\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [sum, carry] = halfAdder(a, b);\n    this.out(\"sum\").pull(sum);\n    this.out(\"carry\").pull(carry);\n  }\n}\n","import { Chip, Voltage } from \"../../chip.js\";\nimport { or } from \"../logic/or.js\";\nimport { halfAdder } from \"./half_adder.js\";\n\nexport function fullAdder(\n  a: Voltage,\n  b: Voltage,\n  c: Voltage\n): [Voltage, Voltage] {\n  const [s, ca] = halfAdder(a, b);\n  const [sum, cb] = halfAdder(s, c);\n  const [carry] = or(ca, cb);\n\n  return [sum, carry];\n}\n\nexport class FullAdder extends Chip {\n  constructor() {\n    super([\"a\", \"b\", \"c\"], [\"sum\", \"carry\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const c = this.in(\"c\").voltage();\n    const [sum, carry] = fullAdder(a, b, c);\n    this.out(\"sum\").pull(sum);\n    this.out(\"carry\").pull(carry);\n  }\n}\n","import { Chip } from \"../../chip.js\";\nimport { add16 } from \"./add_16.js\";\n\nexport function inc16(n: number): [number] {\n  return add16(n, 1);\n}\n\nexport class Inc16 extends Chip {\n  constructor() {\n    super([\"in[16]\"], [\"out[16]\"], \"Inc16\");\n  }\n\n  override eval() {\n    const a = this.in().busVoltage;\n    const [out] = inc16(a);\n    this.out().busVoltage = out;\n  }\n}\n","import { ClockedChip } from \"../../chip.js\";\n\nexport class DFF extends ClockedChip {\n  constructor(name?: string) {\n    super([\"in\"], [\"out\"], name, [\"t\"]);\n  }\n\n  override tick() {\n    // Read in into t\n    const t = this.in().voltage();\n    this.pin(\"t\").pull(t);\n  }\n\n  override tock() {\n    // write t into out\n    const t = this.pin(\"t\").voltage();\n    this.out().pull(t);\n  }\n}\n","import { Err, Ok, Result } from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { Chip } from \"../chip.js\";\n\nimport { And, And16 } from \"./logic/and.js\";\nimport { DMux, DMux4Way, DMux8Way } from \"./logic/dmux.js\";\nimport { Mux, Mux16, Mux4Way16, Mux8Way16 } from \"./logic/mux.js\";\nimport { Nand, Nand16 } from \"./logic/nand.js\";\nimport { Not, Not16 } from \"./logic/not.js\";\nimport { Or, Or16, Or8way } from \"./logic/or.js\";\nimport { Xor, Xor16 } from \"./logic/xor.js\";\n\nimport { Add16 } from \"./arithmetic/add_16.js\";\nimport { ALU, ALUNoStat } from \"./arithmetic/alu.js\";\nimport { FullAdder } from \"./arithmetic/full_adder.js\";\nimport { HalfAdder } from \"./arithmetic/half_adder.js\";\nimport { Inc16 } from \"./arithmetic/inc16.js\";\n\nimport {\n  Computer,\n  CPU,\n  Keyboard,\n  Memory,\n  ROM32K,\n  Screen,\n} from \"./computer/computer.js\";\nimport { Bit, PC, Register, VRegister } from \"./sequential/bit.js\";\nimport { DFF } from \"./sequential/dff.js\";\nimport { RAM16K, RAM4K, RAM512, RAM64, RAM8 } from \"./sequential/ram.js\";\n\nexport {\n  And,\n  And16,\n  DMux,\n  Mux,\n  Mux16,\n  Mux4Way16,\n  Mux8Way16,\n  Nand,\n  Nand16,\n  Not,\n  Not16,\n  Or,\n  Or16,\n  Or8way,\n  Xor,\n  Xor16,\n  HalfAdder,\n  FullAdder,\n  Add16,\n  Inc16,\n  ALU,\n  Bit,\n  Register,\n  VRegister as ARegister,\n  VRegister as DRegister,\n  DFF,\n  RAM8,\n  RAM64,\n  RAM512,\n  RAM4K,\n  RAM16K,\n};\n\nexport const REGISTRY = new Map<string, () => Chip>(\n  (\n    [\n      [\"Nand\", Nand],\n      [\"Nand16\", Nand16],\n      [\"Not\", Not],\n      [\"Not16\", Not16],\n      [\"And\", And],\n      [\"And16\", And16],\n      [\"Or\", Or],\n      [\"Or16\", Or16],\n      [\"Or8Way\", Or8way],\n      [\"XOr\", Xor],\n      [\"XOr16\", Xor16],\n      [\"Xor\", Xor],\n      [\"Xor16\", Xor16],\n      [\"Mux\", Mux],\n      [\"Mux16\", Mux16],\n      [\"Mux4Way16\", Mux4Way16],\n      [\"Mux8Way16\", Mux8Way16],\n      [\"DMux\", DMux],\n      [\"DMux4Way\", DMux4Way],\n      [\"DMux8Way\", DMux8Way],\n      [\"HalfAdder\", HalfAdder],\n      [\"FullAdder\", FullAdder],\n      [\"Add16\", Add16],\n      [\"Inc16\", Inc16],\n      [\"ALU\", ALU],\n      [\"ALUNoStat\", ALUNoStat],\n      [\"DFF\", DFF],\n      [\"Bit\", Bit],\n      [\"Register\", Register],\n      [\"ARegister\", Register],\n      [\"DRegister\", Register],\n      [\"PC\", PC],\n      [\"RAM8\", RAM8],\n      [\"RAM64\", RAM64],\n      [\"RAM512\", RAM512],\n      [\"RAM4K\", RAM4K],\n      [\"RAM16K\", RAM16K],\n      [\"ROM32K\", ROM32K],\n      [\"Screen\", Screen],\n      [\"Keyboard\", Keyboard],\n      [\"CPU\", CPU],\n      [\"Computer\", Computer],\n      [\"Memory\", Memory],\n      [\"ARegister\", VRegister],\n      [\"DRegister\", VRegister],\n    ] as [string, { new (): Chip }][]\n  ).map(([name, ChipCtor]) => [\n    name,\n    () => {\n      const chip = new ChipCtor();\n      chip.name = name;\n      return chip;\n    },\n  ])\n);\n\nexport function hasBuiltinChip(name: string): boolean {\n  return REGISTRY.has(name);\n}\n\nexport function getBuiltinChip(name: string): Result<Chip> {\n  const chip = REGISTRY.get(name);\n  return chip\n    ? Ok(chip())\n    : Err(new Error(`Chip ${name} not in builtin registry`));\n}\n","import { ClockedChip, HIGH, LOW, Pin, Voltage } from \"../../chip.js\";\n\nexport class Bit extends ClockedChip {\n  bit: Voltage = LOW;\n\n  constructor(name?: string) {\n    super([\"in\", \"load\"], [\"out\"], name);\n  }\n\n  override tick() {\n    if (this.in(\"load\").voltage() === HIGH) {\n      this.bit = this.in().voltage();\n    }\n  }\n\n  override tock() {\n    this.out().pull(this.bit ?? 0);\n  }\n\n  override reset() {\n    this.bit = LOW;\n  }\n}\n\nexport class Register extends ClockedChip {\n  bits = 0x00;\n\n  constructor(name?: string) {\n    super([\"in[16]\", \"load\"], [\"out[16]\"], name);\n  }\n\n  override tick() {\n    if (this.in(\"load\").voltage() === HIGH) {\n      this.bits = this.in().busVoltage & 0xffff;\n    }\n  }\n\n  override tock() {\n    this.out().busVoltage = this.bits & 0xffff;\n  }\n\n  override get(name: string, offset?: number): Pin | undefined {\n    return name === this.name ? this.out() : super.get(name, offset);\n  }\n\n  override reset() {\n    this.bits = 0x00;\n  }\n}\n\nexport class VRegister extends Register {}\n\nexport class PC extends ClockedChip {\n  bits = 0x00;\n\n  constructor(name?: string) {\n    super([\"in[16]\", \"load\", \"inc\", \"reset\"], [\"out[16]\"], name);\n  }\n\n  override tick() {\n    if (this.in(\"reset\").voltage() === HIGH) {\n      this.bits = 0;\n    } else if (this.in(\"load\").voltage() === HIGH) {\n      this.bits = this.in().busVoltage & 0xffff;\n    } else if (this.in(\"inc\").voltage() === HIGH) {\n      this.bits += 1;\n    }\n  }\n\n  override tock() {\n    this.out().busVoltage = this.bits & 0xffff;\n  }\n\n  override get(name: string, offset?: number): Pin | undefined {\n    return name === this.name ? this.out() : super.get(name, offset);\n  }\n\n  override reset() {\n    this.bits = 0x00;\n  }\n}\n","import { Bus, ClockedChip, Pin } from \"../../chip.js\";\nimport { assert } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { Memory, Memory as MemoryChip } from \"../../../cpu/memory.js\";\n\nexport class RAM extends ClockedChip {\n  protected _memory: MemoryChip;\n  private _nextData = 0;\n  private _address = 0;\n\n  get memory() {\n    return this._memory;\n  }\n  get address() {\n    return this._address;\n  }\n\n  constructor(readonly width: number, name?: string) {\n    super([\"in[16]\", \"load\", `address[${width}]`], [`out[16]`], name);\n    this._memory = new MemoryChip(Math.pow(2, this.width));\n  }\n\n  override tick() {\n    const load = this.in(\"load\").voltage();\n    this._address = this.in(\"address\").busVoltage;\n    if (load) {\n      this._nextData = this.in().busVoltage;\n      this._memory.set(this._address, this._nextData);\n    }\n  }\n\n  override tock() {\n    this.out().busVoltage = this._memory?.get(this._address) ?? 0;\n  }\n\n  override eval() {\n    const address = this.in(\"address\").busVoltage;\n    this.out().busVoltage = this._memory?.get(address) ?? 0;\n  }\n\n  at(idx: number): Pin {\n    assert(\n      idx < this._memory.size,\n      () => `Request out of bounds (${idx} >= ${this._memory.size})`\n    );\n    return new RamBus(`${this.name}[${idx}]`, idx, this._memory);\n  }\n}\n\nexport class RamBus extends Bus {\n  constructor(\n    name: string,\n    private readonly index: number,\n    private ram: Memory\n  ) {\n    super(name);\n  }\n\n  override get busVoltage(): number {\n    return this.ram.get(this.index);\n  }\n\n  override set busVoltage(num: number) {\n    this.ram.set(this.index, num);\n  }\n}\n\nexport class RAM8 extends RAM {\n  constructor(name?: string) {\n    super(3, name);\n  }\n}\n\nexport class RAM64 extends RAM {\n  constructor(name?: string) {\n    super(6, name);\n  }\n}\n\nexport class RAM512 extends RAM {\n  constructor(name?: string) {\n    super(9, name);\n  }\n}\n\nexport class RAM4K extends RAM {\n  constructor(name?: string) {\n    super(12, name);\n  }\n}\n\nexport class RAM16K extends RAM {\n  constructor(name?: string) {\n    super(14, name);\n  }\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { assert, assertExists } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport { range } from \"@davidsouther/jiffies/lib/esm/range.js\";\nimport { bin } from \"../util/twos.js\";\nimport { Clock } from \"./clock.js\";\n\nexport const HIGH = 1;\nexport const LOW = 0;\nexport type Voltage = typeof HIGH | typeof LOW;\n\nexport interface Pin {\n  readonly name: string;\n  readonly width: number;\n  busVoltage: number;\n  pull(voltage: Voltage, bit?: number): void;\n  toggle(bit?: number): void;\n  voltage(bit?: number): Voltage;\n  connect(pin: Pin): void;\n}\n\nexport class Bus implements Pin {\n  state: Voltage[];\n  next: Pin[] = [];\n\n  constructor(readonly name: string, readonly width = 1) {\n    this.state = range(0, this.width).map(() => LOW);\n  }\n\n  ensureWidth(newWidth: number) {\n    assert(newWidth <= 16, `Cannot widen past 16 to ${newWidth} bits`);\n    if (this.width < newWidth) {\n      (this as { width: number }).width = newWidth;\n      this.state = [\n        ...this.state,\n        ...range(this.width, newWidth).map(() => LOW as Voltage),\n      ];\n    }\n  }\n\n  connect(next: Pin) {\n    this.next.push(next);\n    next.busVoltage = this.busVoltage;\n  }\n\n  pull(voltage: Voltage, bit = 0) {\n    assert(\n      bit >= 0 && bit < this.width,\n      `Bit out of bounds: ${this.name}@${bit}`\n    );\n    this.state[bit] = voltage;\n    this.next.forEach((n) => n.pull(voltage, bit));\n  }\n\n  voltage(bit = 0): Voltage {\n    assert(bit >= 0 && bit < this.width);\n    return this.state[bit];\n  }\n\n  set busVoltage(voltage: number) {\n    for (const i of range(0, this.width)) {\n      this.state[i] = ((voltage & (1 << i)) >> i) as Voltage;\n    }\n    this.next.forEach((n) => (n.busVoltage = this.busVoltage));\n  }\n\n  get busVoltage(): number {\n    return range(0, this.width).reduce((b, i) => b | (this.state[i] << i), 0);\n  }\n\n  toggle(bit = 0) {\n    const nextVoltage = this.voltage(bit) === LOW ? HIGH : LOW;\n    this.pull(nextVoltage, bit);\n  }\n}\n\nexport class InSubBus extends Bus {\n  constructor(\n    private bus: Pin,\n    private start: number,\n    override readonly width = 1\n  ) {\n    super(bus.name);\n    assert(\n      start >= 0 && start + width <= bus.width,\n      `Mismatched InSubBus dimensions on ${bus.name} (${width} + ${start} > ${bus.width})`\n    );\n    this.connect(bus);\n  }\n\n  override pull(voltage: Voltage, bit = 0) {\n    assert(bit >= 0 && bit < this.width);\n    this.bus.pull(voltage, this.start + bit);\n  }\n\n  override voltage(bit = 0): Voltage {\n    assert(bit >= 0 && bit < this.width);\n    return this.bus.voltage(this.start + bit);\n  }\n\n  override set busVoltage(voltage: number) {\n    const high = this.bus.busVoltage & ~mask(this.width + this.start);\n    const low = this.bus.busVoltage & mask(this.start);\n    const mid = (voltage & mask(this.width)) << this.start;\n    this.bus.busVoltage = high | mid | low;\n  }\n\n  override get busVoltage(): number {\n    return (this.bus.busVoltage >> this.start) & mask(this.width);\n  }\n\n  override connect(bus: Pin): void {\n    assert(\n      this.start + this.width <= bus.width,\n      `Mismatched InSubBus connection dimensions (From ${bus.name} to ${this.name})`\n    );\n    this.bus = bus;\n  }\n}\n\nexport class OutSubBus extends Bus {\n  constructor(\n    private bus: Pin,\n    private start: number,\n    override readonly width = 1\n  ) {\n    super(bus.name);\n    assert(start >= 0 && width <= bus.width, `Mismatched OutSubBus dimensions`);\n    this.connect(bus);\n  }\n\n  override set busVoltage(voltage: number) {\n    this.bus.busVoltage =\n      (voltage & mask(this.width + this.start)) >> this.start;\n  }\n\n  override get busVoltage(): number {\n    return this.bus.busVoltage & mask(this.width);\n  }\n\n  override connect(bus: Pin): void {\n    assert(\n      this.width <= bus.width,\n      `Mismatched OutSubBus connection dimensions`\n    );\n    this.bus = bus;\n  }\n}\n\nexport class ConstantBus extends Bus {\n  constructor(name: string, private readonly value: number) {\n    super(name, 16 /* TODO: get high bit index */);\n  }\n\n  pullHigh(_ = 0) {\n    return undefined;\n  }\n  pullLow(_ = 0) {\n    return undefined;\n  }\n  override voltage(_ = 0): Voltage {\n    return (this.busVoltage & 0x1) as Voltage;\n  }\n\n  override set busVoltage(voltage: number) {\n    // Noop\n  }\n  override get busVoltage(): number {\n    return this.value;\n  }\n}\n\nexport const TRUE_BUS = new ConstantBus(\"true\", 0xffff);\nexport const FALSE_BUS = new ConstantBus(\"false\", 0);\n\nexport function parsePinDecl(toPin: string): {\n  pin: string;\n  width: number;\n} {\n  const { pin, w } = toPin.match(/(?<pin>[a-zA-Z]+)(\\[(?<w>\\d+)\\])?/)\n    ?.groups as {\n    pin: string;\n    w?: string;\n  };\n  return {\n    pin,\n    width: w ? Number(w) : 1,\n  };\n}\n\nexport function parseToPin(toPin: string): {\n  pin: string;\n  start?: number;\n  end?: number;\n} {\n  const { pin, i, j } = toPin.match(\n    /(?<pin>[a-z]+)(\\[(?<i>\\d+)(\\.\\.(?<j>\\d+))?\\])?/\n  )?.groups as { pin: string; i?: string; j?: string };\n  return {\n    pin,\n    start: i ? Number(i) : undefined,\n    end: j ? Number(j) : undefined,\n  };\n}\n\nexport class Pins {\n  private readonly map = new Map<string, Pin>();\n\n  insert(pin: Pin) {\n    const { name } = pin;\n    assert(!this.map.has(name), `Pins already has ${name}!`);\n    this.map.set(name, pin);\n  }\n\n  emplace(name: string, minWidth?: number) {\n    if (this.has(name)) {\n      return this.get(name)!;\n    } else {\n      const pin = new Bus(name, minWidth);\n      this.insert(pin);\n      return pin;\n    }\n  }\n\n  has(pin: string): boolean {\n    return this.map.has(pin);\n  }\n\n  get(pin: string): Pin | undefined {\n    return this.map.get(pin);\n  }\n\n  entries(): Iterable<Pin> {\n    return this.map.values();\n  }\n\n  [Symbol.iterator]() {\n    return this.map[Symbol.iterator]();\n  }\n}\n\nlet id = 0;\nexport class Chip {\n  readonly id = id++;\n  ins = new Pins();\n  outs = new Pins();\n  pins = new Pins();\n  parts = new Set<Chip>();\n  clockedPins: Set<string>;\n\n  get clocked() {\n    if (this.clockedPins.size > 0) {\n      return true;\n    }\n    for (const part of this.parts) {\n      if (part.clocked) return true;\n    }\n    return false;\n  }\n\n  constructor(\n    ins: (string | { pin: string; width: number })[],\n    outs: (string | { pin: string; width: number })[],\n    public name?: string,\n    internals: (string | { pin: string; width: number })[] = [],\n    clocked: string[] = []\n  ) {\n    for (const inn of ins) {\n      const { pin, width = 1 } =\n        (inn as { pin: string }).pin !== undefined\n          ? (inn as { pin: string; width: number })\n          : parsePinDecl(inn as string);\n      this.ins.insert(new Bus(pin, width));\n    }\n\n    for (const out of outs) {\n      const { pin, width = 1 } =\n        (out as { pin: string }).pin !== undefined\n          ? (out as { pin: string; width: number })\n          : parsePinDecl(out as string);\n      this.outs.insert(new Bus(pin, width));\n    }\n\n    for (const internal of internals) {\n      const { pin, width = 1 } =\n        (internal as { pin: string }).pin !== undefined\n          ? (internal as { pin: string; width: number })\n          : parsePinDecl(internal as string);\n      this.pins.insert(new Bus(pin, width));\n    }\n\n    this.clockedPins = new Set(clocked);\n\n    Clock.get().$.subscribe(() => this.eval());\n  }\n\n  reset() {\n    for (const [_, pin] of this.ins) {\n      pin.busVoltage = 0;\n    }\n    for (const part of this.parts) {\n      part.reset();\n    }\n    this.eval();\n  }\n\n  in(pin = \"in\"): Pin {\n    assert(this.hasIn(pin), `No in pin ${pin}`);\n    return this.ins.get(pin)!;\n  }\n\n  out(pin = \"out\"): Pin {\n    assert(this.hasOut(pin), `No in pin ${pin}`);\n    return this.outs.get(pin)!;\n  }\n\n  hasIn(pin: string): boolean {\n    return this.ins.has(pin);\n  }\n\n  hasOut(pin: string): boolean {\n    return this.outs.has(pin);\n  }\n\n  pin(name: string): Pin {\n    assert(this.pins.has(name));\n    return this.pins.get(name)!;\n  }\n\n  get(name: string, offset?: number): Pin | undefined {\n    if (this.ins.has(name)) {\n      return this.ins.get(name)!;\n    }\n    if (this.outs.has(name)) {\n      return this.outs.get(name)!;\n    }\n    if (this.pins.has(name)) {\n      return this.pins.get(name)!;\n    }\n    return this.getBuiltin(name, offset);\n  }\n\n  private getBuiltin(name: string, offset = 0): Pin | undefined {\n    if (BUILTIN_NAMES.includes(name)) {\n      for (const part of this.parts) {\n        const pin = part.get(name, offset);\n        if (pin) {\n          return pin;\n        }\n      }\n    }\n    return undefined;\n  }\n\n  isOutPin(pin: string): boolean {\n    return this.outs.has(pin);\n  }\n\n  wire(part: Chip, connections: Connection[]) {\n    this.parts.add(part);\n    for (const { to, from } of connections) {\n      if (part.isOutPin(to.name)) {\n        this.wireOutPin(part, to, from);\n      } else {\n        this.wireInPin(part, to, from);\n      }\n    }\n  }\n\n  private findPin(from: string, minWidth?: number): Pin {\n    if (from.toLowerCase() === \"true\" || from === \"1\") {\n      return TRUE_BUS;\n    }\n    if (from.toLowerCase() === \"false\" || from === \"0\") {\n      return FALSE_BUS;\n    }\n    if (this.ins.has(from)) {\n      return this.ins.get(from)!;\n    }\n    if (this.outs.has(from)) {\n      return this.outs.get(from)!;\n    }\n    return this.pins.emplace(from, minWidth);\n  }\n\n  private wireOutPin(part: Chip, to: PinSide, from: PinSide) {\n    const partPin = assertExists(\n      part.outs.get(to.name),\n      () => `Cannot wire to missing pin ${to.name}`\n    );\n    to.width ??= partPin.width;\n\n    let chipPin = this.findPin(from.name, from.width ?? to.width);\n    const isInternal = this.pins.has(chipPin.name);\n\n    from.width ??= chipPin.width;\n\n    if (chipPin instanceof ConstantBus) {\n      throw new Error(`Cannot wire to constant bus`);\n    }\n\n    // Widen internal pins\n    if (isInternal && chipPin instanceof Bus) {\n      chipPin.ensureWidth(from.start + from.width);\n    }\n\n    // Wrap the chipPin in an InBus when the chip side is dimensioned\n    if (from.start > 0 || from.width !== chipPin.width) {\n      chipPin = new InSubBus(chipPin, from.start, from.width);\n    }\n\n    // Wrap the chipPin in an OutBus when the part side is dimensioned\n    if (to.start > 0 || to.width !== chipPin.width) {\n      chipPin = new OutSubBus(chipPin, to.start, to.width);\n    }\n\n    partPin.connect(chipPin);\n  }\n\n  private wireInPin(part: Chip, to: PinSide, from: PinSide) {\n    let partPin = assertExists(\n      part.ins.get(to.name),\n      () => `Cannot wire to missing pin ${to.name}`\n    );\n    to.width ??= partPin.width;\n\n    const chipPin = this.findPin(from.name, from.width ?? to.width);\n\n    from.width ??= chipPin.width;\n\n    // Wrap the partPin in an InBus when the part side is dimensioned\n    if (to.start > 0 || to.width !== chipPin.width) {\n      partPin = new InSubBus(partPin, to.start, to.width);\n    }\n\n    // Wrap the partPin in an OutBus when the chip side is dimensioned\n    if (![\"true\", \"false\"].includes(chipPin.name)) {\n      if (from.start > 0 || from.width !== chipPin.width) {\n        partPin = new OutSubBus(partPin, from.start, from.width);\n      }\n    }\n    chipPin.connect(partPin);\n  }\n\n  eval() {\n    for (const chip of this.parts) {\n      // TODO topological sort\n      // eval chip input busses\n      chip.eval();\n      // eval output busses\n    }\n  }\n\n  tick() {\n    this.eval();\n  }\n\n  tock() {\n    this.eval();\n  }\n\n  remove() {\n    for (const part of this.parts) {\n      part.remove();\n    }\n  }\n\n  // For the ROM32K builtin to load from a file system\n  async load(fs: FileSystem, path: string): Promise<void> {\n    for (const part of this.parts) {\n      if (part.name === \"ROM32K\") {\n        await part.load(fs, path);\n      }\n    }\n  }\n}\n\nexport class Low extends Chip {\n  constructor() {\n    super([], []);\n    this.outs.insert(FALSE_BUS);\n  }\n}\n\nexport class High extends Chip {\n  constructor() {\n    super([], []);\n    this.outs.insert(TRUE_BUS);\n  }\n}\n\nexport class ClockedChip extends Chip {\n  override get clocked(): boolean {\n    return true;\n  }\n\n  #subscription = Clock.get().$.subscribe(({ level }) => {\n    if (level === LOW) {\n      this.tock();\n    } else {\n      this.tick();\n    }\n  });\n\n  override remove() {\n    this.#subscription.unsubscribe();\n    super.remove();\n  }\n}\n\nexport interface PinSide {\n  name: string;\n  start: number;\n  width?: number;\n}\n\nexport interface Connection {\n  // To is the part side\n  to: PinSide;\n  // From is the chip side\n  from: PinSide;\n}\n\nexport type Pinout = Record<string, string>;\nexport interface SerializedChip {\n  id: number;\n  name: string;\n  ins: Pinout;\n  outs: Pinout;\n  pins: Pinout;\n  children: SerializedChip[];\n}\n\nfunction mask(width: number) {\n  return Math.pow(2, width) - 1;\n}\n\nfunction setBus(busses: Pinout, pin: Pin) {\n  busses[pin.name] = bin(\n    (pin.busVoltage & mask(pin.width)) <<\n      (pin as unknown as { start: number }).start ?? 0\n  );\n  return busses;\n}\n\nexport function printChip(chip: Chip): SerializedChip {\n  return {\n    id: chip.id,\n    name: chip.name ?? chip.constructor.name,\n    ins: [...chip.ins.entries()].reduce(setBus, {} as Pinout),\n    outs: [...chip.outs.entries()].reduce(setBus, {} as Pinout),\n    pins: [...chip.pins.entries()].reduce(setBus, {} as Pinout),\n    children: [...chip.parts.values()].map(printChip),\n  };\n}\n\nexport const BUILTIN_NAMES = [\n  \"Register\",\n  \"ARegister\",\n  \"DRegister\",\n  \"PC\",\n  \"RAM8\",\n  \"RAM64\",\n  \"RAM512\",\n  \"RAM4K\",\n  \"RAM16K\",\n  \"ROM32K\",\n  \"Screen\",\n  \"Keyboard\",\n  \"Memory\",\n];\n","import { BehaviorSubject, Observable, Subject } from \"rxjs\";\nimport { assert } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { HIGH, LOW, Voltage } from \"./chip.js\";\n\ninterface Tick {\n  readonly level: Voltage;\n  readonly ticks: number;\n}\n\nlet clock: Clock;\nexport class Clock {\n  private level: Voltage = LOW;\n  private ticks = 0;\n\n  static get() {\n    if (clock === undefined) {\n      clock = new Clock();\n    }\n    return clock;\n  }\n\n  get isHigh(): boolean {\n    return this.level === HIGH;\n  }\n\n  get isLow(): boolean {\n    return this.level === LOW;\n  }\n\n  private subject = new BehaviorSubject<Tick>({\n    level: this.level,\n    ticks: this.ticks,\n  });\n  readonly frameSubject = new Subject<void>();\n\n  readonly $: Observable<Tick> = this.subject;\n  readonly frame$: Observable<void> = this.frameSubject;\n\n  private next() {\n    this.subject.next({\n      level: this.level,\n      ticks: this.ticks,\n    });\n  }\n\n  private constructor() {\n    // private\n  }\n\n  reset() {\n    this.level = LOW;\n    this.ticks = 0;\n    this.next();\n  }\n\n  tick() {\n    assert(this.level === LOW, \"Can only tick up from LOW\");\n    this.level = HIGH;\n    this.next();\n  }\n\n  tock() {\n    assert(this.level === HIGH, \"Can only tock down from HIGH\");\n    this.level = LOW;\n    this.ticks += 1;\n    this.next();\n  }\n\n  toggle() {\n    this.level === HIGH ? this.tock() : this.tick();\n  }\n\n  eval() {\n    this.tick();\n    this.tock();\n  }\n\n  frame() {\n    this.frameSubject.next();\n  }\n\n  toString() {\n    return `${this.ticks}${this.level === HIGH ? \"+\" : \"\"}`;\n  }\n}\n","export type COMMANDS_ASM =\n  | \"0\"\n  | \"1\"\n  | \"-1\"\n  | \"D\"\n  | \"A\"\n  | \"M\"\n  | \"!D\"\n  | \"!A\"\n  | \"-D\"\n  | \"-A\"\n  | \"D+1\"\n  | \"A+1\"\n  | \"D-1\"\n  | \"A-1\"\n  | \"D+A\"\n  | \"D-A\"\n  | \"D-M\"\n  | \"A-D\"\n  | \"D&A\"\n  | \"D&M\"\n  | \"D|A\"\n  | \"D|M\";\n\nexport type COMMANDS_OP =\n  | 0b101010\n  | 0b111111\n  | 0b111010\n  | 0b001100\n  | 0b110000\n  | 0b110000\n  | 0b001101\n  | 0b110001\n  | 0b001111\n  | 0b110011\n  | 0b011111\n  | 0b110111\n  | 0b001110\n  | 0b110010\n  | 0b000010\n  | 0b010011\n  | 0b010011\n  | 0b000111\n  | 0b000000\n  | 0b000000\n  | 0b010101\n  | 0b010101;\n\nexport const COMMANDS: {\n  asm: Record<COMMANDS_ASM, COMMANDS_OP>;\n  op: Record<COMMANDS_OP, COMMANDS_ASM>;\n} = {\n  asm: {\n    \"0\": 0b101010, // 42 0x2A\n    \"1\": 0b111111, // 63 0x3F\n    \"-1\": 0b111010, // 58 0x3A\n    D: 0b001100, // 12 0x0C\n    A: 0b110000, // 48 0x30\n    M: 0b110000, // 48 0x30\n    \"!D\": 0b001101, // 13 0x0D\n    \"!A\": 0b110001, // 49 0x31\n    \"-D\": 0b001111, // 15 0x0F\n    \"-A\": 0b110011, // 51 0x33\n    \"D+1\": 0b011111, // 31 0x1F\n    \"A+1\": 0b110111, // 55 0x37\n    \"D-1\": 0b001110, // 14 0x0E\n    \"A-1\": 0b110010, // 50 0x32\n    \"D+A\": 0b000010, //  2 0x02\n    \"D-A\": 0b010011, // 19 0x13\n    \"D-M\": 0b010011, // 19 0x13\n    \"A-D\": 0b000111, //  7 0x07\n    \"D&A\": 0b000000, //  0 0x00\n    \"D&M\": 0b000000, //  0 0x00\n    \"D|A\": 0b010101, // 21 0x15\n    \"D|M\": 0b010101, // 21 0x15\n  },\n  op: {\n    0x2a: \"0\",\n    0x3f: \"1\",\n    0x3a: \"-1\",\n    0x0c: \"D\",\n    0x30: \"A\",\n    0x0d: \"!D\",\n    0x31: \"!A\",\n    0x0f: \"-D\",\n    0x33: \"-A\",\n    0x1f: \"D+1\",\n    0x37: \"A+1\",\n    0x0e: \"D-1\",\n    0x32: \"A-1\",\n    0x02: \"D+A\",\n    0x13: \"D-A\",\n    0x07: \"A-D\",\n    0x00: \"D&A\",\n    0x15: \"D|A\",\n  },\n};\n\nexport type ASSIGN_ASM = \"\" | \"M\" | \"D\" | \"MD\" | \"A\" | \"AM\" | \"AD\" | \"AMD\";\nexport type ASSIGN_OP = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;\n\nexport const ASSIGN: {\n  asm: Record<ASSIGN_ASM, ASSIGN_OP>;\n  op: Record<ASSIGN_OP, ASSIGN_ASM>;\n} = {\n  asm: {\n    \"\": 0x0,\n    M: 0b001,\n    D: 0b010,\n    MD: 0b011,\n    A: 0b100,\n    AM: 0b101,\n    AD: 0b110,\n    AMD: 0b111,\n  },\n  op: {\n    0x0: \"\",\n    0x1: \"M\",\n    0x2: \"D\",\n    0x3: \"MD\",\n    0x4: \"A\",\n    0x5: \"AM\",\n    0x6: \"AD\",\n    0x7: \"AMD\",\n  },\n};\n\nexport type JUMP_ASM =\n  | \"\"\n  | \"JGT\"\n  | \"JEQ\"\n  | \"JGE\"\n  | \"JLT\"\n  | \"JNE\"\n  | \"JLE\"\n  | \"JMP\";\nexport type JUMP_OP = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;\nexport const JUMP: {\n  asm: Record<JUMP_ASM, JUMP_OP>;\n  op: Record<JUMP_OP, JUMP_ASM>;\n} = {\n  asm: {\n    \"\": 0b0,\n    JGT: 0b001,\n    JEQ: 0b010,\n    JGE: 0b011,\n    JLT: 0b100,\n    JNE: 0b101,\n    JLE: 0b110,\n    JMP: 0b111,\n  },\n  op: {\n    0x0: \"\",\n    0x1: \"JGT\",\n    0x2: \"JEQ\",\n    0x3: \"JGE\",\n    0x4: \"JLT\",\n    0x5: \"JNE\",\n    0x6: \"JLE\",\n    0x7: \"JMP\",\n  },\n};\n\nexport const Flags = {\n  0x01: \"Positive\",\n  0x00: \"Zero\",\n  0x0f: \"Negative\",\n  Positive: 0x01,\n  Zero: 0x00,\n  Negative: 0x0f,\n};\n\nexport function alu(op: number, d: number, a: number): [number, number] {\n  let o = 0;\n  switch (op) {\n    case 0x2a:\n      o = 0;\n      break;\n    case 0x3f:\n      o = 1;\n      break;\n    case 0x3a:\n      o = -1;\n      break;\n    case 0x0c:\n      o = d;\n      break;\n    case 0x30:\n      o = a;\n      break;\n    case 0x0d:\n      o = ~d;\n      break;\n    case 0x31:\n      o = ~a;\n      break;\n    case 0x0f:\n      o = -d;\n      break;\n    case 0x33:\n      o = -a;\n      break;\n    case 0x1f:\n      o = d + 1;\n      break;\n    case 0x37:\n      o = a + 1;\n      break;\n    case 0x0e:\n      o = d - 1;\n      break;\n    case 0x32:\n      o = a - 1;\n      break;\n    case 0x02:\n      o = d + a;\n      break;\n    case 0x13:\n      o = d - a;\n      break;\n    case 0x07:\n      o = a - d;\n      break;\n    case 0x00:\n      o = d & a;\n      break;\n    case 0x15:\n      o = d | a;\n      break;\n  }\n\n  o = o & 0xffff;\n  const flags =\n    o === 0 ? Flags.Zero : o & 0x8000 ? Flags.Negative : Flags.Positive;\n  return [o, flags];\n}\n\nexport function alua(op: number, d: number, a: number): [number, number] {\n  if (op & 0b100000) d = 0;\n  if (op & 0b010000) d = ~d & 0xffff;\n  if (op & 0b001000) a = 0;\n  if (op & 0b000100) a = ~a & 0xffff;\n\n  let o = (op & 0b000010 ? d + a : d & a) & 0xffff;\n  if (op & 0b000001) o = ~o & 0xffff;\n\n  const flags =\n    o === 0 ? Flags.Zero : o & 0x8000 ? Flags.Negative : Flags.Positive;\n  return [o, flags];\n}\n","import { alu, COMMANDS_OP, Flags } from \"./alu.js\";\nimport { Memory } from \"./memory.js\";\n\nexport interface CPUInput {\n  inM: number;\n  instruction: number;\n  reset: boolean;\n}\n\nexport interface CPUOutput {\n  outM: number;\n  writeM: boolean;\n  addressM: number;\n}\n\nexport interface CPUState {\n  A: number;\n  D: number;\n  PC: number;\n  ALU: number;\n  flag: number;\n}\n\nexport function emptyState(): CPUState {\n  return { A: 0, D: 0, PC: 0, ALU: 0, flag: Flags.Zero };\n}\n\nconst BITS = {\n  c: 0b1000_0000_0000_0000,\n  x1: 0b1001_0000_0000_0000,\n  x2: 0b1001_0000_0000_0000,\n  am: 0b1001_0000_0000_0000,\n  op: 0b0000_1111_1100_0000,\n  d1: 0b1000_0000_0010_0000,\n  d2: 0b1000_0000_0001_0000,\n  d3: 0b1000_0000_0000_1000,\n  j1: 0b1000_0000_0000_0001,\n  j2: 0b1000_0000_0000_0010,\n  j3: 0b1000_0000_0000_0100,\n};\n\nexport function decode(instruction: number) {\n  function bit(bit: number): boolean {\n    return (instruction & bit) === bit;\n  }\n  const bits = {\n    c: bit(BITS.c),\n    x1: bit(BITS.x1),\n    x2: bit(BITS.x2),\n    am: bit(BITS.am),\n    op: ((instruction & BITS.op) >> 6) as COMMANDS_OP,\n    d1: bit(BITS.d1),\n    d2: bit(BITS.d2),\n    d3: bit(BITS.d3),\n    j1: bit(BITS.j1),\n    j2: bit(BITS.j2),\n    j3: bit(BITS.j3),\n  };\n\n  return bits;\n}\n\nexport function cpuTick(\n  { inM, instruction }: CPUInput,\n  { A, D, PC }: CPUState\n): [CPUState, boolean] {\n  const bits = decode(instruction);\n  const a = bits.am ? inM : A;\n  const [ALU, flag] = alu(bits.op, D, a);\n\n  return [{ A, D, PC: PC + 1, ALU, flag }, bits.d3];\n}\n\nexport function cpuTock(\n  { inM, instruction, reset }: CPUInput,\n  { A, D, PC, ALU, flag }: CPUState\n): [CPUOutput, CPUState] {\n  const bits = decode(instruction);\n\n  const j1 = bits.j1 && flag === Flags.Positive;\n  const j2 = bits.j2 && flag === Flags.Zero;\n  const j3 = bits.j3 && flag === Flags.Negative;\n  const jmp = j1 || j2 || j3;\n\n  PC = reset ? 0 : jmp ? A : PC;\n\n  if (bits.d2) {\n    D = ALU;\n  }\n\n  if (!bits.c) {\n    A = instruction & 0x7fff;\n  } else if (bits.d1) {\n    A = ALU;\n  }\n\n  const a = bits.am ? inM : A;\n  const alu2 = alu(bits.op, D, a);\n\n  ALU = alu2[0];\n  flag = alu2[1];\n\n  const output: CPUOutput = {\n    addressM: A,\n    outM: ALU,\n    writeM: bits.d3,\n  };\n\n  const state: CPUState = {\n    A,\n    D,\n    ALU,\n    flag,\n    PC,\n  };\n\n  return [output, state];\n}\n\nexport function cpu(input: CPUInput, state: CPUState): [CPUOutput, CPUState] {\n  const [tickState, _writeM] = cpuTick(input, state);\n  return cpuTock(input, tickState);\n}\n\nexport class CPU {\n  RAM: Memory;\n  ROM: Memory;\n\n  #pc = 0;\n  #a = 0;\n  #d = 0;\n\n  #tickState: CPUState = {\n    A: 0,\n    D: 0,\n    PC: 0,\n    ALU: 0,\n    flag: Flags.Zero,\n  };\n\n  get state(): CPUState {\n    return this.#tickState;\n  }\n\n  get PC() {\n    return this.#pc;\n  }\n\n  get A() {\n    return this.#a;\n  }\n\n  get D() {\n    return this.#d;\n  }\n\n  constructor({\n    RAM = new Memory(0x7fff),\n    ROM,\n  }: {\n    RAM?: Memory;\n    ROM: Memory;\n  }) {\n    this.RAM = RAM;\n    this.ROM = ROM;\n  }\n\n  reset() {\n    this.#pc = 0;\n    this.#a = 0;\n    this.#d = 0;\n  }\n\n  tick() {\n    const [{ addressM, outM, writeM }, { A, D, PC }] = cpu(\n      {\n        inM: this.RAM.get(this.#a),\n        instruction: this.ROM.get(this.#pc),\n        reset: false,\n      },\n      {\n        A: this.#a,\n        D: this.#d,\n        PC: this.#pc,\n        ALU: this.#d,\n        flag: Flags.Zero,\n      }\n    );\n\n    this.#a = A;\n    this.#d = D;\n    this.#pc = PC;\n\n    if (writeM) {\n      this.RAM.set(addressM, outM);\n    }\n  }\n}\n","import { assert } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport { Subject } from \"rxjs\";\nimport { op } from \"../util/asm.js\";\nimport { int10, int16, int2 } from \"../util/twos.js\";\nimport { load } from \"../fs.js\";\n\nexport const FORMATS = [\"bin\", \"dec\", \"hex\", \"asm\"];\nexport type Format = typeof FORMATS[number];\n\nexport const SCREEN = 0x4000;\nexport const SCREEN_ROWS = 512;\nexport const SCREEN_COLS = 256;\nexport const KEYBOARD = 0x6000;\n\nexport class Memory {\n  #memory: Int16Array;\n  updates = new Subject<void>();\n\n  get size(): number {\n    return this.#memory.length;\n  }\n\n  constructor(memory: ArrayBuffer | number) {\n    if (typeof memory === \"number\") {\n      this.#memory = new Int16Array(memory);\n    } else {\n      this.#memory = new Int16Array(memory);\n    }\n  }\n\n  get(index: number): number {\n    if (index < 0 || index >= this.size) {\n      return 0xffff;\n    }\n    return this.#memory[index] ?? 0;\n  }\n\n  set(index: number, value: number): void {\n    if (index >= 0 && index < this.size) {\n      this.#memory[index] = value & 0xffff;\n    }\n  }\n\n  update(cell: number, value: string, format: Format) {\n    let current: number;\n    switch (format) {\n      case \"asm\":\n        current = op(value);\n        break;\n      case \"bin\":\n        current = int2(value);\n        break;\n      case \"hex\":\n        current = int16(value);\n        break;\n      case \"dec\":\n      default:\n        current = int10(value);\n        break;\n    }\n\n    if (isFinite(current) && current <= 0xffff) {\n      this.set(cell, current);\n      this.updates.next();\n    }\n  }\n\n  async load(fs: FileSystem, path: string) {\n    try {\n      (await load(fs, path)).map((v, i) => this.set(i, v));\n    } catch (cause) {\n      // throw new Error(`ROM32K Failed to load file ${path}`, { cause });\n      throw new Error(`Memory Failed to load file ${path}`);\n    }\n  }\n\n  range(start = 0, end = this.size): number[] {\n    return [...this.#memory.slice(start, end)];\n  }\n\n  *map<T>(\n    fn: (index: number, value: number) => T,\n    start = 0,\n    end = this.size\n  ): Iterable<T> {\n    assert(start < end);\n    for (let i = start; i < end; i++) {\n      yield fn(i, this.get(i));\n    }\n  }\n}\n","const asm = `\nASM <: Base {\n  Root := ASM\n  ASM = Instruction*\n  \n  Instruction = Label|AInstruction|CInstruction\n  \n  Label = OpenParen identifier closeParen\n  AInstruction = at (identifier | decNumber)\n  CInstruction = assign? op jmp?\n  \n  assign = (\n      \"AMD\"\n      | \"AM\"\n      | \"AD\"\n      | \"MD\"\n      | \"M\"\n      | \"D\"\n      | \"A\"\n      ) equal\n      \n  op =\n      | \"0\" | \"1\" | \"-1\"\n      | \"!D\" | \"!A\" | \"!M\"\n      | \"-D\" | \"-A\" | \"-M\"\n      | \"D+1\" | \"A+1\" | \"M+1\"\n      | \"D-1\" | \"A-1\" | \"M-1\"\n      | \"D+A\" | \"D+M\"\n      | \"D-A\" | \"D-M\"\n      | \"A-D\" | \"M-D\"\n      | \"D&A\" | \"D&M\"\n      | \"D|A\" | \"D|M\"\n      | \"D\" | \"A\" | \"M\"\n\n\n  jmp = semi (\"JGT\" | \"JEQ\" | \"JGE\" | \"JLT\" | \"JNE\" | \"JLE\" | \"JMP\")\n}`;\nexport default asm;\n","import { assertExists } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport ohm from \"ohm-js\";\nimport {\n  ASSIGN,\n  ASSIGN_ASM,\n  ASSIGN_OP,\n  COMMANDS,\n  COMMANDS_ASM,\n  COMMANDS_OP,\n  JUMP,\n  JUMP_ASM,\n  JUMP_OP,\n} from \"../cpu/alu.js\";\nimport { KEYBOARD, SCREEN } from \"../cpu/memory.js\";\nimport { makeC } from \"../util/asm.js\";\nimport { grammars, makeParser, baseSemantics } from \"./base.js\";\n\nimport asmGrammar from \"./grammars/asm.ohm.js\";\n\nexport const grammar = ohm.grammar(asmGrammar, grammars);\nexport const asmSemantics = grammar.extendSemantics(baseSemantics);\n\nexport interface Asm {\n  instructions: AsmInstruction[];\n}\n\nexport type AsmInstruction =\n  | AsmAInstruction\n  | AsmCInstruction\n  | AsmLabelInstruction;\n\nexport type AsmAInstruction = AsmALabelInstruction | AsmAValueInstruction;\nexport interface AsmALabelInstruction {\n  type: \"A\";\n  label: string;\n}\n\nexport interface AsmAValueInstruction {\n  type: \"A\";\n  value: number;\n}\n\nfunction isALabelInstruction(\n  inst: AsmAInstruction\n): inst is AsmALabelInstruction {\n  return (inst as AsmALabelInstruction).label !== undefined;\n}\n\nexport interface AsmCInstruction {\n  type: \"C\";\n  op: COMMANDS_OP;\n  isM: boolean;\n  store?: ASSIGN_OP;\n  jump?: JUMP_OP;\n}\n\nexport interface AsmLabelInstruction {\n  type: \"L\";\n  label: string;\n}\n\nasmSemantics.addAttribute<Asm>(\"root\", {\n  Root(_) {\n    return this.asm;\n  },\n});\n\nasmSemantics.addAttribute<Asm>(\"asm\", {\n  Root(asm) {\n    return {\n      instructions: asm\n        .child(0)\n        .children.map(({ instruction }) => instruction as AsmInstruction),\n    };\n  },\n});\n\nasmSemantics.addAttribute<AsmInstruction>(\"instruction\", {\n  AInstruction(_at, val): AsmAInstruction {\n    try {\n      return {\n        type: \"A\",\n        label: val.name,\n      };\n    } catch (e) {\n      // Pass\n    }\n\n    try {\n      return {\n        type: \"A\",\n        value: val.value,\n      };\n    } catch (e) {\n      // pass\n    }\n\n    throw new Error(`AsmAInstruction must have either a name or a value`);\n  },\n  CInstruction(assignN, opN, jmpN): AsmCInstruction {\n    const assign = assignN.child(0)?.child(0)?.sourceString as ASSIGN_ASM;\n    const op = opN.sourceString.replace(\"M\", \"A\") as COMMANDS_ASM;\n    const jmp = jmpN.child(0)?.child(1)?.sourceString as JUMP_ASM;\n    const isM =\n      assignN.sourceString.includes(\"M\") || opN.sourceString.includes(\"M\");\n    const inst: AsmCInstruction = {\n      type: \"C\",\n      op: COMMANDS.asm[op],\n      isM,\n    };\n    if (jmp) inst.jump = JUMP.asm[jmp];\n    if (assign) inst.store = ASSIGN.asm[assign];\n    return inst;\n  },\n  Label(_o, { name }, _c): AsmLabelInstruction {\n    return {\n      type: \"L\",\n      label: name,\n    };\n  },\n});\n\nexport function fillLabel(asm: Asm) {\n  let nextLabel = 16;\n  const symbols = new Map<string, number>([\n    [\"R0\", 0],\n    [\"R1\", 1],\n    [\"R2\", 2],\n    [\"R3\", 3],\n    [\"R4\", 4],\n    [\"R5\", 5],\n    [\"R6\", 6],\n    [\"R7\", 7],\n    [\"R8\", 8],\n    [\"R9\", 9],\n    [\"R10\", 10],\n    [\"R11\", 11],\n    [\"R12\", 12],\n    [\"R13\", 13],\n    [\"R14\", 14],\n    [\"R15\", 15],\n    [\"SP\", 0],\n    [\"LCL\", 1],\n    [\"ARG\", 2],\n    [\"THIS\", 3],\n    [\"THAT\", 4],\n    [\"SCREEN\", SCREEN],\n    [\"KBD\", KEYBOARD],\n  ]);\n\n  function getLabelValue(label: string) {\n    if (!symbols.has(label)) {\n      symbols.set(label, nextLabel);\n      nextLabel += 1;\n    }\n    return assertExists(symbols.get(label), `Label not in symbols: ${label}`);\n  }\n\n  function transmuteAInstruction(instruction: AsmALabelInstruction) {\n    const value = getLabelValue(instruction.label);\n    (instruction as unknown as AsmAValueInstruction).value = value;\n    delete (instruction as unknown as { label: undefined }).label;\n  }\n\n  const unfilled: AsmALabelInstruction[] = [];\n  let line = 0;\n  for (const instruction of asm.instructions) {\n    if (instruction.type === \"L\") {\n      if (symbols.has(instruction.label)) {\n        throw new Error(`ASM Duplicate label ${instruction.label}`);\n      } else {\n        symbols.set(instruction.label, line);\n      }\n      continue;\n    }\n\n    line += 1;\n\n    if (instruction.type === \"A\") {\n      if (isALabelInstruction(instruction)) {\n        unfilled.push(instruction);\n      }\n    }\n  }\n\n  unfilled.forEach(transmuteAInstruction);\n}\n\nexport function emit(asm: Asm): number[] {\n  return asm.instructions\n    .map((inst) => {\n      if (inst.type === \"A\") {\n        if (isALabelInstruction(inst)) {\n          throw new Error(`ASM Emitting unfilled A instruction`);\n        }\n        return inst.value;\n      }\n      if (inst.type === \"C\") {\n        return makeC(inst.isM, inst.op, inst.store, inst.jump);\n      }\n      return undefined;\n    })\n    .filter((op): op is number => op !== undefined);\n}\n\nexport const ASM = {\n  grammar: asmGrammar,\n  semantics: asmSemantics,\n  parser: grammar,\n  parse: makeParser<Asm>(grammar, asmSemantics),\n  passes: {\n    fillLabel,\n    emit,\n  },\n};\n","import { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport { unwrap } from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { ASM } from \"./languages/asm.js\";\nimport { int2 } from \"./util/twos.js\";\n\nexport async function load(fs: FileSystem, path: string): Promise<number[]> {\n  if (path.endsWith(\".hack\")) {\n    return loadHack(fs, path);\n  }\n\n  if (path.endsWith(\".asm\")) {\n    return loadAsm(fs, path);\n  }\n\n  throw new Error(`Cannot load file without hack or asm extension ${path}`);\n}\n\nexport async function loadAsm(fs: FileSystem, path: string): Promise<number[]> {\n  const source = await fs.readFile(path);\n  const asm = unwrap(ASM.parse(source));\n  ASM.passes.fillLabel(asm);\n  return ASM.passes.emit(asm);\n}\n\nexport async function loadHack(\n  fs: FileSystem,\n  path: string\n): Promise<number[]> {\n  return (await fs.readFile(path))\n    .split(\"\\n\")\n    .filter((line) => line.trim() !== \"\")\n    .map(int2);\n}\n","import ohm from \"ohm-js\";\nimport { int10, int16, int2 } from \"../util/twos.js\";\nimport { Err, Ok, Result } from \"@davidsouther/jiffies/lib/esm/result.js\";\n\nexport const UNKNOWN_PARSE_ERROR = `Unknown parse error`;\n\nimport baseGrammar from \"./grammars/base.ohm.js\";\nexport const grammars = {\n  Base: ohm.grammar(baseGrammar),\n};\n\nexport const baseSemantics = grammars.Base.createSemantics();\n\nbaseSemantics.extendOperation(\"asIteration\", {\n  List(list, _) {\n    return list.asIteration();\n  },\n});\n\nbaseSemantics.addAttribute(\"value\", {\n  decNumber(_, digits): number {\n    return int10(digits.sourceString);\n  },\n  wholeDec(_, digits): number {\n    return int10(digits.sourceString);\n  },\n  binNumber(_, digits) {\n    return int2(digits.sourceString);\n  },\n  hexNumber(_, digits) {\n    return int16(digits.sourceString);\n  },\n  Number(num) {\n    return num.value;\n  },\n  Name(ident) {\n    return ident.name;\n  },\n  identifier(_, __): string {\n    return this.sourceString;\n  },\n});\n\nbaseSemantics.addAttribute(\"name\", {\n  identifier(_, __): string {\n    return this.sourceString;\n  },\n  Name(_): string {\n    return this.child(0)?.name;\n  },\n});\n\nbaseSemantics.addAttribute(\"String\", {\n  String(_a, str, _b) {\n    return str.sourceString;\n  },\n});\n\nexport type ParseError = Error | { message: string; shortMessage: string };\n\nexport function makeParser<ResultType>(\n  grammar: ohm.Grammar,\n  semantics: ohm.Semantics,\n  property: (obj: ohm.Dict) => ResultType = ({ root }) => root\n): (source: string) => Result<ResultType, ParseError> {\n  return function parse(source) {\n    try {\n      const match = grammar.match(source);\n      if (match.succeeded()) {\n        const parsed = semantics(match);\n        const parse = property(parsed);\n        return Ok(parse);\n      } else {\n        return Err({\n          message: match.message ?? UNKNOWN_PARSE_ERROR,\n          shortMessage: match.shortMessage ?? UNKNOWN_PARSE_ERROR,\n        });\n      }\n    } catch (e) {\n      return Err(e as Error);\n    }\n  };\n}\n\nexport interface Span {\n  start: number;\n  end: number;\n}\n","const base = `\nBase {\n  Root = Value*\n\n  At = at\n  Bang = bang\n  Bar = bar\n  CloseAngle = closeAngle\n  CloseBrace = closeBrace\n  CloseParen = closeParen\n  CloseSquare = closeSquare\n  Comma = comma\n  Dollar = dollar\n  Dot = dot\n  DoubleQuote = doubleQuote\n  Equal = equal\n  OpenAngle = openAngle\n  OpenBrace = openBrace\n  OpenParen = openParen\n  OpenSquare = openSquare\n  Percent = percent\n  Semi = semi\n  Underscore = underscore\n\n  at = \"@\"\n  bang = \"!\"\n  bar = \"|\"\n  closeAngle = \">\"\n  closeBrace = \"}\"\n  closeParen = \")\"\n  closeSquare = \"]\"\n  comma = \",\"\n  dollar = \"$\"\n  dot = \".\"\n  doubleQuote = \"\\\\\"\"\n  equal = \"=\"\n  minus = \"-\"\n  newline = \"\\\\r\"? \"\\\\n\"\n  openAngle = \"<\"\n  openBrace = \"{\"\n  openParen = \"(\"\n  openSquare = \"[\"\n  percent = \"%\"\n  semi = \";\"\n  underscore = \"_\"\n\n  Value = identifier | number | boolean\n\n  boolean = true | false\n  True = true\n  False = false\n  true = \"true\"\n  false = \"false\"\n\n  Name = identifier\n  identifier = (letter|underscore) (alnum|underscore|dot|dollar)*\n\n  Number = number\n  number = hexNumber | decNumber | binNumber\n  binNumber = (\"%B\") (\"0\"|\"1\")+\n  hexNumber = (\"%X\") hexDigit+\n  decNumber = (\"%D\")? (wholeDec | realDec)\n  wholeDec = minus? digit+\n  realDec = minus? digit* \".\" digit+\n\n  String = DoubleQuote (~doubleQuote any)* doubleQuote\n  \n  spaces := (lineComment | comment | space)*\n  commentStart = \"/*\"\n  commentEnd = \"*/\"\n  comment = commentStart (~commentEnd any)* commentEnd\n  lineCommentStart = \"//\"\n  lineComment = lineCommentStart (~\"\\\\n\" any)* \"\\\\n\"\n\n  List<elem, sep> = NonemptyListOf<elem, sep> sep?\n  EmptyList<elem, sep> = EmptyList<elem, sep> sep?\n}`;\nexport default base;\n","const cmp = `\nCmp <: Base {\n  Root := line*\n  line = bar cell+ newline?\n  cell = cellvalue bar\n  cellvalue = (~(bar|newline) any)*\n}`;\nexport default cmp;\n","import ohm from \"ohm-js\";\nimport { grammars, makeParser, baseSemantics } from \"./base.js\";\n\nexport type Cell = string;\nexport type Line = Cell[];\nexport type Cmp = Line[];\n\nimport cmpGrammar from \"./grammars/cmp.ohm.js\";\nexport const grammar = ohm.grammar(cmpGrammar, grammars);\nexport const cmpSemantics = grammar.extendSemantics(baseSemantics);\n\ncmpSemantics.addAttribute<Cell>(\"cell\", {\n  cell(value, _) {\n    return value.sourceString;\n  },\n});\n\ncmpSemantics.addAttribute<Line>(\"line\", {\n  line(_a, cells, _b) {\n    return cells.children.map((c) => c.cell);\n  },\n});\n\ncmpSemantics.addAttribute<Cmp>(\"root\", {\n  Root(lines) {\n    return lines.children.map((c) => c.line);\n  },\n});\n\nexport const CMP = {\n  grammar: cmpGrammar,\n  semantics: cmpSemantics,\n  parser: grammar,\n  parse: makeParser<Cmp>(grammar, cmpSemantics),\n};\n","const hdl = `\nHdl <: Base{\n  Root := Chip\n  Chip = \"CHIP\" Name OpenBrace ChipBody CloseBrace\n  ChipBody = InList? OutList? PartList ClockedList?\n  InList = \"IN\" PinList Semi\n  OutList = \"OUT\" PinList Semi\n  PartList = BuiltinPart | Parts\n  PinList = List<PinDecl, Comma>\n  PinDecl = Name PinWidth?\n  PinWidth = OpenSquare decNumber CloseSquare\n  BuiltinPart = \"BUILTIN\" Semi\n  Parts = \"PARTS:\" Part*\n  Part = Name \"(\" Wires \")\" Semi\n  Wires = List<Wire, Comma>\n  Wire = WireSide Equal (WireSide | True | False) \n  WireSide = Name SubBus? \n  SubBus = OpenSquare decNumber subBusRest? CloseSquare\n  subBusRest = \"..\" decNumber\n  ClockedList = \"CLOCKED\" SimplePinList Semi\n  SimplePinList = List<Name, Comma>\n}`;\nexport default hdl;\n","/** Reads and parses HDL chip descriptions. */\nimport ohm from \"ohm-js\";\nimport { grammars, baseSemantics } from \"./base.js\";\nimport { makeParser } from \"./base.js\";\n\nexport interface PinIndex {\n  start?: number | undefined;\n  end?: number | undefined;\n}\n\nexport interface PinParts extends PinIndex {\n  pin: string;\n}\n\nexport interface PinDeclaration {\n  pin: string | string;\n  width: number;\n}\n\nexport interface Wire {\n  lhs: PinParts;\n  rhs: PinParts;\n}\n\nexport interface Part {\n  name: string;\n  wires: Wire[];\n}\n\nexport interface HdlParse {\n  name: string;\n  ins: PinDeclaration[];\n  outs: PinDeclaration[];\n  clocked: string[];\n  parts: \"BUILTIN\" | Part[];\n}\n\nimport hdlGrammar from \"./grammars/hdl.ohm.js\";\nexport const grammar = ohm.grammar(hdlGrammar, grammars);\n\nexport const hdlSemantics = grammar.extendSemantics(baseSemantics);\n\nhdlSemantics.addAttribute<PinIndex>(\"SubBus\", {\n  SubBus(_a, startNode, endNode, _b) {\n    const start = startNode.value;\n    const end = endNode.child(0)?.child(1)?.value ?? start;\n    return { start, end };\n  },\n});\n\nhdlSemantics.addAttribute<PinParts>(\"WireSide\", {\n  WireSide({ name }, index) {\n    const { start, end } = (index.child(0)?.SubBus as PinIndex) ?? {\n      start: undefined,\n      end: undefined,\n    };\n    return { pin: name, start, end };\n  },\n});\n\nhdlSemantics.addAttribute<Wire>(\"Wire\", {\n  Wire(left, _, right) {\n    const rhs: PinParts = right.isTerminal()\n      ? { pin: right.sourceString }\n      : right.WireSide;\n    return { lhs: left.WireSide as PinParts, rhs };\n  },\n});\n\nhdlSemantics.addAttribute<Wire[]>(\"Wires\", {\n  Wires(list) {\n    return list.asIteration().children.map((node) => node.Wire as Wire);\n  },\n});\n\nhdlSemantics.addAttribute<Part>(\"Part\", {\n  Part({ name }, _a, { Wires }, _b, _c) {\n    return { name: name as string, wires: Wires as Wire[] };\n  },\n});\n\nhdlSemantics.addAttribute<Part[] | \"BUILTIN\">(\"Parts\", {\n  Parts(_, parts) {\n    return parts.children.map((c) => c.Part);\n  },\n  BuiltinPart(_a, _b) {\n    return \"BUILTIN\";\n  },\n});\n\nhdlSemantics.addAttribute<\"BUILTIN\" | Part[]>(\"PartList\", {\n  PartList(list) {\n    return list.Parts;\n  },\n});\n\nhdlSemantics.addAttribute<string[]>(\"Clocked\", {\n  ClockedList(_a, clocked, _b) {\n    return (\n      clocked\n        .asIteration()\n        .children.map(\n          ({ sourceString }: { sourceString: string }) => sourceString\n        ) ?? []\n    );\n  },\n});\n\nhdlSemantics.addAttribute<PinDeclaration>(\"PinDecl\", {\n  PinDecl({ name }, width) {\n    return {\n      pin: name,\n      width: width.child(0)?.child(1)?.value ?? 1,\n    };\n  },\n});\n\nhdlSemantics.addAttribute<PinDeclaration[]>(\"PinList\", {\n  PinList(list) {\n    return list\n      .asIteration()\n      .children.map((node) => node.PinDecl as PinDeclaration);\n  },\n});\n\nhdlSemantics.addAttribute<HdlParse>(\"Chip\", {\n  Chip(_a, { name }, _b, body, _c) {\n    return {\n      name,\n      ins: body.child(0).child(0)?.child(1)?.PinList ?? [],\n      outs: body.child(1).child(0)?.child(1)?.PinList ?? [],\n      parts: body.child(2).PartList ?? [],\n      clocked: body.child(3).child(0)?.Clocked,\n    };\n  },\n});\n\nhdlSemantics.addAttribute<HdlParse>(\"Root\", {\n  Root(root) {\n    return root.child(0)?.Chip;\n  },\n});\n\nexport const HDL = {\n  parser: grammar,\n  grammar: hdlGrammar,\n  semantics: hdlSemantics,\n  parse: makeParser<HdlParse>(grammar, hdlSemantics, (n) => n.Chip),\n};\n","const tst = `\nTst <: Base {\n  Root := Tst\n  Tst = (TstStatement | TstRepeat | TstWhile)+\n\n  TstRepeat = Repeat Number? OpenBrace TstStatement+ CloseBrace\n  TstWhile = While Condition OpenBrace TstStatement+ CloseBrace\n  TstStatement = List<TstOperation, \",\"> (Semi | Bang)\n\n  TstOperation =\n    | TstFileOperation\n    | TstOutputListOperation\n    | TstEvalOperation\n    | TstSetOperation\n    | TstOutputOperation\n    | TstEchoOperation\n    | TstClearEchoOperation\n    | TstLoadROMOperation\n\n  TstLoadROMOperation = ROM32K Load FileName\n  TstFileOperation = FileOperation FileName\n  TstOutputListOperation = \"output-list\" OutputFormat+\n  OutputFormat = Name Index? percent FormatStyle wholeDec dot wholeDec dot wholeDec\n  TstSetOperation = Set Name Index? Number\n  Index = OpenSquare wholeDec? CloseSquare\n  Condition = Value CompareOp Value\n  TstEvalOperation = Eval | Tick | Tock\n  TstOutputOperation = Output\n  TstEchoOperation = Echo String\n  TstClearEchoOperation = ClearEcho\n\n  FileName = Name\n  FileOperation = \"load\" | \"output-file\" | \"compare-to\"\n\n  Set = \"set\"\n  Eval = \"eval\"\n  Tick = \"tick\"\n  Tock = \"tock\"\n  Echo = \"echo\"\n  Repeat = \"repeat\"\n  ClearEcho = \"clear-echo\"\n  Output = \"output\"\n  OutputList = \"output-list\"\n  FormatStyle = \"B\"|\"D\"|\"S\"|\"X\"\n  ROM32K = \"ROM32K\"\n  Load = \"load\"\n  While = \"while\"\n\n  CompareOp = \"<>\" | \"<=\" | \">=\" | \"=\" | \"<\" | \">\"\n}`;\nexport default tst;\n","/** Reads tst files to apply and perform test runs. */\n\nimport ohm from \"ohm-js\";\nimport { baseSemantics, grammars, makeParser, Span } from \"./base.js\";\n\nexport interface TstEchoOperation {\n  op: \"echo\";\n  message: string;\n}\n\nexport interface TstClearEchoOperation {\n  op: \"clear-echo\";\n}\n\nexport interface TstSetOperation {\n  op: \"set\";\n  id: string;\n  index?: number;\n  value: number;\n}\n\nexport interface TstEvalOperation {\n  op: \"eval\" | \"tick\" | \"tock\";\n}\n\nexport interface TstOutputOperation {\n  op: \"output\";\n}\n\nexport interface TstOutputSpec {\n  id: string;\n  builtin: boolean;\n  address: number;\n  style: \"D\" | \"X\" | \"B\" | \"S\";\n  width: number;\n  lpad: number;\n  rpad: number;\n}\n\nexport interface TstOutputListOperation {\n  op: \"output-list\";\n  spec: TstOutputSpec[];\n}\n\nexport interface TstLoadROMOperation {\n  op: \"loadRom\";\n  file: string;\n}\n\nexport interface TstFileOperation {\n  op: \"load\" | \"output-file\" | \"compare-to\";\n  file: string;\n}\n\nexport type TstOperation =\n  | TstFileOperation\n  | TstEvalOperation\n  | TstEchoOperation\n  | TstClearEchoOperation\n  | TstOutputOperation\n  | TstSetOperation\n  | TstOutputListOperation\n  | TstLoadROMOperation;\n\nexport interface TstLineStatement {\n  ops: TstOperation[];\n  break?: true;\n  span: Span;\n}\n\nexport interface TstRepeat {\n  statements: TstLineStatement[];\n  count: number;\n  span: Span;\n}\n\nexport interface TstWhileCondition {\n  op: \"<\" | \"<=\" | \"=\" | \">=\" | \">\" | \"<>\";\n  left: string | number;\n  right: string | number;\n}\n\nexport interface TstWhileStatement {\n  statements: TstLineStatement[];\n  condition: TstWhileCondition;\n  span: Span;\n}\n\nexport type TstStatement = TstLineStatement | TstRepeat | TstWhileStatement;\n\nexport interface Tst {\n  lines: TstStatement[];\n}\n\nimport tstGrammar from \"./grammars/tst.ohm.js\";\nexport const grammar = ohm.grammar(tstGrammar, grammars);\nexport const tstSemantics = grammar.extendSemantics(baseSemantics);\n\ntstSemantics.extendAttribute<number>(\"value\", {\n  Index(_a, idx, _b) {\n    return idx?.child(0)?.value ?? -1;\n  },\n});\n\ntstSemantics.extendAttribute<string>(\"name\", {\n  FileName({ name }) {\n    return name;\n  },\n});\n\ntstSemantics.addAttribute<number>(\"index\", {\n  Index(_open, dec, _close) {\n    return dec.child(0)?.value ?? 0;\n  },\n});\n\ntstSemantics.addAttribute<TstOutputSpec>(\"format\", {\n  OutputFormat(\n    { name: id },\n    index,\n    _a,\n    { sourceString: style },\n    { value: lpad },\n    _b,\n    { value: width },\n    _c,\n    { value: rpad }\n  ) {\n    return {\n      id,\n      builtin: index?.child(0) !== undefined,\n      address: index?.child(0)?.value ?? -1,\n      style: style as TstOutputSpec[\"style\"],\n      width,\n      lpad,\n      rpad,\n    };\n  },\n});\n\ntstSemantics.addAttribute<TstOperation>(\"operation\", {\n  TstEvalOperation(op) {\n    return { op: op.sourceString as TstEvalOperation[\"op\"] };\n  },\n  TstOutputOperation(_) {\n    return { op: \"output\" };\n  },\n  TstOutputListOperation(_, formats) {\n    return {\n      op: \"output-list\",\n      spec: formats.children.map((n) => n.format),\n    };\n  },\n  TstSetOperation(op, { name }, index, { value }) {\n    const setOp: TstSetOperation = {\n      op: \"set\",\n      id: name,\n      value,\n    };\n    const child = index.child(0)?.child(1)?.child(0);\n    if (child) {\n      setOp.index = child.value;\n    }\n    return setOp;\n  },\n  TstEchoOperation(op, str) {\n    return {\n      op: \"echo\",\n      message: str.String as string,\n    };\n  },\n  TstClearEchoOperation(op) {\n    return {\n      op: \"clear-echo\",\n    };\n  },\n  TstLoadROMOperation(_r, _l, { name }) {\n    return {\n      op: \"loadRom\",\n      file: name,\n    };\n  },\n  TstFileOperation(op, file) {\n    return {\n      op: op.sourceString as TstFileOperation[\"op\"],\n      file: file.sourceString,\n    };\n  },\n});\n\ntstSemantics.addAttribute<TstWhileCondition>(\"condition\", {\n  Condition({ value: left }, { sourceString: op }, { value: right }) {\n    return {\n      left,\n      right,\n      op: op as \"<\" | \"<=\" | \"=\" | \">=\" | \">\" | \"<>\",\n    };\n  },\n});\n\ntstSemantics.addAttribute<TstStatement>(\"statement\", {\n  TstWhile(op, cond, _o, statements, _c) {\n    return {\n      statements: statements.children.map(({ statement }) => statement),\n      condition: cond.condition,\n      span: {\n        start: op.source.startIdx,\n        end: cond.source.endIdx,\n      },\n    };\n  },\n  TstRepeat(op, count, _o, statements, _c) {\n    return {\n      statements: statements.children.map(({ statement }) => statement),\n      count: count.child(0)?.value ?? -1,\n      span: {\n        start: op.source.startIdx,\n        end: count.source.endIdx,\n      },\n    };\n  },\n  TstStatement(list, end) {\n    const stmt: TstStatement = {\n      ops: list\n        .asIteration()\n        .children.map((node) => node.operation as TstOperation),\n      span: {\n        start: this.source.startIdx,\n        end: this.source.endIdx,\n      },\n    };\n    if (end.sourceString === \"!\") {\n      stmt.break = true;\n    }\n    return stmt;\n  },\n});\n\ntstSemantics.addAttribute<Tst>(\"tst\", {\n  Tst(lines) {\n    return {\n      lines: lines.children.map((n) => n.statement),\n    };\n  },\n});\n\ntstSemantics.addAttribute<Tst>(\"root\", {\n  Root({ tst }) {\n    return tst;\n  },\n});\n\nexport const TST = {\n  grammar: tstGrammar,\n  semantics: tstSemantics,\n  parser: grammar,\n  parse: makeParser<Tst>(grammar, tstSemantics),\n};\n","import { assert } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { bin, dec, hex } from \"./util/twos.js\";\nimport { Test } from \"./tst.js\";\n\nexport class Output {\n  private readonly fmt: \"B\" | \"X\" | \"D\" | \"S\";\n  private readonly lPad: number;\n  private readonly rPad: number;\n  private readonly len: number;\n  private readonly index: number;\n  private readonly builtin: boolean;\n\n  // new Output(inst.id, inst.style, inst.width, inst.lpad, inst.rpad)\n  constructor(\n    private variable: string,\n    format = \"%B1.1.1\",\n    len?: number,\n    lPad?: number,\n    rPad?: number,\n    builtin?: boolean,\n    index?: number\n  ) {\n    if (\n      format.startsWith(\"%\") &&\n      len === undefined &&\n      lPad === undefined &&\n      rPad === undefined\n    ) {\n      const { fmt, lPad, rPad, len } = format.match(\n        /^%(?<fmt>[BDXS])(?<lPad>\\d+)\\.(?<len>\\d+)\\.(?<rPad>\\d+)$/\n      )?.groups as {\n        fmt: \"B\" | \"X\" | \"D\" | \"S\";\n        lPad: string;\n        rPad: string;\n        len: string;\n      };\n      this.fmt = fmt;\n      this.lPad = parseInt(lPad);\n      this.rPad = parseInt(rPad);\n      this.len = parseInt(len);\n      this.builtin = false;\n      this.index = -1;\n    } else {\n      assert([\"B\", \"X\", \"D\", \"S\"].includes(format[0]));\n      this.fmt = format[0] as \"B\" | \"X\" | \"D\" | \"S\";\n      this.len = len ?? 3;\n      this.lPad = lPad ?? 1;\n      this.rPad = rPad ?? 1;\n      this.builtin = builtin ?? false;\n      this.index = index ?? -1;\n    }\n  }\n\n  header(test: Test) {\n    let variable = `${this.variable}`;\n    if (this.builtin) {\n      const index = this.index >= 0 ? this.index : \"\";\n      variable = `${variable}[${index}]`;\n    }\n    if (variable.length > this.len + this.lPad + this.rPad) {\n      return variable.substring(0, this.len + this.lPad + this.rPad);\n    }\n    return this.padCenter(variable);\n  }\n\n  print(test: Test) {\n    const val = test.getVar(this.variable, this.index);\n    if (this.fmt === \"S\") {\n      return this.padLeft(val as string);\n    }\n\n    const fmt = { B: bin, D: dec, X: hex }[this.fmt];\n    const value = fmt(val as number);\n    if (this.fmt === \"D\") {\n      return this.padRight(value);\n    } else {\n      return this.padCenter(value.slice(value.length - this.len));\n    }\n  }\n\n  private padCenter(value: string) {\n    const space = this.lPad + this.len + this.rPad;\n    const leftSpace = Math.floor((space - value.length) / 2);\n    const rightSpace = space - leftSpace - value.length;\n    const padLeft = leftSpace + value.length;\n    const padRight = padLeft + rightSpace;\n    value = value.padStart(padLeft);\n    value = value.padEnd(padRight);\n    return value;\n  }\n\n  private padLeft(value: string) {\n    value = value.substring(0, this.len);\n    const padRight = this.rPad + this.len;\n    const padLeft = this.lPad + padRight;\n    value = value.padEnd(padRight);\n    value = value.padStart(padLeft);\n    return value;\n  }\n\n  private padRight(value: string) {\n    value = value.substring(0, this.len);\n    const padLeft = this.lPad + this.len;\n    const padRight = this.rPad + padLeft;\n    value = value.padStart(padLeft);\n    value = value.padEnd(padRight);\n    return value;\n  }\n}\n","import {\n  assertExists,\n  checkExhaustive,\n} from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport { Span } from \"./languages/base.js\";\nimport {\n  Tst,\n  TstLineStatement,\n  TstOperation,\n  TstOutputSpec,\n  TstStatement,\n  TstWhileStatement,\n} from \"./languages/tst.js\";\nimport { Bus, Chip, HIGH, Low, LOW } from \"./chip/chip.js\";\nimport { Clock } from \"./chip/clock.js\";\nimport { Output } from \"./output.js\";\n\nexport abstract class Test<IS extends TestInstruction = TestInstruction> {\n  protected readonly instructions: (IS | TestInstruction)[] = [];\n  protected _outputList: Output[] = [];\n  protected _log = \"\";\n  fs: FileSystem = new FileSystem();\n\n  setFileSystem(fs: FileSystem): this {\n    this.fs = fs;\n    return this;\n  }\n\n  echo(_content: string) {\n    return undefined;\n  }\n  clearEcho() {\n    return undefined;\n  }\n\n  async load(_filename: string): Promise<void> {\n    return undefined;\n  }\n  async compareTo(_filename: string): Promise<void> {\n    return undefined;\n  }\n  outputFile(_filename: string): void {\n    return undefined;\n  }\n  outputList(outputs: Output[]): void {\n    this._outputList = outputs;\n  }\n\n  addInstruction(instruction: IS | TestInstruction): void {\n    this.instructions.push(instruction);\n  }\n\n  reset(): this {\n    this._steps = (function* (test) {\n      for (const instruction of test.instructions) {\n        yield* instruction.steps(test);\n      }\n    })(this);\n    this._step = this._steps.next();\n    this._step; //?\n    this._log = \"\";\n    return this;\n  }\n\n  private _steps!: IterableIterator<IS | TestInstruction>;\n  private _step!: IteratorResult<IS | TestInstruction, IS | TestInstruction>;\n\n  get steps(): Iterator<IS | TestInstruction> {\n    if (this._steps === undefined) {\n      this.reset();\n      this._steps = assertExists(this._steps, \"Reset did not initialize steps\");\n      this._step = assertExists(this._step, \"Reset did not find first step\");\n    }\n    return this._steps;\n  }\n\n  get currentStep(): IS | TestInstruction | undefined {\n    return this._step?.value;\n  }\n\n  get done(): boolean {\n    return this._step?.done ?? false;\n  }\n\n  async step() {\n    if (!this._step.done) {\n      await this._step.value.do(this);\n      this._step = this.steps.next();\n      return false;\n    }\n    return true;\n  }\n\n  async run() {\n    this.reset();\n    while (!(await this.step()));\n  }\n\n  protected readonly breakpoints: Map<string, number> = new Map();\n  addBreakpoint(variable: string, value: number) {\n    this.breakpoints.set(variable, value);\n  }\n  clearBreakpoints() {\n    this.breakpoints.clear();\n  }\n\n  output() {\n    const values = this._outputList.map((output) => output.print(this));\n    this._log += `|${values.join(\"|\")}|\\n`;\n  }\n\n  header() {\n    const values = this._outputList.map((output) => output.header(this));\n    this._log += `|${values.join(\"|\")}|\\n`;\n  }\n\n  log() {\n    return this._log;\n  }\n\n  abstract hasVar(variable: string | number): boolean;\n  abstract getVar(variable: string | number, offset?: number): number | string;\n  abstract setVar(variable: string, value: number, offset?: number): void;\n}\n\nfunction isTstLineStatment(line: TstStatement): line is TstLineStatement {\n  return (line as TstLineStatement).ops !== undefined;\n}\n\nfunction isTstWhileStatement(line: TstStatement): line is TstWhileStatement {\n  return (line as TstWhileStatement).condition !== undefined;\n}\n\nexport class ChipTest extends Test<ChipTestInstruction> {\n  private chip: Chip = new Low();\n  get chipId(): number {\n    return this.chip.id;\n  }\n\n  private clock = Clock.get();\n\n  static from(tst: Tst): ChipTest {\n    const test = new ChipTest();\n\n    for (const line of tst.lines) {\n      if (isTstLineStatment(line)) {\n        test.addInstruction(ChipTest.makeLineStatement(line));\n      } else {\n        const repeat = isTstWhileStatement(line)\n          ? new TestWhileInstruction(\n              new Condition(\n                line.condition.left,\n                line.condition.right,\n                line.condition.op\n              )\n            )\n          : new TestRepeatInstruction(line.count);\n        repeat.span = line.span;\n        test.addInstruction(repeat);\n        for (const statement of line.statements) {\n          repeat.addInstruction(ChipTest.makeLineStatement(statement));\n        }\n      }\n    }\n\n    test.reset();\n\n    return test;\n  }\n\n  private static makeLineStatement(line: TstLineStatement) {\n    const statement = new TestCompoundInstruction();\n    statement.span = line.span;\n    for (const op of line.ops) {\n      const inst = ChipTest.makeInstruction(op);\n      if (inst !== undefined) statement.addInstruction(inst);\n    }\n    return statement;\n  }\n\n  private static makeInstruction(inst: TstOperation) {\n    const { op } = inst;\n    switch (op) {\n      case \"tick\":\n        return new TestTickInstruction();\n      case \"tock\":\n        return new TestTockInstruction();\n      case \"eval\":\n        return new TestEvalInstruction();\n      case \"output\":\n        return new TestOutputInstruction();\n      case \"set\":\n        return new TestSetInstruction(inst.id, inst.value, inst.index);\n      case \"output-list\":\n        return new TestOutputListInstruction(inst.spec);\n      case \"echo\":\n        return new TestEchoInstruction(inst.message);\n      case \"clear-echo\":\n        return new TestClearEchoInstruction();\n      case \"loadRom\":\n        return new TestLoadROMInstruction(inst.file);\n      case \"load\":\n      case \"output-file\":\n      case \"compare-to\":\n        return undefined;\n      default:\n        checkExhaustive(op, `Unknown tst operation ${op}`);\n    }\n  }\n\n  with(chip: Chip): this {\n    this.chip = chip;\n    return this;\n  }\n\n  hasVar(variable: string | number): boolean {\n    if (variable === \"time\") {\n      return true;\n    }\n    variable = `${variable}`;\n    // Look up built-in chip state variables\n    return this.chip.hasIn(variable) || this.chip.hasOut(variable);\n  }\n\n  getVar(variable: string | number, offset?: number): number | string {\n    variable = `${variable}`;\n    if (variable === \"time\") {\n      return this.clock.toString();\n    }\n    const pin = this.chip.get(variable, offset);\n    if (!pin) return 0;\n    return pin instanceof Bus ? pin.busVoltage : pin.voltage();\n  }\n\n  setVar(variable: string, value: number, offset?: number): void {\n    // Look up built-in chip state variables\n    const pinOrBus = this.chip.get(variable, offset);\n    if (pinOrBus instanceof Bus) {\n      pinOrBus.busVoltage = value;\n    } else {\n      pinOrBus?.pull(value === 0 ? LOW : HIGH);\n    }\n  }\n\n  eval(): void {\n    this.chip.eval();\n  }\n\n  tick(): void {\n    this.chip.eval();\n    this.clock.tick();\n  }\n\n  tock(): void {\n    this.chip.eval();\n    this.clock.tock();\n  }\n\n  override async load(filename: string) {\n    await this.chip.load(this.fs, filename);\n  }\n\n  override async run() {\n    this.clock.reset();\n    await super.run();\n  }\n}\n\nexport class CPUTest extends Test<CPUTestInstruction> {\n  hasVar(_variable: string | number): boolean {\n    return false;\n  }\n  getVar(_variable: string | number): number {\n    return 0;\n  }\n  setVar(_variable: string, _value: number): void {\n    return undefined;\n  }\n  ticktock(): void {\n    return undefined;\n  }\n}\n\nexport class VMTest extends Test<VMTestInstruction> {\n  hasVar(_variable: string | number): boolean {\n    return false;\n  }\n  getVar(_variable: string | number): number {\n    return 0;\n  }\n  setVar(_variable: string, _value: number): void {\n    return undefined;\n  }\n  vmstep(): void {\n    return undefined;\n  }\n}\n\nexport interface TestInstruction {\n  span?: Span;\n  do(test: Test): void;\n  steps(test: Test): IterableIterator<TestInstruction>;\n}\n\nexport class TestSetInstruction implements TestInstruction {\n  constructor(\n    private variable: string,\n    private value: number,\n    private index?: number | undefined\n  ) {}\n\n  do(test: Test) {\n    test.setVar(this.variable, this.value, this.index);\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestOutputInstruction implements TestInstruction {\n  do(test: Test) {\n    test.output();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestOutputListInstruction implements TestInstruction {\n  private outputs: Output[] = [];\n\n  constructor(specs: TstOutputSpec[] = []) {\n    for (const spec of specs) {\n      this.addOutput(spec);\n    }\n  }\n\n  addOutput(inst: TstOutputSpec) {\n    this.outputs.push(\n      new Output(\n        inst.id,\n        inst.style,\n        inst.width,\n        inst.lpad,\n        inst.rpad,\n        inst.builtin,\n        inst.address\n      )\n    );\n  }\n\n  do(test: Test) {\n    test.outputList(this.outputs);\n    test.header();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestCompoundInstruction implements TestInstruction {\n  protected readonly instructions: TestInstruction[] = [];\n  span?: Span;\n\n  addInstruction(instruction: TestInstruction) {\n    this.instructions.push(instruction);\n  }\n\n  do(test: Test<TestInstruction>): void {\n    for (const instruction of this.instructions) {\n      instruction.do(test);\n    }\n  }\n\n  *steps(_test: Test): Generator<TestInstruction> {\n    yield this;\n  }\n}\n\nexport class TestRepeatInstruction extends TestCompoundInstruction {\n  constructor(public readonly repeat: number) {\n    super();\n  }\n\n  override do() {\n    return undefined;\n  }\n\n  private *innerSteps(test: Test) {\n    for (const instruction of this.instructions) {\n      yield* instruction.steps(test);\n    }\n  }\n\n  override *steps(test: Test) {\n    if (this.repeat === -1) {\n      yield this;\n      while (true) {\n        yield* this.innerSteps(test);\n      }\n    } else {\n      for (let i = 0; i < this.repeat; i++) {\n        yield this;\n        yield* this.innerSteps(test);\n      }\n    }\n  }\n}\n\nexport class Condition {\n  constructor(\n    public readonly x: string | number,\n    public readonly y: string | number,\n    public readonly op: \"<\" | \"<=\" | \"=\" | \">=\" | \">\" | \"<>\"\n  ) {}\n\n  check(test: Test): boolean {\n    const x = test.hasVar(this.x) ? test.getVar(this.x) : this.x;\n    const y = test.hasVar(this.y) ? test.getVar(this.y) : this.y;\n\n    if (typeof x === \"string\" || typeof y === \"string\") {\n      switch (this.op) {\n        case \"=\":\n          return `${x}` === `${y}`;\n        case \"<>\":\n          return `${x}` !== `${y}`;\n      }\n    } else {\n      switch (this.op) {\n        case \"<\":\n          return x < y;\n        case \"<=\":\n          return x <= y;\n        case \">\":\n          return x > y;\n        case \">=\":\n          return x >= y;\n        case \"=\":\n          return x === y;\n        case \"<>\":\n          return x !== y;\n      }\n    }\n    return false;\n  }\n}\n\nexport class TestWhileInstruction extends TestCompoundInstruction {\n  constructor(public readonly condition: Condition) {\n    super();\n  }\n\n  override *steps(test: Test) {\n    while (this.condition.check(test)) {\n      yield this;\n      for (const instruction of this.instructions) {\n        yield* instruction.steps(test);\n      }\n    }\n  }\n}\n\nexport class TestEchoInstruction implements TestInstruction {\n  constructor(public readonly content: string) {}\n  do(test: Test) {\n    test.echo(this.content);\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestClearEchoInstruction implements TestInstruction {\n  do(test: Test) {\n    test.clearEcho();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestLoadROMInstruction implements TestInstruction {\n  constructor(readonly file: string) {}\n  async do(test: Test) {\n    test.fs.pushd(\"/samples\");\n    await test.load(this.file);\n    test.fs.popd();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestBreakpointInstruction implements TestInstruction {\n  constructor(readonly variable: string, readonly value: number) {}\n\n  do(test: Test) {\n    test.addBreakpoint(this.variable, this.value);\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestClearBreakpointsInstruction implements TestInstruction {\n  do(test: Test) {\n    test.clearBreakpoints();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport interface ChipTestInstruction extends TestInstruction {\n  _chipTestInstruction_: true;\n  do(test: ChipTest): void | Promise<void>;\n}\n\nexport class TestEvalInstruction implements ChipTestInstruction {\n  readonly _chipTestInstruction_ = true;\n  do(test: ChipTest) {\n    test.eval();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestTickInstruction implements ChipTestInstruction {\n  readonly _chipTestInstruction_ = true;\n  do(test: ChipTest) {\n    test.tick();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestTockInstruction implements ChipTestInstruction {\n  readonly _chipTestInstruction_ = true;\n  do(test: ChipTest) {\n    test.tock();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport interface CPUTestInstruction extends TestInstruction {\n  _cpuTestInstruction_: true;\n  do(test: CPUTest): void | Promise<void>;\n}\n\nexport class TestTickTockInstruction implements CPUTestInstruction {\n  readonly _cpuTestInstruction_ = true;\n  do(test: CPUTest) {\n    test.ticktock();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport interface VMTestInstruction extends TestInstruction {\n  _vmTestInstruction_: true;\n  do(test: VMTest): void | Promise<void>;\n}\n\nexport class TestVMStepInstruction implements VMTestInstruction {\n  readonly _vmTestInstruction_ = true;\n  do(test: VMTest) {\n    test.vmstep();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n","import {\n  ASSIGN,\n  ASSIGN_ASM,\n  ASSIGN_OP,\n  COMMANDS,\n  COMMANDS_ASM,\n  COMMANDS_OP,\n  JUMP,\n  JUMP_ASM,\n  JUMP_OP,\n} from \"../cpu/alu.js\";\n\nexport type CommandOps = keyof typeof COMMANDS.op;\nexport type JumpOps = keyof typeof JUMP.op;\nexport type StoreOps = keyof typeof ASSIGN.op;\n\nexport function asm(op: number): string {\n  if (op & 0x8000) {\n    return cInstruction(op);\n  }\n  return aInstruction(op);\n}\n\nfunction cInstruction(op: number): string {\n  op = op & 0xffff; // Clear high order bits\n  const mop = (op & 0x1000) >> 12;\n  const cop: CommandOps = ((op & 0b0000111111000000) >> 6) as CommandOps;\n  const sop: StoreOps = ((op & 0b0000000000111000) >> 3) as StoreOps;\n  const jop: JumpOps = (op & 0b0000000000000111) as JumpOps;\n\n  if (COMMANDS.op[cop] === undefined) {\n    // Invalid commend\n    return \"#ERR\";\n  }\n\n  let command = COMMANDS.op[cop];\n  if (mop) {\n    command = command.replace(/A/g, \"M\") as COMMANDS_ASM;\n  }\n\n  const store = ASSIGN.op[sop];\n  const jump = JUMP.op[jop];\n\n  let instruction: string = command;\n  if (store) {\n    instruction = `${store}=${instruction}`;\n  }\n  if (jump) {\n    instruction = `${instruction};${jump}`;\n  }\n\n  return instruction;\n}\n\nfunction aInstruction(op: number): string {\n  return \"@\" + (op & 0x7fff).toString(10);\n}\n\nexport function op(asm: string): number {\n  if (asm[0] === \"@\") {\n    return aop(asm);\n  } else {\n    return cop(asm);\n  }\n}\n\nfunction aop(asm: string): number {\n  return parseInt(asm.substring(1), 10);\n}\n\nfunction cop(asm: string): number {\n  const parts = asm.match(\n    /(?:(?<assign>[AMD]{1,3})=)?(?<operation>[-!01ADM&|]{1,3})(?:;(?<jump>JGT|JLT|JGE|JLE|JEQ|JMP))?/\n  );\n  const { assign, operation, jump } = parts?.groups ?? {};\n  const mode = operation.includes(\"M\") || assign.includes(\"M\");\n  const aop = ASSIGN.asm[(assign as ASSIGN_ASM) ?? \"\"];\n  const jop = JUMP.asm[(jump as JUMP_ASM) ?? \"\"];\n  const cop = COMMANDS.asm[(operation as COMMANDS_ASM) ?? \"\"];\n\n  return makeC(mode, cop, aop, jop);\n}\n\nexport function makeC(\n  isM: boolean,\n  op: COMMANDS_OP,\n  assign: ASSIGN_OP = 0,\n  jmp: JUMP_OP = 0\n): number {\n  const C = 0xe000;\n  const A = isM ? 0x1000 : 0;\n  const O = op << 6;\n  const D = (assign ?? 0) << 3;\n  const J = jmp ?? 0;\n  return C + A + O + D + J;\n}\n","const Hex = [\n  \"0\",\n  \"1\",\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n];\n\nexport function chars(i: number): string {\n  return Hex[i] ?? \"X\";\n}\n\nexport function bits(i: number): string {\n  switch (i) {\n    case 0x0:\n      return \"0000\";\n    case 0x1:\n      return \"0001\";\n    case 0x2:\n      return \"0010\";\n    case 0x3:\n      return \"0011\";\n    case 0x4:\n      return \"0100\";\n    case 0x5:\n      return \"0101\";\n    case 0x6:\n      return \"0110\";\n    case 0x7:\n      return \"0111\";\n    case 0x8:\n      return \"1000\";\n    case 0x9:\n      return \"1001\";\n    case 0xa:\n      return \"1010\";\n    case 0xb:\n      return \"1011\";\n    case 0xc:\n      return \"1100\";\n    case 0xd:\n      return \"1101\";\n    case 0xe:\n      return \"1110\";\n    case 0xf:\n      return \"1111\";\n    default:\n      return \"erro\";\n  }\n}\n\nexport function int(n: string, radix: number): number {\n  const i = parseInt(n.replace(/[^\\d+-.xa-fA-F]/g, \"\"), radix);\n  return i & 0xffff;\n}\n\nexport function int16(i: string): number {\n  return int(i, 16);\n}\n\nexport function int10(i: string): number {\n  return int(i, 10);\n}\n\nexport function int2(i: string): number {\n  return int(i, 2);\n}\n\nexport function hex(i: number): string {\n  const hu = chars((i & 0xf000) >> 12);\n  const hl = chars((i & 0x0f00) >> 8);\n  const lu = chars((i & 0x00f0) >> 4);\n  const ll = chars(i & 0x000f);\n\n  return `0x${hu}${hl}${lu}${ll}`;\n}\n\nexport function bin(i: number, precision = 16): string {\n  const hu = bits((i & 0xf000) >> 12);\n  const hl = bits((i & 0x0f00) >> 8);\n  const lu = bits((i & 0x00f0) >> 4);\n  const ll = bits(i & 0x000f);\n\n  // return `${hu} ${hl} ${lu} ${ll}`;\n  return `${hu}${hl}${lu}${ll}`.substring(16 - precision); // Match the book's formatting\n}\n\nexport function dec(i: number): string {\n  i = i & 0xffff;\n  if (i === 0x8000) {\n    return \"-32768\";\n  }\n  if (i & 0x8000) {\n    i = (~i + 1) & 0x7fff;\n    return `-${i}`;\n  }\n  return `${i}`;\n}\n\nexport function uns(i: number): string {\n  i = i & 0xffff;\n  return `${i}`;\n}\n\nexport function nand16(a: number, b: number): number {\n  a = a & 0xffff;\n  b = b & 0xffff;\n  let c = ~(a & b);\n  c = c & 0xffff;\n  return c;\n}\n"],"names":["DiffTable","className","out","cmp","zeroState","output","CMP","compare","isErr","_jsxs","children","_jsx","display","Err","cmpData","Ok","outData","failures","table","range","Math","min","length","map","i","cmpI","outI","max","_","j","cell","pass","trim","match","style","fontFamily","marginBottom","row","DiffCell","pinWidth","start","end","undefined","Error","loadChip","name","fs","hasBuiltinChip","getBuiltinChip","readFile","file","maybeParsedHDL","HDL","chip","isOk","build","parts","toString","buildChip","Chip","ins","pin","width","outs","clocked","part","builtin","partChip","wires","lhs","rhs","to","from","wire","ROM32K","path","load","v","at","busVoltage","RAM","Screen","SCREEN","Keyboard","listener","key","pull","voltage","KEYBOARD","Memory","console","log","RAM16K","add","keyboard","screen","ram","setListener","address","OFFSET","in","this","inn","eval","startsWith","idx","int10","groups","offset","ClockedChip","CPU","emptyState","_state","cpuTick","cpuInput","state","writeM","HIGH","LOW","ALU","cpuTock","addressM","outM","PC","inM","instruction","reset","ConstantBus","A","D","Computer","get","And","a","b","and","n","And16","and16","DMux","sel","dmux","DMux4Way","dmux4way","c","d","DMux8Way","dmux8way","e","f","g","h","mux16","mux16_4","s2","Mux","mux","set","Mux16","Mux4Way16","Mux8Way16","mux16_8","Nand","nand","Nand16","nand16","Not","Not16","or","Or","Or16","or16","Or8way","Xor","xor","Xor16","xor16","add16","Add16","ALUNoStat","x","y","op","alu","flags","ng","Flags","zr","halfAdder","HalfAdder","sum","carry","FullAdder","s","ca","fullAdder","Inc16","DFF","t","REGISTRY","Map","Bit","Register","RAM8","RAM64","RAM512","RAM4K","VRegister","ChipCtor","has","bit","bits","_memory","MemoryChip","pow","_address","_nextData","assert","size","RamBus","index","num","Bus","newWidth","next","push","forEach","reduce","nextVoltage","InSubBus","bus","connect","mask","high","low","mid","OutSubBus","value","TRUE_BUS","FALSE_BUS","parsePinDecl","toPin","w","Number","Symbol","iterator","Pins","minWidth","insert","values","id","internals","Set","internal","pins","clockedPins","Clock","$","subscribe","hasIn","hasOut","getBuiltin","BUILTIN_NAMES","includes","connections","isOutPin","wireOutPin","wireInPin","toLowerCase","emplace","partPin","assertExists","chipPin","findPin","isInternal","ensureWidth","remove","Low","level","tock","tick","unsubscribe","clock","BehaviorSubject","ticks","Subject","subject","frameSubject","COMMANDS","asm","M","ASSIGN","MD","AM","AD","AMD","JUMP","JGT","JEQ","JGE","JLT","JNE","JLE","JMP","Positive","Zero","Negative","o","flag","BITS","decode","x1","x2","am","d1","d2","d3","j1","j2","j3","alu2","ROM","input","tickState","cpu","FORMATS","memory","Int16Array","format","current","int2","int16","isFinite","updates","slice","fn","grammar","ohm","asmGrammar","grammars","asmSemantics","extendSemantics","baseSemantics","isALabelInstruction","inst","label","addAttribute","Root","instructions","child","AInstruction","_at","val","type","CInstruction","assignN","opN","jmpN","assign","sourceString","replace","jmp","isM","jump","store","Label","_o","_c","ASM","semantics","parser","parse","makeParser","passes","fillLabel","nextLabel","symbols","unfilled","line","emit","makeC","filter","endsWith","loadHack","loadAsm","source","unwrap","split","UNKNOWN_PARSE_ERROR","Base","createSemantics","property","root","succeeded","parsed","message","shortMessage","extendOperation","List","list","asIteration","decNumber","digits","wholeDec","binNumber","hexNumber","Name","ident","identifier","__","String","_a","str","_b","cmpGrammar","cmpSemantics","cells","lines","hdlGrammar","hdlSemantics","SubBus","startNode","endNode","WireSide","Wire","left","right","isTerminal","Wires","node","Part","Parts","BuiltinPart","PartList","ClockedList","PinDecl","PinList","body","Clocked","tstGrammar","tstSemantics","extendAttribute","Index","FileName","_open","dec","_close","OutputFormat","lpad","rpad","TstEvalOperation","TstOutputOperation","TstOutputListOperation","formats","spec","TstSetOperation","setOp","TstEchoOperation","TstClearEchoOperation","TstLoadROMOperation","_r","_l","TstFileOperation","Condition","TstWhile","cond","statements","statement","condition","span","startIdx","endIdx","TstRepeat","count","TstStatement","stmt","ops","operation","break","Tst","tst","TST","Output","variable","len","lPad","rPad","fmt","parseInt","test","substring","padCenter","getVar","padLeft","B","bin","X","hex","padRight","space","leftSpace","floor","rightSpace","padStart","padEnd","Test","FileSystem","_content","_filename","outputs","_outputList","_steps","steps","_step","_log","done","do","step","breakpoints","clear","print","join","header","isTstLineStatment","isTstWhileStatement","ChipTest","pinOrBus","filename","addInstruction","makeLineStatement","repeat","TestWhileInstruction","TestRepeatInstruction","TestCompoundInstruction","makeInstruction","TestTickInstruction","TestTockInstruction","TestEvalInstruction","TestOutputInstruction","TestSetInstruction","TestOutputListInstruction","TestEchoInstruction","TestClearEchoInstruction","TestLoadROMInstruction","checkExhaustive","setVar","specs","addOutput","outputList","_test","innerSteps","hasVar","check","content","echo","clearEcho","pushd","popd","mop","cop","sop","jop","command","cInstruction","aInstruction","aop","mode","C","O","J","Hex","chars","int","radix","hu","hl","lu","ll","precision","uns"],"sourceRoot":""}