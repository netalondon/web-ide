{"version":3,"file":"static/js/2.08445bd6.chunk.js","mappings":"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","sources":["../../simulator/src/projects/runner.ts","pages/home.tsx"],"sourcesContent":["import { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport {\n  isOk,\n  Ok,\n  Err,\n  isErr,\n  Result,\n} from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { Assignments, Assignment } from \"@nand2tetris/projects/index.js\";\nimport type { Runner, RunResult } from \"@nand2tetris/runner/types.js\";\nimport { HDL, HdlParse } from \"../languages/hdl.js\";\nimport { Tst, TST } from \"../languages/tst.js\";\nimport { build as buildChip } from \"../chip/builder.js\";\nimport { ChipTest } from \"../tst.js\";\nimport { ParseError } from \"../languages/base.js\";\nimport { Chip } from \"../chip/chip.js\";\n\nexport interface AssignmentFiles extends Assignment {\n  hdl: string;\n  tst: string;\n  cmp: string;\n}\n\nexport interface AssignmentParse extends AssignmentFiles {\n  maybeParsedHDL: Result<HdlParse, ParseError>;\n  maybeParsedTST: Result<Tst, ParseError>;\n}\n\nexport interface AssignmentBuild extends AssignmentParse {\n  maybeChip: Result<Chip, Error>;\n  maybeTest: Result<ChipTest, Error>;\n}\n\nexport interface AssignmentRun extends AssignmentBuild {\n  pass: boolean;\n  out: string;\n  shadow?: RunResult;\n}\n\nexport const hasTest = ({\n  name,\n  ext,\n}: {\n  name: string;\n  ext: string;\n}): boolean =>\n  Assignments[name as keyof typeof Assignments] !== undefined &&\n  [\".hdl\", \".tst\"].includes(ext);\n\n/** Try parsing the loaded files. */\nexport const maybeParse = (file: AssignmentFiles): AssignmentParse => {\n  const maybeParsedHDL = HDL.parse(file.hdl);\n  const maybeParsedTST = TST.parse(file.tst);\n  return { ...file, maybeParsedHDL, maybeParsedTST };\n};\n\n/** After parsing the assignment, compile the Chip and Tst. */\nexport const maybeBuild =\n  (fs: FileSystem) =>\n  async (file: AssignmentParse): Promise<AssignmentBuild> => {\n    const maybeChip = isOk(file.maybeParsedHDL)\n      ? await buildChip(Ok(file.maybeParsedHDL), fs)\n      : Err(new Error(\"HDL Was not parsed\"));\n    const maybeTest = isOk(file.maybeParsedTST)\n      ? Ok(ChipTest.from(Ok(file.maybeParsedTST)))\n      : Err(new Error(\"TST Was not parsed\"));\n    return { ...file, maybeChip, maybeTest };\n  };\n\n/** If the assignment parsed, run it! */\nexport const tryRun =\n  (fs: FileSystem) =>\n  async (assignment: AssignmentBuild): Promise<AssignmentRun> => {\n    if (isErr(assignment.maybeChip)) {\n      return {\n        ...assignment,\n        pass: false,\n        out: Err(assignment.maybeChip).message,\n      };\n    }\n    if (isErr(assignment.maybeTest)) {\n      return {\n        ...assignment,\n        pass: false,\n        out: Err(assignment.maybeTest).message,\n      };\n    }\n    const test = Ok(assignment.maybeTest)\n      .with(Ok(assignment.maybeChip))\n      .setFileSystem(fs);\n    await test.run();\n    const out = test.log();\n    const pass = out.trim() === assignment.cmp.trim();\n    return { ...assignment, out, pass };\n  };\n\n/** Parse & execute a Nand2tetris assignment, possibly also including the Java output in shadow mode. */\nexport const runner = (fs: FileSystem, ideRunner?: Runner) => {\n  const tryRunWithFs = tryRun(fs);\n  const maybeBuildWithFs = maybeBuild(fs);\n  return async (assignment: AssignmentFiles): Promise<AssignmentRun> => {\n    const jsRunner = async () =>\n      tryRunWithFs(await maybeBuildWithFs(await maybeParse(assignment)));\n    const javaRunner = async () => ideRunner?.hdl(assignment);\n\n    const [jsRun, shadow] = await Promise.all([jsRunner(), javaRunner()]);\n    return { ...jsRun, shadow };\n  };\n};\n\n/** Run all tests for a given Nand2Tetris project. */\nexport async function runTests(\n  files: Array<Assignment>,\n  loadAssignment: (file: Assignment) => Promise<AssignmentFiles>,\n  fs: FileSystem,\n  ideRunner?: Runner\n): Promise<AssignmentRun[]> {\n  const run = runner(fs, ideRunner);\n  return Promise.all(\n    files.map(loadAssignment).map(async (assignment) => run(await assignment))\n  );\n}\n","import { useBaseContext } from \"@nand2tetris/components/stores/base.context\";\nimport { DiffTable } from \"@nand2tetris/components/difftable\";\nimport { Assignments, ParsedPath } from \"@nand2tetris/projects/index.js\";\nimport { runTests } from \"@nand2tetris/simulator/projects/runner.js\";\nimport { Trans } from \"@lingui/macro\";\nimport { ChangeEventHandler, useCallback, useState } from \"react\";\n// import { parse, ParsedPath } from \"node:path\";\n\nfunction hasTest({ name, ext }: { name: string; ext: string }) {\n  return (\n    Assignments[name as keyof typeof Assignments] !== undefined &&\n    ext === \".hdl\"\n  );\n}\n\nconst TestResult = (props: {\n  name: string;\n  pass: boolean;\n  hdl: string;\n  tst: string;\n  cmp: string;\n  out: string;\n}) => (\n  <details>\n    <summary>\n      {props.name} {props.pass ? <Trans>Passed</Trans> : <Trans>Failed</Trans>}\n    </summary>\n    <div className=\"flex row\">\n      <pre>\n        <code>{props.hdl}</code>\n      </pre>\n      <pre>\n        <code>{props.tst}</code>\n      </pre>\n    </div>\n    <DiffTable cmp={props.cmp} out={props.out} />\n  </details>\n);\n\nasync function loadAssignment(file: ParsedPath & { file?: File }) {\n  const assignment = Assignments[file.name as keyof typeof Assignments];\n  const hdl = (await file.file?.text()) ?? \"\";\n  const tst = assignment[\n    `${file.name}.tst` as keyof typeof assignment\n  ] as string;\n  const cmp = assignment[\n    `${file.name}.cmp` as keyof typeof assignment\n  ] as string;\n  return { ...file, hdl, tst, cmp };\n}\n\ndeclare module \"react\" {\n  // eslint-disable-next-line\n  interface HTMLAttributes<T> {\n    // extends React's HTMLAttributes\n    directory?: string;\n    webkitdirectory?: string;\n  }\n}\n\nconst Home = () => {\n  const [tests, setTests] = useState(\n    [] as Array<Parameters<typeof TestResult>[0]>\n  );\n  const { fs } = useBaseContext();\n\n  const onChange = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    async ({ target }) => {\n      const files = await Promise.all(\n        [...(target.files ?? [])]\n          .filter((file) => file.name.endsWith(\".hdl\"))\n          .map((file) => {\n            const { name, base, ext } =\n              file.name.match(/^(?<base>(?<name>.*)(?<ext>\\.[^.]*))?$/)\n                ?.groups ?? {};\n\n            const root = \"/\";\n            const dir = root + file.webkitRelativePath?.replace(base, \"\") ?? \"\";\n\n            return { name, base, ext, dir, root, file };\n          })\n          .filter(hasTest)\n          .map(async (file) => {\n            const hdl = await file.file.text();\n            return { ...file, hdl };\n          })\n      );\n\n      const tests = await runTests(files, loadAssignment, fs);\n\n      fs.pushd(\"/samples\");\n      setTests(tests);\n      fs.popd();\n    },\n    [setTests, fs]\n  );\n\n  return (\n    <>\n      <h1>NAND2Tetris Web IDE</h1>\n      <form>\n        <fieldset>\n          <legend>Files for grading:</legend>\n          <input\n            type=\"file\"\n            multiple\n            directory=\"\"\n            webkitdirectory=\"\"\n            onChange={onChange}\n          />\n        </fieldset>\n      </form>\n      <figure>\n        {tests.length > 0 ? (\n          tests.map((t, i) => <TestResult key={t.name} {...t} />)\n        ) : (\n          <></>\n        )}\n      </figure>\n    </>\n  );\n};\n\nexport default Home;\n"],"names":["runner","fs","ideRunner","tryRunWithFs","async","isErr","assignment","maybeChip","pass","out","Err","message","maybeTest","test","Ok","with","setFileSystem","run","log","trim","cmp","tryRun","maybeBuildWithFs","isOk","file","maybeParsedHDL","buildChip","Error","maybeParsedTST","ChipTest","maybeBuild","jsRun","shadow","Promise","all","HDL","hdl","TST","tst","maybeParse","jsRunner","javaRunner","hasTest","name","ext","undefined","Assignments","TestResult","props","className","loadAssignment","text","tests","setTests","useState","useBaseContext","onChange","useCallback","target","files","filter","endsWith","map","base","match","groups","dir","webkitRelativePath","replace","root","runTests","pushd","popd","type","multiple","directory","webkitdirectory","length","t","i"],"sourceRoot":""}