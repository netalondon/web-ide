{"version":3,"file":"static/js/387.6218f7b8.chunk.js","mappings":"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","sources":["../../components/src/difftable.tsx","../../simulator/src/chip/chip.tsx","../../simulator/src/chip/clock.ts","../../simulator/src/cpu/alu.ts","../../simulator/src/cpu/cpu.ts","../../simulator/src/cpu/memory.ts","../../simulator/src/fs.ts","../../simulator/src/languages/base.ts","../../simulator/src/languages/grammars/base.ohm.js","../../simulator/src/languages/grammars/cmp.ohm.js","../../simulator/src/languages/cmp.ts","../../simulator/src/languages/grammars/tst.ohm.js","../../simulator/src/languages/tst.ts","../../simulator/src/languages/grammars/asm.ohm.js","../../simulator/src/languages/asm.ts","../../simulator/src/loader.ts","../../simulator/src/output.ts","../../simulator/src/tst.ts","../../simulator/src/util/asm.ts","../../simulator/src/util/twos.ts"],"sourcesContent":["import { CMP } from \"@nand2tetris/simulator/languages/cmp.js\";\nimport { display } from \"@davidsouther/jiffies/lib/esm/display.js\";\nimport { range } from \"@davidsouther/jiffies/lib/esm/range.js\";\nimport { Err, isErr, Ok } from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { ReactElement } from \"react\";\n\nexport const DiffTable = ({\n  className = \"\",\n  out,\n  cmp,\n  zeroState,\n}: {\n  out: string;\n  cmp: string;\n  className?: string;\n  zeroState?: ReactElement;\n}) => {\n  const output = CMP.parse(out);\n  const compare = CMP.parse(cmp);\n\n  if (isErr(output)) {\n    return (\n      <details>\n        <summary>Failed to parse output</summary>\n        <pre>{display(Err(output))}</pre>\n        <code>\n          <pre>{out}</pre>\n        </code>\n      </details>\n    );\n  }\n\n  if (isErr(compare)) {\n    return (\n      <details>\n        <summary>Failed to parse compare</summary>\n        <code>\n          <pre>{display(Err(compare))}</pre>\n          <pre>{cmp}</pre>\n        </code>\n      </details>\n    );\n  }\n\n  const cmpData = Ok(compare);\n  const outData = Ok(output);\n  let failures = 0;\n  const table = range(0, Math.min(cmpData.length, outData.length)).map((i) => {\n    const cmpI = cmpData[i] ?? [];\n    const outI = outData[i] ?? [];\n    return range(0, Math.max(cmpI.length, outI.length))\n      .map((_, j) => [cmpI[j] ?? \"\", outI[j] ?? \"\"])\n      .map(([cmp, out]) => {\n        const cell = {\n          cmp: cmp ?? '\"',\n          out: out ?? '\"',\n          pass:\n            cmp?.trim().match(/^\\*+$/) !== null || out?.trim() === cmp?.trim(),\n        };\n        if (!cell.pass) {\n          failures += 1;\n        }\n        return cell;\n      });\n  });\n\n  return (\n    <div className={\"scroll-x \" + className}>\n      {failures > 0 && (\n        <p>\n          {failures} failure{failures === 1 ? \"\" : \"s\"}\n        </p>\n      )}\n      {table.length > 0 ? (\n        <table\n          style={{\n            fontFamily: \"var(--font-family-monospace)\",\n            marginBottom: \"none\",\n          }}\n        >\n          <tbody>\n            {table.map((row, i) => (\n              <tr key={i}>\n                {row.map(({ cmp, out, pass }, i) => (\n                  <DiffCell cmp={cmp} out={out} pass={pass} key={i} />\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        zeroState ?? <p>Execute test script to compare output.</p>\n      )}\n    </div>\n  );\n};\n\nconst DiffCell = ({\n  cmp,\n  out,\n  pass,\n}: {\n  cmp: string;\n  out: string;\n  pass: boolean;\n}) => {\n  return pass ? (\n    <>\n      <td>{cmp}</td>\n    </>\n  ) : (\n    <>\n      <td>\n        <ins>{cmp}</ins>\n        <br />\n        <del>{out}</del>\n      </td>\n    </>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { assert, assertExists } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport { range } from \"@davidsouther/jiffies/lib/esm/range.js\";\nimport { bin } from \"../util/twos.js\";\nimport { Clock } from \"./clock.js\";\n\nexport const HIGH = 1;\nexport const LOW = 0;\nexport type Voltage = typeof HIGH | typeof LOW;\n\nexport interface Pin {\n  readonly name: string;\n  readonly width: number;\n  busVoltage: number;\n  pull(voltage: Voltage, bit?: number): void;\n  toggle(bit?: number): void;\n  voltage(bit?: number): Voltage;\n  connect(pin: Pin): void;\n}\n\nexport class Bus implements Pin {\n  state: Voltage[];\n  next: Pin[] = [];\n\n  constructor(readonly name: string, readonly width = 1) {\n    this.state = range(0, this.width).map(() => LOW);\n  }\n\n  ensureWidth(newWidth: number) {\n    assert(newWidth <= 16, `Cannot widen past 16 to ${newWidth} bits`);\n    if (this.width < newWidth) {\n      (this as { width: number }).width = newWidth;\n      this.state = [\n        ...this.state,\n        ...range(this.width, newWidth).map(() => LOW as Voltage),\n      ];\n    }\n  }\n\n  connect(next: Pin) {\n    this.next.push(next);\n    next.busVoltage = this.busVoltage;\n  }\n\n  pull(voltage: Voltage, bit = 0) {\n    assert(\n      bit >= 0 && bit < this.width,\n      `Bit out of bounds: ${this.name}@${bit}`\n    );\n    this.state[bit] = voltage;\n    this.next.forEach((n) => n.pull(voltage, bit));\n  }\n\n  voltage(bit = 0): Voltage {\n    assert(bit >= 0 && bit < this.width);\n    return this.state[bit];\n  }\n\n  set busVoltage(voltage: number) {\n    for (const i of range(0, this.width)) {\n      this.state[i] = ((voltage & (1 << i)) >> i) as Voltage;\n    }\n    this.next.forEach((n) => (n.busVoltage = this.busVoltage));\n  }\n\n  get busVoltage(): number {\n    return range(0, this.width).reduce((b, i) => b | (this.state[i] << i), 0);\n  }\n\n  toggle(bit = 0) {\n    const nextVoltage = this.voltage(bit) === LOW ? HIGH : LOW;\n    this.pull(nextVoltage, bit);\n  }\n}\n\nexport class InSubBus extends Bus {\n  constructor(\n    private bus: Pin,\n    private start: number,\n    override readonly width = 1\n  ) {\n    super(bus.name);\n    assert(\n      start >= 0 && start + width <= bus.width,\n      `Mismatched InSubBus dimensions on ${bus.name} (${width} + ${start} > ${bus.width})`\n    );\n    this.connect(bus);\n  }\n\n  override pull(voltage: Voltage, bit = 0) {\n    assert(bit >= 0 && bit < this.width);\n    this.bus.pull(voltage, this.start + bit);\n  }\n\n  override voltage(bit = 0): Voltage {\n    assert(bit >= 0 && bit < this.width);\n    return this.bus.voltage(this.start + bit);\n  }\n\n  override set busVoltage(voltage: number) {\n    const high = this.bus.busVoltage & ~mask(this.width + this.start);\n    const low = this.bus.busVoltage & mask(this.start);\n    const mid = (voltage & mask(this.width)) << this.start;\n    this.bus.busVoltage = high | mid | low;\n  }\n\n  override get busVoltage(): number {\n    return (this.bus.busVoltage >> this.start) & mask(this.width);\n  }\n\n  override connect(bus: Pin): void {\n    assert(\n      this.start + this.width <= bus.width,\n      `Mismatched InSubBus connection dimensions (From ${bus.name} to ${this.name})`\n    );\n    this.bus = bus;\n  }\n}\n\nexport class OutSubBus extends Bus {\n  constructor(\n    private bus: Pin,\n    private start: number,\n    override readonly width = 1\n  ) {\n    super(bus.name);\n    assert(start >= 0 && width <= bus.width, `Mismatched OutSubBus dimensions`);\n    this.connect(bus);\n  }\n\n  override set busVoltage(voltage: number) {\n    this.bus.busVoltage =\n      (voltage & mask(this.width + this.start)) >> this.start;\n  }\n\n  override get busVoltage(): number {\n    return this.bus.busVoltage & mask(this.width);\n  }\n\n  override connect(bus: Pin): void {\n    assert(\n      this.width <= bus.width,\n      `Mismatched OutSubBus connection dimensions`\n    );\n    this.bus = bus;\n  }\n}\n\nexport class ConstantBus extends Bus {\n  constructor(name: string, private readonly value: number) {\n    super(name, 16 /* TODO: get high bit index */);\n  }\n\n  pullHigh(_ = 0) {\n    return undefined;\n  }\n  pullLow(_ = 0) {\n    return undefined;\n  }\n  override voltage(_ = 0): Voltage {\n    return (this.busVoltage & 0x1) as Voltage;\n  }\n\n  override set busVoltage(voltage: number) {\n    // Noop\n  }\n  override get busVoltage(): number {\n    return this.value;\n  }\n}\n\nexport const TRUE_BUS = new ConstantBus(\"true\", 0xffff);\nexport const FALSE_BUS = new ConstantBus(\"false\", 0);\n\nexport function parsePinDecl(toPin: string): {\n  pin: string;\n  width: number;\n} {\n  const { pin, w } = toPin.match(/(?<pin>[a-zA-Z]+)(\\[(?<w>\\d+)\\])?/)\n    ?.groups as {\n    pin: string;\n    w?: string;\n  };\n  return {\n    pin,\n    width: w ? Number(w) : 1,\n  };\n}\n\nexport function parseToPin(toPin: string): {\n  pin: string;\n  start?: number;\n  end?: number;\n} {\n  const { pin, i, j } = toPin.match(\n    /(?<pin>[a-z]+)(\\[(?<i>\\d+)(\\.\\.(?<j>\\d+))?\\])?/\n  )?.groups as { pin: string; i?: string; j?: string };\n  return {\n    pin,\n    start: i ? Number(i) : undefined,\n    end: j ? Number(j) : undefined,\n  };\n}\n\nexport class Pins {\n  private readonly map = new Map<string, Pin>();\n\n  insert(pin: Pin) {\n    const { name } = pin;\n    assert(!this.map.has(name), `Pins already has ${name}!`);\n    this.map.set(name, pin);\n  }\n\n  emplace(name: string, minWidth?: number) {\n    if (this.has(name)) {\n      return this.get(name)!;\n    } else {\n      const pin = new Bus(name, minWidth);\n      this.insert(pin);\n      return pin;\n    }\n  }\n\n  has(pin: string): boolean {\n    return this.map.has(pin);\n  }\n\n  get(pin: string): Pin | undefined {\n    return this.map.get(pin);\n  }\n\n  entries(): Iterable<Pin> {\n    return this.map.values();\n  }\n\n  [Symbol.iterator]() {\n    return this.map[Symbol.iterator]();\n  }\n}\n\nlet id = 0;\nexport class Chip {\n  readonly id = id++;\n  ins = new Pins();\n  outs = new Pins();\n  pins = new Pins();\n  parts = new Set<Chip>();\n  clockedPins: Set<string>;\n\n  get clocked() {\n    if (this.clockedPins.size > 0) {\n      return true;\n    }\n    for (const part of this.parts) {\n      if (part.clocked) return true;\n    }\n    return false;\n  }\n\n  constructor(\n    ins: (string | { pin: string; width: number })[],\n    outs: (string | { pin: string; width: number })[],\n    public name?: string,\n    internals: (string | { pin: string; width: number })[] = [],\n    clocked: string[] = []\n  ) {\n    for (const inn of ins) {\n      const { pin, width = 1 } =\n        (inn as { pin: string }).pin !== undefined\n          ? (inn as { pin: string; width: number })\n          : parsePinDecl(inn as string);\n      this.ins.insert(new Bus(pin, width));\n    }\n\n    for (const out of outs) {\n      const { pin, width = 1 } =\n        (out as { pin: string }).pin !== undefined\n          ? (out as { pin: string; width: number })\n          : parsePinDecl(out as string);\n      this.outs.insert(new Bus(pin, width));\n    }\n\n    for (const internal of internals) {\n      const { pin, width = 1 } =\n        (internal as { pin: string }).pin !== undefined\n          ? (internal as { pin: string; width: number })\n          : parsePinDecl(internal as string);\n      this.pins.insert(new Bus(pin, width));\n    }\n\n    this.clockedPins = new Set(clocked);\n\n    Clock.get().$.subscribe(() => this.eval());\n  }\n\n  reset() {\n    for (const [_, pin] of this.ins) {\n      pin.busVoltage = 0;\n    }\n    for (const part of this.parts) {\n      part.reset();\n    }\n    this.eval();\n  }\n\n  in(pin = \"in\"): Pin {\n    assert(this.hasIn(pin), `No in pin ${pin}`);\n    return this.ins.get(pin)!;\n  }\n\n  out(pin = \"out\"): Pin {\n    assert(this.hasOut(pin), `No in pin ${pin}`);\n    return this.outs.get(pin)!;\n  }\n\n  hasIn(pin: string): boolean {\n    return this.ins.has(pin);\n  }\n\n  hasOut(pin: string): boolean {\n    return this.outs.has(pin);\n  }\n\n  pin(name: string): Pin {\n    assert(this.pins.has(name));\n    return this.pins.get(name)!;\n  }\n\n  get(name: string, offset?: number): Pin | undefined {\n    if (this.ins.has(name)) {\n      return this.ins.get(name)!;\n    }\n    if (this.outs.has(name)) {\n      return this.outs.get(name)!;\n    }\n    if (this.pins.has(name)) {\n      return this.pins.get(name)!;\n    }\n    return this.getBuiltin(name, offset);\n  }\n\n  private getBuiltin(name: string, offset = 0): Pin | undefined {\n    if (BUILTIN_NAMES.includes(name)) {\n      for (const part of this.parts) {\n        const pin = part.get(name, offset);\n        if (pin) {\n          return pin;\n        }\n      }\n    }\n    return undefined;\n  }\n\n  isOutPin(pin: string): boolean {\n    return this.outs.has(pin);\n  }\n\n  wire(part: Chip, connections: Connection[]) {\n    this.parts.add(part);\n    for (const { to, from } of connections) {\n      if (part.isOutPin(to.name)) {\n        this.wireOutPin(part, to, from);\n      } else {\n        this.wireInPin(part, to, from);\n      }\n    }\n  }\n\n  private findPin(from: string, minWidth?: number): Pin {\n    if (from.toLowerCase() === \"true\" || from === \"1\") {\n      return TRUE_BUS;\n    }\n    if (from.toLowerCase() === \"false\" || from === \"0\") {\n      return FALSE_BUS;\n    }\n    if (this.ins.has(from)) {\n      return this.ins.get(from)!;\n    }\n    if (this.outs.has(from)) {\n      return this.outs.get(from)!;\n    }\n    return this.pins.emplace(from, minWidth);\n  }\n\n  private wireOutPin(part: Chip, to: PinSide, from: PinSide) {\n    const partPin = assertExists(\n      part.outs.get(to.name),\n      () => `Cannot wire to missing pin ${to.name}`\n    );\n    to.width ??= partPin.width;\n\n    let chipPin = this.findPin(from.name, from.width ?? to.width);\n    const isInternal = this.pins.has(chipPin.name);\n\n    from.width ??= chipPin.width;\n\n    if (chipPin instanceof ConstantBus) {\n      throw new Error(`Cannot wire to constant bus`);\n    }\n\n    // Widen internal pins\n    if (isInternal && chipPin instanceof Bus) {\n      chipPin.ensureWidth(from.start + from.width);\n    }\n\n    // Wrap the chipPin in an InBus when the chip side is dimensioned\n    if (from.start > 0 || from.width !== chipPin.width) {\n      chipPin = new InSubBus(chipPin, from.start, from.width);\n    }\n\n    // Wrap the chipPin in an OutBus when the part side is dimensioned\n    if (to.start > 0 || to.width !== chipPin.width) {\n      chipPin = new OutSubBus(chipPin, to.start, to.width);\n    }\n\n    partPin.connect(chipPin);\n  }\n\n  private wireInPin(part: Chip, to: PinSide, from: PinSide) {\n    let partPin = assertExists(\n      part.ins.get(to.name),\n      () => `Cannot wire to missing pin ${to.name}`\n    );\n    to.width ??= partPin.width;\n\n    const chipPin = this.findPin(from.name, from.width ?? to.width);\n\n    from.width ??= chipPin.width;\n\n    // Wrap the partPin in an InBus when the part side is dimensioned\n    if (to.start > 0 || to.width !== chipPin.width) {\n      partPin = new InSubBus(partPin, to.start, to.width);\n    }\n\n    // Wrap the partPin in an OutBus when the chip side is dimensioned\n    if (![\"true\", \"false\"].includes(chipPin.name)) {\n      if (from.start > 0 || from.width !== chipPin.width) {\n        partPin = new OutSubBus(partPin, from.start, from.width);\n      }\n    }\n    chipPin.connect(partPin);\n  }\n\n  eval() {\n    for (const chip of this.parts) {\n      // TODO topological sort\n      // eval chip input busses\n      TRUE_BUS.next.forEach((pin) => (pin.busVoltage = TRUE_BUS.busVoltage));\n      FALSE_BUS.next.forEach((pin) => (pin.busVoltage = FALSE_BUS.busVoltage));\n      chip.eval();\n      // eval output busses\n    }\n  }\n\n  tick() {\n    this.eval();\n  }\n\n  tock() {\n    this.eval();\n  }\n\n  remove() {\n    for (const part of this.parts) {\n      part.remove();\n    }\n  }\n\n  // For the ROM32K builtin to load from a file system\n  async load(fs: FileSystem, path: string): Promise<void> {\n    for (const part of this.parts) {\n      if (part.name === \"ROM32K\") {\n        await part.load(fs, path);\n      }\n    }\n  }\n}\n\nexport class Low extends Chip {\n  constructor() {\n    super([], []);\n    this.outs.insert(FALSE_BUS);\n  }\n}\n\nexport class High extends Chip {\n  constructor() {\n    super([], []);\n    this.outs.insert(TRUE_BUS);\n  }\n}\n\nexport class ClockedChip extends Chip {\n  override get clocked(): boolean {\n    return true;\n  }\n\n  #subscription = Clock.get().$.subscribe(({ level }) => {\n    if (level === LOW) {\n      this.tock();\n    } else {\n      this.tick();\n    }\n  });\n\n  override remove() {\n    this.#subscription.unsubscribe();\n    super.remove();\n  }\n\n  override reset(): void {\n    super.reset();\n    this.tick();\n    this.tock();\n  }\n}\n\nexport interface PinSide {\n  name: string;\n  start: number;\n  width?: number;\n}\n\nexport interface Connection {\n  // To is the part side\n  to: PinSide;\n  // From is the chip side\n  from: PinSide;\n}\n\nexport type Pinout = Record<string, string>;\nexport interface SerializedChip {\n  id: number;\n  name: string;\n  ins: Pinout;\n  outs: Pinout;\n  pins: Pinout;\n  children: SerializedChip[];\n}\n\nfunction mask(width: number) {\n  return Math.pow(2, width) - 1;\n}\n\nfunction setBus(busses: Pinout, pin: Pin) {\n  busses[pin.name] = bin(\n    (pin.busVoltage & mask(pin.width)) <<\n      (pin as unknown as { start: number }).start ?? 0\n  );\n  return busses;\n}\n\nexport function printChip(chip: Chip): SerializedChip {\n  return {\n    id: chip.id,\n    name: chip.name ?? chip.constructor.name,\n    ins: [...chip.ins.entries()].reduce(setBus, {} as Pinout),\n    outs: [...chip.outs.entries()].reduce(setBus, {} as Pinout),\n    pins: [...chip.pins.entries()].reduce(setBus, {} as Pinout),\n    children: [...chip.parts.values()].map(printChip),\n  };\n}\n\nexport const BUILTIN_NAMES = [\n  \"Register\",\n  \"ARegister\",\n  \"DRegister\",\n  \"PC\",\n  \"RAM8\",\n  \"RAM64\",\n  \"RAM512\",\n  \"RAM4K\",\n  \"RAM16K\",\n  \"ROM32K\",\n  \"Screen\",\n  \"Keyboard\",\n  \"Memory\",\n];\n","import { BehaviorSubject, Observable, Subject } from \"rxjs\";\nimport { assert } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { HIGH, LOW, Voltage } from \"./chip.js\";\n\ninterface Tick {\n  readonly level: Voltage;\n  readonly ticks: number;\n}\n\nlet clock: Clock;\nexport class Clock {\n  private level: Voltage = LOW;\n  private ticks = 0;\n\n  static get() {\n    if (clock === undefined) {\n      clock = new Clock();\n    }\n    return clock;\n  }\n\n  get isHigh(): boolean {\n    return this.level === HIGH;\n  }\n\n  get isLow(): boolean {\n    return this.level === LOW;\n  }\n\n  private subject = new BehaviorSubject<Tick>({\n    level: this.level,\n    ticks: this.ticks,\n  });\n  readonly frameSubject = new Subject<void>();\n  readonly resetSubject = new Subject<void>();\n\n  readonly $: Observable<Tick> = this.subject;\n  readonly frame$: Observable<void> = this.frameSubject;\n  readonly reset$: Observable<void> = this.resetSubject;\n\n  private next() {\n    this.subject.next({\n      level: this.level,\n      ticks: this.ticks,\n    });\n  }\n\n  private constructor() {\n    // private\n  }\n\n  reset() {\n    this.level = LOW;\n    this.ticks = 0;\n    this.next();\n    this.resetSubject.next();\n  }\n\n  tick() {\n    assert(this.level === LOW, \"Can only tick up from LOW\");\n    this.level = HIGH;\n    this.next();\n  }\n\n  tock() {\n    assert(this.level === HIGH, \"Can only tock down from HIGH\");\n    this.level = LOW;\n    this.ticks += 1;\n    this.next();\n  }\n\n  toggle() {\n    this.level === HIGH ? this.tock() : this.tick();\n  }\n\n  eval() {\n    this.tick();\n    this.tock();\n  }\n\n  frame() {\n    this.frameSubject.next();\n  }\n\n  toString() {\n    return `${this.ticks}${this.level === HIGH ? \"+\" : \"\"}`;\n  }\n}\n","export type COMMANDS_ASM =\n  | \"0\"\n  | \"1\"\n  | \"-1\"\n  | \"D\"\n  | \"A\"\n  | \"M\"\n  | \"!D\"\n  | \"!A\"\n  | \"-D\"\n  | \"-A\"\n  | \"D+1\"\n  | \"A+1\"\n  | \"D-1\"\n  | \"A-1\"\n  | \"D+A\"\n  | \"D-A\"\n  | \"D-M\"\n  | \"A-D\"\n  | \"D&A\"\n  | \"D&M\"\n  | \"D|A\"\n  | \"D|M\";\n\nexport type COMMANDS_OP =\n  | 0b101010\n  | 0b111111\n  | 0b111010\n  | 0b001100\n  | 0b110000\n  | 0b110000\n  | 0b001101\n  | 0b110001\n  | 0b001111\n  | 0b110011\n  | 0b011111\n  | 0b110111\n  | 0b001110\n  | 0b110010\n  | 0b000010\n  | 0b010011\n  | 0b010011\n  | 0b000111\n  | 0b000000\n  | 0b000000\n  | 0b010101\n  | 0b010101;\n\n//Usefull for the visualization of the ALU\nexport type COMMANDS_ALU =\n  | \"0\"\n  | \"1\"\n  | \"-1\"\n  | \"x\"\n  | \"y\"\n  | \"!x\"\n  | \"!y\"\n  | \"-x\"\n  | \"-y\"\n  | \"x+1\"\n  | \"y+1\"\n  | \"x-1\"\n  | \"y-1\"\n  | \"x+y\"\n  | \"x-y\"\n  | \"y-x\"\n  | \"x&y\"\n  | \"x|y\";\n\nexport const COMMANDS_ALU: {\n  op: Record<COMMANDS_OP, COMMANDS_ALU>;\n} = {\n  op: {\n    0x2a: \"0\",\n    0x3f: \"1\",\n    0x3a: \"-1\",\n    0x0c: \"x\",\n    0x30: \"y\",\n    0x0d: \"!x\",\n    0x31: \"!y\",\n    0x0f: \"-x\",\n    0x33: \"-y\",\n    0x1f: \"x+1\",\n    0x37: \"y+1\",\n    0x0e: \"x-1\",\n    0x32: \"y-1\",\n    0x02: \"x+y\",\n    0x13: \"x-y\",\n    0x07: \"y-x\",\n    0x00: \"x&y\",\n    0x15: \"x|y\",\n  },\n};\n\nexport const COMMANDS: {\n  asm: Record<COMMANDS_ASM, COMMANDS_OP>;\n  op: Record<COMMANDS_OP, COMMANDS_ASM>;\n} = {\n  asm: {\n    \"0\": 0b101010, // 42 0x2A\n    \"1\": 0b111111, // 63 0x3F\n    \"-1\": 0b111010, // 58 0x3A\n    D: 0b001100, // 12 0x0C\n    A: 0b110000, // 48 0x30\n    M: 0b110000, // 48 0x30\n    \"!D\": 0b001101, // 13 0x0D\n    \"!A\": 0b110001, // 49 0x31\n    \"-D\": 0b001111, // 15 0x0F\n    \"-A\": 0b110011, // 51 0x33\n    \"D+1\": 0b011111, // 31 0x1F\n    \"A+1\": 0b110111, // 55 0x37\n    \"D-1\": 0b001110, // 14 0x0E\n    \"A-1\": 0b110010, // 50 0x32\n    \"D+A\": 0b000010, //  2 0x02\n    \"D-A\": 0b010011, // 19 0x13\n    \"D-M\": 0b010011, // 19 0x13\n    \"A-D\": 0b000111, //  7 0x07\n    \"D&A\": 0b000000, //  0 0x00\n    \"D&M\": 0b000000, //  0 0x00\n    \"D|A\": 0b010101, // 21 0x15\n    \"D|M\": 0b010101, // 21 0x15\n  },\n  op: {\n    0x2a: \"0\",\n    0x3f: \"1\",\n    0x3a: \"-1\",\n    0x0c: \"D\",\n    0x30: \"A\",\n    0x0d: \"!D\",\n    0x31: \"!A\",\n    0x0f: \"-D\",\n    0x33: \"-A\",\n    0x1f: \"D+1\",\n    0x37: \"A+1\",\n    0x0e: \"D-1\",\n    0x32: \"A-1\",\n    0x02: \"D+A\",\n    0x13: \"D-A\",\n    0x07: \"A-D\",\n    0x00: \"D&A\",\n    0x15: \"D|A\",\n  },\n};\n\nexport type ASSIGN_ASM = \"\" | \"M\" | \"D\" | \"MD\" | \"A\" | \"AM\" | \"AD\" | \"AMD\";\nexport type ASSIGN_OP = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;\n\nexport const ASSIGN: {\n  asm: Record<ASSIGN_ASM, ASSIGN_OP>;\n  op: Record<ASSIGN_OP, ASSIGN_ASM>;\n} = {\n  asm: {\n    \"\": 0x0,\n    M: 0b001,\n    D: 0b010,\n    MD: 0b011,\n    A: 0b100,\n    AM: 0b101,\n    AD: 0b110,\n    AMD: 0b111,\n  },\n  op: {\n    0x0: \"\",\n    0x1: \"M\",\n    0x2: \"D\",\n    0x3: \"MD\",\n    0x4: \"A\",\n    0x5: \"AM\",\n    0x6: \"AD\",\n    0x7: \"AMD\",\n  },\n};\n\nexport type JUMP_ASM =\n  | \"\"\n  | \"JGT\"\n  | \"JEQ\"\n  | \"JGE\"\n  | \"JLT\"\n  | \"JNE\"\n  | \"JLE\"\n  | \"JMP\";\nexport type JUMP_OP = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;\nexport const JUMP: {\n  asm: Record<JUMP_ASM, JUMP_OP>;\n  op: Record<JUMP_OP, JUMP_ASM>;\n} = {\n  asm: {\n    \"\": 0b0,\n    JGT: 0b001,\n    JEQ: 0b010,\n    JGE: 0b011,\n    JLT: 0b100,\n    JNE: 0b101,\n    JLE: 0b110,\n    JMP: 0b111,\n  },\n  op: {\n    0x0: \"\",\n    0x1: \"JGT\",\n    0x2: \"JEQ\",\n    0x3: \"JGE\",\n    0x4: \"JLT\",\n    0x5: \"JNE\",\n    0x6: \"JLE\",\n    0x7: \"JMP\",\n  },\n};\n\nexport const Flags = {\n  0x01: \"Positive\",\n  0x00: \"Zero\",\n  0x0f: \"Negative\",\n  Positive: 0x01,\n  Zero: 0x00,\n  Negative: 0x0f,\n};\n\nexport function alu(op: number, d: number, a: number): [number, number] {\n  let o = 0;\n  switch (op) {\n    case 0x2a:\n      o = 0;\n      break;\n    case 0x3f:\n      o = 1;\n      break;\n    case 0x3a:\n      o = -1;\n      break;\n    case 0x0c:\n      o = d;\n      break;\n    case 0x30:\n      o = a;\n      break;\n    case 0x0d:\n      o = ~d;\n      break;\n    case 0x31:\n      o = ~a;\n      break;\n    case 0x0f:\n      o = -d;\n      break;\n    case 0x33:\n      o = -a;\n      break;\n    case 0x1f:\n      o = d + 1;\n      break;\n    case 0x37:\n      o = a + 1;\n      break;\n    case 0x0e:\n      o = d - 1;\n      break;\n    case 0x32:\n      o = a - 1;\n      break;\n    case 0x02:\n      o = d + a;\n      break;\n    case 0x13:\n      o = d - a;\n      break;\n    case 0x07:\n      o = a - d;\n      break;\n    case 0x00:\n      o = d & a;\n      break;\n    case 0x15:\n      o = d | a;\n      break;\n  }\n\n  o = o & 0xffff;\n  const flags =\n    o === 0 ? Flags.Zero : o & 0x8000 ? Flags.Negative : Flags.Positive;\n  return [o, flags];\n}\n\nexport function alua(op: number, d: number, a: number): [number, number] {\n  if (op & 0b100000) d = 0;\n  if (op & 0b010000) d = ~d & 0xffff;\n  if (op & 0b001000) a = 0;\n  if (op & 0b000100) a = ~a & 0xffff;\n\n  let o = (op & 0b000010 ? d + a : d & a) & 0xffff;\n  if (op & 0b000001) o = ~o & 0xffff;\n\n  const flags =\n    o === 0 ? Flags.Zero : o & 0x8000 ? Flags.Negative : Flags.Positive;\n  return [o, flags];\n}\n","import { alu, COMMANDS_OP, Flags } from \"./alu.js\";\nimport {\n  Memory,\n  MemoryAdapter,\n  MemoryKeyboard,\n  SubMemory,\n  RAM as RAMMem,\n  SCREEN_OFFSET,\n  SCREEN_SIZE,\n} from \"./memory.js\";\n\nexport interface CPUInput {\n  inM: number;\n  instruction: number;\n  reset: boolean;\n}\n\nexport interface CPUOutput {\n  outM: number;\n  writeM: boolean;\n  addressM: number;\n}\n\nexport interface CPUState {\n  A: number;\n  D: number;\n  PC: number;\n  ALU: number;\n  flag: number;\n}\n\nexport function emptyState(): CPUState {\n  return { A: 0, D: 0, PC: 0, ALU: 0, flag: Flags.Zero };\n}\n\nconst BITS = {\n  c: 0b1000_0000_0000_0000,\n  x1: 0b1001_0000_0000_0000,\n  x2: 0b1001_0000_0000_0000,\n  am: 0b1001_0000_0000_0000,\n  op: 0b0000_1111_1100_0000,\n  d1: 0b1000_0000_0010_0000,\n  d2: 0b1000_0000_0001_0000,\n  d3: 0b1000_0000_0000_1000,\n  j1: 0b1000_0000_0000_0001,\n  j2: 0b1000_0000_0000_0010,\n  j3: 0b1000_0000_0000_0100,\n};\n\nexport function decode(instruction: number) {\n  function bit(bit: number): boolean {\n    return (instruction & bit) === bit;\n  }\n  const bits = {\n    c: bit(BITS.c),\n    x1: bit(BITS.x1),\n    x2: bit(BITS.x2),\n    am: bit(BITS.am),\n    op: ((instruction & BITS.op) >> 6) as COMMANDS_OP,\n    d1: bit(BITS.d1),\n    d2: bit(BITS.d2),\n    d3: bit(BITS.d3),\n    j1: bit(BITS.j1),\n    j2: bit(BITS.j2),\n    j3: bit(BITS.j3),\n  };\n\n  return bits;\n}\n\nexport function cpuTick(\n  { inM, instruction }: CPUInput,\n  { A, D, PC }: CPUState\n): [CPUState, boolean] {\n  const bits = decode(instruction);\n  const a = bits.am ? inM : A;\n  const [ALU, flag] = alu(bits.op, D, a);\n\n  return [{ A, D, PC: PC + 1, ALU, flag }, bits.d3];\n}\n\nexport function cpuTock(\n  { inM, instruction, reset }: CPUInput,\n  { A, D, PC, ALU, flag }: CPUState\n): [CPUOutput, CPUState] {\n  const bits = decode(instruction);\n\n  const j1 = bits.j1 && flag === Flags.Positive;\n  const j2 = bits.j2 && flag === Flags.Zero;\n  const j3 = bits.j3 && flag === Flags.Negative;\n  const jmp = j1 || j2 || j3;\n\n  PC = reset ? 0 : jmp ? A : PC;\n\n  if (bits.d2) {\n    D = ALU;\n  }\n\n  const oldA = A;\n  if (!bits.c) {\n    A = instruction & 0x7fff;\n  } else if (bits.d1) {\n    A = ALU;\n  }\n\n  const a = bits.am ? inM : A;\n  const alu2 = alu(bits.op, D, a);\n\n  ALU = alu2[0];\n  flag = alu2[1];\n\n  const output: CPUOutput = {\n    addressM: bits.d3 ? oldA : A,\n    outM: ALU,\n    writeM: bits.d3,\n  };\n\n  const state: CPUState = {\n    A,\n    D,\n    ALU,\n    flag,\n    PC,\n  };\n\n  return [output, state];\n}\n\nexport function cpu(input: CPUInput, state: CPUState): [CPUOutput, CPUState] {\n  const [tickState, _writeM] = cpuTick(input, state);\n  return cpuTock(input, tickState);\n}\n\nexport class CPU {\n  readonly RAM: Memory;\n  readonly ROM: Memory;\n  readonly Screen: MemoryAdapter;\n  readonly Keyboard: MemoryKeyboard;\n\n  #pc = 0;\n  #a = 0;\n  #d = 0;\n\n  #tickState: CPUState = {\n    A: 0,\n    D: 0,\n    PC: 0,\n    ALU: 0,\n    flag: Flags.Zero,\n  };\n\n  get state(): CPUState {\n    return this.#tickState;\n  }\n\n  get PC() {\n    return this.#pc;\n  }\n\n  get A() {\n    return this.#a;\n  }\n\n  get D() {\n    return this.#d;\n  }\n\n  setA(value: number) {\n    this.#a = value;\n  }\n\n  setD(value: number) {\n    this.#d = value;\n  }\n\n  setPC(value: number) {\n    this.#pc = value;\n  }\n\n  constructor({ RAM = new RAMMem(), ROM }: { RAM?: Memory; ROM: Memory }) {\n    this.RAM = RAM;\n    this.ROM = ROM;\n\n    // \"Device Map\"\n    this.Screen = new SubMemory(this.RAM, SCREEN_SIZE, SCREEN_OFFSET);\n    this.Keyboard = new MemoryKeyboard(this.RAM);\n  }\n\n  reset() {\n    this.#pc = 0;\n    this.#a = 0;\n    this.#d = 0;\n  }\n\n  tick() {\n    const [{ addressM, outM, writeM }, { A, D, PC }] = cpu(\n      {\n        inM: this.RAM.get(this.#a),\n        instruction: this.ROM.get(this.#pc),\n        reset: false,\n      },\n      {\n        A: this.#a,\n        D: this.#d,\n        PC: this.#pc,\n        ALU: this.#d,\n        flag: Flags.Zero,\n      }\n    );\n\n    this.#a = A;\n    this.#d = D;\n    this.#pc = PC;\n\n    if (writeM) {\n      this.RAM.set(addressM, outM);\n    }\n  }\n}\n","import { assert } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport { op } from \"../util/asm.js\";\nimport { int10, int16, int2 } from \"../util/twos.js\";\nimport { load } from \"../fs.js\";\n\nexport const FORMATS = [\"bin\", \"dec\", \"hex\", \"asm\"];\nexport type Format = typeof FORMATS[number];\n\nexport const SCREEN_OFFSET = 0x4000;\nexport const SCREEN_ROWS = 512;\nexport const SCREEN_COLS = 256;\nexport const SCREEN_SIZE = SCREEN_ROWS * SCREEN_COLS;\nexport const KEYBOARD_OFFSET = 0x6000;\n\nexport interface MemoryAdapter {\n  size: number;\n  get(index: number): number;\n  set(index: number, value: number): void;\n  reset(): void;\n  update(cell: number, value: string, format: Format): void;\n  load(fs: FileSystem, path: string): Promise<void>;\n  loadBytes(bytes: number[]): void;\n  range(start?: number, end?: number): number[];\n  map<T>(\n    fn: (index: number, value: number) => T,\n    start?: number,\n    end?: number\n  ): Iterable<T>;\n}\n\nexport interface KeyboardAdapter {\n  getKey(): number;\n  setKey(key: number): void;\n  clearKey(): void;\n}\n\nexport class Memory implements MemoryAdapter {\n  private memory: Int16Array;\n\n  get size(): number {\n    return this.memory.length;\n  }\n\n  constructor(memory: ArrayBuffer | number) {\n    if (typeof memory === \"number\") {\n      this.memory = new Int16Array(memory);\n    } else {\n      this.memory = new Int16Array(memory);\n    }\n  }\n\n  get(index: number): number {\n    if (index < 0 || index >= this.size) {\n      return 0xffff;\n    }\n    return this.memory[index] ?? 0;\n  }\n\n  set(index: number, value: number): void {\n    if (index >= 0 && index < this.size) {\n      this.memory[index] = value & 0xffff;\n    }\n  }\n\n  reset(): void {\n    this.memory.fill(0);\n  }\n\n  update(cell: number, value: string, format: Format) {\n    let current: number;\n    switch (format) {\n      case \"asm\":\n        current = op(value);\n        break;\n      case \"bin\":\n        current = int2(value);\n        break;\n      case \"hex\":\n        current = int16(value);\n        break;\n      case \"dec\":\n      default:\n        current = int10(value);\n        break;\n    }\n\n    if (isFinite(current) && current <= 0xffff) {\n      this.set(cell, current);\n    }\n  }\n\n  async load(fs: FileSystem, path: string) {\n    try {\n      this.loadBytes(await load(fs, path));\n    } catch (cause) {\n      // throw new Error(`ROM32K Failed to load file ${path}`, { cause });\n      throw new Error(`Memory Failed to load file ${path}`);\n    }\n  }\n\n  loadBytes(bytes: number[]): void {\n    this.memory.set(new Int16Array(bytes));\n    this.memory.fill(0, bytes.length, this.size);\n  }\n\n  range(start = 0, end = this.size): number[] {\n    return [...this.memory.slice(start, end)];\n  }\n\n  *map<T>(\n    fn: (index: number, value: number) => T,\n    start = 0,\n    end = this.size\n  ): Iterable<T> {\n    assert(start < end);\n    for (let i = start; i < end; i++) {\n      yield fn(i, this.get(i));\n    }\n  }\n}\n\nexport class SubMemory implements MemoryAdapter {\n  constructor(\n    private readonly parent: MemoryAdapter,\n    readonly size: number,\n    private readonly offset: number\n  ) {}\n\n  get(index: number): number {\n    if (index < 0 || index >= this.size) {\n      return 0xffff;\n    }\n    return this.parent.get(this.offset + index);\n  }\n\n  set(index: number, value: number): void {\n    if (index >= 0 && index < this.size) {\n      this.parent.set(index + this.offset, value);\n    }\n  }\n\n  reset(): void {\n    for (let i = 0; i < this.size; i++) {\n      this.set(i, 0);\n    }\n  }\n\n  update(index: number, value: string, format: string): void {\n    if (index >= 0 && index < this.size) {\n      this.parent.update(index + this.offset, value, format);\n    }\n  }\n\n  load(fs: FileSystem, path: string): Promise<void> {\n    return this.parent.load(fs, path);\n  }\n\n  loadBytes(bytes: number[]): void {\n    return this.parent.loadBytes(bytes);\n  }\n\n  range(start?: number, end?: number): number[] {\n    return this.parent.range(start, end);\n  }\n  map<T>(\n    fn: (index: number, value: number) => T,\n    start?: number,\n    end?: number\n  ): Iterable<T> {\n    return this.parent.map(fn, start, end);\n  }\n}\n\nexport class MemoryKeyboard extends SubMemory implements KeyboardAdapter {\n  constructor(memory: MemoryAdapter) {\n    super(memory, 1, 0x6000);\n  }\n\n  getKey(): number {\n    return this.get(0);\n  }\n\n  setKey(key: number): void {\n    this.set(0, key & 0xffff);\n  }\n\n  clearKey(): void {\n    this.set(0, 0);\n  }\n}\n\nexport class ROM extends Memory {\n  static readonly SIZE = 0x8000;\n  constructor(program: Int16Array) {\n    const arr = new Int16Array(ROM.SIZE);\n    arr.set(program);\n    super(arr);\n  }\n}\n\nexport class RAM extends Memory {\n  // 4k main memory, 2k screen memory, 1 keyboard\n  // static readonly SIZE = 0x4000 + 0x2000 + 0x0001;\n  static readonly SIZE = 0x8000;\n  constructor() {\n    super(RAM.SIZE);\n  }\n}\n","import { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport * as loader from \"./loader.js\";\n\nexport async function load(fs: FileSystem, path: string): Promise<number[]> {\n  if (path.endsWith(\".hack\")) {\n    return loadHack(fs, path);\n  }\n\n  if (path.endsWith(\".asm\")) {\n    return loadAsm(fs, path);\n  }\n\n  throw new Error(`Cannot load file without hack or asm extension ${path}`);\n}\n\nexport async function loadAsm(fs: FileSystem, path: string): Promise<number[]> {\n  return loader.loadAsm(await fs.readFile(path));\n}\n\nexport async function loadHack(\n  fs: FileSystem,\n  path: string\n): Promise<number[]> {\n  return loader.loadHack(await fs.readFile(path));\n}\n","import ohm from \"ohm-js\";\nimport { int10, int16, int2 } from \"../util/twos.js\";\nimport { Err, Ok, Result } from \"@davidsouther/jiffies/lib/esm/result.js\";\n\nexport const UNKNOWN_PARSE_ERROR = `Unknown parse error`;\n\nimport baseGrammar from \"./grammars/base.ohm.js\";\nexport const grammars = {\n  Base: ohm.grammar(baseGrammar),\n};\n\nexport const baseSemantics = grammars.Base.createSemantics();\n\nbaseSemantics.extendOperation(\"asIteration\", {\n  List(list, _) {\n    return list.asIteration();\n  },\n});\n\nbaseSemantics.addAttribute(\"value\", {\n  decNumber(_, digits): number {\n    return int10(digits.sourceString);\n  },\n  wholeDec(_, digits): number {\n    return int10(digits.sourceString);\n  },\n  binNumber(_, digits) {\n    return int2(digits.sourceString);\n  },\n  hexNumber(_, digits) {\n    return int16(digits.sourceString);\n  },\n  Number(num) {\n    return num.value;\n  },\n  Name(ident) {\n    return ident.name;\n  },\n  identifier(_, __): string {\n    return this.sourceString;\n  },\n});\n\nbaseSemantics.addAttribute(\"name\", {\n  identifier(_, __): string {\n    return this.sourceString;\n  },\n  Name(_): string {\n    return this.child(0)?.name;\n  },\n});\n\nbaseSemantics.addAttribute(\"String\", {\n  String(_a, str, _b) {\n    return str.sourceString;\n  },\n});\n\nexport type ParseError = Error | { message: string; shortMessage: string };\n\nexport function makeParser<ResultType>(\n  grammar: ohm.Grammar,\n  semantics: ohm.Semantics,\n  property: (obj: ohm.Dict) => ResultType = ({ root }) => root\n): (source: string) => Result<ResultType, ParseError> {\n  return function parse(source) {\n    try {\n      const match = grammar.match(source);\n      if (match.succeeded()) {\n        const parsed = semantics(match);\n        const parse = property(parsed);\n        return Ok(parse);\n      } else {\n        return Err({\n          message: match.message ?? UNKNOWN_PARSE_ERROR,\n          shortMessage: match.shortMessage ?? UNKNOWN_PARSE_ERROR,\n        });\n      }\n    } catch (e) {\n      return Err(e as Error);\n    }\n  };\n}\n\nexport interface Span {\n  start: number;\n  end: number;\n}\n","const base = `\nBase {\n  Root = Value*\n\n  At = at\n  Bang = bang\n  Bar = bar\n  CloseAngle = closeAngle\n  CloseBrace = closeBrace\n  CloseParen = closeParen\n  CloseSquare = closeSquare\n  Comma = comma\n  Dollar = dollar\n  Dot = dot\n  DoubleQuote = doubleQuote\n  Equal = equal\n  OpenAngle = openAngle\n  OpenBrace = openBrace\n  OpenParen = openParen\n  OpenSquare = openSquare\n  Percent = percent\n  Semi = semi\n  Underscore = underscore\n\n  at = \"@\"\n  bang = \"!\"\n  bar = \"|\"\n  closeAngle = \">\"\n  closeBrace = \"}\"\n  closeParen = \")\"\n  closeSquare = \"]\"\n  comma = \",\"\n  dollar = \"$\"\n  dot = \".\"\n  doubleQuote = \"\\\\\"\"\n  equal = \"=\"\n  minus = \"-\"\n  newline = \"\\\\r\"? \"\\\\n\"\n  openAngle = \"<\"\n  openBrace = \"{\"\n  openParen = \"(\"\n  openSquare = \"[\"\n  percent = \"%\"\n  semi = \";\"\n  underscore = \"_\"\n\n  Value = identifier | number | boolean\n\n  boolean = true | false\n  True = true\n  False = false\n  true = \"true\"\n  false = \"false\"\n\n  Name = identifier\n  identifier = (letter|underscore) (alnum|underscore|dot|dollar)*\n\n  Number = number\n  number = hexNumber | decNumber | binNumber\n  binNumber = (\"%B\") (\"0\"|\"1\")+\n  hexNumber = (\"%X\") hexDigit+\n  decNumber = (\"%D\")? (wholeDec | realDec)\n  wholeDec = minus? digit+\n  realDec = minus? digit* \".\" digit+\n\n  String = DoubleQuote (~doubleQuote any)* doubleQuote\n  \n  spaces := (lineComment | comment | space)*\n  commentStart = \"/*\"\n  commentEnd = \"*/\"\n  comment = commentStart (~commentEnd any)* commentEnd\n  lineCommentStart = \"//\"\n  lineComment = lineCommentStart (~\"\\\\n\" any)* \"\\\\n\"\n\n  List<elem, sep> = NonemptyListOf<elem, sep> sep?\n  EmptyList<elem, sep> = EmptyList<elem, sep> sep?\n}`;\nexport default base;\n","const cmp = `\nCmp <: Base {\n  Root := line*\n  line = bar cell+ newline?\n  cell = cellvalue bar\n  cellvalue = (~(bar|newline) any)*\n}`;\nexport default cmp;\n","import ohm from \"ohm-js\";\nimport { grammars, makeParser, baseSemantics } from \"./base.js\";\n\nexport type Cell = string;\nexport type Line = Cell[];\nexport type Cmp = Line[];\n\nimport cmpGrammar from \"./grammars/cmp.ohm.js\";\nexport const grammar = ohm.grammar(cmpGrammar, grammars);\nexport const cmpSemantics = grammar.extendSemantics(baseSemantics);\n\ncmpSemantics.addAttribute<Cell>(\"cell\", {\n  cell(value, _) {\n    return value.sourceString;\n  },\n});\n\ncmpSemantics.addAttribute<Line>(\"line\", {\n  line(_a, cells, _b) {\n    return cells.children.map((c) => c.cell);\n  },\n});\n\ncmpSemantics.addAttribute<Cmp>(\"root\", {\n  Root(lines) {\n    return lines.children.map((c) => c.line);\n  },\n});\n\nexport const CMP = {\n  grammar: cmpGrammar,\n  semantics: cmpSemantics,\n  parser: grammar,\n  parse: makeParser<Cmp>(grammar, cmpSemantics),\n};\n","const tst = `\nTst <: Base {\n  Root := Tst\n  Tst = (TstStatement | TstRepeat | TstWhile)+\n\n  TstRepeat = Repeat Number? OpenBrace TstStatement+ CloseBrace\n  TstWhile = While Condition OpenBrace TstStatement+ CloseBrace\n  TstStatement = List<TstOperation, \",\"> (Semi | Bang)\n\n  TstOperation =\n    | TstFileOperation\n    | TstOutputListOperation\n    | TstEvalOperation\n    | TstSetOperation\n    | TstOutputOperation\n    | TstEchoOperation\n    | TstClearEchoOperation\n    | TstLoadROMOperation\n\n  TstLoadROMOperation = ROM32K Load FileName\n  TstFileOperation = FileOperation FileName\n  TstOutputListOperation = \"output-list\" OutputFormat+\n  OutputFormat = Name Index? percent FormatStyle wholeDec dot wholeDec dot wholeDec\n  TstSetOperation = Set Name Index? Number\n  Index = OpenSquare wholeDec? CloseSquare\n  Condition = Value CompareOp Value\n  TstEvalOperation = Eval | Tick | Tock | TickTock\n  TstOutputOperation = Output\n  TstEchoOperation = Echo String\n  TstClearEchoOperation = ClearEcho\n\n  FileName = Name\n  FileOperation = \"load\" | \"output-file\" | \"compare-to\"\n\n  Set = \"set\"\n  Eval = \"eval\"\n  Tick = \"tick\"\n  Tock = \"tock\"\n  TickTock = \"ticktock\"\n  Echo = \"echo\"\n  Repeat = \"repeat\"\n  ClearEcho = \"clear-echo\"\n  Output = \"output\"\n  OutputList = \"output-list\"\n  FormatStyle = \"B\"|\"D\"|\"S\"|\"X\"\n  ROM32K = \"ROM32K\"\n  Load = \"load\"\n  While = \"while\"\n\n  CompareOp = \"<>\" | \"<=\" | \">=\" | \"=\" | \"<\" | \">\"\n}`;\nexport default tst;\n","/** Reads tst files to apply and perform test runs. */\n\nimport ohm from \"ohm-js\";\nimport { baseSemantics, grammars, makeParser, Span } from \"./base.js\";\n\nexport interface TstEchoOperation {\n  op: \"echo\";\n  message: string;\n}\n\nexport interface TstClearEchoOperation {\n  op: \"clear-echo\";\n}\n\nexport interface TstSetOperation {\n  op: \"set\";\n  id: string;\n  index?: number;\n  value: number;\n}\n\nexport interface TstEvalOperation {\n  op: \"eval\" | \"tick\" | \"tock\";\n}\n\nexport interface TstOutputOperation {\n  op: \"output\";\n}\n\nexport interface TstOutputSpec {\n  id: string;\n  builtin: boolean;\n  address: number;\n  style: \"D\" | \"X\" | \"B\" | \"S\";\n  width: number;\n  lpad: number;\n  rpad: number;\n}\n\nexport interface TstOutputListOperation {\n  op: \"output-list\";\n  spec: TstOutputSpec[];\n}\n\nexport interface TstLoadROMOperation {\n  op: \"loadRom\";\n  file: string;\n}\n\nexport interface TstFileOperation {\n  op: \"load\" | \"output-file\" | \"compare-to\";\n  file: string;\n}\n\nexport type TstOperation =\n  | TstFileOperation\n  | TstEvalOperation\n  | TstEchoOperation\n  | TstClearEchoOperation\n  | TstOutputOperation\n  | TstSetOperation\n  | TstOutputListOperation\n  | TstLoadROMOperation;\n\nexport interface TstLineStatement {\n  ops: TstOperation[];\n  break?: true;\n  span: Span;\n}\n\nexport interface TstRepeat {\n  statements: TstLineStatement[];\n  count: number;\n  span: Span;\n}\n\nexport interface TstWhileCondition {\n  op: \"<\" | \"<=\" | \"=\" | \">=\" | \">\" | \"<>\";\n  left: string | number;\n  right: string | number;\n}\n\nexport interface TstWhileStatement {\n  statements: TstLineStatement[];\n  condition: TstWhileCondition;\n  span: Span;\n}\n\nexport type TstStatement = TstLineStatement | TstRepeat | TstWhileStatement;\n\nexport interface Tst {\n  lines: TstStatement[];\n}\n\nimport tstGrammar from \"./grammars/tst.ohm.js\";\nexport const grammar = ohm.grammar(tstGrammar, grammars);\nexport const tstSemantics = grammar.extendSemantics(baseSemantics);\n\ntstSemantics.extendAttribute<number>(\"value\", {\n  Index(_a, idx, _b) {\n    return idx?.child(0)?.value ?? -1;\n  },\n});\n\ntstSemantics.extendAttribute<string>(\"name\", {\n  FileName({ name }) {\n    return name;\n  },\n});\n\ntstSemantics.addAttribute<number>(\"index\", {\n  Index(_open, dec, _close) {\n    return dec.child(0)?.value ?? 0;\n  },\n});\n\ntstSemantics.addAttribute<TstOutputSpec>(\"format\", {\n  OutputFormat(\n    { name: id },\n    index,\n    _a,\n    { sourceString: style },\n    { value: lpad },\n    _b,\n    { value: width },\n    _c,\n    { value: rpad }\n  ) {\n    return {\n      id,\n      builtin: index?.child(0) !== undefined,\n      address: index?.child(0)?.value ?? -1,\n      style: style as TstOutputSpec[\"style\"],\n      width,\n      lpad,\n      rpad,\n    };\n  },\n});\n\ntstSemantics.addAttribute<TstOperation>(\"operation\", {\n  TstEvalOperation(op) {\n    return { op: op.sourceString as TstEvalOperation[\"op\"] };\n  },\n  TstOutputOperation(_) {\n    return { op: \"output\" };\n  },\n  TstOutputListOperation(_, formats) {\n    return {\n      op: \"output-list\",\n      spec: formats.children.map((n) => n.format),\n    };\n  },\n  TstSetOperation(op, { name }, index, { value }) {\n    const setOp: TstSetOperation = {\n      op: \"set\",\n      id: name,\n      value,\n    };\n    const child = index.child(0)?.child(1)?.child(0);\n    if (child) {\n      setOp.index = child.value;\n    }\n    return setOp;\n  },\n  TstEchoOperation(op, str) {\n    return {\n      op: \"echo\",\n      message: str.String as string,\n    };\n  },\n  TstClearEchoOperation(op) {\n    return {\n      op: \"clear-echo\",\n    };\n  },\n  TstLoadROMOperation(_r, _l, { name }) {\n    return {\n      op: \"loadRom\",\n      file: name,\n    };\n  },\n  TstFileOperation(op, file) {\n    return {\n      op: op.sourceString as TstFileOperation[\"op\"],\n      file: file.sourceString,\n    };\n  },\n});\n\ntstSemantics.addAttribute<TstWhileCondition>(\"condition\", {\n  Condition({ value: left }, { sourceString: op }, { value: right }) {\n    return {\n      left,\n      right,\n      op: op as \"<\" | \"<=\" | \"=\" | \">=\" | \">\" | \"<>\",\n    };\n  },\n});\n\ntstSemantics.addAttribute<TstStatement>(\"statement\", {\n  TstWhile(op, cond, _o, statements, _c) {\n    return {\n      statements: statements.children.map(({ statement }) => statement),\n      condition: cond.condition,\n      span: {\n        start: op.source.startIdx,\n        end: cond.source.endIdx,\n      },\n    };\n  },\n  TstRepeat(op, count, _o, statements, _c) {\n    return {\n      statements: statements.children.map(({ statement }) => statement),\n      count: count.child(0)?.value ?? -1,\n      span: {\n        start: op.source.startIdx,\n        end: count.source.endIdx,\n      },\n    };\n  },\n  TstStatement(list, end) {\n    const stmt: TstStatement = {\n      ops: list\n        .asIteration()\n        .children.map((node) => node.operation as TstOperation),\n      span: {\n        start: this.source.startIdx,\n        end: this.source.endIdx,\n      },\n    };\n    if (end.sourceString === \"!\") {\n      stmt.break = true;\n    }\n    return stmt;\n  },\n});\n\ntstSemantics.addAttribute<Tst>(\"tst\", {\n  Tst(lines) {\n    return {\n      lines: lines.children.map((n) => n.statement),\n    };\n  },\n});\n\ntstSemantics.addAttribute<Tst>(\"root\", {\n  Root({ tst }) {\n    return tst;\n  },\n});\n\nexport const TST = {\n  grammar: tstGrammar,\n  semantics: tstSemantics,\n  parser: grammar,\n  parse: makeParser<Tst>(grammar, tstSemantics),\n};\n","const asm = `\nASM <: Base {\n  Root := ASM\n  ASM = Instruction*\n  \n  Instruction = Label|AInstruction|CInstruction\n  \n  Label = OpenParen identifier closeParen\n  AInstruction = at (identifier | decNumber)\n  CInstruction = assign? op jmp?\n  \n  assign = (\n      \"AMD\"\n      | \"AM\"\n      | \"AD\"\n      | \"MD\"\n      | \"M\"\n      | \"D\"\n      | \"A\"\n      ) equal\n      \n  op =\n      | \"0\" | \"1\" | \"-1\"\n      | \"!D\" | \"!A\" | \"!M\"\n      | \"-D\" | \"-A\" | \"-M\"\n      | \"D+1\" | \"A+1\" | \"M+1\"\n      | \"D-1\" | \"A-1\" | \"M-1\"\n      | \"D+A\" | \"D+M\"\n      | \"D-A\" | \"D-M\"\n      | \"A-D\" | \"M-D\"\n      | \"D&A\" | \"D&M\"\n      | \"D|A\" | \"D|M\"\n      | \"D\" | \"A\" | \"M\"\n\n\n  jmp = semi (\"JGT\" | \"JEQ\" | \"JGE\" | \"JLT\" | \"JNE\" | \"JLE\" | \"JMP\")\n}`;\nexport default asm;\n","import { assertExists } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport ohm from \"ohm-js\";\nimport {\n  ASSIGN,\n  ASSIGN_ASM,\n  ASSIGN_OP,\n  COMMANDS,\n  COMMANDS_ASM,\n  COMMANDS_OP,\n  JUMP,\n  JUMP_ASM,\n  JUMP_OP,\n} from \"../cpu/alu.js\";\nimport { KEYBOARD_OFFSET, SCREEN_OFFSET } from \"../cpu/memory.js\";\nimport { makeC } from \"../util/asm.js\";\nimport { grammars, makeParser, baseSemantics } from \"./base.js\";\n\nimport asmGrammar from \"./grammars/asm.ohm.js\";\n\nexport const grammar = ohm.grammar(asmGrammar, grammars);\nexport const asmSemantics = grammar.extendSemantics(baseSemantics);\n\nexport interface Asm {\n  instructions: AsmInstruction[];\n}\n\nexport type AsmInstruction =\n  | AsmAInstruction\n  | AsmCInstruction\n  | AsmLabelInstruction;\n\nexport type AsmAInstruction = AsmALabelInstruction | AsmAValueInstruction;\nexport interface AsmALabelInstruction {\n  type: \"A\";\n  label: string;\n}\n\nexport interface AsmAValueInstruction {\n  type: \"A\";\n  value: number;\n}\n\nfunction isALabelInstruction(\n  inst: AsmAInstruction\n): inst is AsmALabelInstruction {\n  return (inst as AsmALabelInstruction).label !== undefined;\n}\n\nexport interface AsmCInstruction {\n  type: \"C\";\n  op: COMMANDS_OP;\n  isM: boolean;\n  store?: ASSIGN_OP;\n  jump?: JUMP_OP;\n}\n\nexport interface AsmLabelInstruction {\n  type: \"L\";\n  label: string;\n}\n\nasmSemantics.addAttribute<Asm>(\"root\", {\n  Root(_) {\n    return this.asm;\n  },\n});\n\nasmSemantics.addAttribute<Asm>(\"asm\", {\n  Root(asm) {\n    return {\n      instructions: asm\n        .child(0)\n        .children.map(({ instruction }) => instruction as AsmInstruction),\n    };\n  },\n});\n\nasmSemantics.addAttribute<AsmInstruction>(\"instruction\", {\n  AInstruction(_at, val): AsmAInstruction {\n    try {\n      return {\n        type: \"A\",\n        label: val.name,\n      };\n    } catch (e) {\n      // Pass\n    }\n\n    try {\n      return {\n        type: \"A\",\n        value: val.value,\n      };\n    } catch (e) {\n      // pass\n    }\n\n    throw new Error(`AsmAInstruction must have either a name or a value`);\n  },\n  CInstruction(assignN, opN, jmpN): AsmCInstruction {\n    const assign = assignN.child(0)?.child(0)?.sourceString as ASSIGN_ASM;\n    const op = opN.sourceString.replace(\"M\", \"A\") as COMMANDS_ASM;\n    const jmp = jmpN.child(0)?.child(1)?.sourceString as JUMP_ASM;\n    const isM =\n      assignN.sourceString.includes(\"M\") || opN.sourceString.includes(\"M\");\n    const inst: AsmCInstruction = {\n      type: \"C\",\n      op: COMMANDS.asm[op],\n      isM,\n    };\n    if (jmp) inst.jump = JUMP.asm[jmp];\n    if (assign) inst.store = ASSIGN.asm[assign];\n    return inst;\n  },\n  Label(_o, { name }, _c): AsmLabelInstruction {\n    return {\n      type: \"L\",\n      label: name,\n    };\n  },\n});\n\nexport function fillLabel(asm: Asm) {\n  let nextLabel = 16;\n  const symbols = new Map<string, number>([\n    [\"R0\", 0],\n    [\"R1\", 1],\n    [\"R2\", 2],\n    [\"R3\", 3],\n    [\"R4\", 4],\n    [\"R5\", 5],\n    [\"R6\", 6],\n    [\"R7\", 7],\n    [\"R8\", 8],\n    [\"R9\", 9],\n    [\"R10\", 10],\n    [\"R11\", 11],\n    [\"R12\", 12],\n    [\"R13\", 13],\n    [\"R14\", 14],\n    [\"R15\", 15],\n    [\"SP\", 0],\n    [\"LCL\", 1],\n    [\"ARG\", 2],\n    [\"THIS\", 3],\n    [\"THAT\", 4],\n    [\"SCREEN\", SCREEN_OFFSET],\n    [\"KBD\", KEYBOARD_OFFSET],\n  ]);\n\n  function getLabelValue(label: string) {\n    if (!symbols.has(label)) {\n      symbols.set(label, nextLabel);\n      nextLabel += 1;\n    }\n    return assertExists(symbols.get(label), `Label not in symbols: ${label}`);\n  }\n\n  function transmuteAInstruction(instruction: AsmALabelInstruction) {\n    const value = getLabelValue(instruction.label);\n    (instruction as unknown as AsmAValueInstruction).value = value;\n    delete (instruction as unknown as { label: undefined }).label;\n  }\n\n  const unfilled: AsmALabelInstruction[] = [];\n  let line = 0;\n  for (const instruction of asm.instructions) {\n    if (instruction.type === \"L\") {\n      if (symbols.has(instruction.label)) {\n        throw new Error(`ASM Duplicate label ${instruction.label}`);\n      } else {\n        symbols.set(instruction.label, line);\n      }\n      continue;\n    }\n\n    line += 1;\n\n    if (instruction.type === \"A\") {\n      if (isALabelInstruction(instruction)) {\n        unfilled.push(instruction);\n      }\n    }\n  }\n\n  unfilled.forEach(transmuteAInstruction);\n}\n\nexport function emit(asm: Asm): number[] {\n  return asm.instructions\n    .map((inst) => {\n      if (inst.type === \"A\") {\n        if (isALabelInstruction(inst)) {\n          throw new Error(`ASM Emitting unfilled A instruction`);\n        }\n        return inst.value;\n      }\n      if (inst.type === \"C\") {\n        return makeC(inst.isM, inst.op, inst.store, inst.jump);\n      }\n      return undefined;\n    })\n    .filter((op): op is number => op !== undefined);\n}\n\nexport const ASM = {\n  grammar: asmGrammar,\n  semantics: asmSemantics,\n  parser: grammar,\n  parse: makeParser<Asm>(grammar, asmSemantics),\n  passes: {\n    fillLabel,\n    emit,\n  },\n};\n","import { unwrap } from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { ASM } from \"./languages/asm.js\";\nimport { int2, parseTwosInt } from \"./util/twos.js\";\n\nexport async function loadAsm(source: string): Promise<number[]> {\n  const asm = unwrap(ASM.parse(source));\n  ASM.passes.fillLabel(asm);\n  return ASM.passes.emit(asm);\n}\n\nexport async function loadHack(source: string): Promise<number[]> {\n  return source\n    .split(\"\\n\")\n    .filter((line) => line.trim() !== \"\")\n    .map(int2);\n}\n\nexport async function loadBlob(bytes: string): Promise<number[]> {\n  return bytes\n    .split(\"\\n\")\n    .filter((line) => line.trim() !== \"\")\n    .map(parseTwosInt);\n}\n","import { assert } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { bin, dec, hex } from \"./util/twos.js\";\nimport { Test } from \"./tst.js\";\n\nexport class Output {\n  private readonly fmt: \"B\" | \"X\" | \"D\" | \"S\";\n  private readonly lPad: number;\n  private readonly rPad: number;\n  private readonly len: number;\n  private readonly index: number;\n  private readonly builtin: boolean;\n\n  // new Output(inst.id, inst.style, inst.width, inst.lpad, inst.rpad)\n  constructor(\n    private variable: string,\n    format = \"%B1.1.1\",\n    len?: number,\n    lPad?: number,\n    rPad?: number,\n    builtin?: boolean,\n    index?: number\n  ) {\n    if (\n      format.startsWith(\"%\") &&\n      len === undefined &&\n      lPad === undefined &&\n      rPad === undefined\n    ) {\n      const { fmt, lPad, rPad, len } = format.match(\n        /^%(?<fmt>[BDXS])(?<lPad>\\d+)\\.(?<len>\\d+)\\.(?<rPad>\\d+)$/\n      )?.groups as {\n        fmt: \"B\" | \"X\" | \"D\" | \"S\";\n        lPad: string;\n        rPad: string;\n        len: string;\n      };\n      this.fmt = fmt;\n      this.lPad = parseInt(lPad);\n      this.rPad = parseInt(rPad);\n      this.len = parseInt(len);\n      this.builtin = false;\n      this.index = -1;\n    } else {\n      assert([\"B\", \"X\", \"D\", \"S\"].includes(format[0]));\n      this.fmt = format[0] as \"B\" | \"X\" | \"D\" | \"S\";\n      this.len = len ?? 3;\n      this.lPad = lPad ?? 1;\n      this.rPad = rPad ?? 1;\n      this.builtin = builtin ?? false;\n      this.index = index ?? -1;\n    }\n  }\n\n  header(test: Test) {\n    let variable = `${this.variable}`;\n    if (this.builtin) {\n      const index = this.index >= 0 ? this.index : \"\";\n      variable = `${variable}[${index}]`;\n    }\n    if (variable.length > this.len + this.lPad + this.rPad) {\n      return variable.substring(0, this.len + this.lPad + this.rPad);\n    }\n    return this.padCenter(variable);\n  }\n\n  print(test: Test) {\n    const val = test.getVar(this.variable, this.index);\n    if (this.fmt === \"S\") {\n      return this.padLeft(val as string);\n    }\n\n    const fmt = { B: bin, D: dec, X: hex }[this.fmt];\n    const value = fmt(val as number);\n    if (this.fmt === \"D\") {\n      return this.padRight(value);\n    } else {\n      return this.padCenter(value.slice(value.length - this.len));\n    }\n  }\n\n  private padCenter(value: string) {\n    const space = this.lPad + this.len + this.rPad;\n    const leftSpace = Math.floor((space - value.length) / 2);\n    const rightSpace = space - leftSpace - value.length;\n    const padLeft = leftSpace + value.length;\n    const padRight = padLeft + rightSpace;\n    value = value.padStart(padLeft);\n    value = value.padEnd(padRight);\n    return value;\n  }\n\n  private padLeft(value: string) {\n    value = value.substring(0, this.len);\n    const padRight = this.rPad + this.len;\n    const padLeft = this.lPad + padRight;\n    value = value.padEnd(padRight);\n    value = value.padStart(padLeft);\n    return value;\n  }\n\n  private padRight(value: string) {\n    value = value.substring(0, this.len);\n    const padLeft = this.lPad + this.len;\n    const padRight = this.rPad + padLeft;\n    value = value.padStart(padLeft);\n    value = value.padEnd(padRight);\n    return value;\n  }\n}\n","import {\n  assertExists,\n  checkExhaustive,\n} from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport { Span } from \"./languages/base.js\";\nimport {\n  Tst,\n  TstLineStatement,\n  TstOperation,\n  TstOutputSpec,\n  TstStatement,\n  TstWhileStatement,\n} from \"./languages/tst.js\";\nimport { Bus, Chip, HIGH, Low, LOW } from \"./chip/chip.js\";\nimport { Clock } from \"./chip/clock.js\";\nimport { Output } from \"./output.js\";\nimport { ROM } from \"./cpu/memory.js\";\nimport { CPU } from \"./cpu/cpu.js\";\n\nexport abstract class Test<IS extends TestInstruction = TestInstruction> {\n  protected readonly instructions: (IS | TestInstruction)[] = [];\n  protected _outputList: Output[] = [];\n  protected _log = \"\";\n  fs: FileSystem = new FileSystem();\n\n  setFileSystem(fs: FileSystem): this {\n    this.fs = fs;\n    return this;\n  }\n\n  echo(_content: string) {\n    return undefined;\n  }\n  clearEcho() {\n    return undefined;\n  }\n\n  async load(_filename: string): Promise<void> {\n    return undefined;\n  }\n  async compareTo(_filename: string): Promise<void> {\n    return undefined;\n  }\n  outputFile(_filename: string): void {\n    return undefined;\n  }\n  outputList(outputs: Output[]): void {\n    this._outputList = outputs;\n  }\n\n  addInstruction(instruction: IS | TestInstruction): void {\n    this.instructions.push(instruction);\n  }\n\n  reset(): this {\n    this._steps = (function* (test) {\n      for (const instruction of test.instructions) {\n        yield* instruction.steps(test);\n      }\n    })(this);\n    this._step = this._steps.next();\n    this._step; //?\n    this._log = \"\";\n    return this;\n  }\n\n  private _steps!: IterableIterator<IS | TestInstruction>;\n  private _step!: IteratorResult<IS | TestInstruction, IS | TestInstruction>;\n\n  get steps(): Iterator<IS | TestInstruction> {\n    if (this._steps === undefined) {\n      this.reset();\n      this._steps = assertExists(this._steps, \"Reset did not initialize steps\");\n      this._step = assertExists(this._step, \"Reset did not find first step\");\n    }\n    return this._steps;\n  }\n\n  get currentStep(): IS | TestInstruction | undefined {\n    return this._step?.value;\n  }\n\n  get done(): boolean {\n    return this._step?.done ?? false;\n  }\n\n  step() {\n    if (!this._step.done) {\n      this._step.value.do(this);\n      this._step = this.steps.next();\n      return false;\n    }\n    return true;\n  }\n\n  async run() {\n    this.reset();\n    while (!(await this.step()));\n  }\n\n  protected readonly breakpoints: Map<string, number> = new Map();\n  addBreakpoint(variable: string, value: number) {\n    this.breakpoints.set(variable, value);\n  }\n  clearBreakpoints() {\n    this.breakpoints.clear();\n  }\n\n  output() {\n    const values = this._outputList.map((output) => output.print(this));\n    this._log += `|${values.join(\"|\")}|\\n`;\n  }\n\n  header() {\n    const values = this._outputList.map((output) => output.header(this));\n    this._log += `|${values.join(\"|\")}|\\n`;\n  }\n\n  log() {\n    return this._log;\n  }\n\n  abstract hasVar(variable: string | number): boolean;\n  abstract getVar(variable: string | number, offset?: number): number | string;\n  abstract setVar(variable: string, value: number, offset?: number): void;\n}\n\nfunction isTstLineStatment(line: TstStatement): line is TstLineStatement {\n  return (line as TstLineStatement).ops !== undefined;\n}\n\nfunction isTstWhileStatement(line: TstStatement): line is TstWhileStatement {\n  return (line as TstWhileStatement).condition !== undefined;\n}\n\nfunction makeLineStatement(line: TstLineStatement) {\n  const statement = new TestCompoundInstruction();\n  statement.span = line.span;\n  for (const op of line.ops) {\n    const inst = makeInstruction(op);\n    if (inst !== undefined) statement.addInstruction(inst);\n  }\n  return statement;\n}\n\nfunction makeInstruction(inst: TstOperation) {\n  const { op } = inst;\n  switch (op) {\n    case \"tick\":\n      return new TestTickInstruction();\n    case \"tock\":\n      return new TestTockInstruction();\n    case \"eval\":\n      return new TestEvalInstruction();\n    case \"output\":\n      return new TestOutputInstruction();\n    case \"set\":\n      return new TestSetInstruction(inst.id, inst.value, inst.index);\n    case \"output-list\":\n      return new TestOutputListInstruction(inst.spec);\n    case \"echo\":\n      return new TestEchoInstruction(inst.message);\n    case \"clear-echo\":\n      return new TestClearEchoInstruction();\n    case \"loadRom\":\n      return new TestLoadROMInstruction(inst.file);\n    case \"load\":\n    case \"output-file\":\n    case \"compare-to\":\n      return undefined;\n    default:\n      checkExhaustive(op, `Unknown tst operation ${op}`);\n  }\n}\n\nfunction fill<T extends Test>(test: T, tst: Tst): T {\n  for (const line of tst.lines) {\n    if (isTstLineStatment(line)) {\n      test.addInstruction(makeLineStatement(line));\n    } else {\n      const repeat = isTstWhileStatement(line)\n        ? new TestWhileInstruction(\n            new Condition(\n              line.condition.left,\n              line.condition.right,\n              line.condition.op\n            )\n          )\n        : new TestRepeatInstruction(line.count);\n      repeat.span = line.span;\n      test.addInstruction(repeat);\n      for (const statement of line.statements) {\n        repeat.addInstruction(makeLineStatement(statement));\n      }\n    }\n  }\n\n  test.reset();\n\n  return test;\n}\n\nexport class ChipTest extends Test<ChipTestInstruction> {\n  private chip: Chip = new Low();\n  get chipId(): number {\n    return this.chip.id;\n  }\n\n  private clock = Clock.get();\n\n  static from(tst: Tst): ChipTest {\n    const test = new ChipTest();\n    return fill(test, tst);\n  }\n\n  with(chip: Chip): this {\n    this.chip = chip;\n    return this;\n  }\n\n  hasVar(variable: string | number): boolean {\n    if (variable === \"time\") {\n      return true;\n    }\n    variable = `${variable}`;\n    // Look up built-in chip state variables\n    return this.chip.hasIn(variable) || this.chip.hasOut(variable);\n  }\n\n  getVar(variable: string | number, offset?: number): number | string {\n    variable = `${variable}`;\n    if (variable === \"time\") {\n      return this.clock.toString();\n    }\n    const pin = this.chip.get(variable, offset);\n    if (!pin) return 0;\n    return pin instanceof Bus ? pin.busVoltage : pin.voltage();\n  }\n\n  setVar(variable: string, value: number, offset?: number): void {\n    // Look up built-in chip state variables\n    const pinOrBus = this.chip.get(variable, offset);\n    if (pinOrBus instanceof Bus) {\n      pinOrBus.busVoltage = value;\n    } else {\n      pinOrBus?.pull(value === 0 ? LOW : HIGH);\n    }\n  }\n\n  eval(): void {\n    this.chip.eval();\n  }\n\n  tick(): void {\n    this.chip.eval();\n    this.clock.tick();\n  }\n\n  tock(): void {\n    this.chip.eval();\n    this.clock.tock();\n  }\n\n  override async load(filename: string) {\n    await this.chip.load(this.fs, filename);\n  }\n\n  override async run() {\n    this.clock.reset();\n    await super.run();\n  }\n}\n\nexport class CPUTest extends Test<CPUTestInstruction> {\n  readonly cpu: CPU;\n  private ticks = 0;\n\n  static from(tst: Tst): CPUTest {\n    const test = new CPUTest();\n    return fill(test, tst);\n  }\n\n  constructor(rom: ROM = new ROM(new Int16Array())) {\n    super();\n    this.cpu = new CPU({ ROM: rom });\n    this.reset();\n  }\n\n  override reset(): this {\n    this.cpu.reset();\n    this.ticks = 0;\n    return this;\n  }\n\n  hasVar(variable: string | number): boolean {\n    if (typeof variable === \"number\") {\n      return false;\n    }\n    // A: Current value of the address register (unsigned 15-bit);\n    // D: Current value of the data register (16-bit);\n    // PC: Current value of the Program Counter (unsigned 15-bit);\n    // RAM[i]: Current value of RAM location i (16-bit);\n    // time: Number of time units (also called clock cycles, or ticktocks) that elapsed since the simulation started (a read-only system variable).\n    if (\n      variable === \"A\" ||\n      variable === \"D\" ||\n      variable === \"PC\" ||\n      variable === \"time\" ||\n      variable.startsWith(\"RAM\")\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  getVar(variable: string | number): number {\n    switch (variable) {\n      case \"A\":\n        return this.cpu.A;\n      case \"D\":\n        return this.cpu.D;\n      case \"PC\":\n        return this.cpu.PC;\n      case \"time\":\n        return this.ticks;\n    }\n    if (typeof variable === \"number\") return 0;\n    if (variable.startsWith(\"RAM\")) {\n      const num = Number(variable.substring(4, variable.length - 1));\n      return this.cpu.RAM.get(num);\n    }\n    return 0;\n  }\n\n  setVar(variable: string, value: number, index?: number): void {\n    // A: Current value of the address register (unsigned 15-bit);\n    // D: Current value of the data register (16-bit);\n    // PC: Current value of the Program Counter (unsigned 15-bit);\n    // RAM[i]: Current value of RAM location i (16-bit);\n    switch (variable) {\n      case \"A\":\n        this.cpu.setA(value);\n        break;\n      case \"D\":\n        this.cpu.setD(value);\n        break;\n      case \"PC\":\n        this.cpu.setPC(value);\n        break;\n      case \"RAM\":\n        this.cpu.RAM.set(index ?? 0, value);\n        break;\n    }\n    return;\n  }\n\n  ticktock(): void {\n    this.ticks += 1;\n    this.cpu.tick();\n  }\n\n  override async load(filename: string): Promise<void> {\n    await this.cpu.ROM.load(this.fs, filename);\n  }\n}\n\nexport class VMTest extends Test<VMTestInstruction> {\n  hasVar(_variable: string | number): boolean {\n    return false;\n  }\n  getVar(_variable: string | number): number {\n    return 0;\n  }\n  setVar(_variable: string, _value: number): void {\n    return undefined;\n  }\n  vmstep(): void {\n    return undefined;\n  }\n}\n\nexport interface TestInstruction {\n  span?: Span;\n  do(test: Test): void;\n  steps(test: Test): IterableIterator<TestInstruction>;\n}\n\nexport class TestSetInstruction implements TestInstruction {\n  constructor(\n    private variable: string,\n    private value: number,\n    private index?: number | undefined\n  ) {}\n\n  do(test: Test) {\n    test.setVar(this.variable, this.value, this.index);\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestOutputInstruction implements TestInstruction {\n  do(test: Test) {\n    test.output();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestOutputListInstruction implements TestInstruction {\n  private outputs: Output[] = [];\n\n  constructor(specs: TstOutputSpec[] = []) {\n    for (const spec of specs) {\n      this.addOutput(spec);\n    }\n  }\n\n  addOutput(inst: TstOutputSpec) {\n    this.outputs.push(\n      new Output(\n        inst.id,\n        inst.style,\n        inst.width,\n        inst.lpad,\n        inst.rpad,\n        inst.builtin,\n        inst.address\n      )\n    );\n  }\n\n  do(test: Test) {\n    test.outputList(this.outputs);\n    test.header();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestCompoundInstruction implements TestInstruction {\n  protected readonly instructions: TestInstruction[] = [];\n  span?: Span;\n\n  addInstruction(instruction: TestInstruction) {\n    this.instructions.push(instruction);\n  }\n\n  do(test: Test<TestInstruction>): void {\n    for (const instruction of this.instructions) {\n      instruction.do(test);\n    }\n  }\n\n  *steps(_test: Test): Generator<TestInstruction> {\n    yield this;\n  }\n}\n\nexport class TestRepeatInstruction extends TestCompoundInstruction {\n  constructor(public readonly repeat: number) {\n    super();\n  }\n\n  override do() {\n    return undefined;\n  }\n\n  private *innerSteps(test: Test) {\n    for (const instruction of this.instructions) {\n      yield* instruction.steps(test);\n    }\n  }\n\n  override *steps(test: Test) {\n    if (this.repeat === -1) {\n      yield this;\n      while (true) {\n        yield* this.innerSteps(test);\n      }\n    } else {\n      for (let i = 0; i < this.repeat; i++) {\n        yield this;\n        yield* this.innerSteps(test);\n      }\n    }\n  }\n}\n\nexport class Condition {\n  constructor(\n    public readonly x: string | number,\n    public readonly y: string | number,\n    public readonly op: \"<\" | \"<=\" | \"=\" | \">=\" | \">\" | \"<>\"\n  ) {}\n\n  check(test: Test): boolean {\n    const x = test.hasVar(this.x) ? test.getVar(this.x) : this.x;\n    const y = test.hasVar(this.y) ? test.getVar(this.y) : this.y;\n\n    if (typeof x === \"string\" || typeof y === \"string\") {\n      switch (this.op) {\n        case \"=\":\n          return `${x}` === `${y}`;\n        case \"<>\":\n          return `${x}` !== `${y}`;\n      }\n    } else {\n      switch (this.op) {\n        case \"<\":\n          return x < y;\n        case \"<=\":\n          return x <= y;\n        case \">\":\n          return x > y;\n        case \">=\":\n          return x >= y;\n        case \"=\":\n          return x === y;\n        case \"<>\":\n          return x !== y;\n      }\n    }\n    return false;\n  }\n}\n\nexport class TestWhileInstruction extends TestCompoundInstruction {\n  constructor(public readonly condition: Condition) {\n    super();\n  }\n\n  override *steps(test: Test) {\n    while (this.condition.check(test)) {\n      yield this;\n      for (const instruction of this.instructions) {\n        yield* instruction.steps(test);\n      }\n    }\n  }\n}\n\nexport class TestEchoInstruction implements TestInstruction {\n  constructor(public readonly content: string) {}\n  do(test: Test) {\n    test.echo(this.content);\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestClearEchoInstruction implements TestInstruction {\n  do(test: Test) {\n    test.clearEcho();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestLoadROMInstruction implements TestInstruction {\n  constructor(readonly file: string) {}\n  async do(test: Test) {\n    test.fs.pushd(\"/test\");\n    await test.load(this.file);\n    test.fs.popd();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestBreakpointInstruction implements TestInstruction {\n  constructor(readonly variable: string, readonly value: number) {}\n\n  do(test: Test) {\n    test.addBreakpoint(this.variable, this.value);\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestClearBreakpointsInstruction implements TestInstruction {\n  do(test: Test) {\n    test.clearBreakpoints();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport interface ChipTestInstruction extends TestInstruction {\n  _chipTestInstruction_: true;\n  do(test: ChipTest): void | Promise<void>;\n}\n\nexport class TestEvalInstruction implements ChipTestInstruction {\n  readonly _chipTestInstruction_ = true;\n  do(test: ChipTest) {\n    test.eval();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestTickInstruction implements ChipTestInstruction {\n  readonly _chipTestInstruction_ = true;\n  do(test: ChipTest) {\n    test.tick();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestTockInstruction implements ChipTestInstruction {\n  readonly _chipTestInstruction_ = true;\n  do(test: ChipTest) {\n    test.tock();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport interface CPUTestInstruction extends TestInstruction {\n  _cpuTestInstruction_: true;\n  do(test: CPUTest): void | Promise<void>;\n}\n\nexport class TestTickTockInstruction implements CPUTestInstruction {\n  readonly _cpuTestInstruction_ = true;\n  do(test: CPUTest) {\n    test.ticktock();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport interface VMTestInstruction extends TestInstruction {\n  _vmTestInstruction_: true;\n  do(test: VMTest): void | Promise<void>;\n}\n\nexport class TestVMStepInstruction implements VMTestInstruction {\n  readonly _vmTestInstruction_ = true;\n  do(test: VMTest) {\n    test.vmstep();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n","import {\n  ASSIGN,\n  ASSIGN_ASM,\n  ASSIGN_OP,\n  COMMANDS,\n  COMMANDS_ASM,\n  COMMANDS_OP,\n  JUMP,\n  JUMP_ASM,\n  JUMP_OP,\n} from \"../cpu/alu.js\";\n\nexport type CommandOps = keyof typeof COMMANDS.op;\nexport type JumpOps = keyof typeof JUMP.op;\nexport type StoreOps = keyof typeof ASSIGN.op;\n\nexport function asm(op: number): string {\n  if (op & 0x8000) {\n    return cInstruction(op);\n  }\n  return aInstruction(op);\n}\n\nfunction cInstruction(op: number): string {\n  op = op & 0xffff; // Clear high order bits\n  const mop = (op & 0x1000) >> 12;\n  const cop: CommandOps = ((op & 0b0000111111000000) >> 6) as CommandOps;\n  const sop: StoreOps = ((op & 0b0000000000111000) >> 3) as StoreOps;\n  const jop: JumpOps = (op & 0b0000000000000111) as JumpOps;\n\n  if (COMMANDS.op[cop] === undefined) {\n    // Invalid commend\n    return \"#ERR\";\n  }\n\n  let command = COMMANDS.op[cop];\n  if (mop) {\n    command = command.replace(/A/g, \"M\") as COMMANDS_ASM;\n  }\n\n  const store = ASSIGN.op[sop];\n  const jump = JUMP.op[jop];\n\n  let instruction: string = command;\n  if (store) {\n    instruction = `${store}=${instruction}`;\n  }\n  if (jump) {\n    instruction = `${instruction};${jump}`;\n  }\n\n  return instruction;\n}\n\nfunction aInstruction(op: number): string {\n  return \"@\" + (op & 0x7fff).toString(10);\n}\n\nexport function op(asm: string): number {\n  if (asm[0] === \"@\") {\n    return aop(asm);\n  } else {\n    return cop(asm);\n  }\n}\n\nfunction aop(asm: string): number {\n  return parseInt(asm.substring(1), 10);\n}\n\nfunction cop(asm: string): number {\n  const parts = asm.match(\n    /(?:(?<assign>[AMD]{1,3})=)?(?<operation>[-!01ADM&|]{1,3})(?:;(?<jump>JGT|JLT|JGE|JLE|JEQ|JMP))?/\n  );\n  const { assign, operation, jump } = parts?.groups ?? {};\n  const mode = operation.includes(\"M\") || assign.includes(\"M\");\n  const aop = ASSIGN.asm[(assign as ASSIGN_ASM) ?? \"\"];\n  const jop = JUMP.asm[(jump as JUMP_ASM) ?? \"\"];\n  const cop = COMMANDS.asm[(operation as COMMANDS_ASM) ?? \"\"];\n\n  return makeC(mode, cop, aop, jop);\n}\n\nexport function makeC(\n  isM: boolean,\n  op: COMMANDS_OP,\n  assign: ASSIGN_OP = 0,\n  jmp: JUMP_OP = 0\n): number {\n  const C = 0xe000;\n  const A = isM ? 0x1000 : 0;\n  const O = op << 6;\n  const D = (assign ?? 0) << 3;\n  const J = jmp ?? 0;\n  return C + A + O + D + J;\n}\n","const Hex = [\n  \"0\",\n  \"1\",\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n];\n\nexport function chars(i: number): string {\n  return Hex[i] ?? \"X\";\n}\n\nexport function bits(i: number): string {\n  switch (i) {\n    case 0x0:\n      return \"0000\";\n    case 0x1:\n      return \"0001\";\n    case 0x2:\n      return \"0010\";\n    case 0x3:\n      return \"0011\";\n    case 0x4:\n      return \"0100\";\n    case 0x5:\n      return \"0101\";\n    case 0x6:\n      return \"0110\";\n    case 0x7:\n      return \"0111\";\n    case 0x8:\n      return \"1000\";\n    case 0x9:\n      return \"1001\";\n    case 0xa:\n      return \"1010\";\n    case 0xb:\n      return \"1011\";\n    case 0xc:\n      return \"1100\";\n    case 0xd:\n      return \"1101\";\n    case 0xe:\n      return \"1110\";\n    case 0xf:\n      return \"1111\";\n    default:\n      return \"erro\";\n  }\n}\n\nexport function int(n: string, radix: number): number {\n  const i = parseInt(n.replace(/[^\\d a-f A-F +-.]/g, \"\"), radix);\n  return i & 0xffff;\n}\n\nexport function int16(i: string): number {\n  return int(i, 16);\n}\n\nexport function int10(i: string): number {\n  return int(i, 10);\n}\n\nexport function int2(i: string): number {\n  return int(i.replaceAll(\" \", \"\"), 2);\n}\n\nexport function parseTwosInt(i: string): number {\n  if (i.toUpperCase().includes(\"X\")) {\n    return int16(i);\n  }\n  return int10(i);\n}\n\nexport function hex(i: number): string {\n  const hu = chars((i & 0xf000) >> 12);\n  const hl = chars((i & 0x0f00) >> 8);\n  const lu = chars((i & 0x00f0) >> 4);\n  const ll = chars(i & 0x000f);\n\n  return `0x${hu}${hl}${lu}${ll}`;\n}\n\nexport function bin(i: number, precision = 16): string {\n  const hu = bits((i & 0xf000) >> 12);\n  const hl = bits((i & 0x0f00) >> 8);\n  const lu = bits((i & 0x00f0) >> 4);\n  const ll = bits(i & 0x000f);\n\n  // return `${hu} ${hl} ${lu} ${ll}`;\n  return `${hu}${hl}${lu}${ll}`.substring(16 - precision); // Match the book's formatting\n}\n\nexport function dec(i: number): string {\n  i = i & 0xffff;\n  if (i === 0x8000) {\n    return \"-32768\";\n  }\n  if (i & 0x8000) {\n    i = (~i + 1) & 0x7fff;\n    return `-${i}`;\n  }\n  return `${i}`;\n}\n\nexport function uns(i: number): string {\n  i = i & 0xffff;\n  return `${i}`;\n}\n\nexport function nand16(a: number, b: number): number {\n  a = a & 0xffff;\n  b = b & 0xffff;\n  let c = ~(a & b);\n  c = c & 0xffff;\n  return c;\n}\n"],"names":["DiffTable","className","out","cmp","zeroState","output","CMP","compare","isErr","_jsxs","children","_jsx","display","Err","cmpData","Ok","outData","failures","table","range","Math","min","length","map","i","cmpI","outI","max","_","j","cell","pass","trim","match","style","fontFamily","marginBottom","row","DiffCell","HIGH","LOW","Bus","name","width","this","state","ensureWidth","newWidth","assert","connect","next","push","busVoltage","pull","voltage","bit","forEach","n","get","reduce","b","set","toggle","nextVoltage","InSubBus","bus","start","mask","high","low","mid","OutSubBus","ConstantBus","value","pullHigh","pullLow","TRUE_BUS","FALSE_BUS","parsePinDecl","toPin","groups","pin","w","Number","Symbol","iterator","Pins","Map","insert","has","emplace","minWidth","entries","values","id","Chip","ins","outs","internals","clocked","Set","inn","undefined","internal","pins","clockedPins","Clock","$","subscribe","eval","size","parts","reset","hasIn","hasOut","offset","getBuiltin","BUILTIN_NAMES","includes","part","isOutPin","wire","connections","add","to","from","wireOutPin","wireInPin","findPin","toLowerCase","partPin","assertExists","chipPin","isInternal","Error","chip","tick","tock","remove","fs","path","load","Low","ClockedChip","level","unsubscribe","pow","clock","BehaviorSubject","ticks","Subject","subject","frameSubject","resetSubject","frame","toString","COMMANDS_ALU","op","COMMANDS","asm","D","A","M","ASSIGN","MD","AM","AD","AMD","JUMP","JGT","JEQ","JGE","JLT","JNE","JLE","JMP","Flags","Positive","Zero","Negative","alu","d","a","o","emptyState","PC","ALU","flag","BITS","decode","instruction","c","x1","x2","am","d1","d2","d3","j1","j2","j3","cpuTick","inM","bits","cpuTock","oldA","alu2","addressM","outM","writeM","CPU","RAM","RAMMem","ROM","Screen","SubMemory","SCREEN_SIZE","SCREEN_OFFSET","Keyboard","MemoryKeyboard","setA","setD","setPC","cpu","input","tickState","FORMATS","SCREEN_ROWS","KEYBOARD_OFFSET","Memory","memory","Int16Array","index","fill","update","format","current","int2","int16","int10","isFinite","loadBytes","bytes","end","slice","fn","parent","getKey","setKey","key","clearKey","program","arr","SIZE","endsWith","loadHack","loadAsm","loader","readFile","UNKNOWN_PARSE_ERROR","grammars","Base","ohm","baseSemantics","createSemantics","makeParser","grammar","semantics","property","root","parse","source","succeeded","parsed","message","shortMessage","e","extendOperation","List","list","asIteration","addAttribute","decNumber","digits","sourceString","wholeDec","binNumber","hexNumber","num","Name","ident","identifier","__","child","String","_a","str","_b","cmpGrammar","cmpSemantics","extendSemantics","line","cells","Root","lines","parser","tstGrammar","tstSemantics","extendAttribute","Index","idx","FileName","_open","dec","_close","OutputFormat","_c","lpad","rpad","builtin","address","TstEvalOperation","TstOutputOperation","TstOutputListOperation","formats","spec","TstSetOperation","setOp","TstEchoOperation","TstClearEchoOperation","TstLoadROMOperation","_r","_l","file","TstFileOperation","Condition","left","right","TstWhile","cond","_o","statements","statement","condition","span","startIdx","endIdx","TstRepeat","count","TstStatement","stmt","ops","node","operation","break","Tst","tst","TST","asmGrammar","asmSemantics","isALabelInstruction","inst","label","instructions","AInstruction","_at","val","type","CInstruction","assignN","opN","jmpN","assign","replace","jmp","isM","jump","store","Label","ASM","passes","fillLabel","nextLabel","symbols","unfilled","transmuteAInstruction","getLabelValue","emit","makeC","filter","unwrap","split","loadBlob","parseTwosInt","Output","variable","len","lPad","rPad","startsWith","fmt","parseInt","header","test","substring","padCenter","print","getVar","padLeft","B","bin","X","hex","padRight","space","leftSpace","floor","rightSpace","padStart","padEnd","Test","FileSystem","setFileSystem","echo","_content","clearEcho","_filename","outputFile","outputList","outputs","_outputList","addInstruction","_steps","steps","_step","_log","done","step","do","addBreakpoint","breakpoints","clearBreakpoints","clear","join","log","isTstLineStatment","isTstWhileStatement","makeLineStatement","TestCompoundInstruction","makeInstruction","TestTickInstruction","TestTockInstruction","TestEvalInstruction","TestOutputInstruction","TestSetInstruction","TestOutputListInstruction","TestEchoInstruction","TestClearEchoInstruction","TestLoadROMInstruction","checkExhaustive","repeat","TestWhileInstruction","TestRepeatInstruction","ChipTest","hasVar","setVar","pinOrBus","filename","CPUTest","rom","ticktock","specs","addOutput","_test","innerSteps","x","y","check","content","pushd","popd","cInstruction","mop","cop","sop","jop","command","aInstruction","aop","mode","C","O","J","Hex","chars","int","radix","replaceAll","toUpperCase","hu","hl","lu","ll","precision","uns","nand16"],"sourceRoot":""}