{"version":3,"file":"static/js/681.bdeb78ca.chunk.js","mappings":"obAAO,MCkBMA,EAAO,CAClBC,IAAK,CACH,UDpBe,eCsBjBC,IAAK,CACH,UCvBe,gHDyBjBC,GAAI,CACF,SE1Be,eF4BjBC,IAAK,CACH,UG7Be,eH+BjBC,IAAK,CACH,UIhCe,eJkCjBC,KAAM,CACJ,WKnCe,eLqCjBC,MAAO,CACL,YMtCe,eNwCjBC,MAAO,CACL,YOzCe,+tBP2CjBC,KAAM,CACJ,WQ5Ce,eR8CjBC,MAAO,CACL,YS/Ce,eTiDjBC,UAAW,CACT,gBUlDe,eVoDjBC,UAAW,CACT,gBWrDe,+7BXuDjBC,SAAU,CACR,eYxDe,eZ0DjBC,SAAU,CACR,ea3De,eb6DjBC,OAAQ,CACN,ac9De,gBdkEZC,eAAeC,EAAcC,SAC5BA,EAAGC,MAAM,sBACTC,EAAAA,EAAAA,IAAMF,EAAIlB,SACVkB,EAAGG,MACX,CetEO,MCSMrB,EAAO,CAClBsB,UAAW,CACT,gBDXe,eCajBC,UAAW,CACT,gBCde,eDgBjBC,MAAO,CACL,YEjBe,eFmBjBC,MAAO,CACL,YGpBe,eHsBjBC,UAAW,CACT,gBIvBe,eJyBjBC,IAAK,CACH,UK1Be,gBL8BZX,eAAeC,EAAcC,SAC5BA,EAAGC,MAAM,sBACTC,EAAAA,EAAAA,IAAMF,EAAIlB,SACVkB,EAAGG,MACX,CMlCO,MCWMrB,EAAO,CAClB4B,IAAK,CACH,UDbe,iKCejBC,SAAU,CACR,eChBe,eDkBjBC,GAAI,CACF,SEnBe,eFqBjBC,KAAM,CACJ,WGtBe,eHwBjBC,MAAO,CACL,YIzBe,eJ2BjBC,OAAQ,CACN,aK5Be,eL8BjBC,MAAO,CACL,YM/Be,eNiCjBC,OAAQ,CACN,aOlCe,gBPsCZnB,eAAeC,EAAcC,SAC5BA,EAAGC,MAAM,sBACTC,EAAAA,EAAAA,IAAMF,EAAIlB,SACVkB,EAAGG,MACX,CQ1CO,MCMMrB,EAAO,CAClBoC,OAAQ,CACN,aDRe,eCUjBC,IAAK,CACH,UCXe,eDajBC,SAAU,CACR,eEde,gBFkBZtB,eAAeC,EAAcC,SAC5BA,EAAGC,MAAM,sBACTC,EAAAA,EAAAA,IAAMF,EAAIlB,SACVkB,EAAGG,MACX,CGfO,MAAMkB,EAAe,CAC1B,KAAMC,EACN,KAAMC,EACN,KAAMC,EACN,KAAMC,GAGR,IAAIvB,GAAQ,EACL,MAAMH,EAAgBD,UACvBI,IACJA,GAAQ,QACFoB,EAAyBtB,SACzBuB,EAAyBvB,SACzBwB,EAAyBxB,SACzByB,EAAyBzB,GAC/BE,GAAQ,EAAK,EAGFwB,EAAU,CACrB3B,cAAaA,GAGf,G","sources":["../../projects/src/testing/project_01/01_not.ts","../../projects/src/testing/project_01/index.ts","../../projects/src/testing/project_01/02_and.ts","../../projects/src/testing/project_01/03_or.ts","../../projects/src/testing/project_01/04_xor.ts","../../projects/src/testing/project_01/05_mux.ts","../../projects/src/testing/project_01/06_dmux.ts","../../projects/src/testing/project_01/07_not16.ts","../../projects/src/testing/project_01/08_and16.ts","../../projects/src/testing/project_01/09_or16.ts","../../projects/src/testing/project_01/10_mux16.ts","../../projects/src/testing/project_01/11_mux4way16.ts","../../projects/src/testing/project_01/12_mux8way16.ts","../../projects/src/testing/project_01/13_dmux4way.ts","../../projects/src/testing/project_01/14_dmux8way.ts","../../projects/src/testing/project_01/15_or8way.ts","../../projects/src/testing/project_02/01_half_adder.ts","../../projects/src/testing/project_02/index.ts","../../projects/src/testing/project_02/02_full_adder.ts","../../projects/src/testing/project_02/03_add16.ts","../../projects/src/testing/project_02/04_inc16.ts","../../projects/src/testing/project_02/05_alu_no_stat.ts","../../projects/src/testing/project_02/06_alu.ts","../../projects/src/testing/project_03/01_bit.ts","../../projects/src/testing/project_03/index.ts","../../projects/src/testing/project_03/02_register.ts","../../projects/src/testing/project_03/03_pc.ts","../../projects/src/testing/project_03/04_ram8.ts","../../projects/src/testing/project_03/05_ram64.ts","../../projects/src/testing/project_03/06_ram512.ts","../../projects/src/testing/project_03/07_ram4k.ts","../../projects/src/testing/project_03/08_ram16k.ts","../../projects/src/testing/project_05/01_memory.ts","../../projects/src/testing/project_05/index.ts","../../projects/src/testing/project_05/02_cpu.ts","../../projects/src/testing/project_05/03_computer.ts","../../projects/src/testing/index.ts"],"sourcesContent":["export const sol = `// REDACTED`;\n","import { FileSystem, reset } from \"@davidsouther/jiffies/lib/esm/fs.js\";\n\nimport * as Not from \"./01_not.js\";\nimport * as And from \"./02_and.js\";\nimport * as Or from \"./03_or.js\";\nimport * as Xor from \"./04_xor.js\";\nimport * as Mux from \"./05_mux.js\";\nimport * as DMux from \"./06_dmux.js\";\nimport * as Not16 from \"./07_not16.js\";\nimport * as And16 from \"./08_and16.js\";\nimport * as Or16 from \"./09_or16.js\";\nimport * as Mux16 from \"./10_mux16.js\";\nimport * as Mux4Way16 from \"./11_mux4way16.js\";\nimport * as Mux8Way16 from \"./12_mux8way16.js\";\nimport * as DMux4Way from \"./13_dmux4way.js\";\nimport * as DMux8Way from \"./14_dmux8way.js\";\nimport * as Or8Way from \"./15_or8way.js\";\n\nexport const SOLS = {\n  Not: {\n    \"Not.hdl\": Not.sol,\n  },\n  And: {\n    \"And.hdl\": And.sol,\n  },\n  Or: {\n    \"Or.hdl\": Or.sol,\n  },\n  XOr: {\n    \"XOr.hdl\": Xor.sol,\n  },\n  Mux: {\n    \"Mux.hdl\": Mux.sol,\n  },\n  DMux: {\n    \"DMux.hdl\": DMux.sol,\n  },\n  Not16: {\n    \"Not16.hdl\": Not16.sol,\n  },\n  And16: {\n    \"And16.hdl\": And16.sol,\n  },\n  Or16: {\n    \"Or16.hdl\": Or16.sol,\n  },\n  Mux16: {\n    \"Mux16.hdl\": Mux16.sol,\n  },\n  Mux4Way16: {\n    \"Mux4Way16.hdl\": Mux4Way16.sol,\n  },\n  Mux8Way16: {\n    \"Mux8Way16.hdl\": Mux8Way16.sol,\n  },\n  DMux4Way: {\n    \"DMux4Way.hdl\": DMux4Way.sol,\n  },\n  DMux8Way: {\n    \"DMux8Way.hdl\": DMux8Way.sol,\n  },\n  Or8Way: {\n    \"Or8Way.hdl\": Or8Way.sol,\n  },\n};\n\nexport async function loadSolutions(fs: FileSystem): Promise<void> {\n  await fs.pushd(\"/projects/01\");\n  await reset(fs, SOLS);\n  await fs.popd();\n}\n","export const sol = `CHIP And {\n    IN a, b;\n    OUT out;\n\n    PARTS:\n    Nand(a=a, b=b, out=x);\n    Not(in=x, out=out);\n}`;\n","export const sol = `// REDACTED`;\n","export const sol = `// REDACTED`;\n","export const sol = `// REDACTED`;\n","export const sol = `// REDACTED`;\n","export const sol = `// REDACTED`;\n","export const sol = `CHIP And16 {\n    IN a[16], b[16];\n    OUT out[16];\n\n    PARTS:\n    And (a=a[0],  b=b[0],  out=out[0]);\n    And (a=a[1],  b=b[1],  out=out[1]);\n    And (a=a[2],  b=b[2],  out=out[2]);\n    And (a=a[3],  b=b[3],  out=out[3]);\n    And (a=a[4],  b=b[4],  out=out[4]);\n    And (a=a[5],  b=b[5],  out=out[5]);\n    And (a=a[6],  b=b[6],  out=out[6]);\n    And (a=a[7],  b=b[7],  out=out[7]);\n    And (a=a[8],  b=b[8],  out=out[8]);\n    And (a=a[9],  b=b[9],  out=out[9]);\n    And (a=a[10], b=b[10], out=out[10]);\n    And (a=a[11], b=b[11], out=out[11]);\n    And (a=a[12], b=b[12], out=out[12]);\n    And (a=a[13], b=b[13], out=out[13]);\n    And (a=a[14], b=b[14], out=out[14]);\n    And (a=a[15], b=b[15], out=out[15]);\n}`;\n","export const sol = `// REDACTED`;\n","export const sol = `// REDACTED`;\n","export const sol = `// REDACTED`;\n","export const sol = `CHIP Mux8Way16 {\n    IN a[16], b[16], c[16], d[16],\n       e[16], f[16], g[16], h[16],\n       sel[3];\n    OUT out[16];\n\n    PARTS:\n    // Binary tree of 2-way multiplexors\n    Mux16 (a=a,    b=b,    sel=sel[0], out=ab);\n    Mux16 (a=c,    b=d,    sel=sel[0], out=cd);\n    Mux16 (a=e,    b=f,    sel=sel[0], out=ef);\n    Mux16 (a=g,    b=h,    sel=sel[0], out=gh);\n    Mux16 (a=ab,   b=cd,   sel=sel[1], out=abcd);\n    Mux16 (a=ef,   b=gh,   sel=sel[1], out=efgh);\n    Mux16 (a=abcd, b=efgh, sel=sel[2], out=out);\n\n\n// Alternate implementation\n//\n// This implementation replaces the upper two layers of the\n// tree with 4-way multiplexors.\n/*\n    Mux4Way16 (a=a, b=b, c=c, d=d, sel=sel[0..1], out=abcd);\n    Mux4Way16 (a=e, b=f, c=g, d=h, sel=sel[0..1], out=efgh);\n    Mux16     (a=abcd, b=efgh, sel=sel[2], out=out);\n*/\n\n// Alternate implementation\n//\n// Some students make a Mux8Way chip and apply it 16 times as in Not16.\n}`;\n","export const sol = `// REDACTED`;\n","export const sol = `// REDACTED`;\n","export const sol = `// REDACTED`;\n","export const sol = `// REDACTED`;\n","import { FileSystem, reset } from \"@davidsouther/jiffies/lib/esm/fs.js\";\n\nimport * as HalfAdder from \"./01_half_adder.js\";\nimport * as FullAdder from \"./02_full_adder.js\";\nimport * as Add16 from \"./03_add16.js\";\nimport * as Inc16 from \"./04_inc16.js\";\nimport * as Alu from \"./05_alu_no_stat.js\";\nimport * as AluStatus from \"./06_alu.js\";\n\nexport const SOLS = {\n  HalfAdder: {\n    \"HalfAdder.hdl\": HalfAdder.sol,\n  },\n  FullAdder: {\n    \"FullAdder.hdl\": FullAdder.sol,\n  },\n  Add16: {\n    \"Add16.hdl\": Add16.sol,\n  },\n  Inc16: {\n    \"Inc16.hdl\": Inc16.sol,\n  },\n  AluNoStat: {\n    \"AluNoStat.hdl\": Alu.sol,\n  },\n  ALU: {\n    \"ALU.hdl\": AluStatus.sol,\n  },\n};\n\nexport async function loadSolutions(fs: FileSystem): Promise<void> {\n  await fs.pushd(\"/projects/02\");\n  await reset(fs, SOLS);\n  await fs.popd();\n}\n","export const sol = `// REDACTED`;\n","export const sol = `// REDACTED`;\n","export const sol = `// REDACTED`;\n","export const sol = `// REDACTED`;\n","export const sol = `// REDACTED`;\n","export const sol = `CHIP Bit {\n    IN in, load;\n    OUT out;\n\n    PARTS:\n    \n    Mux (a=dffOut, b=in, sel=load, out=muxOut);\n    DFF (in=muxOut, out=dffOut, out=out);\n}`;\n","import { FileSystem, reset } from \"@davidsouther/jiffies/lib/esm/fs.js\";\n\nimport * as Bit from \"./01_bit.js\";\nimport * as Register from \"./02_register.js\";\nimport * as PC from \"./03_pc.js\";\nimport * as RAM8 from \"./04_ram8.js\";\nimport * as RAM64 from \"./05_ram64.js\";\nimport * as RAM512 from \"./06_ram512.js\";\nimport * as RAM4k from \"./07_ram4k.js\";\nimport * as RAM16k from \"./08_ram16k.js\";\n\nexport const SOLS = {\n  Bit: {\n    \"Bit.hdl\": Bit.sol,\n  },\n  Register: {\n    \"Register.hdl\": Register.sol,\n  },\n  PC: {\n    \"PC.hdl\": PC.sol,\n  },\n  RAM8: {\n    \"RAM8.hdl\": RAM8.sol,\n  },\n  RAM64: {\n    \"RAM64.hdl\": RAM64.sol,\n  },\n  RAM512: {\n    \"RAM512.hdl\": RAM512.sol,\n  },\n  RAM4k: {\n    \"RAM4k.hdl\": RAM4k.sol,\n  },\n  RAM16k: {\n    \"RAM16k.hdl\": RAM16k.sol,\n  },\n};\n\nexport async function loadSolutions(fs: FileSystem): Promise<void> {\n  await fs.pushd(\"/projects/03\");\n  await reset(fs, SOLS);\n  await fs.popd();\n}\n","export const sol = `// REDACTED`;\n","export const sol = `// REDACTED`;\n","export const sol = `// REDACTED`;\n","export const sol = `// REDACTED`;\n","export const sol = `// REDACTED`;\n","export const sol = `// REDACTED`;\n","export const sol = `// REDACTED`;\n","export const sol = `// REDACTED`;\n","import { FileSystem, reset } from \"@davidsouther/jiffies/lib/esm/fs.js\";\n\nimport * as Memory from \"./01_memory.js\";\nimport * as CPU from \"./02_cpu.js\";\nimport * as Computer from \"./03_computer.js\";\n\nexport const SOLS = {\n  Memory: {\n    \"Memory.hdl\": Memory.sol,\n  },\n  CPU: {\n    \"CPU.hdl\": CPU.sol,\n  },\n  Computer: {\n    \"Computer.hdl\": Computer.sol,\n  },\n};\n\nexport async function loadSolutions(fs: FileSystem): Promise<void> {\n  await fs.pushd(\"/projects/05\");\n  await reset(fs, SOLS);\n  await fs.popd();\n}\n","export const sol = `// REDACTED`;\n","export const sol = `// REDACTED`;\n","import { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\n\nimport * as project_01 from \"./project_01/index.js\";\nimport * as project_02 from \"./project_02/index.js\";\nimport * as project_03 from \"./project_03/index.js\";\nimport * as project_05 from \"./project_05/index.js\";\n\nexport const ChipProjects = {\n  \"01\": project_01,\n  \"02\": project_02,\n  \"03\": project_03,\n  \"05\": project_05,\n};\n\nlet reset = false;\nexport const loadSolutions = async (fs: FileSystem) => {\n  if (reset) return; // React will double-render a call to resetFiles in useEffect.\n  reset = true;\n  await project_01.loadSolutions(fs);\n  await project_02.loadSolutions(fs);\n  await project_03.loadSolutions(fs);\n  await project_05.loadSolutions(fs);\n  reset = false;\n};\n\nexport const loaders = {\n  loadSolutions,\n};\n\nexport default loaders;\n"],"names":["SOLS","Not","And","Or","XOr","Mux","DMux","Not16","And16","Or16","Mux16","Mux4Way16","Mux8Way16","DMux4Way","DMux8Way","Or8Way","async","loadSolutions","fs","pushd","reset","popd","HalfAdder","FullAdder","Add16","Inc16","AluNoStat","ALU","Bit","Register","PC","RAM8","RAM64","RAM512","RAM4k","RAM16k","Memory","CPU","Computer","ChipProjects","project_01","project_02","project_03","project_05","loaders"],"sourceRoot":""}