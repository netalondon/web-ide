{"version":3,"file":"static/js/387.4d25afe6.chunk.js","mappings":"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","sources":["../../components/src/difftable.tsx","../../simulator/src/chip/chip.tsx","../../simulator/src/chip/clock.ts","../../simulator/src/cpu/alu.ts","../../simulator/src/cpu/cpu.ts","../../simulator/src/cpu/memory.ts","../../simulator/src/fs.ts","../../simulator/src/languages/base.ts","../../simulator/src/languages/grammars/base.ohm.js","../../simulator/src/languages/grammars/cmp.ohm.js","../../simulator/src/languages/cmp.ts","../../simulator/src/languages/grammars/tst.ohm.js","../../simulator/src/languages/tst.ts","../../simulator/src/languages/grammars/asm.ohm.js","../../simulator/src/languages/asm.ts","../../simulator/src/loader.ts","../../simulator/src/output.ts","../../simulator/src/tst.ts","../../simulator/src/util/asm.ts","../../simulator/src/util/twos.ts"],"sourcesContent":["import { CMP } from \"@nand2tetris/simulator/languages/cmp.js\";\nimport { display } from \"@davidsouther/jiffies/lib/esm/display.js\";\nimport { range } from \"@davidsouther/jiffies/lib/esm/range.js\";\nimport { Err, isErr, Ok } from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { ReactElement } from \"react\";\n\nexport const DiffTable = ({\n  className = \"\",\n  out,\n  cmp,\n  zeroState,\n}: {\n  out: string;\n  cmp: string;\n  className?: string;\n  zeroState?: ReactElement;\n}) => {\n  const output = CMP.parse(out);\n  const compare = CMP.parse(cmp);\n\n  if (isErr(output)) {\n    return (\n      <details>\n        <summary>Failed to parse output</summary>\n        <pre>{display(Err(output))}</pre>\n        <code>\n          <pre>{out}</pre>\n        </code>\n      </details>\n    );\n  }\n\n  if (isErr(compare)) {\n    return (\n      <details>\n        <summary>Failed to parse compare</summary>\n        <code>\n          <pre>{display(Err(compare))}</pre>\n          <pre>{cmp}</pre>\n        </code>\n      </details>\n    );\n  }\n\n  const cmpData = Ok(compare);\n  const outData = Ok(output);\n  let failures = 0;\n  const table = range(0, Math.min(cmpData.length, outData.length)).map((i) => {\n    const cmpI = cmpData[i] ?? [];\n    const outI = outData[i] ?? [];\n    return range(0, Math.max(cmpI.length, outI.length))\n      .map((_, j) => [cmpI[j] ?? \"\", outI[j] ?? \"\"])\n      .map(([cmp, out]) => {\n        const cell = {\n          cmp: cmp ?? '\"',\n          out: out ?? '\"',\n          pass:\n            cmp?.trim().match(/^\\*+$/) !== null || out?.trim() === cmp?.trim(),\n        };\n        if (!cell.pass) {\n          failures += 1;\n        }\n        return cell;\n      });\n  });\n\n  return (\n    <div className={\"scroll-x \" + className}>\n      {failures > 0 && (\n        <p>\n          {failures} failure{failures === 1 ? \"\" : \"s\"}\n        </p>\n      )}\n      {table.length > 0 ? (\n        <table\n          style={{\n            fontFamily: \"var(--font-family-monospace)\",\n            marginBottom: \"none\",\n          }}\n        >\n          <tbody>\n            {table.map((row, i) => (\n              <tr key={i}>\n                {row.map(({ cmp, out, pass }, i) => (\n                  <DiffCell cmp={cmp} out={out} pass={pass} key={i} />\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        zeroState ?? <p>Execute test script to compare output.</p>\n      )}\n    </div>\n  );\n};\n\nconst DiffCell = ({\n  cmp,\n  out,\n  pass,\n}: {\n  cmp: string;\n  out: string;\n  pass: boolean;\n}) => {\n  return pass ? (\n    <>\n      <td>{cmp}</td>\n    </>\n  ) : (\n    <>\n      <td>\n        <ins>{cmp}</ins>\n        <br />\n        <del>{out}</del>\n      </td>\n    </>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { assert, assertExists } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport { range } from \"@davidsouther/jiffies/lib/esm/range.js\";\nimport { bin } from \"../util/twos.js\";\nimport { Clock } from \"./clock.js\";\n\nexport const HIGH = 1;\nexport const LOW = 0;\nexport type Voltage = typeof HIGH | typeof LOW;\n\nexport interface Pin {\n  readonly name: string;\n  readonly width: number;\n  busVoltage: number;\n  pull(voltage: Voltage, bit?: number): void;\n  toggle(bit?: number): void;\n  voltage(bit?: number): Voltage;\n  connect(pin: Pin): void;\n}\n\nexport class Bus implements Pin {\n  state: Voltage[];\n  next: Pin[] = [];\n\n  constructor(readonly name: string, readonly width = 1) {\n    this.state = range(0, this.width).map(() => LOW);\n  }\n\n  ensureWidth(newWidth: number) {\n    assert(newWidth <= 16, `Cannot widen past 16 to ${newWidth} bits`);\n    if (this.width < newWidth) {\n      (this as { width: number }).width = newWidth;\n      this.state = [\n        ...this.state,\n        ...range(this.width, newWidth).map(() => LOW as Voltage),\n      ];\n    }\n  }\n\n  connect(next: Pin) {\n    this.next.push(next);\n    next.busVoltage = this.busVoltage;\n  }\n\n  pull(voltage: Voltage, bit = 0) {\n    assert(\n      bit >= 0 && bit < this.width,\n      `Bit out of bounds: ${this.name}@${bit}`\n    );\n    this.state[bit] = voltage;\n    this.next.forEach((n) => n.pull(voltage, bit));\n  }\n\n  voltage(bit = 0): Voltage {\n    assert(bit >= 0 && bit < this.width);\n    return this.state[bit];\n  }\n\n  set busVoltage(voltage: number) {\n    for (const i of range(0, this.width)) {\n      this.state[i] = ((voltage & (1 << i)) >> i) as Voltage;\n    }\n    this.next.forEach((n) => (n.busVoltage = this.busVoltage));\n  }\n\n  get busVoltage(): number {\n    return range(0, this.width).reduce((b, i) => b | (this.state[i] << i), 0);\n  }\n\n  toggle(bit = 0) {\n    const nextVoltage = this.voltage(bit) === LOW ? HIGH : LOW;\n    this.pull(nextVoltage, bit);\n  }\n}\n\nexport class InSubBus extends Bus {\n  constructor(\n    private bus: Pin,\n    private start: number,\n    override readonly width = 1\n  ) {\n    super(bus.name);\n    assert(\n      start >= 0 && start + width <= bus.width,\n      `Mismatched InSubBus dimensions on ${bus.name} (${width} + ${start} > ${bus.width})`\n    );\n    this.connect(bus);\n  }\n\n  override pull(voltage: Voltage, bit = 0) {\n    assert(bit >= 0 && bit < this.width);\n    this.bus.pull(voltage, this.start + bit);\n  }\n\n  override voltage(bit = 0): Voltage {\n    assert(bit >= 0 && bit < this.width);\n    return this.bus.voltage(this.start + bit);\n  }\n\n  override set busVoltage(voltage: number) {\n    const high = this.bus.busVoltage & ~mask(this.width + this.start);\n    const low = this.bus.busVoltage & mask(this.start);\n    const mid = (voltage & mask(this.width)) << this.start;\n    this.bus.busVoltage = high | mid | low;\n  }\n\n  override get busVoltage(): number {\n    return (this.bus.busVoltage >> this.start) & mask(this.width);\n  }\n\n  override connect(bus: Pin): void {\n    assert(\n      this.start + this.width <= bus.width,\n      `Mismatched InSubBus connection dimensions (From ${bus.name} to ${this.name})`\n    );\n    this.bus = bus;\n  }\n}\n\nexport class OutSubBus extends Bus {\n  constructor(\n    private bus: Pin,\n    private start: number,\n    override readonly width = 1\n  ) {\n    super(bus.name);\n    assert(start >= 0 && width <= bus.width, `Mismatched OutSubBus dimensions`);\n    this.connect(bus);\n  }\n\n  override set busVoltage(voltage: number) {\n    this.bus.busVoltage =\n      (voltage & mask(this.width + this.start)) >> this.start;\n  }\n\n  override get busVoltage(): number {\n    return this.bus.busVoltage & mask(this.width);\n  }\n\n  override connect(bus: Pin): void {\n    assert(\n      this.width <= bus.width,\n      `Mismatched OutSubBus connection dimensions`\n    );\n    this.bus = bus;\n  }\n}\n\nexport class ConstantBus extends Bus {\n  constructor(name: string, private readonly value: number) {\n    super(name, 16 /* TODO: get high bit index */);\n  }\n\n  pullHigh(_ = 0) {\n    return undefined;\n  }\n  pullLow(_ = 0) {\n    return undefined;\n  }\n  override voltage(_ = 0): Voltage {\n    return (this.busVoltage & 0x1) as Voltage;\n  }\n\n  override set busVoltage(voltage: number) {\n    // Noop\n  }\n  override get busVoltage(): number {\n    return this.value;\n  }\n}\n\nexport const TRUE_BUS = new ConstantBus(\"true\", 0xffff);\nexport const FALSE_BUS = new ConstantBus(\"false\", 0);\n\nexport function parsePinDecl(toPin: string): {\n  pin: string;\n  width: number;\n} {\n  const { pin, w } = toPin.match(/(?<pin>[a-zA-Z]+)(\\[(?<w>\\d+)\\])?/)\n    ?.groups as {\n    pin: string;\n    w?: string;\n  };\n  return {\n    pin,\n    width: w ? Number(w) : 1,\n  };\n}\n\nexport function parseToPin(toPin: string): {\n  pin: string;\n  start?: number;\n  end?: number;\n} {\n  const { pin, i, j } = toPin.match(\n    /(?<pin>[a-z]+)(\\[(?<i>\\d+)(\\.\\.(?<j>\\d+))?\\])?/\n  )?.groups as { pin: string; i?: string; j?: string };\n  return {\n    pin,\n    start: i ? Number(i) : undefined,\n    end: j ? Number(j) : undefined,\n  };\n}\n\nexport class Pins {\n  private readonly map = new Map<string, Pin>();\n\n  insert(pin: Pin) {\n    const { name } = pin;\n    assert(!this.map.has(name), `Pins already has ${name}!`);\n    this.map.set(name, pin);\n  }\n\n  emplace(name: string, minWidth?: number) {\n    if (this.has(name)) {\n      return this.get(name)!;\n    } else {\n      const pin = new Bus(name, minWidth);\n      this.insert(pin);\n      return pin;\n    }\n  }\n\n  has(pin: string): boolean {\n    return this.map.has(pin);\n  }\n\n  get(pin: string): Pin | undefined {\n    return this.map.get(pin);\n  }\n\n  entries(): Iterable<Pin> {\n    return this.map.values();\n  }\n\n  [Symbol.iterator]() {\n    return this.map[Symbol.iterator]();\n  }\n}\n\nlet id = 0;\nexport class Chip {\n  readonly id = id++;\n  ins = new Pins();\n  outs = new Pins();\n  pins = new Pins();\n  parts = new Set<Chip>();\n  clockedPins: Set<string>;\n\n  get clocked() {\n    if (this.clockedPins.size > 0) {\n      return true;\n    }\n    for (const part of this.parts) {\n      if (part.clocked) return true;\n    }\n    return false;\n  }\n\n  constructor(\n    ins: (string | { pin: string; width: number })[],\n    outs: (string | { pin: string; width: number })[],\n    public name?: string,\n    internals: (string | { pin: string; width: number })[] = [],\n    clocked: string[] = []\n  ) {\n    for (const inn of ins) {\n      const { pin, width = 1 } =\n        (inn as { pin: string }).pin !== undefined\n          ? (inn as { pin: string; width: number })\n          : parsePinDecl(inn as string);\n      this.ins.insert(new Bus(pin, width));\n    }\n\n    for (const out of outs) {\n      const { pin, width = 1 } =\n        (out as { pin: string }).pin !== undefined\n          ? (out as { pin: string; width: number })\n          : parsePinDecl(out as string);\n      this.outs.insert(new Bus(pin, width));\n    }\n\n    for (const internal of internals) {\n      const { pin, width = 1 } =\n        (internal as { pin: string }).pin !== undefined\n          ? (internal as { pin: string; width: number })\n          : parsePinDecl(internal as string);\n      this.pins.insert(new Bus(pin, width));\n    }\n\n    this.clockedPins = new Set(clocked);\n\n    Clock.get().$.subscribe(() => this.eval());\n  }\n\n  reset() {\n    for (const [_, pin] of this.ins) {\n      pin.busVoltage = 0;\n    }\n    for (const part of this.parts) {\n      part.reset();\n    }\n    this.eval();\n  }\n\n  in(pin = \"in\"): Pin {\n    assert(this.hasIn(pin), `No in pin ${pin}`);\n    return this.ins.get(pin)!;\n  }\n\n  out(pin = \"out\"): Pin {\n    assert(this.hasOut(pin), `No in pin ${pin}`);\n    return this.outs.get(pin)!;\n  }\n\n  hasIn(pin: string): boolean {\n    return this.ins.has(pin);\n  }\n\n  hasOut(pin: string): boolean {\n    return this.outs.has(pin);\n  }\n\n  pin(name: string): Pin {\n    assert(this.pins.has(name));\n    return this.pins.get(name)!;\n  }\n\n  get(name: string, offset?: number): Pin | undefined {\n    if (this.ins.has(name)) {\n      return this.ins.get(name)!;\n    }\n    if (this.outs.has(name)) {\n      return this.outs.get(name)!;\n    }\n    if (this.pins.has(name)) {\n      return this.pins.get(name)!;\n    }\n    return this.getBuiltin(name, offset);\n  }\n\n  private getBuiltin(name: string, offset = 0): Pin | undefined {\n    if (BUILTIN_NAMES.includes(name)) {\n      for (const part of this.parts) {\n        const pin = part.get(name, offset);\n        if (pin) {\n          return pin;\n        }\n      }\n    }\n    return undefined;\n  }\n\n  isOutPin(pin: string): boolean {\n    return this.outs.has(pin);\n  }\n\n  wire(part: Chip, connections: Connection[]) {\n    this.parts.add(part);\n    for (const { to, from } of connections) {\n      if (part.isOutPin(to.name)) {\n        this.wireOutPin(part, to, from);\n      } else {\n        this.wireInPin(part, to, from);\n      }\n    }\n  }\n\n  private findPin(from: string, minWidth?: number): Pin {\n    if (from.toLowerCase() === \"true\" || from === \"1\") {\n      return TRUE_BUS;\n    }\n    if (from.toLowerCase() === \"false\" || from === \"0\") {\n      return FALSE_BUS;\n    }\n    if (this.ins.has(from)) {\n      return this.ins.get(from)!;\n    }\n    if (this.outs.has(from)) {\n      return this.outs.get(from)!;\n    }\n    return this.pins.emplace(from, minWidth);\n  }\n\n  private wireOutPin(part: Chip, to: PinSide, from: PinSide) {\n    const partPin = assertExists(\n      part.outs.get(to.name),\n      () => `Cannot wire to missing pin ${to.name}`\n    );\n    to.width ??= partPin.width;\n\n    let chipPin = this.findPin(from.name, from.width ?? to.width);\n    const isInternal = this.pins.has(chipPin.name);\n\n    from.width ??= chipPin.width;\n\n    if (chipPin instanceof ConstantBus) {\n      throw new Error(`Cannot wire to constant bus`);\n    }\n\n    // Widen internal pins\n    if (isInternal && chipPin instanceof Bus) {\n      chipPin.ensureWidth(from.start + from.width);\n    }\n\n    // Wrap the chipPin in an InBus when the chip side is dimensioned\n    if (from.start > 0 || from.width !== chipPin.width) {\n      chipPin = new InSubBus(chipPin, from.start, from.width);\n    }\n\n    // Wrap the chipPin in an OutBus when the part side is dimensioned\n    if (to.start > 0 || to.width !== chipPin.width) {\n      chipPin = new OutSubBus(chipPin, to.start, to.width);\n    }\n\n    partPin.connect(chipPin);\n  }\n\n  private wireInPin(part: Chip, to: PinSide, from: PinSide) {\n    let partPin = assertExists(\n      part.ins.get(to.name),\n      () => `Cannot wire to missing pin ${to.name}`\n    );\n    to.width ??= partPin.width;\n\n    const chipPin = this.findPin(from.name, from.width ?? to.width);\n\n    from.width ??= chipPin.width;\n\n    // Wrap the partPin in an InBus when the part side is dimensioned\n    if (to.start > 0 || to.width !== chipPin.width) {\n      partPin = new InSubBus(partPin, to.start, to.width);\n    }\n\n    // Wrap the partPin in an OutBus when the chip side is dimensioned\n    if (![\"true\", \"false\"].includes(chipPin.name)) {\n      if (from.start > 0 || from.width !== chipPin.width) {\n        partPin = new OutSubBus(partPin, from.start, from.width);\n      }\n    }\n    chipPin.connect(partPin);\n  }\n\n  eval() {\n    for (const chip of this.parts) {\n      // TODO topological sort\n      // eval chip input busses\n      TRUE_BUS.next.forEach((pin) => (pin.busVoltage = TRUE_BUS.busVoltage));\n      FALSE_BUS.next.forEach((pin) => (pin.busVoltage = FALSE_BUS.busVoltage));\n      chip.eval();\n      // eval output busses\n    }\n  }\n\n  tick() {\n    this.eval();\n  }\n\n  tock() {\n    this.eval();\n  }\n\n  remove() {\n    for (const part of this.parts) {\n      part.remove();\n    }\n  }\n\n  // For the ROM32K builtin to load from a file system\n  async load(fs: FileSystem, path: string): Promise<void> {\n    for (const part of this.parts) {\n      if (part.name === \"ROM32K\") {\n        await part.load(fs, path);\n      }\n    }\n  }\n}\n\nexport class Low extends Chip {\n  constructor() {\n    super([], []);\n    this.outs.insert(FALSE_BUS);\n  }\n}\n\nexport class High extends Chip {\n  constructor() {\n    super([], []);\n    this.outs.insert(TRUE_BUS);\n  }\n}\n\nexport class ClockedChip extends Chip {\n  override get clocked(): boolean {\n    return true;\n  }\n\n  #subscription = Clock.get().$.subscribe(({ level }) => {\n    if (level === LOW) {\n      this.tock();\n    } else {\n      this.tick();\n    }\n  });\n\n  override remove() {\n    this.#subscription.unsubscribe();\n    super.remove();\n  }\n\n  override reset(): void {\n    super.reset();\n    this.tick();\n    this.tock();\n  }\n}\n\nexport interface PinSide {\n  name: string;\n  start: number;\n  width?: number;\n}\n\nexport interface Connection {\n  // To is the part side\n  to: PinSide;\n  // From is the chip side\n  from: PinSide;\n}\n\nexport type Pinout = Record<string, string>;\nexport interface SerializedChip {\n  id: number;\n  name: string;\n  ins: Pinout;\n  outs: Pinout;\n  pins: Pinout;\n  children: SerializedChip[];\n}\n\nfunction mask(width: number) {\n  return Math.pow(2, width) - 1;\n}\n\nfunction setBus(busses: Pinout, pin: Pin) {\n  busses[pin.name] = bin(\n    (pin.busVoltage & mask(pin.width)) <<\n      (pin as unknown as { start: number }).start ?? 0\n  );\n  return busses;\n}\n\nexport function printChip(chip: Chip): SerializedChip {\n  return {\n    id: chip.id,\n    name: chip.name ?? chip.constructor.name,\n    ins: [...chip.ins.entries()].reduce(setBus, {} as Pinout),\n    outs: [...chip.outs.entries()].reduce(setBus, {} as Pinout),\n    pins: [...chip.pins.entries()].reduce(setBus, {} as Pinout),\n    children: [...chip.parts.values()].map(printChip),\n  };\n}\n\nexport const BUILTIN_NAMES = [\n  \"Register\",\n  \"ARegister\",\n  \"DRegister\",\n  \"PC\",\n  \"RAM8\",\n  \"RAM64\",\n  \"RAM512\",\n  \"RAM4K\",\n  \"RAM16K\",\n  \"ROM32K\",\n  \"Screen\",\n  \"Keyboard\",\n  \"Memory\",\n];\n","import { BehaviorSubject, Observable, Subject } from \"rxjs\";\nimport { assert } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { HIGH, LOW, Voltage } from \"./chip.js\";\n\ninterface Tick {\n  readonly level: Voltage;\n  readonly ticks: number;\n}\n\nlet clock: Clock;\nexport class Clock {\n  private level: Voltage = LOW;\n  private ticks = 0;\n\n  static get() {\n    if (clock === undefined) {\n      clock = new Clock();\n    }\n    return clock;\n  }\n\n  get isHigh(): boolean {\n    return this.level === HIGH;\n  }\n\n  get isLow(): boolean {\n    return this.level === LOW;\n  }\n\n  private subject = new BehaviorSubject<Tick>({\n    level: this.level,\n    ticks: this.ticks,\n  });\n  readonly frameSubject = new Subject<void>();\n  readonly resetSubject = new Subject<void>();\n\n  readonly $: Observable<Tick> = this.subject;\n  readonly frame$: Observable<void> = this.frameSubject;\n  readonly reset$: Observable<void> = this.resetSubject;\n\n  private next() {\n    this.subject.next({\n      level: this.level,\n      ticks: this.ticks,\n    });\n  }\n\n  private constructor() {\n    // private\n  }\n\n  reset() {\n    this.level = LOW;\n    this.ticks = 0;\n    this.next();\n    this.resetSubject.next();\n  }\n\n  tick() {\n    assert(this.level === LOW, \"Can only tick up from LOW\");\n    this.level = HIGH;\n    this.next();\n  }\n\n  tock() {\n    assert(this.level === HIGH, \"Can only tock down from HIGH\");\n    this.level = LOW;\n    this.ticks += 1;\n    this.next();\n  }\n\n  toggle() {\n    this.level === HIGH ? this.tock() : this.tick();\n  }\n\n  eval() {\n    this.tick();\n    this.tock();\n  }\n\n  frame() {\n    this.frameSubject.next();\n  }\n\n  toString() {\n    return `${this.ticks}${this.level === HIGH ? \"+\" : \"\"}`;\n  }\n}\n","export type COMMANDS_ASM =\n  | \"0\"\n  | \"1\"\n  | \"-1\"\n  | \"D\"\n  | \"A\"\n  | \"M\"\n  | \"!D\"\n  | \"!A\"\n  | \"-D\"\n  | \"-A\"\n  | \"D+1\"\n  | \"A+1\"\n  | \"D-1\"\n  | \"A-1\"\n  | \"D+A\"\n  | \"D-A\"\n  | \"D-M\"\n  | \"A-D\"\n  | \"D&A\"\n  | \"D&M\"\n  | \"D|A\"\n  | \"D|M\";\n\nexport type COMMANDS_OP =\n  | 0b101010\n  | 0b111111\n  | 0b111010\n  | 0b001100\n  | 0b110000\n  | 0b110000\n  | 0b001101\n  | 0b110001\n  | 0b001111\n  | 0b110011\n  | 0b011111\n  | 0b110111\n  | 0b001110\n  | 0b110010\n  | 0b000010\n  | 0b010011\n  | 0b010011\n  | 0b000111\n  | 0b000000\n  | 0b000000\n  | 0b010101\n  | 0b010101;\n\n//Usefull for the visualization of the ALU\nexport type COMMANDS_ALU =\n  | \"0\"\n  | \"1\"\n  | \"-1\"\n  | \"x\"\n  | \"y\"\n  | \"!x\"\n  | \"!y\"\n  | \"-x\"\n  | \"-y\"\n  | \"x+1\"\n  | \"y+1\"\n  | \"x-1\"\n  | \"y-1\"\n  | \"x+y\"\n  | \"x-y\"\n  | \"y-x\"\n  | \"x&y\"\n  | \"x|y\";\n\nexport const COMMANDS_ALU: {\n  op: Record<COMMANDS_OP, COMMANDS_ALU>;\n} = {\n  op: {\n    0x2a: \"0\",\n    0x3f: \"1\",\n    0x3a: \"-1\",\n    0x0c: \"x\",\n    0x30: \"y\",\n    0x0d: \"!x\",\n    0x31: \"!y\",\n    0x0f: \"-x\",\n    0x33: \"-y\",\n    0x1f: \"x+1\",\n    0x37: \"y+1\",\n    0x0e: \"x-1\",\n    0x32: \"y-1\",\n    0x02: \"x+y\",\n    0x13: \"x-y\",\n    0x07: \"y-x\",\n    0x00: \"x&y\",\n    0x15: \"x|y\",\n  },\n};\n\nexport const COMMANDS: {\n  asm: Record<COMMANDS_ASM, COMMANDS_OP>;\n  op: Record<COMMANDS_OP, COMMANDS_ASM>;\n} = {\n  asm: {\n    \"0\": 0b101010, // 42 0x2A\n    \"1\": 0b111111, // 63 0x3F\n    \"-1\": 0b111010, // 58 0x3A\n    D: 0b001100, // 12 0x0C\n    A: 0b110000, // 48 0x30\n    M: 0b110000, // 48 0x30\n    \"!D\": 0b001101, // 13 0x0D\n    \"!A\": 0b110001, // 49 0x31\n    \"-D\": 0b001111, // 15 0x0F\n    \"-A\": 0b110011, // 51 0x33\n    \"D+1\": 0b011111, // 31 0x1F\n    \"A+1\": 0b110111, // 55 0x37\n    \"D-1\": 0b001110, // 14 0x0E\n    \"A-1\": 0b110010, // 50 0x32\n    \"D+A\": 0b000010, //  2 0x02\n    \"D-A\": 0b010011, // 19 0x13\n    \"D-M\": 0b010011, // 19 0x13\n    \"A-D\": 0b000111, //  7 0x07\n    \"D&A\": 0b000000, //  0 0x00\n    \"D&M\": 0b000000, //  0 0x00\n    \"D|A\": 0b010101, // 21 0x15\n    \"D|M\": 0b010101, // 21 0x15\n  },\n  op: {\n    0x2a: \"0\",\n    0x3f: \"1\",\n    0x3a: \"-1\",\n    0x0c: \"D\",\n    0x30: \"A\",\n    0x0d: \"!D\",\n    0x31: \"!A\",\n    0x0f: \"-D\",\n    0x33: \"-A\",\n    0x1f: \"D+1\",\n    0x37: \"A+1\",\n    0x0e: \"D-1\",\n    0x32: \"A-1\",\n    0x02: \"D+A\",\n    0x13: \"D-A\",\n    0x07: \"A-D\",\n    0x00: \"D&A\",\n    0x15: \"D|A\",\n  },\n};\n\nexport type ASSIGN_ASM = \"\" | \"M\" | \"D\" | \"MD\" | \"A\" | \"AM\" | \"AD\" | \"AMD\";\nexport type ASSIGN_OP = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;\n\nexport const ASSIGN: {\n  asm: Record<ASSIGN_ASM, ASSIGN_OP>;\n  op: Record<ASSIGN_OP, ASSIGN_ASM>;\n} = {\n  asm: {\n    \"\": 0x0,\n    M: 0b001,\n    D: 0b010,\n    MD: 0b011,\n    A: 0b100,\n    AM: 0b101,\n    AD: 0b110,\n    AMD: 0b111,\n  },\n  op: {\n    0x0: \"\",\n    0x1: \"M\",\n    0x2: \"D\",\n    0x3: \"MD\",\n    0x4: \"A\",\n    0x5: \"AM\",\n    0x6: \"AD\",\n    0x7: \"AMD\",\n  },\n};\n\nexport type JUMP_ASM =\n  | \"\"\n  | \"JGT\"\n  | \"JEQ\"\n  | \"JGE\"\n  | \"JLT\"\n  | \"JNE\"\n  | \"JLE\"\n  | \"JMP\";\nexport type JUMP_OP = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;\nexport const JUMP: {\n  asm: Record<JUMP_ASM, JUMP_OP>;\n  op: Record<JUMP_OP, JUMP_ASM>;\n} = {\n  asm: {\n    \"\": 0b0,\n    JGT: 0b001,\n    JEQ: 0b010,\n    JGE: 0b011,\n    JLT: 0b100,\n    JNE: 0b101,\n    JLE: 0b110,\n    JMP: 0b111,\n  },\n  op: {\n    0x0: \"\",\n    0x1: \"JGT\",\n    0x2: \"JEQ\",\n    0x3: \"JGE\",\n    0x4: \"JLT\",\n    0x5: \"JNE\",\n    0x6: \"JLE\",\n    0x7: \"JMP\",\n  },\n};\n\nexport const Flags = {\n  0x01: \"Positive\",\n  0x00: \"Zero\",\n  0x0f: \"Negative\",\n  Positive: 0x01,\n  Zero: 0x00,\n  Negative: 0x0f,\n};\n\nexport function alu(op: number, d: number, a: number): [number, number] {\n  let o = 0;\n  switch (op) {\n    case 0x2a:\n      o = 0;\n      break;\n    case 0x3f:\n      o = 1;\n      break;\n    case 0x3a:\n      o = -1;\n      break;\n    case 0x0c:\n      o = d;\n      break;\n    case 0x30:\n      o = a;\n      break;\n    case 0x0d:\n      o = ~d;\n      break;\n    case 0x31:\n      o = ~a;\n      break;\n    case 0x0f:\n      o = -d;\n      break;\n    case 0x33:\n      o = -a;\n      break;\n    case 0x1f:\n      o = d + 1;\n      break;\n    case 0x37:\n      o = a + 1;\n      break;\n    case 0x0e:\n      o = d - 1;\n      break;\n    case 0x32:\n      o = a - 1;\n      break;\n    case 0x02:\n      o = d + a;\n      break;\n    case 0x13:\n      o = d - a;\n      break;\n    case 0x07:\n      o = a - d;\n      break;\n    case 0x00:\n      o = d & a;\n      break;\n    case 0x15:\n      o = d | a;\n      break;\n  }\n\n  o = o & 0xffff;\n  const flags =\n    o === 0 ? Flags.Zero : o & 0x8000 ? Flags.Negative : Flags.Positive;\n  return [o, flags];\n}\n\nexport function alua(op: number, d: number, a: number): [number, number] {\n  if (op & 0b100000) d = 0;\n  if (op & 0b010000) d = ~d & 0xffff;\n  if (op & 0b001000) a = 0;\n  if (op & 0b000100) a = ~a & 0xffff;\n\n  let o = (op & 0b000010 ? d + a : d & a) & 0xffff;\n  if (op & 0b000001) o = ~o & 0xffff;\n\n  const flags =\n    o === 0 ? Flags.Zero : o & 0x8000 ? Flags.Negative : Flags.Positive;\n  return [o, flags];\n}\n","import { alu, COMMANDS_OP, Flags } from \"./alu.js\";\nimport {\n  Memory,\n  MemoryAdapter,\n  MemoryKeyboard,\n  SubMemory,\n  RAM as RAMMem,\n  SCREEN_OFFSET,\n  SCREEN_SIZE,\n} from \"./memory.js\";\n\nexport interface CPUInput {\n  inM: number;\n  instruction: number;\n  reset: boolean;\n}\n\nexport interface CPUOutput {\n  outM: number;\n  writeM: boolean;\n  addressM: number;\n}\n\nexport interface CPUState {\n  A: number;\n  D: number;\n  PC: number;\n  ALU: number;\n  flag: number;\n}\n\nexport function emptyState(): CPUState {\n  return { A: 0, D: 0, PC: 0, ALU: 0, flag: Flags.Zero };\n}\n\nconst BITS = {\n  c: 0b1000_0000_0000_0000,\n  x1: 0b1001_0000_0000_0000,\n  x2: 0b1001_0000_0000_0000,\n  am: 0b1001_0000_0000_0000,\n  op: 0b0000_1111_1100_0000,\n  d1: 0b1000_0000_0010_0000,\n  d2: 0b1000_0000_0001_0000,\n  d3: 0b1000_0000_0000_1000,\n  j1: 0b1000_0000_0000_0001,\n  j2: 0b1000_0000_0000_0010,\n  j3: 0b1000_0000_0000_0100,\n};\n\nexport function decode(instruction: number) {\n  function bit(bit: number): boolean {\n    return (instruction & bit) === bit;\n  }\n  const bits = {\n    c: bit(BITS.c),\n    x1: bit(BITS.x1),\n    x2: bit(BITS.x2),\n    am: bit(BITS.am),\n    op: ((instruction & BITS.op) >> 6) as COMMANDS_OP,\n    d1: bit(BITS.d1),\n    d2: bit(BITS.d2),\n    d3: bit(BITS.d3),\n    j1: bit(BITS.j1),\n    j2: bit(BITS.j2),\n    j3: bit(BITS.j3),\n  };\n\n  return bits;\n}\n\nexport function cpuTick(\n  { inM, instruction }: CPUInput,\n  { A, D, PC }: CPUState\n): [CPUState, boolean] {\n  const bits = decode(instruction);\n  const a = bits.am ? inM : A;\n  const [ALU, flag] = alu(bits.op, D, a);\n\n  return [{ A, D, PC: PC + 1, ALU, flag }, bits.d3];\n}\n\nexport function cpuTock(\n  { inM, instruction, reset }: CPUInput,\n  { A, D, PC, ALU, flag }: CPUState\n): [CPUOutput, CPUState] {\n  const bits = decode(instruction);\n\n  const j1 = bits.j1 && flag === Flags.Positive;\n  const j2 = bits.j2 && flag === Flags.Zero;\n  const j3 = bits.j3 && flag === Flags.Negative;\n  const jmp = j1 || j2 || j3;\n\n  PC = reset ? 0 : jmp ? A : PC;\n\n  if (bits.d2) {\n    D = ALU;\n  }\n\n  const oldA = A;\n  if (!bits.c) {\n    A = instruction & 0x7fff;\n  } else if (bits.d1) {\n    A = ALU;\n  }\n\n  const a = bits.am ? inM : A;\n  const alu2 = alu(bits.op, D, a);\n\n  ALU = alu2[0];\n  flag = alu2[1];\n\n  const output: CPUOutput = {\n    addressM: bits.d3 ? oldA : A,\n    outM: ALU,\n    writeM: bits.d3,\n  };\n\n  const state: CPUState = {\n    A,\n    D,\n    ALU,\n    flag,\n    PC,\n  };\n\n  return [output, state];\n}\n\nexport function cpu(input: CPUInput, state: CPUState): [CPUOutput, CPUState] {\n  const [tickState, _writeM] = cpuTick(input, state);\n  return cpuTock(input, tickState);\n}\n\nexport class CPU {\n  readonly RAM: Memory;\n  readonly ROM: Memory;\n  readonly Screen: MemoryAdapter;\n  readonly Keyboard: MemoryKeyboard;\n\n  #pc = 0;\n  #a = 0;\n  #d = 0;\n\n  #tickState: CPUState = {\n    A: 0,\n    D: 0,\n    PC: 0,\n    ALU: 0,\n    flag: Flags.Zero,\n  };\n\n  get state(): CPUState {\n    return this.#tickState;\n  }\n\n  get PC() {\n    return this.#pc;\n  }\n\n  get A() {\n    return this.#a;\n  }\n\n  get D() {\n    return this.#d;\n  }\n\n  setA(value: number) {\n    this.#a = value;\n  }\n\n  setD(value: number) {\n    this.#d = value;\n  }\n\n  setPC(value: number) {\n    this.#pc = value;\n  }\n\n  constructor({ RAM = new RAMMem(), ROM }: { RAM?: Memory; ROM: Memory }) {\n    this.RAM = RAM;\n    this.ROM = ROM;\n\n    // \"Device Map\"\n    this.Screen = new SubMemory(this.RAM, SCREEN_SIZE, SCREEN_OFFSET);\n    this.Keyboard = new MemoryKeyboard(this.RAM);\n  }\n\n  reset() {\n    this.#pc = 0;\n    this.#a = 0;\n    this.#d = 0;\n  }\n\n  tick() {\n    const [{ addressM, outM, writeM }, { A, D, PC }] = cpu(\n      {\n        inM: this.RAM.get(this.#a),\n        instruction: this.ROM.get(this.#pc),\n        reset: false,\n      },\n      {\n        A: this.#a,\n        D: this.#d,\n        PC: this.#pc,\n        ALU: this.#d,\n        flag: Flags.Zero,\n      }\n    );\n\n    this.#a = A;\n    this.#d = D;\n    this.#pc = PC;\n\n    if (writeM) {\n      this.RAM.set(addressM, outM);\n    }\n  }\n}\n","import { assert } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport { op } from \"../util/asm.js\";\nimport { int10, int16, int2 } from \"../util/twos.js\";\nimport { load } from \"../fs.js\";\n\nexport const FORMATS = [\"bin\", \"dec\", \"hex\", \"asm\"];\nexport type Format = typeof FORMATS[number];\n\nexport const SCREEN_OFFSET = 0x4000;\nexport const SCREEN_ROWS = 512;\nexport const SCREEN_COLS = 256;\nexport const SCREEN_SIZE = SCREEN_ROWS * SCREEN_COLS;\nexport const KEYBOARD_OFFSET = 0x6000;\n\nexport interface MemoryAdapter {\n  size: number;\n  get(index: number): number;\n  set(index: number, value: number): void;\n  reset(): void;\n  update(cell: number, value: string, format: Format): void;\n  load(fs: FileSystem, path: string): Promise<void>;\n  loadBytes(bytes: number[]): void;\n  range(start?: number, end?: number): number[];\n  map<T>(\n    fn: (index: number, value: number) => T,\n    start?: number,\n    end?: number\n  ): Iterable<T>;\n}\n\nexport interface KeyboardAdapter {\n  getKey(): number;\n  setKey(key: number): void;\n  clearKey(): void;\n}\n\nexport class Memory implements MemoryAdapter {\n  private memory: Int16Array;\n\n  get size(): number {\n    return this.memory.length;\n  }\n\n  constructor(memory: ArrayBuffer | number) {\n    if (typeof memory === \"number\") {\n      this.memory = new Int16Array(memory);\n    } else {\n      this.memory = new Int16Array(memory);\n    }\n  }\n\n  get(index: number): number {\n    if (index < 0 || index >= this.size) {\n      return 0xffff;\n    }\n    return this.memory[index] ?? 0;\n  }\n\n  set(index: number, value: number): void {\n    if (index >= 0 && index < this.size) {\n      this.memory[index] = value & 0xffff;\n    }\n  }\n\n  reset(): void {\n    this.memory.fill(0);\n  }\n\n  update(cell: number, value: string, format: Format) {\n    let current: number;\n    switch (format) {\n      case \"asm\":\n        current = op(value);\n        break;\n      case \"bin\":\n        current = int2(value);\n        break;\n      case \"hex\":\n        current = int16(value);\n        break;\n      case \"dec\":\n      default:\n        current = int10(value);\n        break;\n    }\n\n    if (isFinite(current) && current <= 0xffff) {\n      this.set(cell, current);\n    }\n  }\n\n  async load(fs: FileSystem, path: string) {\n    try {\n      this.loadBytes(await load(fs, path));\n    } catch (cause) {\n      // throw new Error(`ROM32K Failed to load file ${path}`, { cause });\n      throw new Error(`Memory Failed to load file ${path}`);\n    }\n  }\n\n  loadBytes(bytes: number[]): void {\n    this.memory.set(new Int16Array(bytes));\n    this.memory.fill(0, bytes.length, this.size);\n  }\n\n  range(start = 0, end = this.size): number[] {\n    return [...this.memory.slice(start, end)];\n  }\n\n  *map<T>(\n    fn: (index: number, value: number) => T,\n    start = 0,\n    end = this.size\n  ): Iterable<T> {\n    assert(start < end);\n    for (let i = start; i < end; i++) {\n      yield fn(i, this.get(i));\n    }\n  }\n}\n\nexport class SubMemory implements MemoryAdapter {\n  constructor(\n    private readonly parent: MemoryAdapter,\n    readonly size: number,\n    private readonly offset: number\n  ) {}\n\n  get(index: number): number {\n    if (index < 0 || index >= this.size) {\n      return 0xffff;\n    }\n    return this.parent.get(this.offset + index);\n  }\n\n  set(index: number, value: number): void {\n    if (index >= 0 && index < this.size) {\n      this.parent.set(index + this.offset, value);\n    }\n  }\n\n  reset(): void {\n    for (let i = 0; i < this.size; i++) {\n      this.set(i, 0);\n    }\n  }\n\n  update(index: number, value: string, format: string): void {\n    if (index >= 0 && index < this.size) {\n      this.parent.update(index + this.offset, value, format);\n    }\n  }\n\n  load(fs: FileSystem, path: string): Promise<void> {\n    return this.parent.load(fs, path);\n  }\n\n  loadBytes(bytes: number[]): void {\n    return this.parent.loadBytes(bytes);\n  }\n\n  range(start?: number, end?: number): number[] {\n    return this.parent.range(start, end);\n  }\n  map<T>(\n    fn: (index: number, value: number) => T,\n    start?: number,\n    end?: number\n  ): Iterable<T> {\n    return this.parent.map(fn, start, end);\n  }\n}\n\nexport class MemoryKeyboard extends SubMemory implements KeyboardAdapter {\n  constructor(memory: MemoryAdapter) {\n    super(memory, 1, 0x6000);\n  }\n\n  getKey(): number {\n    return this.get(0);\n  }\n\n  setKey(key: number): void {\n    this.set(0, key & 0xffff);\n  }\n\n  clearKey(): void {\n    this.set(0, 0);\n  }\n}\n\nexport class ROM extends Memory {\n  static readonly SIZE = 0x8000;\n  constructor(program: Int16Array) {\n    const arr = new Int16Array(ROM.SIZE);\n    arr.set(program);\n    super(arr);\n  }\n}\n\nexport class RAM extends Memory {\n  // 4k main memory, 2k screen memory, 1 keyboard\n  // static readonly SIZE = 0x4000 + 0x2000 + 0x0001;\n  static readonly SIZE = 0x8000;\n  constructor() {\n    super(RAM.SIZE);\n  }\n}\n","import { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport * as loader from \"./loader.js\";\n\nexport async function load(fs: FileSystem, path: string): Promise<number[]> {\n  if (path.endsWith(\".hack\")) {\n    return loadHack(fs, path);\n  }\n\n  if (path.endsWith(\".asm\")) {\n    return loadAsm(fs, path);\n  }\n\n  throw new Error(`Cannot load file without hack or asm extension ${path}`);\n}\n\nexport async function loadAsm(fs: FileSystem, path: string): Promise<number[]> {\n  return loader.loadAsm(await fs.readFile(path));\n}\n\nexport async function loadHack(\n  fs: FileSystem,\n  path: string\n): Promise<number[]> {\n  return loader.loadHack(await fs.readFile(path));\n}\n","import ohm from \"ohm-js\";\nimport { int10, int16, int2 } from \"../util/twos.js\";\nimport { Err, Ok, Result } from \"@davidsouther/jiffies/lib/esm/result.js\";\n\nexport const UNKNOWN_PARSE_ERROR = `Unknown parse error`;\n\nimport baseGrammar from \"./grammars/base.ohm.js\";\nexport const grammars = {\n  Base: ohm.grammar(baseGrammar),\n};\n\nexport const baseSemantics = grammars.Base.createSemantics();\n\nbaseSemantics.extendOperation(\"asIteration\", {\n  List(list, _) {\n    return list.asIteration();\n  },\n});\n\nbaseSemantics.addAttribute(\"value\", {\n  decNumber(_, digits): number {\n    return int10(digits.sourceString);\n  },\n  wholeDec(_, digits): number {\n    return int10(digits.sourceString);\n  },\n  binNumber(_, digits) {\n    return int2(digits.sourceString);\n  },\n  hexNumber(_, digits) {\n    return int16(digits.sourceString);\n  },\n  Number(num) {\n    return num.value;\n  },\n  Name(ident) {\n    return ident.name;\n  },\n  identifier(_, __): string {\n    return this.sourceString;\n  },\n});\n\nbaseSemantics.addAttribute(\"name\", {\n  identifier(_, __): string {\n    return this.sourceString;\n  },\n  Name(_): string {\n    return this.child(0)?.name;\n  },\n});\n\nbaseSemantics.addAttribute(\"String\", {\n  String(_a, str, _b) {\n    return str.sourceString;\n  },\n});\n\nexport type ParseError = Error | { message: string; shortMessage: string };\n\nexport function makeParser<ResultType>(\n  grammar: ohm.Grammar,\n  semantics: ohm.Semantics,\n  property: (obj: ohm.Dict) => ResultType = ({ root }) => root\n): (source: string) => Result<ResultType, ParseError> {\n  return function parse(source) {\n    try {\n      const match = grammar.match(source);\n      if (match.succeeded()) {\n        const parsed = semantics(match);\n        const parse = property(parsed);\n        return Ok(parse);\n      } else {\n        return Err({\n          message: match.message ?? UNKNOWN_PARSE_ERROR,\n          shortMessage: match.shortMessage ?? UNKNOWN_PARSE_ERROR,\n        });\n      }\n    } catch (e) {\n      return Err(e as Error);\n    }\n  };\n}\n\nexport interface Span {\n  start: number;\n  end: number;\n}\n","const base = `\nBase {\n  Root = Value*\n\n  At = at\n  Bang = bang\n  Bar = bar\n  CloseAngle = closeAngle\n  CloseBrace = closeBrace\n  CloseParen = closeParen\n  CloseSquare = closeSquare\n  Comma = comma\n  Dollar = dollar\n  Dot = dot\n  DoubleQuote = doubleQuote\n  Equal = equal\n  OpenAngle = openAngle\n  OpenBrace = openBrace\n  OpenParen = openParen\n  OpenSquare = openSquare\n  Percent = percent\n  Semi = semi\n  Underscore = underscore\n\n  at = \"@\"\n  bang = \"!\"\n  bar = \"|\"\n  closeAngle = \">\"\n  closeBrace = \"}\"\n  closeParen = \")\"\n  closeSquare = \"]\"\n  comma = \",\"\n  dollar = \"$\"\n  dot = \".\"\n  doubleQuote = \"\\\\\"\"\n  equal = \"=\"\n  minus = \"-\"\n  newline = \"\\\\r\"? \"\\\\n\"\n  openAngle = \"<\"\n  openBrace = \"{\"\n  openParen = \"(\"\n  openSquare = \"[\"\n  percent = \"%\"\n  semi = \";\"\n  underscore = \"_\"\n\n  Value = identifier | number | boolean\n\n  boolean = true | false\n  True = true\n  False = false\n  true = \"true\"\n  false = \"false\"\n\n  Name = identifier\n  identifier = (letter|underscore) (alnum|underscore|dot|dollar)*\n\n  Number = number\n  number = hexNumber | decNumber | binNumber\n  binNumber = (\"%B\") (\"0\"|\"1\")+\n  hexNumber = (\"%X\") hexDigit+\n  decNumber = (\"%D\")? (wholeDec | realDec)\n  wholeDec = minus? digit+\n  realDec = minus? digit* \".\" digit+\n\n  String = DoubleQuote (~doubleQuote any)* doubleQuote\n  \n  spaces := (lineComment | comment | space)*\n  commentStart = \"/*\"\n  commentEnd = \"*/\"\n  comment = commentStart (~commentEnd any)* commentEnd\n  lineCommentStart = \"//\"\n  lineComment = lineCommentStart (~\"\\\\n\" any)* \"\\\\n\"\n\n  List<elem, sep> = NonemptyListOf<elem, sep> sep?\n  EmptyList<elem, sep> = EmptyList<elem, sep> sep?\n}`;\nexport default base;\n","const cmp = `\nCmp <: Base {\n  Root := line*\n  line = bar cell+ newline?\n  cell = cellvalue bar\n  cellvalue = (~(bar|newline) any)*\n}`;\nexport default cmp;\n","import ohm from \"ohm-js\";\nimport { grammars, makeParser, baseSemantics } from \"./base.js\";\n\nexport type Cell = string;\nexport type Line = Cell[];\nexport type Cmp = Line[];\n\nimport cmpGrammar from \"./grammars/cmp.ohm.js\";\nexport const grammar = ohm.grammar(cmpGrammar, grammars);\nexport const cmpSemantics = grammar.extendSemantics(baseSemantics);\n\ncmpSemantics.addAttribute<Cell>(\"cell\", {\n  cell(value, _) {\n    return value.sourceString;\n  },\n});\n\ncmpSemantics.addAttribute<Line>(\"line\", {\n  line(_a, cells, _b) {\n    return cells.children.map((c) => c.cell);\n  },\n});\n\ncmpSemantics.addAttribute<Cmp>(\"root\", {\n  Root(lines) {\n    return lines.children.map((c) => c.line);\n  },\n});\n\nexport const CMP = {\n  grammar: cmpGrammar,\n  semantics: cmpSemantics,\n  parser: grammar,\n  parse: makeParser<Cmp>(grammar, cmpSemantics),\n};\n","const tst = `\nTst <: Base {\n  Root := Tst\n  Tst = (TstStatement | TstRepeat | TstWhile)+\n\n  TstRepeat = Repeat Number? OpenBrace TstStatement+ CloseBrace\n  TstWhile = While Condition OpenBrace TstStatement+ CloseBrace\n  TstStatement = List<TstOperation, \",\"> (Semi | Bang)\n\n  TstOperation =\n    | TstFileOperation\n    | TstOutputListOperation\n    | TstEvalOperation\n    | TstSetOperation\n    | TstOutputOperation\n    | TstEchoOperation\n    | TstClearEchoOperation\n    | TstLoadROMOperation\n\n  TstLoadROMOperation = ROM32K Load FileName\n  TstFileOperation = FileOperation FileName\n  TstOutputListOperation = \"output-list\" OutputFormat+\n  OutputFormat = Name Index? percent FormatStyle wholeDec dot wholeDec dot wholeDec\n  TstSetOperation = Set Name Index? Number\n  Index = OpenSquare wholeDec? CloseSquare\n  Condition = Value CompareOp Value\n  TstEvalOperation = Eval | Tick | Tock | TickTock\n  TstOutputOperation = Output\n  TstEchoOperation = Echo String\n  TstClearEchoOperation = ClearEcho\n\n  FileName = Name\n  FileOperation = \"load\" | \"output-file\" | \"compare-to\"\n\n  Set = \"set\"\n  Eval = \"eval\"\n  Tick = \"tick\"\n  Tock = \"tock\"\n  TickTock = \"ticktock\"\n  Echo = \"echo\"\n  Repeat = \"repeat\"\n  ClearEcho = \"clear-echo\"\n  Output = \"output\"\n  OutputList = \"output-list\"\n  FormatStyle = \"B\"|\"D\"|\"S\"|\"X\"\n  ROM32K = \"ROM32K\"\n  Load = \"load\"\n  While = \"while\"\n\n  CompareOp = \"<>\" | \"<=\" | \">=\" | \"=\" | \"<\" | \">\"\n}`;\nexport default tst;\n","/** Reads tst files to apply and perform test runs. */\n\nimport ohm from \"ohm-js\";\nimport { baseSemantics, grammars, makeParser, Span } from \"./base.js\";\n\nexport interface TstEchoOperation {\n  op: \"echo\";\n  message: string;\n}\n\nexport interface TstClearEchoOperation {\n  op: \"clear-echo\";\n}\n\nexport interface TstSetOperation {\n  op: \"set\";\n  id: string;\n  index?: number;\n  value: number;\n}\n\nexport interface TstEvalOperation {\n  op: \"eval\" | \"tick\" | \"tock\";\n}\n\nexport interface TstOutputOperation {\n  op: \"output\";\n}\n\nexport interface TstOutputSpec {\n  id: string;\n  builtin: boolean;\n  address: number;\n  style: \"D\" | \"X\" | \"B\" | \"S\";\n  width: number;\n  lpad: number;\n  rpad: number;\n}\n\nexport interface TstOutputListOperation {\n  op: \"output-list\";\n  spec: TstOutputSpec[];\n}\n\nexport interface TstLoadROMOperation {\n  op: \"loadRom\";\n  file: string;\n}\n\nexport interface TstFileOperation {\n  op: \"load\" | \"output-file\" | \"compare-to\";\n  file: string;\n}\n\nexport type TstOperation =\n  | TstFileOperation\n  | TstEvalOperation\n  | TstEchoOperation\n  | TstClearEchoOperation\n  | TstOutputOperation\n  | TstSetOperation\n  | TstOutputListOperation\n  | TstLoadROMOperation;\n\nexport interface TstLineStatement {\n  ops: TstOperation[];\n  break?: true;\n  span: Span;\n}\n\nexport interface TstRepeat {\n  statements: TstLineStatement[];\n  count: number;\n  span: Span;\n}\n\nexport interface TstWhileCondition {\n  op: \"<\" | \"<=\" | \"=\" | \">=\" | \">\" | \"<>\";\n  left: string | number;\n  right: string | number;\n}\n\nexport interface TstWhileStatement {\n  statements: TstLineStatement[];\n  condition: TstWhileCondition;\n  span: Span;\n}\n\nexport type TstStatement = TstLineStatement | TstRepeat | TstWhileStatement;\n\nexport interface Tst {\n  lines: TstStatement[];\n}\n\nimport tstGrammar from \"./grammars/tst.ohm.js\";\nexport const grammar = ohm.grammar(tstGrammar, grammars);\nexport const tstSemantics = grammar.extendSemantics(baseSemantics);\n\ntstSemantics.extendAttribute<number>(\"value\", {\n  Index(_a, idx, _b) {\n    return idx?.child(0)?.value ?? -1;\n  },\n});\n\ntstSemantics.extendAttribute<string>(\"name\", {\n  FileName({ name }) {\n    return name;\n  },\n});\n\ntstSemantics.addAttribute<number>(\"index\", {\n  Index(_open, dec, _close) {\n    return dec.child(0)?.value ?? 0;\n  },\n});\n\ntstSemantics.addAttribute<TstOutputSpec>(\"format\", {\n  OutputFormat(\n    { name: id },\n    index,\n    _a,\n    { sourceString: style },\n    { value: lpad },\n    _b,\n    { value: width },\n    _c,\n    { value: rpad }\n  ) {\n    return {\n      id,\n      builtin: index?.child(0) !== undefined,\n      address: index?.child(0)?.value ?? -1,\n      style: style as TstOutputSpec[\"style\"],\n      width,\n      lpad,\n      rpad,\n    };\n  },\n});\n\ntstSemantics.addAttribute<TstOperation>(\"operation\", {\n  TstEvalOperation(op) {\n    return { op: op.sourceString as TstEvalOperation[\"op\"] };\n  },\n  TstOutputOperation(_) {\n    return { op: \"output\" };\n  },\n  TstOutputListOperation(_, formats) {\n    return {\n      op: \"output-list\",\n      spec: formats.children.map((n) => n.format),\n    };\n  },\n  TstSetOperation(op, { name }, index, { value }) {\n    const setOp: TstSetOperation = {\n      op: \"set\",\n      id: name,\n      value,\n    };\n    const child = index.child(0)?.child(1)?.child(0);\n    if (child) {\n      setOp.index = child.value;\n    }\n    return setOp;\n  },\n  TstEchoOperation(op, str) {\n    return {\n      op: \"echo\",\n      message: str.String as string,\n    };\n  },\n  TstClearEchoOperation(op) {\n    return {\n      op: \"clear-echo\",\n    };\n  },\n  TstLoadROMOperation(_r, _l, { name }) {\n    return {\n      op: \"loadRom\",\n      file: name,\n    };\n  },\n  TstFileOperation(op, file) {\n    return {\n      op: op.sourceString as TstFileOperation[\"op\"],\n      file: file.sourceString,\n    };\n  },\n});\n\ntstSemantics.addAttribute<TstWhileCondition>(\"condition\", {\n  Condition({ value: left }, { sourceString: op }, { value: right }) {\n    return {\n      left,\n      right,\n      op: op as \"<\" | \"<=\" | \"=\" | \">=\" | \">\" | \"<>\",\n    };\n  },\n});\n\ntstSemantics.addAttribute<TstStatement>(\"statement\", {\n  TstWhile(op, cond, _o, statements, _c) {\n    return {\n      statements: statements.children.map(({ statement }) => statement),\n      condition: cond.condition,\n      span: {\n        start: op.source.startIdx,\n        end: cond.source.endIdx,\n      },\n    };\n  },\n  TstRepeat(op, count, _o, statements, _c) {\n    return {\n      statements: statements.children.map(({ statement }) => statement),\n      count: count.child(0)?.value ?? -1,\n      span: {\n        start: op.source.startIdx,\n        end: count.source.endIdx,\n      },\n    };\n  },\n  TstStatement(list, end) {\n    const stmt: TstStatement = {\n      ops: list\n        .asIteration()\n        .children.map((node) => node.operation as TstOperation),\n      span: {\n        start: this.source.startIdx,\n        end: this.source.endIdx,\n      },\n    };\n    if (end.sourceString === \"!\") {\n      stmt.break = true;\n    }\n    return stmt;\n  },\n});\n\ntstSemantics.addAttribute<Tst>(\"tst\", {\n  Tst(lines) {\n    return {\n      lines: lines.children.map((n) => n.statement),\n    };\n  },\n});\n\ntstSemantics.addAttribute<Tst>(\"root\", {\n  Root({ tst }) {\n    return tst;\n  },\n});\n\nexport const TST = {\n  grammar: tstGrammar,\n  semantics: tstSemantics,\n  parser: grammar,\n  parse: makeParser<Tst>(grammar, tstSemantics),\n};\n","const asm = `\nASM <: Base {\n  Root := ASM\n  ASM = Instruction*\n  \n  Instruction = Label|AInstruction|CInstruction\n  \n  Label = OpenParen identifier closeParen\n  AInstruction = at (identifier | decNumber)\n  CInstruction = assign? op jmp?\n  \n  assign = (\n      \"AMD\"\n      | \"AM\"\n      | \"AD\"\n      | \"MD\"\n      | \"M\"\n      | \"D\"\n      | \"A\"\n      ) equal\n      \n  op =\n      | \"0\" | \"1\" | \"-1\"\n      | \"!D\" | \"!A\" | \"!M\"\n      | \"-D\" | \"-A\" | \"-M\"\n      | \"D+1\" | \"A+1\" | \"M+1\"\n      | \"D-1\" | \"A-1\" | \"M-1\"\n      | \"D+A\" | \"D+M\"\n      | \"D-A\" | \"D-M\"\n      | \"A-D\" | \"M-D\"\n      | \"D&A\" | \"D&M\"\n      | \"D|A\" | \"D|M\"\n      | \"D\" | \"A\" | \"M\"\n\n\n  jmp = semi (\"JGT\" | \"JEQ\" | \"JGE\" | \"JLT\" | \"JNE\" | \"JLE\" | \"JMP\")\n}`;\nexport default asm;\n","import { assertExists } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport ohm from \"ohm-js\";\nimport {\n  ASSIGN,\n  ASSIGN_ASM,\n  ASSIGN_OP,\n  COMMANDS,\n  COMMANDS_ASM,\n  COMMANDS_OP,\n  JUMP,\n  JUMP_ASM,\n  JUMP_OP,\n} from \"../cpu/alu.js\";\nimport { KEYBOARD_OFFSET, SCREEN_OFFSET } from \"../cpu/memory.js\";\nimport { makeC } from \"../util/asm.js\";\nimport { grammars, makeParser, baseSemantics } from \"./base.js\";\n\nimport asmGrammar from \"./grammars/asm.ohm.js\";\n\nexport const grammar = ohm.grammar(asmGrammar, grammars);\nexport const asmSemantics = grammar.extendSemantics(baseSemantics);\n\nexport interface Asm {\n  instructions: AsmInstruction[];\n}\n\nexport type AsmInstruction =\n  | AsmAInstruction\n  | AsmCInstruction\n  | AsmLabelInstruction;\n\nexport type AsmAInstruction = AsmALabelInstruction | AsmAValueInstruction;\nexport interface AsmALabelInstruction {\n  type: \"A\";\n  label: string;\n}\n\nexport interface AsmAValueInstruction {\n  type: \"A\";\n  value: number;\n}\n\nfunction isALabelInstruction(\n  inst: AsmAInstruction\n): inst is AsmALabelInstruction {\n  return (inst as AsmALabelInstruction).label !== undefined;\n}\n\nexport interface AsmCInstruction {\n  type: \"C\";\n  op: COMMANDS_OP;\n  isM: boolean;\n  store?: ASSIGN_OP;\n  jump?: JUMP_OP;\n}\n\nexport interface AsmLabelInstruction {\n  type: \"L\";\n  label: string;\n}\n\nasmSemantics.addAttribute<Asm>(\"root\", {\n  Root(_) {\n    return this.asm;\n  },\n});\n\nasmSemantics.addAttribute<Asm>(\"asm\", {\n  Root(asm) {\n    return {\n      instructions: asm\n        .child(0)\n        .children.map(({ instruction }) => instruction as AsmInstruction),\n    };\n  },\n});\n\nasmSemantics.addAttribute<AsmInstruction>(\"instruction\", {\n  AInstruction(_at, val): AsmAInstruction {\n    try {\n      return {\n        type: \"A\",\n        label: val.name,\n      };\n    } catch (e) {\n      // Pass\n    }\n\n    try {\n      return {\n        type: \"A\",\n        value: val.value,\n      };\n    } catch (e) {\n      // pass\n    }\n\n    throw new Error(`AsmAInstruction must have either a name or a value`);\n  },\n  CInstruction(assignN, opN, jmpN): AsmCInstruction {\n    const assign = assignN.child(0)?.child(0)?.sourceString as ASSIGN_ASM;\n    const op = opN.sourceString.replace(\"M\", \"A\") as COMMANDS_ASM;\n    const jmp = jmpN.child(0)?.child(1)?.sourceString as JUMP_ASM;\n    const isM =\n      assignN.sourceString.includes(\"M\") || opN.sourceString.includes(\"M\");\n    const inst: AsmCInstruction = {\n      type: \"C\",\n      op: COMMANDS.asm[op],\n      isM,\n    };\n    if (jmp) inst.jump = JUMP.asm[jmp];\n    if (assign) inst.store = ASSIGN.asm[assign];\n    return inst;\n  },\n  Label(_o, { name }, _c): AsmLabelInstruction {\n    return {\n      type: \"L\",\n      label: name,\n    };\n  },\n});\n\nexport function fillLabel(asm: Asm) {\n  let nextLabel = 16;\n  const symbols = new Map<string, number>([\n    [\"R0\", 0],\n    [\"R1\", 1],\n    [\"R2\", 2],\n    [\"R3\", 3],\n    [\"R4\", 4],\n    [\"R5\", 5],\n    [\"R6\", 6],\n    [\"R7\", 7],\n    [\"R8\", 8],\n    [\"R9\", 9],\n    [\"R10\", 10],\n    [\"R11\", 11],\n    [\"R12\", 12],\n    [\"R13\", 13],\n    [\"R14\", 14],\n    [\"R15\", 15],\n    [\"SP\", 0],\n    [\"LCL\", 1],\n    [\"ARG\", 2],\n    [\"THIS\", 3],\n    [\"THAT\", 4],\n    [\"SCREEN\", SCREEN_OFFSET],\n    [\"KBD\", KEYBOARD_OFFSET],\n  ]);\n\n  function getLabelValue(label: string) {\n    if (!symbols.has(label)) {\n      symbols.set(label, nextLabel);\n      nextLabel += 1;\n    }\n    return assertExists(symbols.get(label), `Label not in symbols: ${label}`);\n  }\n\n  function transmuteAInstruction(instruction: AsmALabelInstruction) {\n    const value = getLabelValue(instruction.label);\n    (instruction as unknown as AsmAValueInstruction).value = value;\n    delete (instruction as unknown as { label: undefined }).label;\n  }\n\n  const unfilled: AsmALabelInstruction[] = [];\n  let line = 0;\n  for (const instruction of asm.instructions) {\n    if (instruction.type === \"L\") {\n      if (symbols.has(instruction.label)) {\n        throw new Error(`ASM Duplicate label ${instruction.label}`);\n      } else {\n        symbols.set(instruction.label, line);\n      }\n      continue;\n    }\n\n    line += 1;\n\n    if (instruction.type === \"A\") {\n      if (isALabelInstruction(instruction)) {\n        unfilled.push(instruction);\n      }\n    }\n  }\n\n  unfilled.forEach(transmuteAInstruction);\n}\n\nexport function emit(asm: Asm): number[] {\n  return asm.instructions\n    .map((inst) => {\n      if (inst.type === \"A\") {\n        if (isALabelInstruction(inst)) {\n          throw new Error(`ASM Emitting unfilled A instruction`);\n        }\n        return inst.value;\n      }\n      if (inst.type === \"C\") {\n        return makeC(inst.isM, inst.op, inst.store, inst.jump);\n      }\n      return undefined;\n    })\n    .filter((op): op is number => op !== undefined);\n}\n\nexport const ASM = {\n  grammar: asmGrammar,\n  semantics: asmSemantics,\n  parser: grammar,\n  parse: makeParser<Asm>(grammar, asmSemantics),\n  passes: {\n    fillLabel,\n    emit,\n  },\n};\n","import { unwrap } from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { ASM } from \"./languages/asm.js\";\nimport { int2, parseTwosInt } from \"./util/twos.js\";\n\nexport async function loadAsm(source: string): Promise<number[]> {\n  const asm = unwrap(ASM.parse(source));\n  ASM.passes.fillLabel(asm);\n  return ASM.passes.emit(asm);\n}\n\nexport async function loadHack(source: string): Promise<number[]> {\n  return source\n    .split(\"\\n\")\n    .filter((line) => line.trim() !== \"\")\n    .map(int2);\n}\n\nexport async function loadBlob(bytes: string): Promise<number[]> {\n  return bytes\n    .split(\"\\n\")\n    .filter((line) => line.trim() !== \"\")\n    .map(parseTwosInt);\n}\n","import { assert } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { bin, dec, hex } from \"./util/twos.js\";\nimport { Test } from \"./tst.js\";\n\nexport class Output {\n  private readonly fmt: \"B\" | \"X\" | \"D\" | \"S\";\n  private readonly lPad: number;\n  private readonly rPad: number;\n  private readonly len: number;\n  private readonly index: number;\n  private readonly builtin: boolean;\n\n  // new Output(inst.id, inst.style, inst.width, inst.lpad, inst.rpad)\n  constructor(\n    private variable: string,\n    format = \"%B1.1.1\",\n    len?: number,\n    lPad?: number,\n    rPad?: number,\n    builtin?: boolean,\n    index?: number\n  ) {\n    if (\n      format.startsWith(\"%\") &&\n      len === undefined &&\n      lPad === undefined &&\n      rPad === undefined\n    ) {\n      const { fmt, lPad, rPad, len } = format.match(\n        /^%(?<fmt>[BDXS])(?<lPad>\\d+)\\.(?<len>\\d+)\\.(?<rPad>\\d+)$/\n      )?.groups as {\n        fmt: \"B\" | \"X\" | \"D\" | \"S\";\n        lPad: string;\n        rPad: string;\n        len: string;\n      };\n      this.fmt = fmt;\n      this.lPad = parseInt(lPad);\n      this.rPad = parseInt(rPad);\n      this.len = parseInt(len);\n      this.builtin = false;\n      this.index = -1;\n    } else {\n      assert([\"B\", \"X\", \"D\", \"S\"].includes(format[0]));\n      this.fmt = format[0] as \"B\" | \"X\" | \"D\" | \"S\";\n      this.len = len ?? 3;\n      this.lPad = lPad ?? 1;\n      this.rPad = rPad ?? 1;\n      this.builtin = builtin ?? false;\n      this.index = index ?? -1;\n    }\n  }\n\n  header(test: Test) {\n    let variable = `${this.variable}`;\n    if (this.builtin) {\n      const index = this.index >= 0 ? this.index : \"\";\n      variable = `${variable}[${index}]`;\n    }\n    if (variable.length > this.len + this.lPad + this.rPad) {\n      return variable.substring(0, this.len + this.lPad + this.rPad);\n    }\n    return this.padCenter(variable);\n  }\n\n  print(test: Test) {\n    const val = test.getVar(this.variable, this.index);\n    if (this.fmt === \"S\") {\n      return this.padLeft(val as string);\n    }\n\n    const fmt = { B: bin, D: dec, X: hex }[this.fmt];\n    const value = fmt(val as number);\n    if (this.fmt === \"D\") {\n      return this.padRight(value);\n    } else {\n      return this.padCenter(value.slice(value.length - this.len));\n    }\n  }\n\n  private padCenter(value: string) {\n    const space = this.lPad + this.len + this.rPad;\n    const leftSpace = Math.floor((space - value.length) / 2);\n    const rightSpace = space - leftSpace - value.length;\n    const padLeft = leftSpace + value.length;\n    const padRight = padLeft + rightSpace;\n    value = value.padStart(padLeft);\n    value = value.padEnd(padRight);\n    return value;\n  }\n\n  private padLeft(value: string) {\n    value = value.substring(0, this.len);\n    const padRight = this.rPad + this.len;\n    const padLeft = this.lPad + padRight;\n    value = value.padEnd(padRight);\n    value = value.padStart(padLeft);\n    return value;\n  }\n\n  private padRight(value: string) {\n    value = value.substring(0, this.len);\n    const padLeft = this.lPad + this.len;\n    const padRight = this.rPad + padLeft;\n    value = value.padStart(padLeft);\n    value = value.padEnd(padRight);\n    return value;\n  }\n}\n","import {\n  assertExists,\n  checkExhaustive,\n} from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport { Span } from \"./languages/base.js\";\nimport {\n  Tst,\n  TstLineStatement,\n  TstOperation,\n  TstOutputSpec,\n  TstStatement,\n  TstWhileStatement,\n} from \"./languages/tst.js\";\nimport { Bus, Chip, HIGH, Low, LOW } from \"./chip/chip.js\";\nimport { Clock } from \"./chip/clock.js\";\nimport { Output } from \"./output.js\";\nimport { ROM } from \"./cpu/memory.js\";\nimport { CPU } from \"./cpu/cpu.js\";\n\nexport abstract class Test<IS extends TestInstruction = TestInstruction> {\n  protected readonly instructions: (IS | TestInstruction)[] = [];\n  protected _outputList: Output[] = [];\n  protected _log = \"\";\n  fs: FileSystem = new FileSystem();\n\n  setFileSystem(fs: FileSystem): this {\n    this.fs = fs;\n    return this;\n  }\n\n  echo(_content: string) {\n    return undefined;\n  }\n  clearEcho() {\n    return undefined;\n  }\n\n  async load(_filename: string): Promise<void> {\n    return undefined;\n  }\n  async compareTo(_filename: string): Promise<void> {\n    return undefined;\n  }\n  outputFile(_filename: string): void {\n    return undefined;\n  }\n  outputList(outputs: Output[]): void {\n    this._outputList = outputs;\n  }\n\n  addInstruction(instruction: IS | TestInstruction): void {\n    this.instructions.push(instruction);\n  }\n\n  reset(): this {\n    this._steps = (function* (test) {\n      for (const instruction of test.instructions) {\n        yield* instruction.steps(test);\n      }\n    })(this);\n    this._step = this._steps.next();\n    this._step; //?\n    this._log = \"\";\n    return this;\n  }\n\n  private _steps!: IterableIterator<IS | TestInstruction>;\n  private _step!: IteratorResult<IS | TestInstruction, IS | TestInstruction>;\n\n  get steps(): Iterator<IS | TestInstruction> {\n    if (this._steps === undefined) {\n      this.reset();\n      this._steps = assertExists(this._steps, \"Reset did not initialize steps\");\n      this._step = assertExists(this._step, \"Reset did not find first step\");\n    }\n    return this._steps;\n  }\n\n  get currentStep(): IS | TestInstruction | undefined {\n    return this._step?.value;\n  }\n\n  get done(): boolean {\n    return this._step?.done ?? false;\n  }\n\n  step() {\n    if (!this._step.done) {\n      this._step.value.do(this);\n      this._step = this.steps.next();\n      return false;\n    }\n    return true;\n  }\n\n  async run() {\n    this.reset();\n    while (!(await this.step()));\n  }\n\n  protected readonly breakpoints: Map<string, number> = new Map();\n  addBreakpoint(variable: string, value: number) {\n    this.breakpoints.set(variable, value);\n  }\n  clearBreakpoints() {\n    this.breakpoints.clear();\n  }\n\n  output() {\n    const values = this._outputList.map((output) => output.print(this));\n    this._log += `|${values.join(\"|\")}|\\n`;\n  }\n\n  header() {\n    const values = this._outputList.map((output) => output.header(this));\n    this._log += `|${values.join(\"|\")}|\\n`;\n  }\n\n  log() {\n    return this._log;\n  }\n\n  abstract hasVar(variable: string | number): boolean;\n  abstract getVar(variable: string | number, offset?: number): number | string;\n  abstract setVar(variable: string, value: number, offset?: number): void;\n}\n\nfunction isTstLineStatment(line: TstStatement): line is TstLineStatement {\n  return (line as TstLineStatement).ops !== undefined;\n}\n\nfunction isTstWhileStatement(line: TstStatement): line is TstWhileStatement {\n  return (line as TstWhileStatement).condition !== undefined;\n}\n\nfunction makeLineStatement(line: TstLineStatement) {\n  const statement = new TestCompoundInstruction();\n  statement.span = line.span;\n  for (const op of line.ops) {\n    const inst = makeInstruction(op);\n    if (inst !== undefined) statement.addInstruction(inst);\n  }\n  return statement;\n}\n\nfunction makeInstruction(inst: TstOperation) {\n  const { op } = inst;\n  switch (op) {\n    case \"tick\":\n      return new TestTickInstruction();\n    case \"tock\":\n      return new TestTockInstruction();\n    case \"eval\":\n      return new TestEvalInstruction();\n    case \"output\":\n      return new TestOutputInstruction();\n    case \"set\":\n      return new TestSetInstruction(inst.id, inst.value, inst.index);\n    case \"output-list\":\n      return new TestOutputListInstruction(inst.spec);\n    case \"echo\":\n      return new TestEchoInstruction(inst.message);\n    case \"clear-echo\":\n      return new TestClearEchoInstruction();\n    case \"loadRom\":\n      return new TestLoadROMInstruction(inst.file);\n    case \"load\":\n    case \"output-file\":\n    case \"compare-to\":\n      return undefined;\n    default:\n      checkExhaustive(op, `Unknown tst operation ${op}`);\n  }\n}\n\nfunction fill<T extends Test>(test: T, tst: Tst): T {\n  for (const line of tst.lines) {\n    if (isTstLineStatment(line)) {\n      test.addInstruction(makeLineStatement(line));\n    } else {\n      const repeat = isTstWhileStatement(line)\n        ? new TestWhileInstruction(\n            new Condition(\n              line.condition.left,\n              line.condition.right,\n              line.condition.op\n            )\n          )\n        : new TestRepeatInstruction(line.count);\n      repeat.span = line.span;\n      test.addInstruction(repeat);\n      for (const statement of line.statements) {\n        repeat.addInstruction(makeLineStatement(statement));\n      }\n    }\n  }\n\n  test.reset();\n\n  return test;\n}\n\nexport class ChipTest extends Test<ChipTestInstruction> {\n  private chip: Chip = new Low();\n  get chipId(): number {\n    return this.chip.id;\n  }\n\n  private clock = Clock.get();\n\n  static from(tst: Tst): ChipTest {\n    const test = new ChipTest();\n    return fill(test, tst);\n  }\n\n  with(chip: Chip): this {\n    this.chip = chip;\n    return this;\n  }\n\n  hasVar(variable: string | number): boolean {\n    if (variable === \"time\") {\n      return true;\n    }\n    variable = `${variable}`;\n    // Look up built-in chip state variables\n    return this.chip.hasIn(variable) || this.chip.hasOut(variable);\n  }\n\n  getVar(variable: string | number, offset?: number): number | string {\n    variable = `${variable}`;\n    if (variable === \"time\") {\n      return this.clock.toString();\n    }\n    const pin = this.chip.get(variable, offset);\n    if (!pin) return 0;\n    return pin instanceof Bus ? pin.busVoltage : pin.voltage();\n  }\n\n  setVar(variable: string, value: number, offset?: number): void {\n    // Look up built-in chip state variables\n    const pinOrBus = this.chip.get(variable, offset);\n    if (pinOrBus instanceof Bus) {\n      pinOrBus.busVoltage = value;\n    } else {\n      pinOrBus?.pull(value === 0 ? LOW : HIGH);\n    }\n  }\n\n  eval(): void {\n    this.chip.eval();\n  }\n\n  tick(): void {\n    this.chip.eval();\n    this.clock.tick();\n  }\n\n  tock(): void {\n    this.chip.eval();\n    this.clock.tock();\n  }\n\n  override async load(filename: string) {\n    await this.chip.load(this.fs, filename);\n  }\n\n  override async run() {\n    this.clock.reset();\n    await super.run();\n  }\n}\n\nexport class CPUTest extends Test<CPUTestInstruction> {\n  readonly cpu: CPU;\n  private ticks = 0;\n\n  static from(tst: Tst): CPUTest {\n    const test = new CPUTest();\n    return fill(test, tst);\n  }\n\n  constructor(rom: ROM = new ROM(new Int16Array())) {\n    super();\n    this.cpu = new CPU({ ROM: rom });\n    this.reset();\n  }\n\n  override reset(): this {\n    this.cpu.reset();\n    this.ticks = 0;\n    return this;\n  }\n\n  hasVar(variable: string | number): boolean {\n    if (typeof variable === \"number\") {\n      return false;\n    }\n    // A: Current value of the address register (unsigned 15-bit);\n    // D: Current value of the data register (16-bit);\n    // PC: Current value of the Program Counter (unsigned 15-bit);\n    // RAM[i]: Current value of RAM location i (16-bit);\n    // time: Number of time units (also called clock cycles, or ticktocks) that elapsed since the simulation started (a read-only system variable).\n    if (\n      variable === \"A\" ||\n      variable === \"D\" ||\n      variable === \"PC\" ||\n      variable === \"time\" ||\n      variable.startsWith(\"RAM\")\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  getVar(variable: string | number): number {\n    switch (variable) {\n      case \"A\":\n        return this.cpu.A;\n      case \"D\":\n        return this.cpu.D;\n      case \"PC\":\n        return this.cpu.PC;\n      case \"time\":\n        return this.ticks;\n    }\n    if (typeof variable === \"number\") return 0;\n    if (variable.startsWith(\"RAM\")) {\n      const num = Number(variable.substring(4, variable.length - 1));\n      return this.cpu.RAM.get(num);\n    }\n    return 0;\n  }\n\n  setVar(variable: string, value: number, index?: number): void {\n    // A: Current value of the address register (unsigned 15-bit);\n    // D: Current value of the data register (16-bit);\n    // PC: Current value of the Program Counter (unsigned 15-bit);\n    // RAM[i]: Current value of RAM location i (16-bit);\n    switch (variable) {\n      case \"A\":\n        this.cpu.setA(value);\n        break;\n      case \"D\":\n        this.cpu.setD(value);\n        break;\n      case \"PC\":\n        this.cpu.setPC(value);\n        break;\n      case \"RAM\":\n        this.cpu.RAM.set(index ?? 0, value);\n        break;\n    }\n    return;\n  }\n\n  ticktock(): void {\n    this.ticks += 1;\n    this.cpu.tick();\n  }\n\n  override async load(filename: string): Promise<void> {\n    await this.cpu.ROM.load(this.fs, filename);\n  }\n}\n\nexport class VMTest extends Test<VMTestInstruction> {\n  hasVar(_variable: string | number): boolean {\n    return false;\n  }\n  getVar(_variable: string | number): number {\n    return 0;\n  }\n  setVar(_variable: string, _value: number): void {\n    return undefined;\n  }\n  vmstep(): void {\n    return undefined;\n  }\n}\n\nexport interface TestInstruction {\n  span?: Span;\n  do(test: Test): void;\n  steps(test: Test): IterableIterator<TestInstruction>;\n}\n\nexport class TestSetInstruction implements TestInstruction {\n  constructor(\n    private variable: string,\n    private value: number,\n    private index?: number | undefined\n  ) {}\n\n  do(test: Test) {\n    test.setVar(this.variable, this.value, this.index);\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestOutputInstruction implements TestInstruction {\n  do(test: Test) {\n    test.output();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestOutputListInstruction implements TestInstruction {\n  private outputs: Output[] = [];\n\n  constructor(specs: TstOutputSpec[] = []) {\n    for (const spec of specs) {\n      this.addOutput(spec);\n    }\n  }\n\n  addOutput(inst: TstOutputSpec) {\n    this.outputs.push(\n      new Output(\n        inst.id,\n        inst.style,\n        inst.width,\n        inst.lpad,\n        inst.rpad,\n        inst.builtin,\n        inst.address\n      )\n    );\n  }\n\n  do(test: Test) {\n    test.outputList(this.outputs);\n    test.header();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestCompoundInstruction implements TestInstruction {\n  protected readonly instructions: TestInstruction[] = [];\n  span?: Span;\n\n  addInstruction(instruction: TestInstruction) {\n    this.instructions.push(instruction);\n  }\n\n  do(test: Test<TestInstruction>): void {\n    for (const instruction of this.instructions) {\n      instruction.do(test);\n    }\n  }\n\n  *steps(_test: Test): Generator<TestInstruction> {\n    yield this;\n  }\n}\n\nexport class TestRepeatInstruction extends TestCompoundInstruction {\n  constructor(public readonly repeat: number) {\n    super();\n  }\n\n  override do() {\n    return undefined;\n  }\n\n  private *innerSteps(test: Test) {\n    for (const instruction of this.instructions) {\n      yield* instruction.steps(test);\n    }\n  }\n\n  override *steps(test: Test) {\n    if (this.repeat === -1) {\n      yield this;\n      while (true) {\n        yield* this.innerSteps(test);\n      }\n    } else {\n      for (let i = 0; i < this.repeat; i++) {\n        yield this;\n        yield* this.innerSteps(test);\n      }\n    }\n  }\n}\n\nexport class Condition {\n  constructor(\n    public readonly x: string | number,\n    public readonly y: string | number,\n    public readonly op: \"<\" | \"<=\" | \"=\" | \">=\" | \">\" | \"<>\"\n  ) {}\n\n  check(test: Test): boolean {\n    const x = test.hasVar(this.x) ? test.getVar(this.x) : this.x;\n    const y = test.hasVar(this.y) ? test.getVar(this.y) : this.y;\n\n    if (typeof x === \"string\" || typeof y === \"string\") {\n      switch (this.op) {\n        case \"=\":\n          return `${x}` === `${y}`;\n        case \"<>\":\n          return `${x}` !== `${y}`;\n      }\n    } else {\n      switch (this.op) {\n        case \"<\":\n          return x < y;\n        case \"<=\":\n          return x <= y;\n        case \">\":\n          return x > y;\n        case \">=\":\n          return x >= y;\n        case \"=\":\n          return x === y;\n        case \"<>\":\n          return x !== y;\n      }\n    }\n    return false;\n  }\n}\n\nexport class TestWhileInstruction extends TestCompoundInstruction {\n  constructor(public readonly condition: Condition) {\n    super();\n  }\n\n  override *steps(test: Test) {\n    while (this.condition.check(test)) {\n      yield this;\n      for (const instruction of this.instructions) {\n        yield* instruction.steps(test);\n      }\n    }\n  }\n}\n\nexport class TestEchoInstruction implements TestInstruction {\n  constructor(public readonly content: string) {}\n  do(test: Test) {\n    test.echo(this.content);\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestClearEchoInstruction implements TestInstruction {\n  do(test: Test) {\n    test.clearEcho();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestLoadROMInstruction implements TestInstruction {\n  constructor(readonly file: string) {}\n  async do(test: Test) {\n    test.fs.pushd(\"/test\");\n    await test.load(this.file);\n    test.fs.popd();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestBreakpointInstruction implements TestInstruction {\n  constructor(readonly variable: string, readonly value: number) {}\n\n  do(test: Test) {\n    test.addBreakpoint(this.variable, this.value);\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestClearBreakpointsInstruction implements TestInstruction {\n  do(test: Test) {\n    test.clearBreakpoints();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport interface ChipTestInstruction extends TestInstruction {\n  _chipTestInstruction_: true;\n  do(test: ChipTest): void | Promise<void>;\n}\n\nexport class TestEvalInstruction implements ChipTestInstruction {\n  readonly _chipTestInstruction_ = true;\n  do(test: ChipTest) {\n    test.eval();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestTickInstruction implements ChipTestInstruction {\n  readonly _chipTestInstruction_ = true;\n  do(test: ChipTest) {\n    test.tick();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestTockInstruction implements ChipTestInstruction {\n  readonly _chipTestInstruction_ = true;\n  do(test: ChipTest) {\n    test.tock();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport interface CPUTestInstruction extends TestInstruction {\n  _cpuTestInstruction_: true;\n  do(test: CPUTest): void | Promise<void>;\n}\n\nexport class TestTickTockInstruction implements CPUTestInstruction {\n  readonly _cpuTestInstruction_ = true;\n  do(test: CPUTest) {\n    test.ticktock();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport interface VMTestInstruction extends TestInstruction {\n  _vmTestInstruction_: true;\n  do(test: VMTest): void | Promise<void>;\n}\n\nexport class TestVMStepInstruction implements VMTestInstruction {\n  readonly _vmTestInstruction_ = true;\n  do(test: VMTest) {\n    test.vmstep();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n","import {\n  ASSIGN,\n  ASSIGN_ASM,\n  ASSIGN_OP,\n  COMMANDS,\n  COMMANDS_ASM,\n  COMMANDS_OP,\n  JUMP,\n  JUMP_ASM,\n  JUMP_OP,\n} from \"../cpu/alu.js\";\n\nexport type CommandOps = keyof typeof COMMANDS.op;\nexport type JumpOps = keyof typeof JUMP.op;\nexport type StoreOps = keyof typeof ASSIGN.op;\n\nexport function asm(op: number): string {\n  if (op & 0x8000) {\n    return cInstruction(op);\n  }\n  return aInstruction(op);\n}\n\nfunction cInstruction(op: number): string {\n  op = op & 0xffff; // Clear high order bits\n  const mop = (op & 0x1000) >> 12;\n  const cop: CommandOps = ((op & 0b0000111111000000) >> 6) as CommandOps;\n  const sop: StoreOps = ((op & 0b0000000000111000) >> 3) as StoreOps;\n  const jop: JumpOps = (op & 0b0000000000000111) as JumpOps;\n\n  if (COMMANDS.op[cop] === undefined) {\n    // Invalid commend\n    return \"#ERR\";\n  }\n\n  let command = COMMANDS.op[cop];\n  if (mop) {\n    command = command.replace(/A/g, \"M\") as COMMANDS_ASM;\n  }\n\n  const store = ASSIGN.op[sop];\n  const jump = JUMP.op[jop];\n\n  let instruction: string = command;\n  if (store) {\n    instruction = `${store}=${instruction}`;\n  }\n  if (jump) {\n    instruction = `${instruction};${jump}`;\n  }\n\n  return instruction;\n}\n\nfunction aInstruction(op: number): string {\n  return \"@\" + (op & 0x7fff).toString(10);\n}\n\nexport function op(asm: string): number {\n  if (asm[0] === \"@\") {\n    return aop(asm);\n  } else {\n    return cop(asm);\n  }\n}\n\nfunction aop(asm: string): number {\n  return parseInt(asm.substring(1), 10);\n}\n\nfunction cop(asm: string): number {\n  const parts = asm.match(\n    /(?:(?<assign>[AMD]{1,3})=)?(?<operation>[-!01ADM&|]{1,3})(?:;(?<jump>JGT|JLT|JGE|JLE|JEQ|JMP))?/\n  );\n  const { assign, operation, jump } = parts?.groups ?? {};\n  const mode = operation.includes(\"M\") || assign.includes(\"M\");\n  const aop = ASSIGN.asm[(assign as ASSIGN_ASM) ?? \"\"];\n  const jop = JUMP.asm[(jump as JUMP_ASM) ?? \"\"];\n  const cop = COMMANDS.asm[(operation as COMMANDS_ASM) ?? \"\"];\n\n  return makeC(mode, cop, aop, jop);\n}\n\nexport function makeC(\n  isM: boolean,\n  op: COMMANDS_OP,\n  assign: ASSIGN_OP = 0,\n  jmp: JUMP_OP = 0\n): number {\n  const C = 0xe000;\n  const A = isM ? 0x1000 : 0;\n  const O = op << 6;\n  const D = (assign ?? 0) << 3;\n  const J = jmp ?? 0;\n  return C + A + O + D + J;\n}\n","const Hex = [\n  \"0\",\n  \"1\",\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n];\n\nexport function chars(i: number): string {\n  return Hex[i] ?? \"X\";\n}\n\nexport function bits(i: number): string {\n  switch (i) {\n    case 0x0:\n      return \"0000\";\n    case 0x1:\n      return \"0001\";\n    case 0x2:\n      return \"0010\";\n    case 0x3:\n      return \"0011\";\n    case 0x4:\n      return \"0100\";\n    case 0x5:\n      return \"0101\";\n    case 0x6:\n      return \"0110\";\n    case 0x7:\n      return \"0111\";\n    case 0x8:\n      return \"1000\";\n    case 0x9:\n      return \"1001\";\n    case 0xa:\n      return \"1010\";\n    case 0xb:\n      return \"1011\";\n    case 0xc:\n      return \"1100\";\n    case 0xd:\n      return \"1101\";\n    case 0xe:\n      return \"1110\";\n    case 0xf:\n      return \"1111\";\n    default:\n      return \"erro\";\n  }\n}\n\nexport function int(n: string, radix: number): number {\n  const i = parseInt(n.replace(/[^\\d a-f A-F +-.]/g, \"\"), radix);\n  return i & 0xffff;\n}\n\nexport function int16(i: string): number {\n  return int(i, 16);\n}\n\nexport function int10(i: string): number {\n  return int(i, 10);\n}\n\nexport function int2(i: string): number {\n  return int(i.replaceAll(\" \", \"\"), 2);\n}\n\nexport function parseTwosInt(i: string): number {\n  if (i.toUpperCase().includes(\"X\")) {\n    return int16(i);\n  }\n  return int10(i);\n}\n\nexport function hex(i: number): string {\n  const hu = chars((i & 0xf000) >> 12);\n  const hl = chars((i & 0x0f00) >> 8);\n  const lu = chars((i & 0x00f0) >> 4);\n  const ll = chars(i & 0x000f);\n\n  return `0x${hu}${hl}${lu}${ll}`;\n}\n\nexport function bin(i: number, precision = 16): string {\n  const hu = bits((i & 0xf000) >> 12);\n  const hl = bits((i & 0x0f00) >> 8);\n  const lu = bits((i & 0x00f0) >> 4);\n  const ll = bits(i & 0x000f);\n\n  // return `${hu} ${hl} ${lu} ${ll}`;\n  return `${hu}${hl}${lu}${ll}`.substring(16 - precision); // Match the book's formatting\n}\n\nexport function dec(i: number): string {\n  i = i & 0xffff;\n  if (i === 0x8000) {\n    return \"-32768\";\n  }\n  if (i & 0x8000) {\n    i = (~i + 1) & 0x7fff;\n    return `-${i}`;\n  }\n  return `${i}`;\n}\n\nexport function uns(i: number): string {\n  i = i & 0xffff;\n  return `${i}`;\n}\n\nexport function nand16(a: number, b: number): number {\n  a = a & 0xffff;\n  b = b & 0xffff;\n  let c = ~(a & b);\n  c = c & 0xffff;\n  return c;\n}\n"],"names":["DiffTable","className","out","cmp","zeroState","output","CMP","compare","isErr","_jsxs","children","_jsx","display","Err","cmpData","Ok","outData","failures","table","range","Math","min","length","map","i","cmpI","outI","max","_","j","cell","pass","trim","match","style","fontFamily","marginBottom","row","DiffCell","HIGH","LOW","Bus","name","width","this","state","newWidth","assert","next","push","busVoltage","voltage","bit","forEach","n","pull","reduce","b","nextVoltage","InSubBus","bus","start","connect","mask","high","low","mid","OutSubBus","ConstantBus","value","TRUE_BUS","FALSE_BUS","parsePinDecl","toPin","groups","pin","w","Number","Symbol","iterator","Pins","Map","has","set","minWidth","get","insert","values","id","Chip","ins","outs","internals","clocked","Set","inn","undefined","internal","pins","clockedPins","Clock","$","subscribe","eval","size","parts","reset","hasIn","hasOut","offset","getBuiltin","BUILTIN_NAMES","includes","part","connections","add","to","from","isOutPin","wireOutPin","wireInPin","toLowerCase","emplace","partPin","assertExists","chipPin","findPin","isInternal","Error","ensureWidth","chip","remove","fs","path","load","Low","ClockedChip","level","tock","tick","unsubscribe","pow","clock","BehaviorSubject","ticks","Subject","subject","frameSubject","resetSubject","COMMANDS_ALU","op","COMMANDS","asm","D","A","M","ASSIGN","MD","AM","AD","AMD","JUMP","JGT","JEQ","JGE","JLT","JNE","JLE","JMP","Flags","Positive","Zero","Negative","alu","d","a","o","emptyState","PC","ALU","flag","BITS","decode","instruction","c","x1","x2","am","d1","d2","d3","j1","j2","j3","cpuTick","inM","bits","cpuTock","oldA","alu2","addressM","outM","writeM","CPU","RAM","RAMMem","ROM","Screen","SubMemory","SCREEN_SIZE","SCREEN_OFFSET","Keyboard","MemoryKeyboard","input","tickState","cpu","FORMATS","SCREEN_ROWS","KEYBOARD_OFFSET","Memory","memory","Int16Array","index","fill","format","current","int2","int16","int10","isFinite","loadBytes","bytes","end","slice","fn","parent","update","key","program","arr","SIZE","endsWith","loadHack","loadAsm","loader","readFile","UNKNOWN_PARSE_ERROR","grammars","Base","ohm","baseSemantics","createSemantics","makeParser","grammar","semantics","property","root","source","succeeded","parsed","parse","message","shortMessage","e","extendOperation","List","list","asIteration","addAttribute","decNumber","digits","sourceString","wholeDec","binNumber","hexNumber","num","Name","ident","identifier","__","child","String","_a","str","_b","cmpGrammar","cmpSemantics","extendSemantics","line","cells","Root","lines","parser","tstGrammar","tstSemantics","extendAttribute","Index","idx","FileName","_open","dec","_close","OutputFormat","_c","lpad","rpad","builtin","address","TstEvalOperation","TstOutputOperation","TstOutputListOperation","formats","spec","TstSetOperation","setOp","TstEchoOperation","TstClearEchoOperation","TstLoadROMOperation","_r","_l","file","TstFileOperation","Condition","left","right","TstWhile","cond","_o","statements","statement","condition","span","startIdx","endIdx","TstRepeat","count","TstStatement","stmt","ops","node","operation","break","Tst","tst","TST","asmGrammar","asmSemantics","isALabelInstruction","inst","label","instructions","AInstruction","_at","val","type","CInstruction","assignN","opN","jmpN","assign","replace","jmp","isM","jump","store","Label","ASM","passes","fillLabel","nextLabel","symbols","unfilled","emit","makeC","filter","unwrap","split","loadBlob","parseTwosInt","Output","variable","len","lPad","rPad","startsWith","fmt","parseInt","test","substring","padCenter","getVar","padLeft","B","bin","X","hex","padRight","space","leftSpace","floor","rightSpace","padStart","padEnd","Test","FileSystem","_content","_filename","outputs","_outputList","_steps","steps","_step","_log","done","do","step","breakpoints","clear","print","join","header","isTstLineStatment","isTstWhileStatement","makeLineStatement","TestCompoundInstruction","makeInstruction","addInstruction","TestTickInstruction","TestTockInstruction","TestEvalInstruction","TestOutputInstruction","TestSetInstruction","TestOutputListInstruction","TestEchoInstruction","TestClearEchoInstruction","TestLoadROMInstruction","checkExhaustive","repeat","TestWhileInstruction","TestRepeatInstruction","ChipTest","toString","pinOrBus","filename","CPUTest","rom","setA","setD","setPC","setVar","specs","addOutput","outputList","_test","innerSteps","x","y","hasVar","check","content","echo","clearEcho","pushd","popd","mop","cop","sop","jop","command","cInstruction","aInstruction","aop","mode","C","O","J","Hex","chars","int","radix","replaceAll","toUpperCase","hu","hl","lu","ll","precision","uns","nand16"],"sourceRoot":""}