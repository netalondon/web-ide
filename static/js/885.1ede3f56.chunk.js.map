{"version":3,"file":"static/js/885.1ede3f56.chunk.js","mappings":"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","sources":["../../components/src/chips/alu.tsx","../../components/src/chips/visualizations.tsx","../../components/src/pin_display.ts","../../components/src/pinout.tsx","../../components/src/stores/chip.store.ts","../../components/src/compare.ts","pages/chip.tsx"],"sourcesContent":["import {\n  COMMANDS_ALU,\n  COMMANDS_OP,\n  Flags,\n} from \"@nand2tetris/simulator/cpu/alu.js\";\n\nexport const ALUComponent = ({\n  A,\n  op,\n  D,\n  out,\n  flag,\n}: {\n  A: number;\n  op: COMMANDS_OP;\n  D: number;\n  out: number;\n  flag: keyof typeof Flags;\n}) => (\n  <div>\n    <span>ALU</span>\n    <svg width=\"250\" height=\"250\" xmlns=\"http://www.w3.org/2000/svg\">\n      <g>\n        <rect x=\"1\" y=\"20\" height=\"85\" width=\"70\" fill=\"black\" />\n        <rect x=\"1\" y=\"145\" height=\"85\" width=\"70\" fill=\"black\" />\n        <rect x=\"180\" y=\"95\" height=\"60\" width=\"70\" fill=\"black\" />\n        <polygon\n          points=\"70,10 180,85 180,165 70,240 70,135 90,125 70,115\"\n          stroke=\"#000\"\n          fill=\"#6D97AB\"\n        />\n        <text\n          xmlSpace=\"preserve\"\n          textAnchor=\"middle\"\n          fontFamily=\"Noto Sans JP\"\n          fontSize=\"14\"\n          strokeWidth=\"0\"\n          id=\"svg_9\"\n          y=\"63\"\n          x=\"35\"\n          stroke=\"white\"\n          fill=\"#ffffff\"\n        >\n          {A}\n        </text>\n        <text\n          xmlSpace=\"preserve\"\n          textAnchor=\"middle\"\n          fontFamily=\"Noto Sans JP\"\n          fontSize=\"14\"\n          id=\"svg_10\"\n          y=\"188\"\n          x=\"35\"\n          strokeWidth=\"0\"\n          stroke=\"white\"\n          fill=\"#ffffff\"\n        >\n          {D}\n        </text>\n        <text\n          xmlSpace=\"preserve\"\n          textAnchor=\"middle\"\n          fontFamily=\"Noto Sans JP\"\n          fontSize=\"14\"\n          id=\"svg_11\"\n          y=\"125\"\n          x=\"215\"\n          strokeWidth=\"0\"\n          stroke=\"white\"\n          fill=\"#ffffff\"\n        >\n          {out}\n        </text>\n        <text\n          xmlSpace=\"preserve\"\n          textAnchor=\"middle\"\n          fontFamily=\"Noto Sans JP\"\n          fontSize=\"14\"\n          id=\"svg_13\"\n          y=\"125\"\n          x=\"135\"\n          strokeWidth=\"0\"\n          stroke=\"white\"\n          fill=\"#ffffff\"\n        >\n          {COMMANDS_ALU.op[op] ?? \"(??)\"}\n        </text>\n      </g>\n    </svg>\n  </div>\n);\n","import {\n  CPU,\n  Keyboard,\n  ROM32K,\n  Screen,\n} from \"@nand2tetris/simulator/chip/builtins/computer/computer.js\";\nimport { ALU } from \"@nand2tetris/simulator/chip/builtins/index.js\";\nimport {\n  PC,\n  Register,\n} from \"@nand2tetris/simulator/chip/builtins/sequential/bit.js\";\nimport {\n  RAM,\n  RAM8,\n} from \"@nand2tetris/simulator/chip/builtins/sequential/ram.js\";\nimport { Chip, HIGH } from \"@nand2tetris/simulator/chip/chip.js\";\nimport { Flags } from \"@nand2tetris/simulator/cpu/alu.js\";\nimport { decode } from \"@nand2tetris/simulator/cpu/cpu.js\";\nimport { ReactElement } from \"react\";\nimport { ALUComponent } from \"./alu.js\";\nimport { Keyboard as KeyboardComponent } from \"./keyboard.js\";\nimport { Memory as MemoryComponent } from \"./memory.js\";\nimport { RegisterComponent } from \"./register.js\";\nimport { Screen as ScreenComponent } from \"./screen.js\";\n\nexport function getBuiltinVisualization(part: Chip): ReactElement | undefined {\n  switch (part.name) {\n    case \"Register\":\n    case \"ARegister\":\n    case \"DRegister\":\n    case \"PC\":\n    case \"KEYBOARD\":\n    case \"RAM8\":\n    case \"RAM64\":\n    case \"RAM512\":\n    case \"RAM4K\":\n    case \"RAM16K\":\n    case \"ROM32K\":\n    case \"Screen\":\n    case \"Memory\":\n    default:\n      return undefined;\n  }\n}\n\nexport function makeVisualization(\n  chip: Chip,\n  updateAction?: () => void\n): ReactElement | undefined {\n  if (chip instanceof ALU) {\n    return (\n      <ALUComponent\n        A={chip.in(\"x\").busVoltage}\n        op={chip.op()}\n        D={chip.in(\"y\").busVoltage}\n        out={chip.out().busVoltage}\n        flag={\n          (chip.out(\"zr\").voltage() === HIGH\n            ? Flags.Zero\n            : chip.out(\"ng\").voltage() === HIGH\n            ? Flags.Negative\n            : Flags.Positive) as keyof typeof Flags\n        }\n      />\n    );\n  }\n  if (chip instanceof Register) {\n    return (\n      <RegisterComponent\n        name={chip.name ?? `Chip ${chip.id}`}\n        bits={chip.bits}\n      />\n    );\n  }\n  if (chip instanceof PC) {\n    return <RegisterComponent name=\"PC\" bits={chip.bits} />;\n  }\n  if (chip instanceof Keyboard) {\n    return <KeyboardComponent keyboard={chip} update={updateAction} />;\n  }\n  if (chip instanceof Screen) {\n    return <ScreenComponent memory={chip.memory} />;\n  }\n  if (chip instanceof RAM) {\n    return (\n      <MemoryComponent\n        name={chip.name}\n        memory={chip.memory}\n        format={chip instanceof ROM32K ? \"asm\" : \"dec\"}\n        highlight={chip.address}\n      />\n    );\n  }\n  if (chip instanceof RAM8) {\n    return <span>RAM {chip.width}</span>;\n  }\n  if (chip instanceof CPU) {\n    const bits = decode(chip.in(\"instruction\").busVoltage);\n    return (\n      <>\n        <RegisterComponent name={\"A\"} bits={chip.state.A} />\n        <RegisterComponent name={\"D\"} bits={chip.state.D} />\n        <RegisterComponent name={\"PC\"} bits={chip.state.PC} />\n        <ALUComponent\n          A={bits.am ? chip.in(\"inM\").busVoltage : chip.state.A}\n          D={chip.state.D}\n          out={chip.state.ALU}\n          op={bits.op}\n          flag={chip.state.flag as keyof typeof Flags}\n        />\n      </>\n    );\n  }\n\n  const vis = [...chip.parts]\n    .map((chip) => makeVisualization(chip, updateAction))\n    .filter((v) => v !== undefined);\n  return vis.length > 0 ? <>{vis}</> : undefined;\n}\n\nexport function makeVisualizationsWithId(\n  chip: {\n    parts: Chip[];\n  },\n  updateAction?: () => void\n): [string, ReactElement][] {\n  return [...chip.parts]\n    .map((part, i): [string, ReactElement | undefined] => [\n      `${part.id}_${i}`,\n      makeVisualization(part, updateAction),\n    ])\n    .filter(([_, v]) => v !== undefined) as [string, ReactElement][];\n}\n","import { Ok, isOk } from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport {\n  REGISTRY as BUILTIN_REGISTRY,\n  getBuiltinChip,\n} from \"@nand2tetris/simulator/chip/builtins/index.js\";\n\nexport class ChipDisplayInfo {\n  signBehaviors: Map<string, boolean> = new Map();\n\n  public constructor(chipName: string, unsigned?: string[]) {\n    if (BUILTIN_REGISTRY.has(chipName)) {\n      const chip = getBuiltinChip(chipName);\n      if (isOk(chip)) {\n        const pins = Array.from(Ok(chip).ins.entries()).concat(\n          Array.from(Ok(chip).outs.entries())\n        );\n        for (const pin of pins) {\n          this.signBehaviors.set(\n            pin.name,\n            !unsigned || !unsigned.includes(pin.name)\n          );\n        }\n      }\n    }\n  }\n\n  public isSigned(pin: string) {\n    return this.signBehaviors.get(pin);\n  }\n}\n\nconst UNSIGNED_PINS = new Map<string, string[]>([\n  [\"Mux4Way16\", [\"sel\"]],\n  [\"Mux8Way16\", [\"sel\"]],\n  [\"DMux4Way\", [\"sel\"]],\n  [\"DMux8Way\", [\"sel\"]],\n  [\"RAM8\", [\"address\"]],\n  [\"RAM64\", [\"address\"]],\n  [\"RAM512\", [\"address\"]],\n  [\"RAM4K\", [\"address\"]],\n  [\"RAM16K\", [\"address\"]],\n  [\"Screen\", [\"address\"]],\n  [\"Memory\", [\"address\"]],\n  [\"CPU\", [\"addressM\", \"pc\"]],\n]);\n\nexport const getDisplayInfo = (chipName: string) =>\n  new ChipDisplayInfo(chipName, UNSIGNED_PINS.get(chipName));\n","// import { plural, Trans } from \"@lingui/macro\";\nimport {\n  Pin as ChipPin,\n  Pins,\n  Voltage,\n} from \"@nand2tetris/simulator/chip/chip.js\";\nimport { range } from \"@davidsouther/jiffies/lib/esm/range.js\";\nimport { ChipSim } from \"./stores/chip.store.js\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ChipDisplayInfo, getDisplayInfo } from \"./pin_display.js\";\n\nexport const PinContext = createContext({});\n\nexport interface ImmPin {\n  bits: [number, Voltage][];\n  pin: ChipPin;\n}\n\nexport function reducePin(pin: ChipPin) {\n  return {\n    pin,\n    bits: range(0, pin.width)\n      .map((i) => [i, pin.voltage(i)] as [number, Voltage])\n      .reverse(),\n  };\n}\n\nexport function reducePins(pins: Pins): ImmPin[] {\n  return [...pins.entries()].map(reducePin);\n}\n\nexport interface PinoutPins {\n  pins: ImmPin[];\n  toggle?: (pin: ChipPin, bit?: number) => void;\n}\n\nexport const FullPinout = (props: {\n  sim: ChipSim;\n  toggle: (pin: ChipPin, i: number | undefined) => void;\n  setInputValid: (pending: boolean) => void;\n  hideInternal?: boolean;\n}) => {\n  const { inPins, outPins, internalPins } = props.sim;\n  const displayInfo = getDisplayInfo(props.sim.chip[0].name ?? \"\");\n  return (\n    <>\n      <style>{`\n        table.pinout th {\n          font-weight: bold;\n        }\n\n        table.pinout tbody td:first-child {\n          text-align: right;\n          --font-size: 1rem;\n          width: 0;\n          white-space: nowrap;\n          border-right: var(--border-width) solid var(--table-border-color);\n        }\n\n        table.pinout tbody button {\n          --font-size: 0.875em;\n          font-family: var(--font-family-monospace);\n          max-width: 2em;\n        }\n        `}</style>\n      <table className=\"pinout\">\n        <tbody>\n          <PinoutBlock\n            pins={inPins}\n            header=\"Input pins\"\n            toggle={props.toggle}\n            setInputValid={props.setInputValid}\n            displayInfo={displayInfo}\n          />\n          <PinoutBlock\n            pins={outPins}\n            header=\"Output pins\"\n            disabled={props.sim.pending}\n            enableEdit={false}\n            displayInfo={displayInfo}\n          />\n          {!props.hideInternal && (\n            <PinoutBlock\n              pins={internalPins}\n              header=\"Internal pins\"\n              disabled={props.sim.pending}\n              enableEdit={false}\n              displayInfo={displayInfo}\n            />\n          )}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport const PinoutBlock = (\n  props: PinoutPins & {\n    header: string;\n    disabled?: boolean;\n    enableEdit?: boolean;\n    setInputValid?: (valid: boolean) => void;\n    displayInfo: ChipDisplayInfo;\n  }\n) => (\n  <>\n    {props.pins.length > 0 && (\n      <tr>\n        <th colSpan={2}>{props.header}</th>\n      </tr>\n    )}\n    {[...props.pins].map((immPin) => (\n      <tr key={immPin.pin.name}>\n        <td>{immPin.pin.name}</td>\n        <td>\n          <Pin\n            pin={immPin}\n            toggle={props.toggle}\n            disabled={props.disabled}\n            enableEdit={props.enableEdit}\n            signed={props.displayInfo.isSigned(immPin.pin.name)}\n            setInputValid={props.setInputValid}\n            internal={props.header === \"Internal pins\" ? true : false}\n          />\n        </td>\n      </tr>\n    ))}\n  </>\n);\n\nexport const Pinout = ({\n  pins,\n  toggle,\n}: {\n  pins: ImmPin[];\n  toggle?: (pin: ChipPin, bit?: number) => void;\n}) => {\n  if (pins.length === 0) {\n    return <>None</>;\n  }\n  return (\n    <table className=\"pinout\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Value</th>\n        </tr>\n      </thead>\n      <tbody>\n        {[...pins].map((immPin) => (\n          <tr key={immPin.pin.name}>\n            <td>{immPin.pin.name}</td>\n            <td>\n              <Pin pin={immPin} toggle={toggle} internal />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nconst Pin = ({\n  pin,\n  toggle,\n  disabled = false,\n  enableEdit = true,\n  signed = true,\n  setInputValid,\n  internal = false,\n}: {\n  pin: ImmPin;\n  toggle: ((pin: ChipPin, bit?: number) => void) | undefined;\n  disabled?: boolean;\n  enableEdit?: boolean;\n  signed?: boolean;\n  setInputValid?: (valid: boolean) => void;\n  internal: boolean;\n}) => {\n  const [isBin, setIsBin] = useState(true);\n  let inputValid = true;\n  const [decimal, setDecimal] = useState(\"\");\n\n  const toggleBin = () => {\n    setIsBin(!isBin);\n  };\n\n  const resetDispatcher = useContext(PinContext);\n  if (resetDispatcher instanceof PinResetDispatcher) {\n    resetDispatcher.registerCallback(() => {\n      setIsBin(true);\n    });\n  }\n\n  const setInputValidity = (valid: boolean) => {\n    inputValid = valid;\n    setInputValid?.(valid);\n  };\n\n  const handleDecimalChange = (value: string) => {\n    const positive = value.replace(/[^\\d]/g, \"\");\n    const numeric = signed && value[0] === \"-\" ? `-${positive}` : positive;\n\n    setDecimal(numeric);\n    if (isNaN(parseInt(numeric))) {\n      setInputValidity(false);\n    } else {\n      const newValue = parseInt(numeric);\n      if (\n        (!signed && newValue >= Math.pow(2, pin.bits.length)) ||\n        (signed &&\n          (newValue >= Math.pow(2, pin.bits.length - 1) ||\n            newValue < -Math.pow(2, pin.bits.length - 1)))\n      ) {\n        setInputValidity(false);\n      } else {\n        updatePins(newValue);\n        setInputValidity(true);\n      }\n    }\n  };\n\n  const updatePins = (n: number) => {\n    for (let i = 0; i < pin.bits.length; i++) {\n      if (pin.bits[pin.bits.length - i - 1][1] !== ((n >> i) & 1)) {\n        toggle?.(pin.pin, i);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (!isBin && inputValid) {\n      let value = 0;\n      if (signed && pin.bits[0][1]) {\n        // negative\n        for (const [i, v] of pin.bits) {\n          if (i < pin.bits.length - 1 && !v) {\n            value += 2 ** i;\n          }\n        }\n        value = -value - 1;\n      } else {\n        // positive\n        const limit = signed ? pin.bits.length - 1 : pin.bits.length;\n        for (const [i, v] of pin.bits) {\n          if (i < limit && v) {\n            value += 2 ** i;\n          }\n        }\n      }\n      setDecimal(value.toString());\n    }\n  }, [pin, isBin]);\n\n  return (\n    <div\n      style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }}\n    >\n      <fieldset role=\"group\" style={{ width: `${pin.bits.length}rem` }}>\n        {isBin ? (\n          pin.bits.map(([i, v]) => (\n            <button\n              key={i}\n              disabled={disabled}\n              style={internal ? { backgroundColor: \"grey\" } : {}}\n              onClick={() => toggle?.(pin.pin, i)}\n              data-testid={`pin-${i}`}\n            >\n              {v}\n            </button>\n          ))\n        ) : (\n          <input\n            className=\"colored\"\n            value={decimal}\n            onChange={(e) => {\n              handleDecimalChange(e.target.value);\n            }}\n            disabled={!enableEdit}\n          />\n        )}\n      </fieldset>\n      {pin.bits.length > 1 && (\n        <>\n          <div style={{ width: \"1em\" }} />\n          <button\n            style={{ maxWidth: \"3em\", margin: 0 }}\n            onClick={() => toggleBin()}\n          >\n            {isBin ? \"dec\" : \"bin\"}\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport class PinResetDispatcher {\n  private callbacks: (() => void)[] = [];\n\n  registerCallback(callback: () => void) {\n    this.callbacks.push(callback);\n  }\n\n  reset() {\n    for (const callback of this.callbacks) {\n      callback();\n    }\n  }\n}\n","import { display } from \"@davidsouther/jiffies/lib/esm/display.js\";\nimport { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport { Err, isErr, Ok } from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { Dispatch, MutableRefObject, useContext, useMemo, useRef } from \"react\";\n\nimport { build as buildChip } from \"@nand2tetris/simulator/chip/builder.js\";\nimport {\n  getBuiltinChip,\n  REGISTRY,\n} from \"@nand2tetris/simulator/chip/builtins/index.js\";\nimport {\n  Chip,\n  Chip as SimChip,\n  Low,\n  Pin,\n} from \"@nand2tetris/simulator/chip/chip.js\";\nimport { Clock } from \"@nand2tetris/simulator/chip/clock.js\";\nimport { Span } from \"@nand2tetris/simulator/languages/base.js\";\nimport { HDL } from \"@nand2tetris/simulator/languages/hdl.js\";\nimport { TST } from \"@nand2tetris/simulator/languages/tst.js\";\nimport {\n  BUILTIN_CHIP_PROJECTS,\n  CHIP_ORDER,\n  CHIP_PROJECTS,\n  ChipProjects,\n} from \"@nand2tetris/projects/index.js\";\nimport { ChipTest } from \"@nand2tetris/simulator/tst.js\";\n\nimport { ImmPin, reducePins } from \"../pinout.js\";\nimport { useImmerReducer } from \"../react.js\";\n\nimport { BaseContext } from \"./base.context.js\";\nimport { assert } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { compare } from \"../compare.js\";\n\nexport const PROJECT_NAMES = [\n  [\"01\", `Project 1`],\n  [\"02\", `Project 2`],\n  [\"03\", `Project 3`],\n  [\"05\", `Project 5`],\n];\n\nfunction getChips(project: keyof typeof CHIP_PROJECTS) {\n  return project in CHIP_ORDER\n    ? (CHIP_ORDER as Record<typeof project, string[]>)[project]\n    : BUILTIN_CHIP_PROJECTS[project].concat(CHIP_PROJECTS[project]);\n}\n\nfunction findDropdowns(storage: Record<string, string>) {\n  const project =\n    (storage[\"/chip/project\"] as keyof typeof CHIP_PROJECTS) ?? \"01\";\n  const chips = getChips(project);\n  const chipName = storage[\"/chip/chip\"] ?? CHIP_PROJECTS[project][0];\n  return { project, chips, chipName };\n}\n\nfunction makeHdl(name: string) {\n  return `CHIP ${name} {\n  IN in;\n  OUT out;\n  PARTS:\n}`;\n}\n\nfunction makeTst() {\n  return `repeat 10 {\n  tick,\n  tock;\n}`;\n}\n\nfunction makeCmp() {\n  return `| in|out|`;\n}\n\nexport function isBuiltinOnly(chipName: string) {\n  return Object.values(BUILTIN_CHIP_PROJECTS).flat().includes(chipName);\n}\n\nfunction getTemplate(project: keyof typeof CHIP_PROJECTS, chipName: string) {\n  if (isBuiltinOnly(chipName)) {\n    return (ChipProjects[project].BUILTIN_CHIPS as Record<string, string>)[\n      chipName\n    ];\n  }\n\n  return (\n    ChipProjects[project].CHIPS as Record<string, Record<string, string>>\n  )[chipName][`${chipName}.hdl`] as string;\n}\n\nfunction getBuiltinCode(project: keyof typeof CHIP_PROJECTS, chipName: string) {\n  const template = getTemplate(project, chipName);\n  if (isBuiltinOnly(chipName)) {\n    return template;\n  }\n  const bodyComment = \"//// Replace this comment with your code.\";\n  const builtinLine = `BUILTIN ${chipName};`;\n  const builtinCode = template.includes(bodyComment)\n    ? template.replace(bodyComment, builtinLine)\n    : template.replace(\"PARTS:\", `PARTS:\\n    ${builtinLine}`);\n  return builtinCode;\n}\n\nexport interface ChipPageState {\n  files: Files;\n  sim: ChipSim;\n  controls: ControlsState;\n}\n\nexport interface ChipSim {\n  clocked: boolean;\n  inPins: ImmPin[];\n  outPins: ImmPin[];\n  internalPins: ImmPin[];\n  chip: [Chip];\n  pending: boolean;\n  invalid: boolean;\n}\n\nexport interface Files {\n  hdl: string;\n  cmp: string;\n  tst: string;\n  out: string;\n}\n\nexport interface ControlsState {\n  project: keyof typeof CHIP_PROJECTS;\n  chips: string[];\n  chipName: string;\n  hasBuiltin: boolean;\n  builtinOnly: boolean;\n  runningTest: boolean;\n  span?: Span;\n  error: string;\n}\n\nfunction reduceChip(chip: SimChip, pending = false, invalid = false): ChipSim {\n  return {\n    clocked: chip.clocked,\n    inPins: reducePins(chip.ins),\n    outPins: reducePins(chip.outs),\n    internalPins: reducePins(chip.pins),\n    chip: [chip],\n    pending,\n    invalid,\n  };\n}\n\nconst clock = Clock.get();\n\nexport type ChipStoreDispatch = Dispatch<{\n  action: keyof ReturnType<typeof makeChipStore>[\"reducers\"];\n  payload?: unknown;\n}>;\n\nexport function makeChipStore(\n  fs: FileSystem,\n  setStatus: (status: string) => void,\n  storage: Record<string, string>,\n  dispatch: MutableRefObject<ChipStoreDispatch>\n) {\n  const dropdowns = findDropdowns(storage);\n  let { project, chipName } = dropdowns;\n  const { chips } = dropdowns;\n  let chip = new Low();\n  let test = new ChipTest();\n  let usingBuiltin = false;\n  let builtinOnly = false;\n\n  const reducers = {\n    setFiles(\n      state: ChipPageState,\n      {\n        hdl = state.files.hdl,\n        tst = state.files.tst,\n        cmp = state.files.cmp,\n        out = \"\",\n      }: {\n        hdl?: string;\n        tst?: string;\n        cmp?: string;\n        out?: string;\n      }\n    ) {\n      state.files.hdl = hdl;\n      state.files.tst = tst;\n      state.files.cmp = cmp;\n      state.files.out = out;\n    },\n\n    updateChip(\n      state: ChipPageState,\n      payload?: {\n        pending?: boolean;\n        invalid?: boolean;\n        chipName?: string;\n        error?: string;\n      }\n    ) {\n      state.sim = reduceChip(\n        chip,\n        payload?.pending ?? state.sim.pending,\n        payload?.invalid ?? state.sim.invalid\n      );\n      state.controls.error = state.sim.invalid\n        ? payload?.error ?? state.controls.error\n        : \"\";\n      state.controls.chips = getChips(state.controls.project);\n      state.controls.chipName = state.sim.invalid\n        ? payload?.chipName ?? chipName\n        : chip.name ?? payload?.chipName ?? chipName;\n      if (!state.controls.chips.includes(state.controls.chipName)) {\n        state.controls.chips = [\n          ...state.controls.chips,\n          state.controls.chipName,\n        ];\n      }\n    },\n\n    setProject(state: ChipPageState, project: keyof typeof CHIP_PROJECTS) {\n      const chips = getChips(project);\n      const chipName =\n        state.controls.chipName && chips.includes(state.controls.chipName)\n          ? state.controls.chipName\n          : chips[0];\n      state.controls.project = project;\n      state.controls.chips = chips;\n      this.setChip(state, chipName);\n    },\n\n    setChip(state: ChipPageState, chipName: string) {\n      state.controls.chipName = chipName;\n      state.controls.hasBuiltin = REGISTRY.has(chipName);\n      state.controls.builtinOnly = isBuiltinOnly(chipName);\n    },\n\n    testRunning(state: ChipPageState) {\n      state.controls.runningTest = true;\n    },\n\n    testFinished(state: ChipPageState) {\n      state.controls.runningTest = false;\n      const passed = compare(state.files.cmp.trim(), state.files.out.trim());\n      setStatus(\n        passed\n          ? `Simulation successful: The output file is identical to the compare file`\n          : `Simulation error: The output file differs from the compare file`\n      );\n    },\n\n    updateTestStep(state: ChipPageState) {\n      state.files.out = test?.log() ?? \"\";\n      if (test?.currentStep?.span) {\n        state.controls.span = test.currentStep.span;\n      } else {\n        if (test.done) {\n          const end = state.files.tst.length;\n          state.controls.span = {\n            start: end - 1,\n            end,\n          };\n        }\n      }\n      this.updateChip(state, {\n        pending: state.sim.pending,\n        invalid: state.sim.invalid,\n      });\n    },\n  };\n\n  const actions = {\n    setProject(p: keyof typeof CHIP_PROJECTS) {\n      project = storage[\"/chip/project\"] = p;\n      dispatch.current({ action: \"setProject\", payload: project });\n      this.setChip(CHIP_PROJECTS[project][0]);\n    },\n\n    async setChip(chip: string, project = storage[\"/chip/project\"] ?? \"01\") {\n      chipName = storage[\"/chip/chip\"] = chip;\n      dispatch.current({ action: \"setChip\", payload: chipName });\n      builtinOnly = isBuiltinOnly(chipName);\n\n      if (builtinOnly) {\n        dispatch.current({\n          action: \"setFiles\",\n          payload: { hdl: \"\", tst: \"\", cmp: \"\" },\n        });\n        this.useBuiltin();\n        return;\n      }\n      await this.loadChip(project, chipName);\n      if (usingBuiltin) {\n        this.useBuiltin();\n      }\n    },\n\n    reset() {\n      Clock.get().reset();\n      chip.reset();\n      test.reset();\n      dispatch.current({ action: \"setFiles\", payload: {} });\n      dispatch.current({ action: \"updateChip\" });\n    },\n\n    async updateFiles({\n      hdl,\n      tst,\n      cmp,\n    }: {\n      hdl?: string;\n      tst?: string;\n      cmp: string;\n    }) {\n      dispatch.current({ action: \"setFiles\", payload: { hdl, tst, cmp } });\n      try {\n        if (hdl) {\n          await this.compileChip(hdl);\n        }\n        if (tst) {\n          this.compileTest(tst);\n        }\n      } catch (e) {\n        setStatus(display(e));\n      }\n    },\n\n    async compileChip(hdl: string) {\n      chip.remove();\n      const maybeParsed = HDL.parse(hdl);\n      if (isErr(maybeParsed)) {\n        setStatus(\"Failed to parse chip\");\n        dispatch.current({\n          action: \"updateChip\",\n          payload: { invalid: true, error: display(Err(maybeParsed)) },\n        });\n        return;\n      }\n      const maybeChip = await buildChip(Ok(maybeParsed));\n      if (isErr(maybeChip)) {\n        const error = display(Err(maybeChip));\n        setStatus(error);\n        dispatch.current({\n          action: \"updateChip\",\n          payload: { invalid: true, error },\n        });\n        return;\n      }\n      setStatus(`Compiled ${chip.name}`);\n      this.replaceChip(Ok(maybeChip));\n    },\n\n    replaceChip(nextChip: SimChip) {\n      // Store current inPins\n      const inPins = chip.ins;\n      for (const [pin, { busVoltage }] of inPins) {\n        const nextPin = nextChip.ins.get(pin);\n        if (nextPin) {\n          nextPin.busVoltage = busVoltage;\n        }\n      }\n      clock.reset();\n      nextChip.eval();\n      chip = nextChip;\n      chip.reset();\n      test = test.with(chip).reset();\n      dispatch.current({ action: \"updateChip\", payload: { invalid: false } });\n      dispatch.current({ action: \"updateTestStep\" });\n    },\n\n    async loadChip(project: string, name: string) {\n      storage[\"/chip/chip\"] = name;\n      const fsName = (ext: string) =>\n        `/projects/${project}/${name}/${name}.${ext}`;\n\n      const [hdl, tst, cmp] = await Promise.all([\n        fs.readFile(fsName(\"hdl\")).catch(() => makeHdl(name)),\n        fs.readFile(fsName(\"tst\")).catch((e) => {\n          return makeTst();\n        }),\n        fs.readFile(fsName(\"cmp\")).catch(() => makeCmp()),\n      ]);\n\n      dispatch.current({ action: \"setFiles\", payload: { hdl, tst, cmp } });\n      await this.compileChip(hdl);\n      this.compileTest(tst);\n    },\n\n    async saveChip(hdl: string, prj = project, name = chipName) {\n      dispatch.current({ action: \"setFiles\", payload: { hdl } });\n      const path = `/projects/${prj}/${name}/${name}.hdl`;\n      await fs.writeFile(path, hdl);\n      setStatus(`Saved ${path}`);\n    },\n\n    toggle(pin: Pin, i: number | undefined) {\n      if (i !== undefined) {\n        pin.busVoltage = pin.busVoltage ^ (1 << i);\n      } else {\n        if (pin.width === 1) {\n          pin.toggle();\n        } else {\n          pin.busVoltage += 1;\n        }\n      }\n      dispatch.current({ action: \"updateChip\", payload: { pending: true } });\n    },\n\n    eval() {\n      chip.eval();\n      dispatch.current({ action: \"updateChip\", payload: { pending: false } });\n    },\n\n    clock() {\n      clock.toggle();\n      if (clock.isLow) {\n        clock.frame();\n      }\n      dispatch.current({ action: \"updateChip\" });\n    },\n\n    async useBuiltin(doUseBuiltin = true, oldHdl?: string) {\n      if (!doUseBuiltin) {\n        if (!builtinOnly) {\n          usingBuiltin = false;\n        }\n        await this.loadChip(project, chipName);\n        return;\n      }\n      if (!builtinOnly) {\n        usingBuiltin = true;\n      }\n      const builtinName = chipName;\n      const nextChip = getBuiltinChip(builtinName);\n      if (isErr(nextChip)) {\n        setStatus(\n          `Failed to load builtin ${builtinName}: ${display(Err(nextChip))}`\n        );\n        return;\n      }\n\n      // Save hdl code that will be overwritten by the switch\n      if (oldHdl) {\n        await this.saveChip(oldHdl, project, chipName);\n      }\n\n      const hdl = getBuiltinCode(project, builtinName);\n      dispatch.current({ action: \"setFiles\", payload: { hdl } });\n      this.replaceChip(Ok(nextChip));\n    },\n\n    async initialize() {\n      await this.setChip(chipName, project);\n    },\n\n    compileTest(file: string) {\n      dispatch.current({ action: \"setFiles\", payload: { tst: file } });\n      const tst = TST.parse(file);\n\n      if (isErr(tst)) {\n        setStatus(`Failed to parse test`);\n        return false;\n      }\n      setStatus(`Parsed tst`);\n\n      test = ChipTest.from(Ok(tst)).with(chip).reset();\n      test.setFileSystem(fs);\n      dispatch.current({ action: \"updateTestStep\" });\n      return true;\n    },\n\n    async runTest(file: string) {\n      if (!this.compileTest(file)) {\n        return;\n      }\n      dispatch.current({ action: \"testRunning\" });\n\n      fs.pushd(\"/samples\");\n      await test.run();\n      fs.popd();\n\n      dispatch.current({ action: \"updateTestStep\" });\n      dispatch.current({ action: \"testFinished\" });\n    },\n\n    tick(): boolean {\n      return this.stepTest();\n    },\n\n    stepTest(): boolean {\n      assert(test.chipId === chip.id, \"Test and chip out of sync\");\n      const done = test.step();\n      dispatch.current({ action: \"updateTestStep\" });\n      if (done) {\n        dispatch.current({ action: \"testFinished\" });\n      }\n      return done;\n    },\n  };\n\n  const initialState: ChipPageState = (() => {\n    const controls: ControlsState = {\n      project,\n      chips,\n      chipName,\n      hasBuiltin: REGISTRY.has(chipName),\n      builtinOnly: isBuiltinOnly(chipName),\n      runningTest: false,\n      error: \"\",\n    };\n\n    const maybeChip = getBuiltinChip(controls.chipName);\n    if (isErr(maybeChip)) {\n      setStatus(display(Err(maybeChip)));\n      chip = new Low();\n    } else {\n      chip = Ok(maybeChip);\n    }\n\n    const sim = reduceChip(chip);\n\n    return {\n      controls,\n      files: {\n        hdl: \"\",\n        cmp: \"\",\n        tst: \"\",\n        out: \"\",\n      },\n      sim,\n    };\n  })();\n\n  return { initialState, reducers, actions };\n}\n\nexport function useChipPageStore() {\n  const { fs, setStatus, storage } = useContext(BaseContext);\n\n  const dispatch = useRef<ChipStoreDispatch>(() => undefined);\n\n  const { initialState, reducers, actions } = useMemo(\n    () => makeChipStore(fs, setStatus, storage, dispatch),\n    [fs, setStatus, storage, dispatch]\n  );\n\n  const [state, dispatcher] = useImmerReducer(reducers, initialState);\n  dispatch.current = dispatcher;\n\n  return { state, dispatch, actions };\n}\n","import { isErr, Ok } from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { CMP } from \"@nand2tetris/simulator/languages/cmp.js\";\n\nexport const compare = (cmp: string, out: string) => {\n  const cmpResult = CMP.parse(cmp);\n  const outResult = CMP.parse(out);\n\n  if (isErr(cmpResult) || isErr(outResult)) {\n    return false;\n  }\n\n  const cmpData = Ok(cmpResult);\n  const outData = Ok(outResult);\n\n  for (let i = 0; i < Math.min(cmpData.length, outData.length); i++) {\n    const cmpI = cmpData[i] ?? [];\n    const outI = outData[i] ?? [];\n\n    for (let j = 0; j < Math.max(cmpI.length, outI.length); j++) {\n      const cmpJ = cmpI[j] ?? \"\";\n      const outJ = outI[j] ?? \"\";\n      if (\n        !(cmpJ?.trim().match(/^\\*+$/) !== null || outJ?.trim() === cmpJ?.trim())\n      ) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n","import { Trans } from \"@lingui/macro\";\nimport {\n  CSSProperties,\n  ReactNode,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\n\nimport \"./chip.scss\";\n\nimport { makeVisualizationsWithId } from \"@nand2tetris/components/chips/visualizations.js\";\nimport { Clockface } from \"@nand2tetris/components/clockface.js\";\nimport { DiffTable } from \"@nand2tetris/components/difftable.js\";\nimport {\n  FullPinout,\n  PinContext,\n  PinResetDispatcher,\n} from \"@nand2tetris/components/pinout.js\";\nimport { useStateInitializer } from \"@nand2tetris/components/react.js\";\nimport { Runbar } from \"@nand2tetris/components/runbar.js\";\nimport { BaseContext } from \"@nand2tetris/components/stores/base.context.js\";\nimport {\n  Files,\n  PROJECT_NAMES,\n  isBuiltinOnly,\n  useChipPageStore,\n} from \"@nand2tetris/components/stores/chip.store.js\";\nimport { CHIP_PROJECTS } from \"@nand2tetris/projects/index.js\";\nimport { CMP } from \"@nand2tetris/simulator/languages/cmp.js\";\nimport { HDL } from \"@nand2tetris/simulator/languages/hdl.js\";\nimport { TST } from \"@nand2tetris/simulator/languages/tst.js\";\nimport { Timer } from \"@nand2tetris/simulator/timer.js\";\nimport { AppContext } from \"../App.context\";\nimport { Icon } from \"../pico/icon\";\nimport { Editor } from \"../shell/editor\";\nimport { Accordian, Panel } from \"../shell/panel\";\n\nexport const Chip = () => {\n  const { fs, setStatus } = useContext(BaseContext);\n  const { filePicker, tracking } = useContext(AppContext);\n  const { state, actions, dispatch } = useChipPageStore();\n\n  const [hdl, setHdl] = useStateInitializer(state.files.hdl);\n  const [tst, setTst] = useStateInitializer(state.files.tst);\n  const [cmp, setCmp] = useStateInitializer(state.files.cmp);\n  const [out] = useStateInitializer(state.files.out);\n\n  useEffect(() => {\n    actions.initialize();\n  }, [actions]);\n\n  useEffect(() => {\n    tracking.trackPage(\"/chip\");\n  }, [tracking]);\n\n  const saveChip = () => {\n    actions.saveChip(hdl);\n  };\n\n  useEffect(() => {\n    tracking.trackEvent(\"action\", \"setProject\", state.controls.project);\n    tracking.trackEvent(\"action\", \"setChip\", state.controls.chipName);\n  }, []);\n\n  const setProject = useCallback(\n    (project: keyof typeof CHIP_PROJECTS) => {\n      actions.setProject(project);\n      tracking.trackEvent(\"action\", \"setProject\", project);\n    },\n    [actions, tracking]\n  );\n\n  const setChip = useCallback(\n    (chip: string) => {\n      actions.setChip(chip);\n      tracking.trackEvent(\"action\", \"setChip\", chip);\n      pinResetDispatcher.reset();\n    },\n    [actions, tracking]\n  );\n\n  const doEval = useCallback(() => {\n    actions.eval();\n    tracking.trackEvent(\"action\", \"eval\");\n  }, [actions, tracking]);\n\n  const compile = useRef<(files?: Partial<Files>) => void>(() => undefined);\n  compile.current = async (files: Partial<Files> = {}) => {\n    await actions.updateFiles({\n      hdl: files.hdl,\n      tst: files.tst ?? tst,\n      cmp: files.cmp ?? cmp,\n    });\n  };\n\n  const loadTest = useCallback(async () => {\n    try {\n      const path = await filePicker.select();\n      const tst = await fs.readFile(path);\n      await compile.current({ tst });\n    } catch (e) {\n      console.error(e);\n      setStatus(`Failed to load into memory`);\n    }\n  }, [filePicker, setStatus, fs, compile]);\n\n  const runner = useRef<Timer>();\n  useEffect(() => {\n    runner.current = new (class ChipTimer extends Timer {\n      async reset(): Promise<void> {\n        await compile.current();\n        await actions.reset();\n      }\n\n      override finishFrame(): void {\n        super.finishFrame();\n        dispatch.current({ action: \"updateTestStep\" });\n      }\n\n      tick(): boolean {\n        return actions.stepTest();\n      }\n\n      toggle(): void {\n        dispatch.current({ action: \"updateTestStep\" });\n      }\n    })();\n\n    return () => {\n      runner.current?.stop();\n    };\n  }, [compile, actions, dispatch]);\n\n  const clockActions = useMemo(\n    () => ({\n      toggle() {\n        actions.clock();\n        tracking.trackEvent(\"action\", \"toggleClock\");\n      },\n      reset() {\n        tracking.trackEvent(\"action\", \"resetClock\");\n        actions.reset();\n      },\n    }),\n    [actions]\n  );\n\n  const [useBuiltin, setUseBuiltin] = useState(false);\n  const toggleUseBuiltin = () => {\n    if (useBuiltin) {\n      setUseBuiltin(false);\n      actions.useBuiltin(false);\n    } else {\n      setUseBuiltin(true);\n      actions.useBuiltin(true, hdl);\n    }\n    pinResetDispatcher.reset();\n  };\n\n  const selectors = (\n    <>\n      <fieldset role=\"group\">\n        <select\n          value={state.controls.project}\n          onChange={({ target: { value } }) => {\n            setProject(value as keyof typeof CHIP_PROJECTS);\n          }}\n          data-testid=\"project-picker\"\n        >\n          {PROJECT_NAMES.map(([number, label]) => (\n            <option key={number} value={number}>\n              {label}\n            </option>\n          ))}\n        </select>\n        <select\n          value={state.controls.chipName}\n          onChange={({ target: { value } }) => {\n            setChip(value);\n          }}\n          data-testid=\"chip-picker\"\n        >\n          {state.controls.chips.map((chip) => (\n            <option\n              key={chip}\n              value={chip}\n              style={isBuiltinOnly(chip) ? { color: \"rgb(170, 170, 170)\" } : {}}\n            >\n              {`${chip} ${isBuiltinOnly(chip) ? \"(given)\" : \"\"}`}\n            </option>\n          ))}\n        </select>\n        <button className=\"flex-0\" onClick={saveChip} disabled={useBuiltin}>\n          <Trans>Save</Trans>\n        </button>\n      </fieldset>\n    </>\n  );\n  const hdlPanel = (\n    <Panel\n      className=\"_hdl_panel\"\n      header={\n        <>\n          <div tabIndex={0}>HDL</div>\n          <fieldset>\n            {state.controls.hasBuiltin && !state.controls.builtinOnly && (\n              <label>\n                <input\n                  type=\"checkbox\"\n                  role=\"switch\"\n                  checked={useBuiltin}\n                  onChange={toggleUseBuiltin}\n                />\n                <Trans>Builtin</Trans>\n              </label>\n            )}\n          </fieldset>\n          {selectors}\n        </>\n      }\n    >\n      <Editor\n        className=\"flex-1\"\n        value={hdl}\n        onChange={(source) => {\n          setHdl(source);\n          compile.current(\n            useBuiltin || state.controls.builtinOnly ? {} : { hdl: source }\n          );\n        }}\n        grammar={HDL.parser}\n        language={\"hdl\"}\n        disabled={useBuiltin || state.controls.builtinOnly}\n      />\n    </Panel>\n  );\n\n  const [inputValid, setInputValid] = useState(true);\n\n  const chipButtons = (\n    <fieldset role=\"group\">\n      <button\n        onClick={doEval}\n        onKeyDown={doEval}\n        disabled={!state.sim.pending || !inputValid}\n      >\n        <Trans>Eval</Trans>\n      </button>\n      <button\n        onClick={clockActions.toggle}\n        style={{ maxWidth: \"initial\" }}\n        disabled={!state.sim.clocked}\n      >\n        <Trans>Clock</Trans>:{\"\\u00a0\"}\n        <Clockface />\n      </button>\n      <button\n        onClick={clockActions.reset}\n        style={{ maxWidth: \"initial\" }}\n        disabled={!state.sim.clocked}\n      >\n        <Trans>Reset</Trans>\n      </button>\n    </fieldset>\n  );\n\n  const visualizations: [string, ReactNode][] = makeVisualizationsWithId(\n    {\n      parts: state.sim.chip,\n    },\n    () => {\n      dispatch.current({ action: \"updateChip\" });\n    }\n  );\n\n  const pinResetDispatcher = new PinResetDispatcher();\n\n  const pinsPanel = (\n    <Panel\n      className=\"_parts_panel\"\n      header={\n        <>\n          <div>\n            <Trans>Chip</Trans> {state.controls.chipName}\n          </div>\n          {chipButtons}\n        </>\n      }\n    >\n      {state.sim.invalid ? (\n        <Trans>Syntax errors in the HDL code</Trans>\n      ) : (\n        <>\n          <PinContext.Provider value={pinResetDispatcher}>\n            <FullPinout\n              sim={state.sim}\n              toggle={actions.toggle}\n              setInputValid={setInputValid}\n              hideInternal={state.controls.builtinOnly || useBuiltin}\n            />\n          </PinContext.Provider>\n          {visualizations.length > 0 && (\n            <Accordian summary={<Trans>Visualization</Trans>} open={true}>\n              <main>{visualizations.map(([_, v]) => v)}</main>\n            </Accordian>\n          )}\n        </>\n      )}\n    </Panel>\n  );\n\n  const [selectedTestTab, doSetSelectedTestTab] = useState<\n    \"tst\" | \"cmp\" | \"out\"\n  >(\"tst\");\n\n  const setSelectedTestTab = useCallback(\n    (tab: typeof selectedTestTab) => {\n      doSetSelectedTestTab(tab);\n      tracking.trackEvent(\"tab\", \"change\", tab);\n    },\n    [tracking]\n  );\n\n  const testPanel = (\n    <Panel\n      className=\"_test_panel\"\n      header={\n        <>\n          <div className=\"flex-1\">\n            <Trans>Test</Trans>\n          </div>\n          <div className=\"flex-2\">\n            {runner.current && <Runbar runner={runner.current} />}\n          </div>\n          <div>\n            <button onClick={loadTest}>\n              <Icon name=\"upload_file\" />{\" \"}\n            </button>\n          </div>\n        </>\n      }\n    >\n      <div role=\"tablist\" style={{ \"--tab-count\": \"3\" } as CSSProperties}>\n        <div\n          role=\"tab\"\n          id=\"test-tab-tst\"\n          aria-controls=\"test-tabpanel-tst\"\n          aria-selected={selectedTestTab === \"tst\"}\n        >\n          <label>\n            <input\n              type=\"radio\"\n              name=\"test-tabs\"\n              aria-controls=\"test-tabpanel-tst\"\n              value=\"tst\"\n              checked={selectedTestTab === \"tst\"}\n              onChange={() => setSelectedTestTab(\"tst\")}\n            />\n            Test Script\n          </label>\n        </div>\n        <div\n          role=\"tabpanel\"\n          aria-labelledby=\"test-tab-tst\"\n          id=\"test-tabpanel-tst\"\n        >\n          <Editor\n            value={tst}\n            onChange={setTst}\n            grammar={TST.parser}\n            language={\"tst\"}\n            highlight={state.controls.span}\n            disabled={state.controls.builtinOnly}\n          />\n        </div>\n        <div\n          role=\"tab\"\n          id=\"test-tab-cmp\"\n          aria-controls=\"test-tablpanel-cmp\"\n          aria-selected={selectedTestTab === \"cmp\"}\n        >\n          <label>\n            <input\n              type=\"radio\"\n              name=\"test-tabs\"\n              aria-controls=\"test-tabpanel-cmp\"\n              value=\"cmp\"\n              checked={selectedTestTab === \"cmp\"}\n              onChange={() => setSelectedTestTab(\"cmp\")}\n            />\n            Compare File\n          </label>\n        </div>\n        <div\n          role=\"tabpanel\"\n          aria-labelledby=\"test-tab-cmp\"\n          id=\"test-tabpanel-cmp\"\n          style={{ position: \"relative\" }}\n        >\n          <Editor\n            value={cmp}\n            onChange={setCmp}\n            grammar={CMP.parser}\n            language={\"cmp\"}\n            disabled={state.controls.builtinOnly}\n          />\n        </div>\n        <div\n          role=\"tab\"\n          id=\"test-tab-out\"\n          aria-controls=\"test-tabpanel-out\"\n          aria-selected={selectedTestTab === \"out\"}\n        >\n          <label>\n            <input\n              type=\"radio\"\n              name=\"test-tabs\"\n              aria-controls=\"test-tabpanel-out\"\n              value=\"out\"\n              checked={selectedTestTab === \"out\"}\n              onChange={() => setSelectedTestTab(\"out\")}\n            />\n            Output File\n          </label>\n        </div>\n        <div\n          role=\"tabpanel\"\n          id=\"test-tabpanel-out\"\n          aria-labelledby=\"test-tab-out\"\n        >\n          <DiffTable cmp={cmp} out={out} />\n        </div>\n      </div>\n    </Panel>\n  );\n\n  return (\n    <div className=\"ChipPage grid\">\n      {hdlPanel}\n      {pinsPanel}\n      {testPanel}\n    </div>\n  );\n};\n\nexport default Chip;\n"],"names":["ALUComponent","A","op","D","out","flag","_jsxs","children","_jsx","width","height","xmlns","x","y","fill","points","stroke","xmlSpace","textAnchor","fontFamily","fontSize","strokeWidth","id","COMMANDS_ALU","makeVisualization","chip","updateAction","ALU","in","busVoltage","voltage","HIGH","Flags","Register","RegisterComponent","name","bits","PC","Keyboard","KeyboardComponent","keyboard","update","Screen","ScreenComponent","memory","RAM","MemoryComponent","format","ROM32K","highlight","address","RAM8","CPU","decode","state","am","vis","parts","map","filter","v","undefined","length","ChipDisplayInfo","chipName","unsigned","Map","BUILTIN_REGISTRY","getBuiltinChip","isOk","pins","Array","from","Ok","ins","entries","concat","outs","pin","this","signBehaviors","set","includes","get","UNSIGNED_PINS","PinContext","createContext","reducePin","range","i","reverse","reducePins","FullPinout","props","sim","inPins","outPins","internalPins","displayInfo","className","PinoutBlock","header","toggle","setInputValid","disabled","pending","enableEdit","hideInternal","colSpan","immPin","Pin","signed","isSigned","internal","useState","isBin","setIsBin","inputValid","decimal","setDecimal","resetDispatcher","useContext","PinResetDispatcher","registerCallback","setInputValidity","valid","updatePins","n","useEffect","value","limit","toString","style","display","flexDirection","alignItems","role","backgroundColor","onClick","onChange","e","positive","replace","numeric","isNaN","parseInt","newValue","Math","pow","handleDecimalChange","target","maxWidth","margin","callback","callbacks","push","PROJECT_NAMES","getChips","project","CHIP_ORDER","BUILTIN_CHIP_PROJECTS","CHIP_PROJECTS","makeHdl","isBuiltinOnly","Object","values","flat","getBuiltinCode","template","ChipProjects","BUILTIN_CHIPS","CHIPS","getTemplate","bodyComment","builtinLine","reduceChip","invalid","clocked","clock","Clock","makeChipStore","fs","setStatus","storage","dispatch","dropdowns","chips","findDropdowns","Low","test","ChipTest","usingBuiltin","builtinOnly","reducers","setFiles","hdl","files","tst","cmp","updateChip","payload","controls","error","setProject","setChip","hasBuiltin","REGISTRY","testRunning","runningTest","testFinished","passed","cmpResult","CMP","outResult","isErr","cmpData","outData","min","cmpI","outI","j","max","cmpJ","outJ","trim","match","compare","updateTestStep","log","currentStep","span","done","end","start","actions","p","current","action","useBuiltin","loadChip","reset","updateFiles","compileChip","compileTest","remove","maybeParsed","HDL","Err","buildChip","maybeChip","replaceChip","nextChip","nextPin","eval","with","fsName","ext","Promise","all","readFile","catch","saveChip","prj","path","writeFile","isLow","frame","doUseBuiltin","oldHdl","builtinName","initialize","file","TST","setFileSystem","runTest","pushd","run","popd","tick","stepTest","assert","chipId","step","initialState","Chip","BaseContext","AppContext","filePicker","tracking","useRef","useMemo","useImmerReducer","dispatcher","useChipPageStore","useStateInitializer","setHdl","setTst","setCmp","trackPage","trackEvent","useCallback","pinResetDispatcher","doEval","compile","loadTest","select","console","runner","Timer","stop","clockActions","setUseBuiltin","selectors","number","label","color","hdlPanel","tabIndex","type","checked","source","grammar","language","chipButtons","onKeyDown","visualizations","part","makeVisualizationsWithId","pinsPanel","Provider","summary","open","selectedTestTab","doSetSelectedTestTab","setSelectedTestTab","tab","testPanel","position"],"sourceRoot":""}