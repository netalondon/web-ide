{"version":3,"file":"static/js/2.9ab16c5b.chunk.js","mappings":"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","sources":["../../simulator/src/projects/runner.ts","pages/home.tsx"],"sourcesContent":["import { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport {\n  isOk,\n  Ok,\n  Err,\n  isErr,\n  Result,\n} from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { Assignments, Assignment } from \"@nand2tetris/projects/index.js\";\nimport type { Runner, RunResult } from \"@nand2tetris/runner/types.js\";\nimport { HDL, HdlParse } from \"../languages/hdl.js\";\nimport { Tst, TST } from \"../languages/tst.js\";\nimport { build as buildChip } from \"../chip/builder.js\";\nimport { ChipTest } from \"../tst.js\";\nimport { ParseError } from \"../languages/base.js\";\nimport { Chip } from \"../chip/chip.js\";\n\nexport interface AssignmentFiles extends Assignment {\n  hdl: string;\n  tst: string;\n  cmp: string;\n}\n\nexport interface AssignmentParse extends AssignmentFiles {\n  maybeParsedHDL: Result<HdlParse, ParseError>;\n  maybeParsedTST: Result<Tst, ParseError>;\n}\n\nexport interface AssignmentBuild extends AssignmentParse {\n  maybeChip: Result<Chip, Error>;\n  maybeTest: Result<ChipTest, Error>;\n}\n\nexport interface AssignmentRun extends AssignmentBuild {\n  pass: boolean;\n  out: string;\n  shadow?: RunResult;\n}\n\nexport const hasTest = ({\n  name,\n  ext,\n}: {\n  name: string;\n  ext: string;\n}): boolean =>\n  Assignments[name as keyof typeof Assignments] !== undefined &&\n  [\".hdl\", \".tst\"].includes(ext);\n\n/** Try parsing the loaded files. */\nexport const maybeParse = (file: AssignmentFiles): AssignmentParse => {\n  const maybeParsedHDL = HDL.parse(file.hdl);\n  const maybeParsedTST = TST.parse(file.tst);\n  return { ...file, maybeParsedHDL, maybeParsedTST };\n};\n\n/** After parsing the assignment, compile the Chip and Tst. */\nexport const maybeBuild =\n  (fs: FileSystem) =>\n  async (file: AssignmentParse): Promise<AssignmentBuild> => {\n    const maybeChip = isOk(file.maybeParsedHDL)\n      ? await buildChip(Ok(file.maybeParsedHDL), fs)\n      : Err(new Error(\"HDL Was not parsed\"));\n    const maybeTest = isOk(file.maybeParsedTST)\n      ? Ok(ChipTest.from(Ok(file.maybeParsedTST)))\n      : Err(new Error(\"TST Was not parsed\"));\n    return { ...file, maybeChip, maybeTest };\n  };\n\n/** If the assignment parsed, run it! */\nexport const tryRun =\n  (fs: FileSystem) =>\n  async (assignment: AssignmentBuild): Promise<AssignmentRun> => {\n    if (isErr(assignment.maybeChip)) {\n      return {\n        ...assignment,\n        pass: false,\n        out: Err(assignment.maybeChip).message,\n      };\n    }\n    if (isErr(assignment.maybeTest)) {\n      return {\n        ...assignment,\n        pass: false,\n        out: Err(assignment.maybeTest).message,\n      };\n    }\n    const test = Ok(assignment.maybeTest)\n      .with(Ok(assignment.maybeChip))\n      .setFileSystem(fs);\n    await test.run();\n    const out = test.log();\n    const pass = out.trim() === assignment.cmp.trim();\n    return { ...assignment, out, pass };\n  };\n\n/** Parse & execute a Nand2tetris assignment, possibly also including the Java output in shadow mode. */\nexport const runner = (fs: FileSystem, ideRunner?: Runner) => {\n  const tryRunWithFs = tryRun(fs);\n  const maybeBuildWithFs = maybeBuild(fs);\n  return async (assignment: AssignmentFiles): Promise<AssignmentRun> => {\n    const jsRunner = async () =>\n      tryRunWithFs(await maybeBuildWithFs(await maybeParse(assignment)));\n    const javaRunner = async () => ideRunner?.hdl(assignment);\n\n    const [jsRun, shadow] = await Promise.all([jsRunner(), javaRunner()]);\n    return { ...jsRun, shadow };\n  };\n};\n\n/** Run all tests for a given Nand2Tetris project. */\nexport async function runTests(\n  files: Array<Assignment>,\n  loadAssignment: (file: Assignment) => Promise<AssignmentFiles>,\n  fs: FileSystem,\n  ideRunner?: Runner\n): Promise<AssignmentRun[]> {\n  const run = runner(fs, ideRunner);\n  return Promise.all(\n    files.map(loadAssignment).map(async (assignment) => run(await assignment))\n  );\n}\n","import { useBaseContext } from \"@nand2tetris/components/stores/base.context\";\nimport { DiffTable } from \"@nand2tetris/components/difftable\";\nimport { Assignments, ParsedPath } from \"@nand2tetris/projects/index.js\";\nimport { runTests } from \"@nand2tetris/simulator/projects/runner.js\";\nimport { Trans } from \"@lingui/macro\";\nimport { ChangeEventHandler, useCallback, useState } from \"react\";\n// import { parse, ParsedPath } from \"node:path\";\n\nfunction hasTest({ name, ext }: { name: string; ext: string }) {\n  return (\n    Assignments[name as keyof typeof Assignments] !== undefined &&\n    ext === \".hdl\"\n  );\n}\n\nconst TestResult = (props: {\n  name: string;\n  pass: boolean;\n  hdl: string;\n  tst: string;\n  cmp: string;\n  out: string;\n}) => (\n  <details>\n    <summary>\n      {props.name} {props.pass ? <Trans>Passed</Trans> : <Trans>Failed</Trans>}\n    </summary>\n    <div className=\"flex row\">\n      <pre>\n        <code>{props.hdl}</code>\n      </pre>\n      <pre>\n        <code>{props.tst}</code>\n      </pre>\n    </div>\n    <DiffTable cmp={props.cmp} out={props.out} />\n  </details>\n);\n\nasync function loadAssignment(file: ParsedPath & { file?: File }) {\n  const assignment = Assignments[file.name as keyof typeof Assignments];\n  const hdl = (await file.file?.text()) ?? \"\";\n  const tst = assignment[\n    `${file.name}.tst` as keyof typeof assignment\n  ] as string;\n  const cmp = assignment[\n    `${file.name}.cmp` as keyof typeof assignment\n  ] as string;\n  return { ...file, hdl, tst, cmp };\n}\n\ndeclare module \"react\" {\n  // eslint-disable-next-line\n  interface HTMLAttributes<T> {\n    // extends React's HTMLAttributes\n    directory?: string;\n    webkitdirectory?: string;\n  }\n}\n\nconst Home = () => {\n  const [tests, setTests] = useState(\n    [] as Array<Parameters<typeof TestResult>[0]>\n  );\n  const { fs } = useBaseContext();\n\n  const onChange = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    async ({ target }) => {\n      const files = await Promise.all(\n        [...(target.files ?? [])]\n          .filter((file) => file.name.endsWith(\".hdl\"))\n          .map((file) => {\n            const { name, base, ext } =\n              file.name.match(/^(?<base>(?<name>.*)(?<ext>\\.[^.]*))?$/)\n                ?.groups ?? {};\n\n            const root = \"/\";\n            const dir = root + file.webkitRelativePath?.replace(base, \"\") ?? \"\";\n\n            return { name, base, ext, dir, root, file };\n          })\n          .filter(hasTest)\n          .map(async (file) => {\n            const hdl = await file.file.text();\n            return { ...file, hdl };\n          })\n      );\n\n      const tests = await runTests(files, loadAssignment, fs);\n\n      fs.pushd(\"/samples\");\n      setTests(tests);\n      fs.popd();\n    },\n    [setTests, fs]\n  );\n\n  return (\n    <>\n      <h1>NAND2Tetris Web IDE</h1>\n      <form>\n        <fieldset>\n          <legend>Files for grading:</legend>\n          <input\n            type=\"file\"\n            multiple\n            directory=\"\"\n            webkitdirectory=\"\"\n            onChange={onChange}\n          />\n        </fieldset>\n      </form>\n      <figure>\n        {tests.length > 0 ? (\n          tests.map((t, i) => <TestResult key={t.name} {...t} />)\n        ) : (\n          <></>\n        )}\n      </figure>\n    </>\n  );\n};\n\nexport default Home;\n"],"names":["maybeParse","file","maybeParsedHDL","HDL","hdl","maybeParsedTST","TST","tst","runner","fs","ideRunner","tryRunWithFs","tryRun","assignment","isErr","maybeChip","pass","out","Err","message","maybeTest","test","Ok","with","setFileSystem","run","log","trim","cmp","maybeBuildWithFs","maybeBuild","isOk","buildChip","Error","ChipTest","jsRunner","javaRunner","Promise","all","jsRun","shadow","runTests","files","loadAssignment","map","hasTest","name","ext","undefined","Assignments","TestResult","props","className","text","Home","useState","tests","setTests","useBaseContext","onChange","useCallback","target","filter","endsWith","match","groups","base","dir","webkitRelativePath","replace","root","pushd","popd","type","multiple","directory","webkitdirectory","length","t","i"],"sourceRoot":""}