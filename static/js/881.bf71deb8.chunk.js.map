{"version":3,"file":"static/js/881.bf71deb8.chunk.js","mappings":"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","sources":["shell/editor.tsx","shell/panel.tsx","../../components/src/react.ts","../../components/src/runbar.tsx","../../components/src/timer.tsx","../../simulator/src/chip/chip.tsx","../../simulator/src/chip/clock.ts","../../simulator/src/cpu/alu.ts","../../simulator/src/cpu/memory.ts","../../simulator/src/fs.ts","../../simulator/src/languages/grammars/asm.ohm.js","../../simulator/src/languages/asm.ts","../../simulator/src/languages/grammars/base.ohm.js","../../simulator/src/languages/base.ts","../../simulator/src/loader.ts","../../simulator/src/timer.ts","../../simulator/src/util/asm.ts","../../simulator/src/util/twos.ts"],"sourcesContent":["import { debounce } from \"@davidsouther/jiffies/lib/esm/debounce\";\nimport { Trans } from \"@lingui/macro\";\nimport MonacoEditor, { OnMount, useMonaco } from \"@monaco-editor/react\";\nimport type * as monacoT from \"monaco-editor/esm/vs/editor/editor.api\";\nimport ohm from \"ohm-js\";\nimport {\n  CSSProperties,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { AppContext } from \"../App.context\";\n\nimport {\n  Span,\n  UNKNOWN_PARSE_ERROR,\n} from \"@nand2tetris/simulator/languages/base.js\";\n\nimport \"./editor.scss\";\n\nexport const ErrorPanel = ({ error }: { error?: ohm.MatchResult }) => {\n  return error?.failed() ? (\n    <details className=\"ErrorPanel\" open>\n      <summary role=\"button\" className=\"secondary\">\n        <Trans>Parse Error</Trans>\n      </summary>\n      <pre>\n        <code>\n          {error?.message ?? error?.shortMessage ?? UNKNOWN_PARSE_ERROR}\n        </code>\n      </pre>\n    </details>\n  ) : (\n    <></>\n  );\n};\n\nconst Textarea = ({\n  value,\n  onChange,\n  language,\n  disabled = false,\n}: {\n  value: string;\n  onChange: (value: string) => void;\n  language: string;\n  disabled?: boolean;\n}) => {\n  const [text, setText] = useState(value);\n  return (\n    <textarea\n      data-testid={`editor-${language}`}\n      disabled={disabled}\n      value={text}\n      onChange={(e) => {\n        const value = e.target?.value;\n        setText(value);\n        onChange(value);\n      }}\n    />\n  );\n};\n\nconst MONACO_LIGHT_THEME = \"vs\";\nconst MONACO_DARK_THEME = \"vs-dark\";\n\nconst makeHighlight = (\n  monaco: typeof monacoT | null,\n  editor: monacoT.editor.IStandaloneCodeEditor | undefined,\n  highlight: Span | undefined,\n  decorations: string[]\n): string[] => {\n  if (!(editor && highlight)) return decorations;\n  const model = editor.getModel();\n  if (!model) return decorations;\n  const start = model.getPositionAt(highlight.start);\n  const end = model.getPositionAt(highlight.end);\n  const range = monaco?.Range.fromPositions(start, end);\n  const nextDecoration: monacoT.editor.IModelDeltaDecoration[] = [];\n  if (range) {\n    nextDecoration.push({\n      range,\n      options: { inlineClassName: \"highlight\" },\n    });\n    editor.revealRangeInCenter(range);\n  }\n  return editor.deltaDecorations(decorations, nextDecoration);\n};\n\nconst Monaco = ({\n  value,\n  onChange,\n  onCursorPositionChange,\n  language,\n  error,\n  disabled = false,\n  highlight: currentHighlight,\n  dynamicHeight = false,\n  lineNumberTransform,\n}: {\n  value: string;\n  onChange: (value: string) => void;\n  onCursorPositionChange?: (index: number) => void;\n  language: string;\n  error?: ohm.MatchResult | undefined;\n  disabled?: boolean;\n  highlight?: Span;\n  dynamicHeight?: boolean;\n  lineNumberTransform?: (n: number) => string;\n}) => {\n  const { theme } = useContext(AppContext);\n  const monaco = useMonaco();\n  const [height, setHeight] = useState(0);\n\n  const editor = useRef<monacoT.editor.IStandaloneCodeEditor>();\n  const decorations = useRef<string[]>([]);\n  const highlight = useRef<Span | undefined>(undefined);\n\n  const codeTheme = useCallback(() => {\n    const isDark =\n      theme === \"system\"\n        ? window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n        : theme === \"dark\";\n    return isDark ? MONACO_DARK_THEME : MONACO_LIGHT_THEME;\n  }, [theme]);\n\n  const doHighlight = useCallback(() => {\n    decorations.current = makeHighlight(\n      monaco,\n      editor.current,\n      // I'm not sure why this makes things work, but it is load bearing.\n      // Removing the empty span will cause the initial first-statement\n      // highlight in the test view to not show. Setting it to [0, 1] will\n      // cause a 1-character highlight in the editor view, so don't do that\n      // either.\n      highlight.current ?? { start: 0, end: 0 },\n      decorations.current\n    );\n  }, [decorations, monaco, editor, highlight]);\n\n  const calculateHeight = () => {\n    if (dynamicHeight) {\n      const contentHeight = editor.current?.getContentHeight();\n      if (contentHeight) {\n        setHeight(contentHeight);\n      }\n    }\n  };\n\n  // Mark and center highlighted spans\n  useEffect(() => {\n    highlight.current = currentHighlight;\n    doHighlight();\n  }, [currentHighlight]);\n\n  // Set options when mounting\n  const onMount: OnMount = useCallback(\n    (ed) => {\n      editor.current = ed;\n      editor.current?.updateOptions({\n        fontFamily: `\"JetBrains Mono\", source-code-pro, Menlo, Monaco,\n      Consolas, \"Roboto Mono\", \"Ubuntu Monospace\", \"Noto Mono\", \"Oxygen Mono\",\n      \"Liberation Mono\", monospace, \"Apple Color Emoji\", \"Segoe UI Emoji\",\n      \"Segoe UI Symbol\", \"Noto Color Emoji\"`,\n        fontSize: 16,\n        minimap: {\n          enabled: false,\n        },\n        theme: codeTheme(),\n        scrollBeyondLastLine: false,\n        readOnly: disabled,\n        lineNumbers: lineNumberTransform ?? \"on\",\n        folding: false,\n      });\n      doHighlight();\n      calculateHeight();\n      editor.current?.onDidChangeCursorPosition((e) => {\n        const index = editor.current?.getModel()?.getOffsetAt(e.position);\n        if (index !== undefined) {\n          onCursorPositionChange?.(index);\n        }\n      });\n    },\n    [codeTheme]\n  );\n\n  useEffect(() => {\n    if (editor.current === undefined) return;\n    editor.current.updateOptions({ lineNumbers: lineNumberTransform ?? \"on\" });\n  }, [lineNumberTransform]);\n\n  // Set themes\n  useEffect(() => {\n    if (editor.current === undefined) return;\n    editor.current.updateOptions({ theme: codeTheme() });\n  }, [editor, codeTheme]);\n\n  // Prevent editing disabled editors\n  useEffect(() => {\n    if (editor.current === undefined) return;\n    editor.current.updateOptions({ readOnly: disabled });\n  }, [editor, disabled]);\n\n  // Add error markers on parse failure\n  useEffect(() => {\n    if (editor.current === undefined) return;\n    if (monaco === null) return;\n    const model = editor.current.getModel();\n    if (model === null) return;\n    if (error === undefined || error.succeeded()) {\n      monaco.editor.setModelMarkers(model, language, []);\n      return;\n    }\n    // Line 7, col 5:\n    const { line, column, message } =\n      /Line (?<line>\\d+), col (?<column>\\d+): (?<message>.*)/.exec(\n        error.shortMessage ?? \"\"\n      )?.groups ?? { line: 1, column: 1, message: \"could not parse error\" };\n    const startLineNumber = Number(line);\n    const endLineNumber = startLineNumber;\n    const startColumn = Number(column);\n    const restOfLine = model\n      .getLineContent(startLineNumber)\n      .substring(startColumn - 1);\n    let endColumn =\n      startColumn + (restOfLine.match(/([^\\s]+)/)?.[0].length ?? 1);\n    if (endColumn <= startColumn) {\n      endColumn = startColumn + 1;\n    }\n\n    monaco.editor.setModelMarkers(model, language, [\n      {\n        message,\n        startColumn,\n        startLineNumber,\n        endColumn,\n        endLineNumber,\n        severity: 8, // monacoT.MarkerSeverity.Error,\n      },\n    ]);\n  }, [error, editor, monaco, language]);\n\n  const onValueChange = (v = \"\") => {\n    calculateHeight();\n    onChange(v);\n  };\n\n  return (\n    <>\n      <MonacoEditor\n        value={value}\n        onChange={onValueChange}\n        language={language}\n        onMount={onMount}\n        height={dynamicHeight ? height : undefined}\n      />\n    </>\n  );\n};\n\nexport const Editor = ({\n  className = \"\",\n  style = {},\n  disabled = false,\n  value,\n  onChange,\n  onCursorPositionChange,\n  grammar,\n  language,\n  highlight,\n  dynamicHeight = false,\n  lineNumberTransform,\n}: {\n  className?: string;\n  style?: CSSProperties;\n  disabled?: boolean;\n  value: string;\n  onChange: (source: string) => void;\n  onCursorPositionChange?: (index: number) => void;\n  grammar?: ohm.Grammar;\n  language: string;\n  highlight?: Span;\n  dynamicHeight?: boolean;\n  lineNumberTransform?: (n: number) => string;\n}) => {\n  const [error, setError] = useState<ohm.MatchResult>();\n  const { monaco } = useContext(AppContext);\n\n  const parse = useCallback(\n    (text = \"\") => {\n      if (grammar) {\n        const parsed = grammar.match(text);\n        setError(parsed.failed() ? parsed : undefined);\n      }\n    },\n    [setError, grammar]\n  );\n\n  useEffect(() => parse(value), [parse, value]);\n  const doParse = useMemo(() => debounce(parse, 500), [parse]);\n\n  const onChangeCB = useCallback(\n    (text = \"\") => {\n      onChange(text);\n      doParse(text);\n    },\n    [doParse, onChange]\n  );\n\n  return (\n    <div\n      className={`Editor ${dynamicHeight ? \"dynamic-height\" : \"\"} ${className}`}\n      style={style}\n    >\n      {monaco.canUse && monaco.wants ? (\n        <Monaco\n          value={value}\n          onChange={onChangeCB}\n          onCursorPositionChange={onCursorPositionChange}\n          language={language}\n          error={error}\n          disabled={disabled}\n          highlight={highlight}\n          dynamicHeight={dynamicHeight}\n          lineNumberTransform={lineNumberTransform}\n        />\n      ) : (\n        <>\n          <Textarea\n            value={value}\n            onChange={onChangeCB}\n            language={language}\n            disabled={disabled}\n          />\n          <ErrorPanel error={error} />\n        </>\n      )}\n    </div>\n  );\n};\n","import { CSSProperties, ReactNode } from \"react\";\n\nexport const Panel = (props: {\n  children: ReactNode;\n  header?: ReactNode;\n  footer?: ReactNode;\n  className?: string;\n  style?: CSSProperties;\n}) => {\n  return (\n    <article className={[\"panel\", props.className ?? \"\"].join(\" \")}>\n      {props.header && <header>{props.header}</header>}\n      <main>{props.children}</main>\n      {props.footer && <footer>{props.footer}</footer>}\n    </article>\n  );\n};\n\nexport const Accordian = (props: {\n  children: ReactNode;\n  summary: ReactNode;\n  className?: string;\n  style?: CSSProperties;\n  open?: boolean;\n}) => {\n  return (\n    <details\n      className={props.className ?? \"\"}\n      open={props.open}\n      style={props.style}\n    >\n      <summary>\n        <div className=\"flex row align-baseline\">{props.summary}</div>\n      </summary>\n      {props.children}\n    </details>\n  );\n};\n","import produce from \"immer\";\nimport { Dispatch, useEffect, useReducer, useState } from \"react\";\n\nexport function useImmerReducer<\n  T,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Reducers extends Record<string, (state: T, action?: any) => T | void>\n>(reducers: Reducers, initialState: T) {\n  return useReducer(\n    (\n      state: T,\n      command: {\n        action: keyof Reducers;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        payload?: any;\n      }\n    ): T =>\n      produce(state, (draft: T) => {\n        reducers[command.action](draft, command.payload);\n      }),\n    initialState\n  );\n}\n\nexport function useStateInitializer<T>(init: T): [T, Dispatch<T>] {\n  const [state, setState] = useState<T>(init);\n  useEffect(() => {\n    setState(init);\n  }, [init]);\n  return [state, setState];\n}\n","import { Timer } from \"@nand2tetris/simulator/timer.js\";\nimport { ChangeEvent, ReactNode, useEffect, useState } from \"react\";\nimport { useTimer } from \"./timer.js\";\n\nexport const Runbar = (props: {\n  runner: Timer;\n  prefix?: ReactNode;\n  children?: ReactNode;\n  overrideTooltips?: (string | undefined)[];\n  onSpeedChange?: (speed: number) => void;\n}) => {\n  const runner = useTimer(props.runner);\n  const [speedValue, setSpeed] = useState(0);\n\n  const speedValues: Record<number, [number, number]> = {\n    0: [1000, 1],\n    1: [500, 1],\n    2: [16, 1],\n    3: [16, 16666],\n    4: [16, 16666 * 30],\n  };\n\n  useEffect(() => {\n    updateSpeed();\n  }, [speedValue]);\n\n  const updateSpeed = () => {\n    const [speed, steps] = speedValues[speedValue];\n    runner.dispatch({ action: \"setSpeed\", payload: speed });\n    runner.dispatch({ action: \"setSteps\", payload: steps });\n  };\n\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setSpeed(Number(e.target.value));\n    props.onSpeedChange?.(Number(e.target.value));\n  };\n\n  return (\n    <fieldset role=\"group\">\n      {props.prefix}\n      <button\n        className=\"flex-0\"\n        onClick={() => runner.actions.frame()}\n        data-tooltip={props.overrideTooltips?.[0] ?? `Step`}\n        data-placement=\"bottom\"\n      >\n        {/* <Icon name=\"play_arrow\" /> */}\n        ➡️\n      </button>\n      <button\n        className=\"flex-0\"\n        onClick={() =>\n          runner.state.running ? runner.actions.stop() : runner.actions.start()\n        }\n        data-tooltip={\n          runner.state.running\n            ? props.overrideTooltips?.[2] ?? `Pause`\n            : props.overrideTooltips?.[1] ?? `Run`\n        }\n        data-placement=\"bottom\"\n      >\n        {/* <Icon name={runner.state.running ? \"pause\" : \"fast_forward\"} /> */}\n        {runner.state.running ? \"⏸\" : \"️⏩\"}\n      </button>\n      <button\n        className=\"flex-0\"\n        onClick={() => runner.actions.reset()}\n        data-tooltip={props.overrideTooltips?.[3] ?? `Reset`}\n        data-placement=\"bottom\"\n      >\n        {/* <Icon name=\"fast_rewind\" /> */}⏮\n      </button>\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          fontSize: 16,\n          fontWeight: \"normal\",\n        }}\n      >\n        <span style={{ padding: \"0.2rem\" }}>Slow</span>\n        <input\n          type=\"range\"\n          min={0}\n          max={4}\n          step={1}\n          value={speedValue}\n          disabled={runner.state.running}\n          onChange={onChange}\n          style={{ width: \"150px\", padding: \"0.2rem\" }}\n          data-tooltip={\"Execution speed\"}\n          data-placement={\"bottom\"}\n        />\n        <span style={{ padding: \"0.2rem\" }}>Fast</span>\n      </div>\n      {props.children}\n    </fieldset>\n  );\n};\n","import { Timer } from \"@nand2tetris/simulator/timer.js\";\nimport { useImmerReducer } from \"./react.js\";\n\nexport interface TimerStoreState {\n  steps: number;\n  speed: number;\n  running: boolean;\n}\n\nimport { Dispatch, MutableRefObject, useMemo, useRef } from \"react\";\nexport type TimerStoreDispatch = Dispatch<{\n  action: keyof ReturnType<typeof makeTimerStore>[\"reducers\"];\n  payload?: unknown;\n}>;\n\nconst makeTimerStore = (\n  timer: Timer,\n  dispatch: MutableRefObject<TimerStoreDispatch>\n) => {\n  const initialState: TimerStoreState = {\n    running: timer.running,\n    speed: timer.speed,\n    steps: timer.steps,\n  };\n\n  const finishFrame = timer.finishFrame.bind(timer);\n  timer.finishFrame = function () {\n    finishFrame();\n    dispatch.current({ action: \"update\" });\n  };\n\n  const reducers = {\n    update(state: TimerStoreState) {\n      state.running = timer.running;\n      state.speed = timer.speed;\n      state.steps = timer.steps;\n    },\n    setSteps(state: TimerStoreState, steps: number) {\n      state.steps = steps;\n      timer.steps = steps;\n    },\n    setSpeed(state: TimerStoreState, speed: number) {\n      state.speed = speed;\n      timer.speed = speed;\n    },\n  };\n\n  const actions = {\n    frame() {\n      timer.frame();\n    },\n    start() {\n      timer.start();\n      dispatch.current({ action: \"update\" });\n    },\n    stop() {\n      timer.stop();\n      dispatch.current({ action: \"update\" });\n    },\n    reset() {\n      timer.reset();\n      dispatch.current({ action: \"update\" });\n    },\n  };\n\n  return { initialState, reducers, actions };\n};\n\nexport function useTimer(timer: Timer) {\n  const dispatch = useRef<TimerStoreDispatch>(() => undefined);\n\n  const { initialState, reducers, actions } = useMemo(\n    () => makeTimerStore(timer, dispatch),\n    [timer, dispatch]\n  );\n\n  const [state, dispatcher] = useImmerReducer(reducers, initialState);\n\n  dispatch.current = dispatcher;\n\n  return { state, dispatch: dispatch.current, actions };\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { assert, assertExists } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport { range } from \"@davidsouther/jiffies/lib/esm/range.js\";\nimport { bin } from \"../util/twos.js\";\nimport { Clock } from \"./clock.js\";\n\nexport const HIGH = 1;\nexport const LOW = 0;\nexport type Voltage = typeof HIGH | typeof LOW;\n\nexport interface Pin {\n  readonly name: string;\n  readonly width: number;\n  busVoltage: number;\n  pull(voltage: Voltage, bit?: number): void;\n  toggle(bit?: number): void;\n  voltage(bit?: number): Voltage;\n  connect(pin: Pin): void;\n}\n\nexport class Bus implements Pin {\n  state: Voltage[];\n  next: Pin[] = [];\n\n  constructor(readonly name: string, readonly width = 1) {\n    this.state = range(0, this.width).map(() => LOW);\n  }\n\n  ensureWidth(newWidth: number) {\n    assert(newWidth <= 16, `Cannot widen past 16 to ${newWidth} bits`);\n    if (this.width < newWidth) {\n      (this as { width: number }).width = newWidth;\n      this.state = [\n        ...this.state,\n        ...range(this.width, newWidth).map(() => LOW as Voltage),\n      ];\n    }\n  }\n\n  connect(next: Pin) {\n    this.next.push(next);\n    next.busVoltage = this.busVoltage;\n  }\n\n  pull(voltage: Voltage, bit = 0) {\n    assert(\n      bit >= 0 && bit < this.width,\n      `Bit out of bounds: ${this.name}@${bit}`\n    );\n    this.state[bit] = voltage;\n    this.next.forEach((n) => n.pull(voltage, bit));\n  }\n\n  voltage(bit = 0): Voltage {\n    assert(bit >= 0 && bit < this.width);\n    return this.state[bit];\n  }\n\n  set busVoltage(voltage: number) {\n    for (const i of range(0, this.width)) {\n      this.state[i] = ((voltage & (1 << i)) >> i) as Voltage;\n    }\n    this.next.forEach((n) => (n.busVoltage = this.busVoltage));\n  }\n\n  get busVoltage(): number {\n    return range(0, this.width).reduce((b, i) => b | (this.state[i] << i), 0);\n  }\n\n  toggle(bit = 0) {\n    const nextVoltage = this.voltage(bit) === LOW ? HIGH : LOW;\n    this.pull(nextVoltage, bit);\n  }\n}\n\nexport class InSubBus extends Bus {\n  constructor(\n    private bus: Pin,\n    private start: number,\n    override readonly width = 1\n  ) {\n    super(bus.name);\n    assert(\n      start >= 0 && start + width <= bus.width,\n      `Mismatched InSubBus dimensions on ${bus.name} (${width} + ${start} > ${bus.width})`\n    );\n    this.connect(bus);\n  }\n\n  override pull(voltage: Voltage, bit = 0) {\n    assert(bit >= 0 && bit < this.width);\n    this.bus.pull(voltage, this.start + bit);\n  }\n\n  override voltage(bit = 0): Voltage {\n    assert(bit >= 0 && bit < this.width);\n    return this.bus.voltage(this.start + bit);\n  }\n\n  override set busVoltage(voltage: number) {\n    const high = this.bus.busVoltage & ~mask(this.width + this.start);\n    const low = this.bus.busVoltage & mask(this.start);\n    const mid = (voltage & mask(this.width)) << this.start;\n    this.bus.busVoltage = high | mid | low;\n  }\n\n  override get busVoltage(): number {\n    return (this.bus.busVoltage >> this.start) & mask(this.width);\n  }\n\n  override connect(bus: Pin): void {\n    assert(\n      this.start + this.width <= bus.width,\n      `Mismatched InSubBus connection dimensions (From ${bus.name} to ${this.name})`\n    );\n    this.bus = bus;\n  }\n}\n\nexport class OutSubBus extends Bus {\n  constructor(\n    private bus: Pin,\n    private start: number,\n    override readonly width = 1\n  ) {\n    super(bus.name);\n    assert(start >= 0 && width <= bus.width, `Mismatched OutSubBus dimensions`);\n    this.connect(bus);\n  }\n\n  override set busVoltage(voltage: number) {\n    this.bus.busVoltage =\n      (voltage & mask(this.width + this.start)) >> this.start;\n  }\n\n  override get busVoltage(): number {\n    return this.bus.busVoltage & mask(this.width);\n  }\n\n  override connect(bus: Pin): void {\n    assert(\n      this.width <= bus.width,\n      `Mismatched OutSubBus connection dimensions`\n    );\n    this.bus = bus;\n  }\n}\n\nexport class ConstantBus extends Bus {\n  constructor(name: string, private readonly value: number) {\n    super(name, 16 /* TODO: get high bit index */);\n  }\n\n  pullHigh(_ = 0) {\n    return undefined;\n  }\n  pullLow(_ = 0) {\n    return undefined;\n  }\n  override voltage(_ = 0): Voltage {\n    return (this.busVoltage & 0x1) as Voltage;\n  }\n\n  override set busVoltage(voltage: number) {\n    // Noop\n  }\n  override get busVoltage(): number {\n    return this.value;\n  }\n}\n\nexport const TRUE_BUS = new ConstantBus(\"true\", 0xffff);\nexport const FALSE_BUS = new ConstantBus(\"false\", 0);\n\nexport function parsePinDecl(toPin: string): {\n  pin: string;\n  width: number;\n} {\n  const { pin, w } = toPin.match(/(?<pin>[a-zA-Z]+)(\\[(?<w>\\d+)\\])?/)\n    ?.groups as {\n    pin: string;\n    w?: string;\n  };\n  return {\n    pin,\n    width: w ? Number(w) : 1,\n  };\n}\n\nexport function parseToPin(toPin: string): {\n  pin: string;\n  start?: number;\n  end?: number;\n} {\n  const { pin, i, j } = toPin.match(\n    /(?<pin>[a-z]+)(\\[(?<i>\\d+)(\\.\\.(?<j>\\d+))?\\])?/\n  )?.groups as { pin: string; i?: string; j?: string };\n  return {\n    pin,\n    start: i ? Number(i) : undefined,\n    end: j ? Number(j) : undefined,\n  };\n}\n\nexport class Pins {\n  private readonly map = new Map<string, Pin>();\n\n  insert(pin: Pin) {\n    const { name } = pin;\n    assert(!this.map.has(name), `Pins already has ${name}!`);\n    this.map.set(name, pin);\n  }\n\n  emplace(name: string, minWidth?: number) {\n    if (this.has(name)) {\n      return this.get(name)!;\n    } else {\n      const pin = new Bus(name, minWidth);\n      this.insert(pin);\n      return pin;\n    }\n  }\n\n  has(pin: string): boolean {\n    return this.map.has(pin);\n  }\n\n  get(pin: string): Pin | undefined {\n    return this.map.get(pin);\n  }\n\n  entries(): Iterable<Pin> {\n    return this.map.values();\n  }\n\n  [Symbol.iterator]() {\n    return this.map[Symbol.iterator]();\n  }\n}\n\nlet id = 0;\nexport class Chip {\n  readonly id = id++;\n  ins = new Pins();\n  outs = new Pins();\n  pins = new Pins();\n  parts = new Set<Chip>();\n  clockedPins: Set<string>;\n\n  get clocked() {\n    if (this.clockedPins.size > 0) {\n      return true;\n    }\n    for (const part of this.parts) {\n      if (part.clocked) return true;\n    }\n    return false;\n  }\n\n  constructor(\n    ins: (string | { pin: string; width: number })[],\n    outs: (string | { pin: string; width: number })[],\n    public name?: string,\n    internals: (string | { pin: string; width: number })[] = [],\n    clocked: string[] = []\n  ) {\n    for (const inn of ins) {\n      const { pin, width = 1 } =\n        (inn as { pin: string }).pin !== undefined\n          ? (inn as { pin: string; width: number })\n          : parsePinDecl(inn as string);\n      this.ins.insert(new Bus(pin, width));\n    }\n\n    for (const out of outs) {\n      const { pin, width = 1 } =\n        (out as { pin: string }).pin !== undefined\n          ? (out as { pin: string; width: number })\n          : parsePinDecl(out as string);\n      this.outs.insert(new Bus(pin, width));\n    }\n\n    for (const internal of internals) {\n      const { pin, width = 1 } =\n        (internal as { pin: string }).pin !== undefined\n          ? (internal as { pin: string; width: number })\n          : parsePinDecl(internal as string);\n      this.pins.insert(new Bus(pin, width));\n    }\n\n    this.clockedPins = new Set(clocked);\n\n    Clock.get().$.subscribe(() => this.eval());\n  }\n\n  reset() {\n    for (const [_, pin] of this.ins) {\n      pin.busVoltage = 0;\n    }\n    for (const part of this.parts) {\n      part.reset();\n    }\n    this.eval();\n  }\n\n  in(pin = \"in\"): Pin {\n    assert(this.hasIn(pin), `No in pin ${pin}`);\n    return this.ins.get(pin)!;\n  }\n\n  out(pin = \"out\"): Pin {\n    assert(this.hasOut(pin), `No in pin ${pin}`);\n    return this.outs.get(pin)!;\n  }\n\n  hasIn(pin: string): boolean {\n    return this.ins.has(pin);\n  }\n\n  hasOut(pin: string): boolean {\n    return this.outs.has(pin);\n  }\n\n  pin(name: string): Pin {\n    assert(this.pins.has(name));\n    return this.pins.get(name)!;\n  }\n\n  get(name: string, offset?: number): Pin | undefined {\n    if (this.ins.has(name)) {\n      return this.ins.get(name)!;\n    }\n    if (this.outs.has(name)) {\n      return this.outs.get(name)!;\n    }\n    if (this.pins.has(name)) {\n      return this.pins.get(name)!;\n    }\n    return this.getBuiltin(name, offset);\n  }\n\n  private getBuiltin(name: string, offset = 0): Pin | undefined {\n    if (BUILTIN_NAMES.includes(name)) {\n      for (const part of this.parts) {\n        const pin = part.get(name, offset);\n        if (pin) {\n          return pin;\n        }\n      }\n    }\n    return undefined;\n  }\n\n  isOutPin(pin: string): boolean {\n    return this.outs.has(pin);\n  }\n\n  wire(part: Chip, connections: Connection[]) {\n    this.parts.add(part);\n    for (const { to, from } of connections) {\n      if (part.isOutPin(to.name)) {\n        this.wireOutPin(part, to, from);\n      } else {\n        this.wireInPin(part, to, from);\n      }\n    }\n  }\n\n  private findPin(from: string, minWidth?: number): Pin {\n    if (from.toLowerCase() === \"true\" || from === \"1\") {\n      return TRUE_BUS;\n    }\n    if (from.toLowerCase() === \"false\" || from === \"0\") {\n      return FALSE_BUS;\n    }\n    if (this.ins.has(from)) {\n      return this.ins.get(from)!;\n    }\n    if (this.outs.has(from)) {\n      return this.outs.get(from)!;\n    }\n    return this.pins.emplace(from, minWidth);\n  }\n\n  private wireOutPin(part: Chip, to: PinSide, from: PinSide) {\n    const partPin = assertExists(\n      part.outs.get(to.name),\n      () => `Cannot wire to missing pin ${to.name}`\n    );\n    to.width ??= partPin.width;\n\n    let chipPin = this.findPin(from.name, from.width ?? to.width);\n    const isInternal = this.pins.has(chipPin.name);\n\n    from.width ??= chipPin.width;\n\n    if (chipPin instanceof ConstantBus) {\n      throw new Error(`Cannot wire to constant bus`);\n    }\n\n    // Widen internal pins\n    if (isInternal && chipPin instanceof Bus) {\n      chipPin.ensureWidth(from.start + from.width);\n    }\n\n    // Wrap the chipPin in an InBus when the chip side is dimensioned\n    if (from.start > 0 || from.width !== chipPin.width) {\n      chipPin = new InSubBus(chipPin, from.start, from.width);\n    }\n\n    // Wrap the chipPin in an OutBus when the part side is dimensioned\n    if (to.start > 0 || to.width !== chipPin.width) {\n      chipPin = new OutSubBus(chipPin, to.start, to.width);\n    }\n\n    partPin.connect(chipPin);\n  }\n\n  private wireInPin(part: Chip, to: PinSide, from: PinSide) {\n    let partPin = assertExists(\n      part.ins.get(to.name),\n      () => `Cannot wire to missing pin ${to.name}`\n    );\n    to.width ??= partPin.width;\n\n    const chipPin = this.findPin(from.name, from.width ?? to.width);\n\n    from.width ??= chipPin.width;\n\n    // Wrap the partPin in an InBus when the part side is dimensioned\n    if (to.start > 0 || to.width !== chipPin.width) {\n      partPin = new InSubBus(partPin, to.start, to.width);\n    }\n\n    // Wrap the partPin in an OutBus when the chip side is dimensioned\n    if (![\"true\", \"false\"].includes(chipPin.name)) {\n      if (from.start > 0 || from.width !== chipPin.width) {\n        partPin = new OutSubBus(partPin, from.start, from.width);\n      }\n    }\n    chipPin.connect(partPin);\n  }\n\n  eval() {\n    for (const chip of this.parts) {\n      // TODO topological sort\n      // eval chip input busses\n      TRUE_BUS.next.forEach((pin) => (pin.busVoltage = TRUE_BUS.busVoltage));\n      FALSE_BUS.next.forEach((pin) => (pin.busVoltage = FALSE_BUS.busVoltage));\n      chip.eval();\n      // eval output busses\n    }\n  }\n\n  tick() {\n    this.eval();\n  }\n\n  tock() {\n    this.eval();\n  }\n\n  remove() {\n    for (const part of this.parts) {\n      part.remove();\n    }\n  }\n\n  // For the ROM32K builtin to load from a file system\n  async load(fs: FileSystem, path: string): Promise<void> {\n    for (const part of this.parts) {\n      if (part.name === \"ROM32K\") {\n        await part.load(fs, path);\n      }\n    }\n  }\n}\n\nexport class Low extends Chip {\n  constructor() {\n    super([], []);\n    this.outs.insert(FALSE_BUS);\n  }\n}\n\nexport class High extends Chip {\n  constructor() {\n    super([], []);\n    this.outs.insert(TRUE_BUS);\n  }\n}\n\nexport class ClockedChip extends Chip {\n  override get clocked(): boolean {\n    return true;\n  }\n\n  #subscription = Clock.get().$.subscribe(({ level }) => {\n    if (level === LOW) {\n      this.tock();\n    } else {\n      this.tick();\n    }\n  });\n\n  override remove() {\n    this.#subscription.unsubscribe();\n    super.remove();\n  }\n\n  override reset(): void {\n    super.reset();\n    this.tick();\n    this.tock();\n  }\n}\n\nexport interface PinSide {\n  name: string;\n  start: number;\n  width?: number;\n}\n\nexport interface Connection {\n  // To is the part side\n  to: PinSide;\n  // From is the chip side\n  from: PinSide;\n}\n\nexport type Pinout = Record<string, string>;\nexport interface SerializedChip {\n  id: number;\n  name: string;\n  ins: Pinout;\n  outs: Pinout;\n  pins: Pinout;\n  children: SerializedChip[];\n}\n\nfunction mask(width: number) {\n  return Math.pow(2, width) - 1;\n}\n\nfunction setBus(busses: Pinout, pin: Pin) {\n  busses[pin.name] = bin(\n    (pin.busVoltage & mask(pin.width)) <<\n      (pin as unknown as { start: number }).start ?? 0\n  );\n  return busses;\n}\n\nexport function printChip(chip: Chip): SerializedChip {\n  return {\n    id: chip.id,\n    name: chip.name ?? chip.constructor.name,\n    ins: [...chip.ins.entries()].reduce(setBus, {} as Pinout),\n    outs: [...chip.outs.entries()].reduce(setBus, {} as Pinout),\n    pins: [...chip.pins.entries()].reduce(setBus, {} as Pinout),\n    children: [...chip.parts.values()].map(printChip),\n  };\n}\n\nexport const BUILTIN_NAMES = [\n  \"Register\",\n  \"ARegister\",\n  \"DRegister\",\n  \"PC\",\n  \"RAM8\",\n  \"RAM64\",\n  \"RAM512\",\n  \"RAM4K\",\n  \"RAM16K\",\n  \"ROM32K\",\n  \"Screen\",\n  \"Keyboard\",\n  \"Memory\",\n];\n","import { BehaviorSubject, Observable, Subject } from \"rxjs\";\nimport { assert } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { HIGH, LOW, Voltage } from \"./chip.js\";\n\ninterface Tick {\n  readonly level: Voltage;\n  readonly ticks: number;\n}\n\nlet clock: Clock;\nexport class Clock {\n  private level: Voltage = LOW;\n  private ticks = 0;\n\n  static get() {\n    if (clock === undefined) {\n      clock = new Clock();\n    }\n    return clock;\n  }\n\n  get isHigh(): boolean {\n    return this.level === HIGH;\n  }\n\n  get isLow(): boolean {\n    return this.level === LOW;\n  }\n\n  private subject = new BehaviorSubject<Tick>({\n    level: this.level,\n    ticks: this.ticks,\n  });\n  readonly frameSubject = new Subject<void>();\n  readonly resetSubject = new Subject<void>();\n\n  readonly $: Observable<Tick> = this.subject;\n  readonly frame$: Observable<void> = this.frameSubject;\n  readonly reset$: Observable<void> = this.resetSubject;\n\n  private next() {\n    this.subject.next({\n      level: this.level,\n      ticks: this.ticks,\n    });\n  }\n\n  private constructor() {\n    // private\n  }\n\n  reset() {\n    this.level = LOW;\n    this.ticks = 0;\n    this.next();\n    this.resetSubject.next();\n  }\n\n  tick() {\n    assert(this.level === LOW, \"Can only tick up from LOW\");\n    this.level = HIGH;\n    this.next();\n  }\n\n  tock() {\n    assert(this.level === HIGH, \"Can only tock down from HIGH\");\n    this.level = LOW;\n    this.ticks += 1;\n    this.next();\n  }\n\n  toggle() {\n    this.level === HIGH ? this.tock() : this.tick();\n  }\n\n  eval() {\n    this.tick();\n    this.tock();\n  }\n\n  frame() {\n    this.frameSubject.next();\n  }\n\n  toString() {\n    return `${this.ticks}${this.level === HIGH ? \"+\" : \"\"}`;\n  }\n}\n","export type COMMANDS_ASM =\n  | \"0\"\n  | \"1\"\n  | \"-1\"\n  | \"D\"\n  | \"A\"\n  | \"M\"\n  | \"!D\"\n  | \"!A\"\n  | \"-D\"\n  | \"-A\"\n  | \"D+1\"\n  | \"A+1\"\n  | \"D-1\"\n  | \"A-1\"\n  | \"D+A\"\n  | \"D-A\"\n  | \"D-M\"\n  | \"A-D\"\n  | \"D&A\"\n  | \"D&M\"\n  | \"D|A\"\n  | \"D|M\";\n\nexport type COMMANDS_OP =\n  | 0b101010\n  | 0b111111\n  | 0b111010\n  | 0b001100\n  | 0b110000\n  | 0b110000\n  | 0b001101\n  | 0b110001\n  | 0b001111\n  | 0b110011\n  | 0b011111\n  | 0b110111\n  | 0b001110\n  | 0b110010\n  | 0b000010\n  | 0b010011\n  | 0b010011\n  | 0b000111\n  | 0b000000\n  | 0b000000\n  | 0b010101\n  | 0b010101;\n\n//Usefull for the visualization of the ALU\nexport type COMMANDS_ALU =\n  | \"0\"\n  | \"1\"\n  | \"-1\"\n  | \"x\"\n  | \"y\"\n  | \"!x\"\n  | \"!y\"\n  | \"-x\"\n  | \"-y\"\n  | \"x+1\"\n  | \"y+1\"\n  | \"x-1\"\n  | \"y-1\"\n  | \"x+y\"\n  | \"x-y\"\n  | \"y-x\"\n  | \"x&y\"\n  | \"x|y\";\n\nexport const COMMANDS_ALU: {\n  op: Record<COMMANDS_OP, COMMANDS_ALU>;\n} = {\n  op: {\n    0x2a: \"0\",\n    0x3f: \"1\",\n    0x3a: \"-1\",\n    0x0c: \"x\",\n    0x30: \"y\",\n    0x0d: \"!x\",\n    0x31: \"!y\",\n    0x0f: \"-x\",\n    0x33: \"-y\",\n    0x1f: \"x+1\",\n    0x37: \"y+1\",\n    0x0e: \"x-1\",\n    0x32: \"y-1\",\n    0x02: \"x+y\",\n    0x13: \"x-y\",\n    0x07: \"y-x\",\n    0x00: \"x&y\",\n    0x15: \"x|y\",\n  },\n};\n\nexport const COMMANDS: {\n  asm: Record<COMMANDS_ASM, COMMANDS_OP>;\n  op: Record<COMMANDS_OP, COMMANDS_ASM>;\n} = {\n  asm: {\n    \"0\": 0b101010, // 42 0x2A\n    \"1\": 0b111111, // 63 0x3F\n    \"-1\": 0b111010, // 58 0x3A\n    D: 0b001100, // 12 0x0C\n    A: 0b110000, // 48 0x30\n    M: 0b110000, // 48 0x30\n    \"!D\": 0b001101, // 13 0x0D\n    \"!A\": 0b110001, // 49 0x31\n    \"-D\": 0b001111, // 15 0x0F\n    \"-A\": 0b110011, // 51 0x33\n    \"D+1\": 0b011111, // 31 0x1F\n    \"A+1\": 0b110111, // 55 0x37\n    \"D-1\": 0b001110, // 14 0x0E\n    \"A-1\": 0b110010, // 50 0x32\n    \"D+A\": 0b000010, //  2 0x02\n    \"D-A\": 0b010011, // 19 0x13\n    \"D-M\": 0b010011, // 19 0x13\n    \"A-D\": 0b000111, //  7 0x07\n    \"D&A\": 0b000000, //  0 0x00\n    \"D&M\": 0b000000, //  0 0x00\n    \"D|A\": 0b010101, // 21 0x15\n    \"D|M\": 0b010101, // 21 0x15\n  },\n  op: {\n    0x2a: \"0\",\n    0x3f: \"1\",\n    0x3a: \"-1\",\n    0x0c: \"D\",\n    0x30: \"A\",\n    0x0d: \"!D\",\n    0x31: \"!A\",\n    0x0f: \"-D\",\n    0x33: \"-A\",\n    0x1f: \"D+1\",\n    0x37: \"A+1\",\n    0x0e: \"D-1\",\n    0x32: \"A-1\",\n    0x02: \"D+A\",\n    0x13: \"D-A\",\n    0x07: \"A-D\",\n    0x00: \"D&A\",\n    0x15: \"D|A\",\n  },\n};\n\nexport type ASSIGN_ASM = \"\" | \"M\" | \"D\" | \"MD\" | \"A\" | \"AM\" | \"AD\" | \"AMD\";\nexport type ASSIGN_OP = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;\n\nexport const ASSIGN: {\n  asm: Record<ASSIGN_ASM, ASSIGN_OP>;\n  op: Record<ASSIGN_OP, ASSIGN_ASM>;\n} = {\n  asm: {\n    \"\": 0x0,\n    M: 0b001,\n    D: 0b010,\n    MD: 0b011,\n    A: 0b100,\n    AM: 0b101,\n    AD: 0b110,\n    AMD: 0b111,\n  },\n  op: {\n    0x0: \"\",\n    0x1: \"M\",\n    0x2: \"D\",\n    0x3: \"MD\",\n    0x4: \"A\",\n    0x5: \"AM\",\n    0x6: \"AD\",\n    0x7: \"AMD\",\n  },\n};\n\nexport type JUMP_ASM =\n  | \"\"\n  | \"JGT\"\n  | \"JEQ\"\n  | \"JGE\"\n  | \"JLT\"\n  | \"JNE\"\n  | \"JLE\"\n  | \"JMP\";\nexport type JUMP_OP = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;\nexport const JUMP: {\n  asm: Record<JUMP_ASM, JUMP_OP>;\n  op: Record<JUMP_OP, JUMP_ASM>;\n} = {\n  asm: {\n    \"\": 0b0,\n    JGT: 0b001,\n    JEQ: 0b010,\n    JGE: 0b011,\n    JLT: 0b100,\n    JNE: 0b101,\n    JLE: 0b110,\n    JMP: 0b111,\n  },\n  op: {\n    0x0: \"\",\n    0x1: \"JGT\",\n    0x2: \"JEQ\",\n    0x3: \"JGE\",\n    0x4: \"JLT\",\n    0x5: \"JNE\",\n    0x6: \"JLE\",\n    0x7: \"JMP\",\n  },\n};\n\nexport const Flags = {\n  0x01: \"Positive\",\n  0x00: \"Zero\",\n  0x0f: \"Negative\",\n  Positive: 0x01,\n  Zero: 0x00,\n  Negative: 0x0f,\n};\n\nexport function alu(op: number, d: number, a: number): [number, number] {\n  let o = 0;\n  switch (op) {\n    case 0x2a:\n      o = 0;\n      break;\n    case 0x3f:\n      o = 1;\n      break;\n    case 0x3a:\n      o = -1;\n      break;\n    case 0x0c:\n      o = d;\n      break;\n    case 0x30:\n      o = a;\n      break;\n    case 0x0d:\n      o = ~d;\n      break;\n    case 0x31:\n      o = ~a;\n      break;\n    case 0x0f:\n      o = -d;\n      break;\n    case 0x33:\n      o = -a;\n      break;\n    case 0x1f:\n      o = d + 1;\n      break;\n    case 0x37:\n      o = a + 1;\n      break;\n    case 0x0e:\n      o = d - 1;\n      break;\n    case 0x32:\n      o = a - 1;\n      break;\n    case 0x02:\n      o = d + a;\n      break;\n    case 0x13:\n      o = d - a;\n      break;\n    case 0x07:\n      o = a - d;\n      break;\n    case 0x00:\n      o = d & a;\n      break;\n    case 0x15:\n      o = d | a;\n      break;\n  }\n\n  o = o & 0xffff;\n  const flags =\n    o === 0 ? Flags.Zero : o & 0x8000 ? Flags.Negative : Flags.Positive;\n  return [o, flags];\n}\n\nexport function alua(op: number, d: number, a: number): [number, number] {\n  if (op & 0b100000) d = 0;\n  if (op & 0b010000) d = ~d & 0xffff;\n  if (op & 0b001000) a = 0;\n  if (op & 0b000100) a = ~a & 0xffff;\n\n  let o = (op & 0b000010 ? d + a : d & a) & 0xffff;\n  if (op & 0b000001) o = ~o & 0xffff;\n\n  const flags =\n    o === 0 ? Flags.Zero : o & 0x8000 ? Flags.Negative : Flags.Positive;\n  return [o, flags];\n}\n","import { assert } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport { op } from \"../util/asm.js\";\nimport { int10, int16, int2 } from \"../util/twos.js\";\nimport { load } from \"../fs.js\";\n\nexport const FORMATS = [\"bin\", \"dec\", \"hex\", \"asm\"];\nexport type Format = typeof FORMATS[number];\n\nexport const SCREEN_OFFSET = 0x4000;\nexport const SCREEN_ROWS = 512;\nexport const SCREEN_COLS = 256;\nexport const SCREEN_SIZE = SCREEN_ROWS * SCREEN_COLS;\nexport const KEYBOARD_OFFSET = 0x6000;\n\nexport interface MemoryAdapter {\n  size: number;\n  get(index: number): number;\n  set(index: number, value: number): void;\n  reset(): void;\n  update(cell: number, value: string, format: Format): void;\n  load(fs: FileSystem, path: string): Promise<void>;\n  loadBytes(bytes: number[]): void;\n  range(start?: number, end?: number): number[];\n  map<T>(\n    fn: (index: number, value: number) => T,\n    start?: number,\n    end?: number\n  ): Iterable<T>;\n}\n\nexport interface KeyboardAdapter {\n  getKey(): number;\n  setKey(key: number): void;\n  clearKey(): void;\n}\n\nexport class Memory implements MemoryAdapter {\n  private memory: Int16Array;\n\n  get size(): number {\n    return this.memory.length;\n  }\n\n  constructor(memory: ArrayBuffer | number) {\n    if (typeof memory === \"number\") {\n      this.memory = new Int16Array(memory);\n    } else {\n      this.memory = new Int16Array(memory);\n    }\n  }\n\n  get(index: number): number {\n    if (index < 0 || index >= this.size) {\n      return 0xffff;\n    }\n    return this.memory[index] ?? 0;\n  }\n\n  set(index: number, value: number): void {\n    if (index >= 0 && index < this.size) {\n      this.memory[index] = value & 0xffff;\n    }\n  }\n\n  reset(): void {\n    this.memory.fill(0);\n  }\n\n  update(cell: number, value: string, format: Format) {\n    let current: number;\n    switch (format) {\n      case \"asm\":\n        current = op(value);\n        break;\n      case \"bin\":\n        current = int2(value);\n        break;\n      case \"hex\":\n        current = int16(value);\n        break;\n      case \"dec\":\n      default:\n        current = int10(value);\n        break;\n    }\n\n    if (isFinite(current) && current <= 0xffff) {\n      this.set(cell, current);\n    }\n  }\n\n  async load(fs: FileSystem, path: string) {\n    try {\n      this.loadBytes(await load(fs, path));\n    } catch (cause) {\n      // throw new Error(`ROM32K Failed to load file ${path}`, { cause });\n      throw new Error(`Memory Failed to load file ${path}`);\n    }\n  }\n\n  loadBytes(bytes: number[]): void {\n    this.memory.set(new Int16Array(bytes));\n    this.memory.fill(0, bytes.length, this.size);\n  }\n\n  range(start = 0, end = this.size): number[] {\n    return [...this.memory.slice(start, end)];\n  }\n\n  *map<T>(\n    fn: (index: number, value: number) => T,\n    start = 0,\n    end = this.size\n  ): Iterable<T> {\n    assert(start < end);\n    for (let i = start; i < end; i++) {\n      yield fn(i, this.get(i));\n    }\n  }\n}\n\nexport class SubMemory implements MemoryAdapter {\n  constructor(\n    private readonly parent: MemoryAdapter,\n    readonly size: number,\n    private readonly offset: number\n  ) {}\n\n  get(index: number): number {\n    if (index < 0 || index >= this.size) {\n      return 0xffff;\n    }\n    return this.parent.get(this.offset + index);\n  }\n\n  set(index: number, value: number): void {\n    if (index >= 0 && index < this.size) {\n      this.parent.set(index + this.offset, value);\n    }\n  }\n\n  reset(): void {\n    for (let i = 0; i < this.size; i++) {\n      this.set(i, 0);\n    }\n  }\n\n  update(index: number, value: string, format: string): void {\n    if (index >= 0 && index < this.size) {\n      this.parent.update(index + this.offset, value, format);\n    }\n  }\n\n  load(fs: FileSystem, path: string): Promise<void> {\n    return this.parent.load(fs, path);\n  }\n\n  loadBytes(bytes: number[]): void {\n    return this.parent.loadBytes(bytes);\n  }\n\n  range(start?: number, end?: number): number[] {\n    return this.parent.range(start, end);\n  }\n  map<T>(\n    fn: (index: number, value: number) => T,\n    start?: number,\n    end?: number\n  ): Iterable<T> {\n    return this.parent.map(fn, start, end);\n  }\n}\n\nexport class MemoryKeyboard extends SubMemory implements KeyboardAdapter {\n  constructor(memory: MemoryAdapter) {\n    super(memory, 1, 0x6000);\n  }\n\n  getKey(): number {\n    return this.get(0);\n  }\n\n  setKey(key: number): void {\n    this.set(0, key & 0xffff);\n  }\n\n  clearKey(): void {\n    this.set(0, 0);\n  }\n}\n\nexport class ROM extends Memory {\n  static readonly SIZE = 0x8000;\n  constructor(program: Int16Array) {\n    const arr = new Int16Array(ROM.SIZE);\n    arr.set(program);\n    super(arr);\n  }\n}\n\nexport class RAM extends Memory {\n  // 4k main memory, 2k screen memory, 1 keyboard\n  // static readonly SIZE = 0x4000 + 0x2000 + 0x0001;\n  static readonly SIZE = 0x8000;\n  constructor() {\n    super(RAM.SIZE);\n  }\n}\n","import { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport * as loader from \"./loader.js\";\n\nexport async function load(fs: FileSystem, path: string): Promise<number[]> {\n  if (path.endsWith(\".hack\")) {\n    return loadHack(fs, path);\n  }\n\n  if (path.endsWith(\".asm\")) {\n    return loadAsm(fs, path);\n  }\n\n  throw new Error(`Cannot load file without hack or asm extension ${path}`);\n}\n\nexport async function loadAsm(fs: FileSystem, path: string): Promise<number[]> {\n  return loader.loadAsm(await fs.readFile(path));\n}\n\nexport async function loadHack(\n  fs: FileSystem,\n  path: string\n): Promise<number[]> {\n  return loader.loadHack(await fs.readFile(path));\n}\n","const asm = `\nASM <: Base {\n  Root := ASM\n  ASM = Instruction*\n  \n  Instruction = Label|AInstruction|CInstruction\n  \n  Label = OpenParen identifier closeParen\n  AInstruction = at (identifier | decNumber)\n  CInstruction = assign? op jmp?\n  \n  assign = (\n      \"AMD\"\n      | \"AM\"\n      | \"AD\"\n      | \"MD\"\n      | \"M\"\n      | \"D\"\n      | \"A\"\n      ) equal\n      \n  op =\n      | \"0\" | \"1\" | \"-1\"\n      | \"!D\" | \"!A\" | \"!M\"\n      | \"-D\" | \"-A\" | \"-M\"\n      | \"D+1\" | \"A+1\" | \"M+1\"\n      | \"D-1\" | \"A-1\" | \"M-1\"\n      | \"D+A\" | \"D+M\"\n      | \"D-A\" | \"D-M\"\n      | \"A-D\" | \"M-D\"\n      | \"D&A\" | \"D&M\"\n      | \"D|A\" | \"D|M\"\n      | \"D\" | \"A\" | \"M\"\n\n\n  jmp = semi (\"JGT\" | \"JEQ\" | \"JGE\" | \"JLT\" | \"JNE\" | \"JLE\" | \"JMP\")\n}`;\nexport default asm;\n","import { assertExists } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport ohm from \"ohm-js\";\nimport {\n  ASSIGN,\n  ASSIGN_ASM,\n  ASSIGN_OP,\n  COMMANDS,\n  COMMANDS_ASM,\n  COMMANDS_OP,\n  JUMP,\n  JUMP_ASM,\n  JUMP_OP,\n} from \"../cpu/alu.js\";\nimport { KEYBOARD_OFFSET, SCREEN_OFFSET } from \"../cpu/memory.js\";\nimport { makeC } from \"../util/asm.js\";\nimport { Span, baseSemantics, grammars, makeParser } from \"./base.js\";\n\nimport asmGrammar from \"./grammars/asm.ohm.js\";\n\nexport const grammar = ohm.grammar(asmGrammar, grammars);\nexport const asmSemantics = grammar.extendSemantics(baseSemantics);\n\nexport interface Asm {\n  instructions: AsmInstruction[];\n}\n\nexport type AsmInstruction =\n  | AsmAInstruction\n  | AsmCInstruction\n  | AsmLabelInstruction;\n\nexport type AsmAInstruction = AsmALabelInstruction | AsmAValueInstruction;\nexport interface AsmALabelInstruction {\n  type: \"A\";\n  label: string;\n  span: Span;\n  lineNum: number;\n}\n\nexport interface AsmAValueInstruction {\n  type: \"A\";\n  value: number;\n  span: Span;\n  lineNum: number;\n}\n\nexport function isAValueInstruction(\n  inst: AsmAInstruction\n): inst is AsmAValueInstruction {\n  return (inst as AsmAValueInstruction).value !== undefined;\n}\n\nfunction isALabelInstruction(\n  inst: AsmAInstruction\n): inst is AsmALabelInstruction {\n  return (inst as AsmALabelInstruction).label !== undefined;\n}\n\nexport interface AsmCInstruction {\n  type: \"C\";\n  op: COMMANDS_OP;\n  isM: boolean;\n  store?: ASSIGN_OP;\n  jump?: JUMP_OP;\n  span: Span;\n  lineNum: number;\n}\n\nexport interface AsmLabelInstruction {\n  type: \"L\";\n  label: string;\n  lineNum: number;\n}\n\nasmSemantics.addAttribute<Asm>(\"root\", {\n  Root(_) {\n    return this.asm;\n  },\n});\n\nasmSemantics.addAttribute<Asm>(\"asm\", {\n  Root(asm) {\n    return {\n      instructions: asm\n        .child(0)\n        .children.map(({ instruction }) => instruction as AsmInstruction),\n    };\n  },\n});\n\nasmSemantics.addAttribute<AsmInstruction>(\"instruction\", {\n  AInstruction(_at, val): AsmAInstruction {\n    try {\n      return {\n        type: \"A\",\n        label: val.name,\n        span: {\n          start: _at.source.startIdx,\n          end: val.source.endIdx,\n        },\n        lineNum: _at.source.getLineAndColumn().lineNum,\n      };\n    } catch (e) {\n      // Pass\n    }\n\n    try {\n      return {\n        type: \"A\",\n        value: val.value,\n        span: {\n          start: _at.source.startIdx,\n          end: val.source.endIdx,\n        },\n        lineNum: _at.source.getLineAndColumn().lineNum,\n      };\n    } catch (e) {\n      // pass\n    }\n\n    throw new Error(`AsmAInstruction must have either a name or a value`);\n  },\n  CInstruction(assignN, opN, jmpN): AsmCInstruction {\n    const assign = assignN.child(0)?.child(0)?.sourceString as ASSIGN_ASM;\n    const op = opN.sourceString.replace(\"M\", \"A\") as COMMANDS_ASM;\n    const jmp = jmpN.child(0)?.child(1)?.sourceString as JUMP_ASM;\n    const isM = opN.sourceString.includes(\"M\");\n    const inst: AsmCInstruction = {\n      type: \"C\",\n      op: COMMANDS.asm[op],\n      isM,\n      span: {\n        start: assignN.source.startIdx,\n        end: jmpN.source.endIdx,\n      },\n      lineNum: assignN.source.getLineAndColumn().lineNum,\n    };\n    if (jmp) inst.jump = JUMP.asm[jmp];\n    if (assign) inst.store = ASSIGN.asm[assign];\n    return inst;\n  },\n  Label(_o, { name }, _c): AsmLabelInstruction {\n    return {\n      type: \"L\",\n      label: name,\n      lineNum: _o.source.getLineAndColumn().lineNum,\n    };\n  },\n});\n\nexport function fillLabel(\n  asm: Asm,\n  symbolCallback?: (name: string, value: number, isVar: boolean) => void\n) {\n  let nextLabel = 16;\n  const symbols = new Map<string, number>([\n    [\"R0\", 0],\n    [\"R1\", 1],\n    [\"R2\", 2],\n    [\"R3\", 3],\n    [\"R4\", 4],\n    [\"R5\", 5],\n    [\"R6\", 6],\n    [\"R7\", 7],\n    [\"R8\", 8],\n    [\"R9\", 9],\n    [\"R10\", 10],\n    [\"R11\", 11],\n    [\"R12\", 12],\n    [\"R13\", 13],\n    [\"R14\", 14],\n    [\"R15\", 15],\n    [\"SP\", 0],\n    [\"LCL\", 1],\n    [\"ARG\", 2],\n    [\"THIS\", 3],\n    [\"THAT\", 4],\n    [\"SCREEN\", SCREEN_OFFSET],\n    [\"KBD\", KEYBOARD_OFFSET],\n  ]);\n\n  function getLabelValue(label: string) {\n    if (!symbols.has(label)) {\n      symbols.set(label, nextLabel);\n      symbolCallback?.(label, nextLabel, true);\n      nextLabel += 1;\n    }\n    return assertExists(symbols.get(label), `Label not in symbols: ${label}`);\n  }\n\n  function transmuteAInstruction(instruction: AsmALabelInstruction) {\n    const value = getLabelValue(instruction.label);\n    (instruction as unknown as AsmAValueInstruction).value = value;\n    delete (instruction as unknown as { label: undefined }).label;\n  }\n\n  const unfilled: AsmALabelInstruction[] = [];\n  let line = 0;\n  for (const instruction of asm.instructions) {\n    if (instruction.type === \"L\") {\n      if (symbols.has(instruction.label)) {\n        throw new Error(`ASM Duplicate label ${instruction.label}`);\n      } else {\n        symbols.set(instruction.label, line);\n        symbolCallback?.(instruction.label, line, false);\n      }\n      continue;\n    }\n\n    line += 1;\n\n    if (instruction.type === \"A\") {\n      if (isALabelInstruction(instruction)) {\n        unfilled.push(instruction);\n      }\n    }\n  }\n\n  unfilled.forEach(transmuteAInstruction);\n}\n\nexport function translateInstruction(inst: AsmInstruction) {\n  if (inst.type === \"A\") {\n    if (isALabelInstruction(inst)) {\n      throw new Error(`ASM Emitting unfilled A instruction`);\n    }\n    return inst.value;\n  }\n  if (inst.type === \"C\") {\n    return makeC(inst.isM, inst.op, inst.store, inst.jump);\n  }\n  return undefined;\n}\n\nexport function emit(asm: Asm): number[] {\n  return asm.instructions\n    .map(translateInstruction)\n    .filter((op): op is number => op !== undefined);\n}\n\nexport const ASM = {\n  grammar: asmGrammar,\n  semantics: asmSemantics,\n  parser: grammar,\n  parse: makeParser<Asm>(grammar, asmSemantics),\n  passes: {\n    fillLabel,\n    emit,\n  },\n};\n","const base = `\nBase {\n  Root = Value*\n\n  At = at\n  Bang = bang\n  Bar = bar\n  CloseAngle = closeAngle\n  CloseBrace = closeBrace\n  CloseParen = closeParen\n  CloseSquare = closeSquare\n  Comma = comma\n  Dollar = dollar\n  Dot = dot\n  DoubleQuote = doubleQuote\n  Equal = equal\n  OpenAngle = openAngle\n  OpenBrace = openBrace\n  OpenParen = openParen\n  OpenSquare = openSquare\n  Percent = percent\n  Semi = semi\n  Underscore = underscore\n\n  at = \"@\"\n  bang = \"!\"\n  bar = \"|\"\n  closeAngle = \">\"\n  closeBrace = \"}\"\n  closeParen = \")\"\n  closeSquare = \"]\"\n  comma = \",\"\n  dollar = \"$\"\n  dot = \".\"\n  doubleQuote = \"\\\\\"\"\n  equal = \"=\"\n  minus = \"-\"\n  newline = \"\\\\r\"? \"\\\\n\"\n  openAngle = \"<\"\n  openBrace = \"{\"\n  openParen = \"(\"\n  openSquare = \"[\"\n  percent = \"%\"\n  semi = \";\"\n  underscore = \"_\"\n\n  Value = identifier | number | boolean\n\n  boolean = true | false\n  True = true\n  False = false\n  true = \"true\"\n  false = \"false\"\n\n  Name = identifier\n  identifier = (letter|underscore) (alnum|underscore|dot|dollar)*\n\n  Number = number\n  number = hexNumber | decNumber | binNumber\n  binNumber = (\"%B\") (\"0\"|\"1\")+\n  hexNumber = (\"%X\") hexDigit+\n  decNumber = (\"%D\")? (wholeDec | realDec)\n  wholeDec = minus? digit+\n  realDec = minus? digit* \".\" digit+\n\n  String = DoubleQuote (~doubleQuote any)* doubleQuote\n  \n  spaces := (lineComment | comment | space)*\n  commentStart = \"/*\"\n  commentEnd = \"*/\"\n  comment = commentStart (~commentEnd any)* commentEnd\n  lineCommentStart = \"//\"\n  lineComment = lineCommentStart (~\"\\\\n\" any)* \"\\\\n\"\n\n  List<elem, sep> = NonemptyListOf<elem, sep> sep?\n  EmptyList<elem, sep> = EmptyList<elem, sep> sep?\n}`;\nexport default base;\n","import ohm from \"ohm-js\";\nimport { int10, int16, int2 } from \"../util/twos.js\";\nimport { Err, Ok, Result } from \"@davidsouther/jiffies/lib/esm/result.js\";\n\nexport const UNKNOWN_PARSE_ERROR = `Unknown parse error`;\n\nimport baseGrammar from \"./grammars/base.ohm.js\";\nexport const grammars = {\n  Base: ohm.grammar(baseGrammar),\n};\n\nexport const baseSemantics = grammars.Base.createSemantics();\n\nbaseSemantics.extendOperation(\"asIteration\", {\n  List(list, _) {\n    return list.asIteration();\n  },\n});\n\nbaseSemantics.addAttribute(\"value\", {\n  decNumber(_, digits): number {\n    return int10(digits.sourceString);\n  },\n  wholeDec(_, digits): number {\n    return int10(digits.sourceString);\n  },\n  binNumber(_, digits) {\n    return int2(digits.sourceString);\n  },\n  hexNumber(_, digits) {\n    return int16(digits.sourceString);\n  },\n  Number(num) {\n    return num.value;\n  },\n  Name(ident) {\n    return ident.name;\n  },\n  identifier(_, __): string {\n    return this.sourceString;\n  },\n});\n\nbaseSemantics.addAttribute(\"name\", {\n  identifier(_, __): string {\n    return this.sourceString;\n  },\n  Name(_): string {\n    return this.child(0)?.name;\n  },\n});\n\nbaseSemantics.addAttribute(\"String\", {\n  String(_a, str, _b) {\n    return str.sourceString;\n  },\n});\n\nexport type ParseError = Error | { message: string; shortMessage: string };\n\nexport function makeParser<ResultType>(\n  grammar: ohm.Grammar,\n  semantics: ohm.Semantics,\n  property: (obj: ohm.Dict) => ResultType = ({ root }) => root\n): (source: string) => Result<ResultType, ParseError> {\n  return function parse(source) {\n    try {\n      const match = grammar.match(source);\n      if (match.succeeded()) {\n        const parsed = semantics(match);\n        const parse = property(parsed);\n        return Ok(parse);\n      } else {\n        return Err({\n          message: match.message ?? UNKNOWN_PARSE_ERROR,\n          shortMessage: match.shortMessage ?? UNKNOWN_PARSE_ERROR,\n        });\n      }\n    } catch (e) {\n      return Err(e as Error);\n    }\n  };\n}\n\nexport interface Span {\n  start: number;\n  end: number;\n}\n","import { unwrap } from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { ASM } from \"./languages/asm.js\";\nimport { int2, parseTwosInt } from \"./util/twos.js\";\n\nexport async function loadAsm(source: string): Promise<number[]> {\n  const asm = unwrap(ASM.parse(source));\n  ASM.passes.fillLabel(asm);\n  return ASM.passes.emit(asm);\n}\n\nexport async function loadHack(source: string): Promise<number[]> {\n  return source\n    .split(\"\\n\")\n    .filter((line) => line.trim() !== \"\")\n    .map(int2);\n}\n\nexport function loadHackSync(source: string): number[] {\n  return source\n    .split(\"\\n\")\n    .filter((line) => line.trim() !== \"\")\n    .map(int2);\n}\n\nexport async function loadBlob(bytes: string): Promise<number[]> {\n  return bytes\n    .split(\"\\n\")\n    .filter((line) => line.trim() !== \"\")\n    .map(parseTwosInt);\n}\n","import { Clock } from \"./chip/clock.js\";\n\nexport const MAX_STEPS = 1000;\n\nconst clock = Clock.get();\n\nexport abstract class Timer {\n  frame() {\n    this.tick();\n    this.finishFrame();\n  }\n\n  /// Update the simulation state, but DO NOT perform any UI changes.\n  abstract tick(): Promise<boolean>;\n\n  /// UI Updates are allowed in finishFrame.\n  finishFrame() {\n    clock.frame();\n  }\n\n  abstract reset(): void;\n\n  abstract toggle(): void;\n\n  steps = 1; // How many steps to take per update\n  speed = 1000; // how often to update, in ms\n  get running() {\n    return this.#running;\n  }\n\n  #running = false;\n  #sinceLastFrame = 0;\n  #lastUpdate = 0;\n  #run = async () => {\n    if (!this.#running) {\n      return;\n    }\n    const now = Date.now();\n    const delta = now - this.#lastUpdate;\n    this.#lastUpdate = now;\n    this.#sinceLastFrame += delta;\n    if (this.#sinceLastFrame > this.speed) {\n      let done = false;\n      // let steps = Math.min(this.steps, MAX_STEPS);\n      let steps = this.steps;\n      const timingLabel = `Timing ${steps} steps`;\n      console.time(timingLabel);\n      while (!done && steps--) {\n        // done = await this.tick();\n        done = await this.tick();\n      }\n      console.timeEnd(timingLabel);\n      this.finishFrame();\n      if (done) {\n        this.stop();\n      }\n      this.#sinceLastFrame -= this.speed;\n    }\n    requestAnimationFrame(this.#run);\n  };\n\n  start() {\n    this.#running = true;\n    this.#lastUpdate = Date.now() - this.speed;\n    this.#run();\n    this.toggle();\n  }\n\n  stop() {\n    this.#running = false;\n    this.toggle();\n  }\n}\n","import {\n  ASSIGN,\n  ASSIGN_ASM,\n  ASSIGN_OP,\n  COMMANDS,\n  COMMANDS_ASM,\n  COMMANDS_OP,\n  JUMP,\n  JUMP_ASM,\n  JUMP_OP,\n} from \"../cpu/alu.js\";\n\nexport type CommandOps = keyof typeof COMMANDS.op;\nexport type JumpOps = keyof typeof JUMP.op;\nexport type StoreOps = keyof typeof ASSIGN.op;\n\nexport function asm(op: number): string {\n  if (op & 0x8000) {\n    return cInstruction(op);\n  }\n  return aInstruction(op);\n}\n\nfunction cInstruction(op: number): string {\n  op = op & 0xffff; // Clear high order bits\n  const mop = (op & 0x1000) >> 12;\n  const cop: CommandOps = ((op & 0b0000111111000000) >> 6) as CommandOps;\n  const sop: StoreOps = ((op & 0b0000000000111000) >> 3) as StoreOps;\n  const jop: JumpOps = (op & 0b0000000000000111) as JumpOps;\n\n  if (COMMANDS.op[cop] === undefined) {\n    // Invalid commend\n    return \"#ERR\";\n  }\n\n  let command = COMMANDS.op[cop];\n  if (mop) {\n    command = command.replace(/A/g, \"M\") as COMMANDS_ASM;\n  }\n\n  const store = ASSIGN.op[sop];\n  const jump = JUMP.op[jop];\n\n  let instruction: string = command;\n  if (store) {\n    instruction = `${store}=${instruction}`;\n  }\n  if (jump) {\n    instruction = `${instruction};${jump}`;\n  }\n\n  return instruction;\n}\n\nfunction aInstruction(op: number): string {\n  return \"@\" + (op & 0x7fff).toString(10);\n}\n\nexport function op(asm: string): number {\n  if (asm[0] === \"@\") {\n    return aop(asm);\n  } else {\n    return cop(asm);\n  }\n}\n\nfunction aop(asm: string): number {\n  return parseInt(asm.substring(1), 10);\n}\n\nfunction cop(asm: string): number {\n  const parts = asm.match(\n    /(?:(?<assign>[AMD]{1,3})=)?(?<operation>[-!01ADM&|]{1,3})(?:;(?<jump>JGT|JLT|JGE|JLE|JEQ|JMP))?/\n  );\n  const { assign, operation, jump } = parts?.groups ?? {};\n  const mode = operation.includes(\"M\") || assign.includes(\"M\");\n  const aop = ASSIGN.asm[(assign as ASSIGN_ASM) ?? \"\"];\n  const jop = JUMP.asm[(jump as JUMP_ASM) ?? \"\"];\n  const cop = COMMANDS.asm[(operation as COMMANDS_ASM) ?? \"\"];\n\n  return makeC(mode, cop, aop, jop);\n}\n\nexport function makeC(\n  isM: boolean,\n  op: COMMANDS_OP,\n  assign: ASSIGN_OP = 0,\n  jmp: JUMP_OP = 0\n): number {\n  const C = 0xe000;\n  const A = isM ? 0x1000 : 0;\n  const O = op << 6;\n  const D = (assign ?? 0) << 3;\n  const J = jmp ?? 0;\n  return C + A + O + D + J;\n}\n","const Hex = [\n  \"0\",\n  \"1\",\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n];\n\nexport function chars(i: number): string {\n  return Hex[i] ?? \"X\";\n}\n\nexport function bits(i: number): string {\n  switch (i) {\n    case 0x0:\n      return \"0000\";\n    case 0x1:\n      return \"0001\";\n    case 0x2:\n      return \"0010\";\n    case 0x3:\n      return \"0011\";\n    case 0x4:\n      return \"0100\";\n    case 0x5:\n      return \"0101\";\n    case 0x6:\n      return \"0110\";\n    case 0x7:\n      return \"0111\";\n    case 0x8:\n      return \"1000\";\n    case 0x9:\n      return \"1001\";\n    case 0xa:\n      return \"1010\";\n    case 0xb:\n      return \"1011\";\n    case 0xc:\n      return \"1100\";\n    case 0xd:\n      return \"1101\";\n    case 0xe:\n      return \"1110\";\n    case 0xf:\n      return \"1111\";\n    default:\n      return \"erro\";\n  }\n}\n\nexport function int(n: string, radix: number): number {\n  const i = parseInt(n.replace(/[^\\d a-f A-F +-.]/g, \"\"), radix);\n  return i & 0xffff;\n}\n\nexport function int16(i: string): number {\n  return int(i, 16);\n}\n\nexport function int10(i: string): number {\n  return int(i, 10);\n}\n\nexport function int2(i: string): number {\n  return int(i.replaceAll(\" \", \"\"), 2);\n}\n\nexport function parseTwosInt(i: string): number {\n  if (i.toUpperCase().includes(\"X\")) {\n    return int16(i);\n  }\n  return int10(i);\n}\n\nexport function hex(i: number): string {\n  const hu = chars((i & 0xf000) >> 12);\n  const hl = chars((i & 0x0f00) >> 8);\n  const lu = chars((i & 0x00f0) >> 4);\n  const ll = chars(i & 0x000f);\n\n  return `0x${hu}${hl}${lu}${ll}`;\n}\n\nexport function bin(i: number, precision = 16): string {\n  const hu = bits((i & 0xf000) >> 12);\n  const hl = bits((i & 0x0f00) >> 8);\n  const lu = bits((i & 0x00f0) >> 4);\n  const ll = bits(i & 0x000f);\n\n  // return `${hu} ${hl} ${lu} ${ll}`;\n  return `${hu}${hl}${lu}${ll}`.substring(16 - precision); // Match the book's formatting\n}\n\nexport function dec(i: number): string {\n  i = i & 0xffff;\n  if (i === 0x8000) {\n    return \"-32768\";\n  }\n  if (i & 0x8000) {\n    i = (~i + 1) & 0x7fff;\n    return `-${i}`;\n  }\n  return `${i}`;\n}\n\nexport function uns(i: number): string {\n  i = i & 0xffff;\n  return `${i}`;\n}\n\nexport function nand16(a: number, b: number): number {\n  a = a & 0xffff;\n  b = b & 0xffff;\n  let c = ~(a & b);\n  c = c & 0xffff;\n  return c;\n}\n"],"names":["ErrorPanel","error","failed","className","open","role","message","shortMessage","UNKNOWN_PARSE_ERROR","Textarea","value","onChange","language","disabled","text","setText","useState","e","target","Monaco","onCursorPositionChange","highlight","currentHighlight","dynamicHeight","lineNumberTransform","theme","useContext","AppContext","monaco","useMonaco","height","setHeight","editor","useRef","decorations","undefined","codeTheme","useCallback","window","matchMedia","matches","doHighlight","current","model","getModel","start","getPositionAt","end","range","Range","fromPositions","nextDecoration","push","options","inlineClassName","revealRangeInCenter","deltaDecorations","makeHighlight","calculateHeight","contentHeight","getContentHeight","useEffect","onMount","ed","updateOptions","fontFamily","fontSize","minimap","enabled","scrollBeyondLastLine","readOnly","lineNumbers","folding","onDidChangeCursorPosition","index","getOffsetAt","position","succeeded","setModelMarkers","line","column","exec","groups","startLineNumber","Number","endLineNumber","startColumn","endColumn","getLineContent","substring","match","length","severity","v","Editor","style","grammar","setError","parse","parsed","doParse","useMemo","debounce","onChangeCB","canUse","wants","Panel","props","join","header","children","footer","Accordian","summary","useImmerReducer","reducers","initialState","useReducer","state","command","produce","draft","action","payload","useStateInitializer","init","setState","Runbar","runner","timer","dispatch","actions","running","speed","steps","finishFrame","bind","update","setSteps","setSpeed","frame","stop","reset","makeTimerStore","dispatcher","useTimer","speedValue","speedValues","updateSpeed","_jsxs","prefix","_jsx","onClick","overrideTooltips","display","alignItems","justifyContent","fontWeight","padding","type","min","max","step","onSpeedChange","width","HIGH","LOW","Bus","name","next","constructor","this","map","ensureWidth","newWidth","assert","connect","busVoltage","pull","voltage","bit","forEach","n","i","reduce","b","toggle","nextVoltage","InSubBus","bus","super","high","mask","low","mid","OutSubBus","ConstantBus","pullHigh","pullLow","TRUE_BUS","FALSE_BUS","parsePinDecl","toPin","pin","w","Pins","Map","insert","has","set","emplace","minWidth","get","entries","values","Symbol","iterator","id","Chip","ins","outs","pins","parts","Set","clockedPins","clocked","size","part","internals","inn","out","internal","Clock","$","subscribe","eval","_","in","hasIn","hasOut","offset","getBuiltin","BUILTIN_NAMES","includes","isOutPin","wire","connections","add","to","from","wireOutPin","wireInPin","findPin","toLowerCase","partPin","assertExists","chipPin","isInternal","Error","chip","tick","tock","remove","async","fs","path","load","Low","ClockedChip","level","unsubscribe","Math","pow","clock","ticks","static","isHigh","isLow","subject","BehaviorSubject","frameSubject","Subject","resetSubject","frame$","reset$","toString","COMMANDS_ALU","op","COMMANDS","asm","D","A","M","ASSIGN","MD","AM","AD","AMD","JUMP","JGT","JEQ","JGE","JLT","JNE","JLE","JMP","Flags","Positive","Zero","Negative","alu","d","a","o","FORMATS","SCREEN_OFFSET","SCREEN_SIZE","SCREEN_ROWS","KEYBOARD_OFFSET","Memory","memory","Int16Array","fill","cell","format","int2","int16","int10","isFinite","loadBytes","cause","bytes","slice","fn","SubMemory","parent","MemoryKeyboard","getKey","setKey","key","clearKey","ROM","program","arr","SIZE","RAM","endsWith","loader","readFile","loadHack","loadAsm","ohm","asmGrammar","grammars","asmSemantics","extendSemantics","baseSemantics","isAValueInstruction","inst","isALabelInstruction","label","fillLabel","symbolCallback","nextLabel","symbols","unfilled","instruction","instructions","translateInstruction","makeC","isM","store","jump","addAttribute","Root","child","AInstruction","_at","val","span","source","startIdx","endIdx","lineNum","getLineAndColumn","CInstruction","assignN","opN","jmpN","assign","sourceString","replace","jmp","Label","_o","_c","ASM","semantics","parser","makeParser","passes","emit","filter","Base","createSemantics","property","root","Ok","Err","extendOperation","List","list","asIteration","decNumber","digits","wholeDec","binNumber","hexNumber","num","Name","ident","identifier","__","String","_a","str","_b","unwrap","split","trim","loadBlob","parseTwosInt","Timer","now","Date","delta","done","timingLabel","console","time","timeEnd","requestAnimationFrame","mop","cop","sop","jop","cInstruction","aInstruction","parseInt","aop","operation","mode","C","O","J","Hex","chars","bits","int","radix","replaceAll","toUpperCase","hex","bin","precision","hu","hl","lu","ll","dec","uns","nand16","c"],"sourceRoot":""}