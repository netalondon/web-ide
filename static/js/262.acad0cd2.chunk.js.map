{"version":3,"file":"static/js/262.acad0cd2.chunk.js","mappings":"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","sources":["pages/util.tsx","../../simulator/src/cpu/alu.ts","../../simulator/src/util/asm.ts","../../simulator/src/util/twos.ts"],"sourcesContent":["import { ChangeEvent, useState } from \"react\";\nimport { asm, op } from \"@nand2tetris/simulator/util/asm.js\";\nimport {\n  bin,\n  dec,\n  hex,\n  int10,\n  int16,\n  int2,\n  uns,\n} from \"@nand2tetris/simulator/util/twos.js\";\n\nimport \"./util.scss\";\n\nexport const Util = () => {\n  const [value, setValue] = useState(0);\n  const [asmValue, setAsmValue] = useState(\"@0\");\n\n  const doSetValue =\n    (conv: (arg: string) => number) =>\n    ({ target: { value } }: ChangeEvent<HTMLInputElement>) => {\n      value = value === \"-\" ? \"-1\" : value;\n      const iValue = conv(value);\n      setValue(iValue);\n      setAsmValue(asm(iValue));\n    };\n\n  const setBin = doSetValue(int2);\n  const setInt = doSetValue(int10);\n  const setUns = doSetValue(int10);\n  const setHex = doSetValue(int16);\n\n  const setAsm = ({ target: { value } }: ChangeEvent<HTMLInputElement>) => {\n    setAsmValue(value);\n    setValue(op(value));\n  };\n\n  return (\n    <article>\n      <header>\n        <h2>Convert Hack Number Types</h2>\n      </header>\n      <main>\n        <dl>\n          <dt>\n            <label htmlFor=\"util_setBin\">Binary</label>\n          </dt>\n          <dd>\n            <input\n              id=\"util_setBin\"\n              type=\"text\"\n              value={bin(value)}\n              onChange={setBin}\n            />\n          </dd>\n          <dt>\n            <label htmlFor=\"util_setInt\">Decimal</label>\n          </dt>\n          <dd>\n            <input\n              id=\"util_setInt\"\n              type=\"text\"\n              value={dec(value)}\n              onChange={setInt}\n            />\n          </dd>\n          <dt>\n            <label htmlFor=\"util_setUns\">Unsigned</label>\n          </dt>\n          <dd>\n            <input\n              id=\"util_setUns\"\n              type=\"text\"\n              value={uns(value)}\n              onChange={setUns}\n            />\n          </dd>\n          <dt>\n            <label htmlFor=\"util_setHex\">Hex</label>\n          </dt>\n          <dd>\n            <input\n              id=\"util_setHex\"\n              type=\"text\"\n              value={hex(value)}\n              onChange={setHex}\n            />\n          </dd>\n          <dt>\n            <label htmlFor=\"util_setAsm\">HACK ASM</label>\n          </dt>\n          <dd>\n            <input\n              id=\"util_setAsm\"\n              type=\"text\"\n              value={asmValue}\n              onChange={setAsm}\n            />\n          </dd>\n        </dl>\n      </main>\n    </article>\n  );\n};\n\nexport default Util;\n","export type COMMANDS_ASM =\n  | \"0\"\n  | \"1\"\n  | \"-1\"\n  | \"D\"\n  | \"A\"\n  | \"M\"\n  | \"!D\"\n  | \"!A\"\n  | \"-D\"\n  | \"-A\"\n  | \"D+1\"\n  | \"A+1\"\n  | \"D-1\"\n  | \"A-1\"\n  | \"D+A\"\n  | \"D-A\"\n  | \"D-M\"\n  | \"A-D\"\n  | \"D&A\"\n  | \"D&M\"\n  | \"D|A\"\n  | \"D|M\";\n\nexport type COMMANDS_OP =\n  | 0b101010\n  | 0b111111\n  | 0b111010\n  | 0b001100\n  | 0b110000\n  | 0b110000\n  | 0b001101\n  | 0b110001\n  | 0b001111\n  | 0b110011\n  | 0b011111\n  | 0b110111\n  | 0b001110\n  | 0b110010\n  | 0b000010\n  | 0b010011\n  | 0b010011\n  | 0b000111\n  | 0b000000\n  | 0b000000\n  | 0b010101\n  | 0b010101;\n\n//Usefull for the visualization of the ALU\nexport type COMMANDS_ALU =\n  | \"0\"\n  | \"1\"\n  | \"-1\"\n  | \"x\"\n  | \"y\"\n  | \"!x\"\n  | \"!y\"\n  | \"-x\"\n  | \"-y\"\n  | \"x+1\"\n  | \"y+1\"\n  | \"x-1\"\n  | \"y-1\"\n  | \"x+y\"\n  | \"x-y\"\n  | \"y-x\"\n  | \"x&y\"\n  | \"x|y\";\n\nexport const COMMANDS_ALU: {\n  op: Record<COMMANDS_OP, COMMANDS_ALU>;\n} = {\n  op: {\n    0x2a: \"0\",\n    0x3f: \"1\",\n    0x3a: \"-1\",\n    0x0c: \"x\",\n    0x30: \"y\",\n    0x0d: \"!x\",\n    0x31: \"!y\",\n    0x0f: \"-x\",\n    0x33: \"-y\",\n    0x1f: \"x+1\",\n    0x37: \"y+1\",\n    0x0e: \"x-1\",\n    0x32: \"y-1\",\n    0x02: \"x+y\",\n    0x13: \"x-y\",\n    0x07: \"y-x\",\n    0x00: \"x&y\",\n    0x15: \"x|y\",\n  },\n};\n\nexport const COMMANDS: {\n  asm: Record<COMMANDS_ASM, COMMANDS_OP>;\n  op: Record<COMMANDS_OP, COMMANDS_ASM>;\n} = {\n  asm: {\n    \"0\": 0b101010, // 42 0x2A\n    \"1\": 0b111111, // 63 0x3F\n    \"-1\": 0b111010, // 58 0x3A\n    D: 0b001100, // 12 0x0C\n    A: 0b110000, // 48 0x30\n    M: 0b110000, // 48 0x30\n    \"!D\": 0b001101, // 13 0x0D\n    \"!A\": 0b110001, // 49 0x31\n    \"-D\": 0b001111, // 15 0x0F\n    \"-A\": 0b110011, // 51 0x33\n    \"D+1\": 0b011111, // 31 0x1F\n    \"A+1\": 0b110111, // 55 0x37\n    \"D-1\": 0b001110, // 14 0x0E\n    \"A-1\": 0b110010, // 50 0x32\n    \"D+A\": 0b000010, //  2 0x02\n    \"D-A\": 0b010011, // 19 0x13\n    \"D-M\": 0b010011, // 19 0x13\n    \"A-D\": 0b000111, //  7 0x07\n    \"D&A\": 0b000000, //  0 0x00\n    \"D&M\": 0b000000, //  0 0x00\n    \"D|A\": 0b010101, // 21 0x15\n    \"D|M\": 0b010101, // 21 0x15\n  },\n  op: {\n    0x2a: \"0\",\n    0x3f: \"1\",\n    0x3a: \"-1\",\n    0x0c: \"D\",\n    0x30: \"A\",\n    0x0d: \"!D\",\n    0x31: \"!A\",\n    0x0f: \"-D\",\n    0x33: \"-A\",\n    0x1f: \"D+1\",\n    0x37: \"A+1\",\n    0x0e: \"D-1\",\n    0x32: \"A-1\",\n    0x02: \"D+A\",\n    0x13: \"D-A\",\n    0x07: \"A-D\",\n    0x00: \"D&A\",\n    0x15: \"D|A\",\n  },\n};\n\nexport type ASSIGN_ASM = \"\" | \"M\" | \"D\" | \"MD\" | \"A\" | \"AM\" | \"AD\" | \"AMD\";\nexport type ASSIGN_OP = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;\n\nexport const ASSIGN: {\n  asm: Record<ASSIGN_ASM, ASSIGN_OP>;\n  op: Record<ASSIGN_OP, ASSIGN_ASM>;\n} = {\n  asm: {\n    \"\": 0x0,\n    M: 0b001,\n    D: 0b010,\n    MD: 0b011,\n    A: 0b100,\n    AM: 0b101,\n    AD: 0b110,\n    AMD: 0b111,\n  },\n  op: {\n    0x0: \"\",\n    0x1: \"M\",\n    0x2: \"D\",\n    0x3: \"MD\",\n    0x4: \"A\",\n    0x5: \"AM\",\n    0x6: \"AD\",\n    0x7: \"AMD\",\n  },\n};\n\nexport type JUMP_ASM =\n  | \"\"\n  | \"JGT\"\n  | \"JEQ\"\n  | \"JGE\"\n  | \"JLT\"\n  | \"JNE\"\n  | \"JLE\"\n  | \"JMP\";\nexport type JUMP_OP = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;\nexport const JUMP: {\n  asm: Record<JUMP_ASM, JUMP_OP>;\n  op: Record<JUMP_OP, JUMP_ASM>;\n} = {\n  asm: {\n    \"\": 0b0,\n    JGT: 0b001,\n    JEQ: 0b010,\n    JGE: 0b011,\n    JLT: 0b100,\n    JNE: 0b101,\n    JLE: 0b110,\n    JMP: 0b111,\n  },\n  op: {\n    0x0: \"\",\n    0x1: \"JGT\",\n    0x2: \"JEQ\",\n    0x3: \"JGE\",\n    0x4: \"JLT\",\n    0x5: \"JNE\",\n    0x6: \"JLE\",\n    0x7: \"JMP\",\n  },\n};\n\nexport const Flags = {\n  0x01: \"Positive\",\n  0x00: \"Zero\",\n  0x0f: \"Negative\",\n  Positive: 0x01,\n  Zero: 0x00,\n  Negative: 0x0f,\n};\n\nexport function alu(op: number, d: number, a: number): [number, number] {\n  let o = 0;\n  switch (op) {\n    case 0x2a:\n      o = 0;\n      break;\n    case 0x3f:\n      o = 1;\n      break;\n    case 0x3a:\n      o = -1;\n      break;\n    case 0x0c:\n      o = d;\n      break;\n    case 0x30:\n      o = a;\n      break;\n    case 0x0d:\n      o = ~d;\n      break;\n    case 0x31:\n      o = ~a;\n      break;\n    case 0x0f:\n      o = -d;\n      break;\n    case 0x33:\n      o = -a;\n      break;\n    case 0x1f:\n      o = d + 1;\n      break;\n    case 0x37:\n      o = a + 1;\n      break;\n    case 0x0e:\n      o = d - 1;\n      break;\n    case 0x32:\n      o = a - 1;\n      break;\n    case 0x02:\n      o = d + a;\n      break;\n    case 0x13:\n      o = d - a;\n      break;\n    case 0x07:\n      o = a - d;\n      break;\n    case 0x00:\n      o = d & a;\n      break;\n    case 0x15:\n      o = d | a;\n      break;\n  }\n\n  o = o & 0xffff;\n  const flags =\n    o === 0 ? Flags.Zero : o & 0x8000 ? Flags.Negative : Flags.Positive;\n  return [o, flags];\n}\n\nexport function alua(op: number, d: number, a: number): [number, number] {\n  if (op & 0b100000) d = 0;\n  if (op & 0b010000) d = ~d & 0xffff;\n  if (op & 0b001000) a = 0;\n  if (op & 0b000100) a = ~a & 0xffff;\n\n  let o = (op & 0b000010 ? d + a : d & a) & 0xffff;\n  if (op & 0b000001) o = ~o & 0xffff;\n\n  const flags =\n    o === 0 ? Flags.Zero : o & 0x8000 ? Flags.Negative : Flags.Positive;\n  return [o, flags];\n}\n","import {\n  ASSIGN,\n  ASSIGN_ASM,\n  ASSIGN_OP,\n  COMMANDS,\n  COMMANDS_ASM,\n  COMMANDS_OP,\n  JUMP,\n  JUMP_ASM,\n  JUMP_OP,\n} from \"../cpu/alu.js\";\n\nexport type CommandOps = keyof typeof COMMANDS.op;\nexport type JumpOps = keyof typeof JUMP.op;\nexport type StoreOps = keyof typeof ASSIGN.op;\n\nexport function asm(op: number): string {\n  if (op & 0x8000) {\n    return cInstruction(op);\n  }\n  return aInstruction(op);\n}\n\nfunction cInstruction(op: number): string {\n  op = op & 0xffff; // Clear high order bits\n  const mop = (op & 0x1000) >> 12;\n  const cop: CommandOps = ((op & 0b0000111111000000) >> 6) as CommandOps;\n  const sop: StoreOps = ((op & 0b0000000000111000) >> 3) as StoreOps;\n  const jop: JumpOps = (op & 0b0000000000000111) as JumpOps;\n\n  if (COMMANDS.op[cop] === undefined) {\n    // Invalid commend\n    return \"#ERR\";\n  }\n\n  let command = COMMANDS.op[cop];\n  if (mop) {\n    command = command.replace(/A/g, \"M\") as COMMANDS_ASM;\n  }\n\n  const store = ASSIGN.op[sop];\n  const jump = JUMP.op[jop];\n\n  let instruction: string = command;\n  if (store) {\n    instruction = `${store}=${instruction}`;\n  }\n  if (jump) {\n    instruction = `${instruction};${jump}`;\n  }\n\n  return instruction;\n}\n\nfunction aInstruction(op: number): string {\n  return \"@\" + (op & 0x7fff).toString(10);\n}\n\nexport function op(asm: string): number {\n  if (asm[0] === \"@\") {\n    return aop(asm);\n  } else {\n    return cop(asm);\n  }\n}\n\nfunction aop(asm: string): number {\n  return parseInt(asm.substring(1), 10);\n}\n\nfunction cop(asm: string): number {\n  const parts = asm.match(\n    /(?:(?<assign>[AMD]{1,3})=)?(?<operation>[-!01ADM&|]{1,3})(?:;(?<jump>JGT|JLT|JGE|JLE|JEQ|JMP))?/\n  );\n  const { assign, operation, jump } = parts?.groups ?? {};\n  const mode = operation.includes(\"M\") || assign.includes(\"M\");\n  const aop = ASSIGN.asm[(assign as ASSIGN_ASM) ?? \"\"];\n  const jop = JUMP.asm[(jump as JUMP_ASM) ?? \"\"];\n  const cop = COMMANDS.asm[(operation as COMMANDS_ASM) ?? \"\"];\n\n  return makeC(mode, cop, aop, jop);\n}\n\nexport function makeC(\n  isM: boolean,\n  op: COMMANDS_OP,\n  assign: ASSIGN_OP = 0,\n  jmp: JUMP_OP = 0\n): number {\n  const C = 0xe000;\n  const A = isM ? 0x1000 : 0;\n  const O = op << 6;\n  const D = (assign ?? 0) << 3;\n  const J = jmp ?? 0;\n  return C + A + O + D + J;\n}\n","const Hex = [\n  \"0\",\n  \"1\",\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n];\n\nexport function chars(i: number): string {\n  return Hex[i] ?? \"X\";\n}\n\nexport function bits(i: number): string {\n  switch (i) {\n    case 0x0:\n      return \"0000\";\n    case 0x1:\n      return \"0001\";\n    case 0x2:\n      return \"0010\";\n    case 0x3:\n      return \"0011\";\n    case 0x4:\n      return \"0100\";\n    case 0x5:\n      return \"0101\";\n    case 0x6:\n      return \"0110\";\n    case 0x7:\n      return \"0111\";\n    case 0x8:\n      return \"1000\";\n    case 0x9:\n      return \"1001\";\n    case 0xa:\n      return \"1010\";\n    case 0xb:\n      return \"1011\";\n    case 0xc:\n      return \"1100\";\n    case 0xd:\n      return \"1101\";\n    case 0xe:\n      return \"1110\";\n    case 0xf:\n      return \"1111\";\n    default:\n      return \"erro\";\n  }\n}\n\nexport function int(n: string, radix: number): number {\n  const i = parseInt(n.replace(/[^\\d a-f A-F +-.]/g, \"\"), radix);\n  return i & 0xffff;\n}\n\nexport function int16(i: string): number {\n  return int(i, 16);\n}\n\nexport function int10(i: string): number {\n  return int(i, 10);\n}\n\nexport function int2(i: string): number {\n  return int(i.replaceAll(\" \", \"\"), 2);\n}\n\nexport function parseTwosInt(i: string): number {\n  if (i.toUpperCase().includes(\"X\")) {\n    return int16(i);\n  }\n  return int10(i);\n}\n\nexport function hex(i: number): string {\n  const hu = chars((i & 0xf000) >> 12);\n  const hl = chars((i & 0x0f00) >> 8);\n  const lu = chars((i & 0x00f0) >> 4);\n  const ll = chars(i & 0x000f);\n\n  return `0x${hu}${hl}${lu}${ll}`;\n}\n\nexport function bin(i: number, precision = 16): string {\n  const hu = bits((i & 0xf000) >> 12);\n  const hl = bits((i & 0x0f00) >> 8);\n  const lu = bits((i & 0x00f0) >> 4);\n  const ll = bits(i & 0x000f);\n\n  // return `${hu} ${hl} ${lu} ${ll}`;\n  return `${hu}${hl}${lu}${ll}`.substring(16 - precision); // Match the book's formatting\n}\n\nexport function dec(i: number): string {\n  i = i & 0xffff;\n  if (i === 0x8000) {\n    return \"-32768\";\n  }\n  if (i & 0x8000) {\n    i = (~i + 1) & 0x7fff;\n    return `-${i}`;\n  }\n  return `${i}`;\n}\n\nexport function uns(i: number): string {\n  i = i & 0xffff;\n  return `${i}`;\n}\n\nexport function nand16(a: number, b: number): number {\n  a = a & 0xffff;\n  b = b & 0xffff;\n  let c = ~(a & b);\n  c = c & 0xffff;\n  return c;\n}\n"],"names":["Util","value","setValue","useState","asmValue","setAsmValue","doSetValue","conv","target","iValue","asm","setBin","int2","setInt","int10","setUns","setHex","int16","htmlFor","id","type","bin","onChange","dec","uns","hex","op","COMMANDS_ALU","COMMANDS","D","A","M","ASSIGN","MD","AM","AD","AMD","JUMP","JGT","JEQ","JGE","JLT","JNE","JLE","JMP","Flags","Positive","Zero","Negative","alu","d","a","o","mop","cop","sop","jop","undefined","command","replace","store","jump","instruction","cInstruction","toString","aInstruction","parseInt","substring","aop","parts","match","assign","operation","groups","mode","includes","makeC","isM","jmp","C","O","J","Hex","chars","i","bits","int","n","radix","replaceAll","parseTwosInt","toUpperCase","precision","hu","hl","lu","ll","nand16","b","c"],"sourceRoot":""}