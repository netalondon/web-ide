{"version":3,"file":"static/js/281.71b9581e.chunk.js","mappings":"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","sources":["../../components/src/chips/keyboard.tsx","../../components/src/inline_edit.tsx","../../node_modules/@davidsouther/jiffies/lib/esm/dom/css/sizing.js","../../components/src/virtual_scroll.tsx","../../components/src/chips/memory.tsx","../../components/src/chips/register.tsx","../../components/src/chips/screen.tsx","../../components/src/clockface.tsx","../../components/src/compare.ts","../../components/src/difftable.tsx","../../node_modules/@davidsouther/jiffies/lib/esm/display.js","../../simulator/src/cpu/cpu.ts","../../simulator/src/languages/grammars/cmp.ohm.js","../../simulator/src/languages/cmp.ts","../../simulator/src/languages/grammars/tst.ohm.js","../../simulator/src/languages/tst.ts","../../simulator/src/output.ts","../../simulator/src/tst.ts"],"sourcesContent":["import { KeyboardAdapter } from \"@nand2tetris/simulator/cpu/memory.js\";\nimport { useEffect, useState } from \"react\";\nimport { RegisterComponent } from \"./register.js\";\n\nconst KeyMap: Record<string, number | undefined> = {\n  // Delete: 127,\n  Enter: 128,\n  Backspace: 129,\n  ArrowLeft: 130,\n  ArrowUp: 131,\n  ArrowRight: 132,\n  ArrowDown: 133,\n  Home: 134,\n  End: 135,\n  PageUp: 136,\n  PageDown: 137,\n  Insert: 138,\n  Delete: 139,\n  Escape: 140,\n  F1: 141,\n  F2: 142,\n  F3: 143,\n  F4: 144,\n  F5: 145,\n  F6: 146,\n  F7: 147,\n  F8: 148,\n  F9: 149,\n  F10: 150,\n  F11: 151,\n  F12: 152,\n};\n\nconst keyDisplays: Record<string, string> = {\n  ArrowLeft: \"L-arrow\",\n  ArrowUp: \"U-arrow\",\n  ArrowRight: \"R-arrow\",\n  ArrowDown: \"D-arrow\",\n};\n\nfunction getKeyDisplay(key: string) {\n  return keyDisplays[key] || key;\n}\n\nfunction keyPressToHackCharacter(keypress: KeyboardEvent): number {\n  const mapping = KeyMap[keypress.key];\n  if (mapping !== undefined) {\n    return mapping;\n  }\n  if (keypress.key.length === 1) {\n    const code = keypress.key.charCodeAt(0);\n    if (code >= 32 && code <= 126) {\n      return code;\n    }\n  }\n\n  return 0;\n}\n\nexport const Keyboard = ({\n  keyboard,\n  update,\n}: {\n  keyboard: KeyboardAdapter;\n  update?: () => void;\n}) => {\n  // const [showPicker, setShowPicker] = useState(false);\n  const [enabled, setEnabled] = useState(false);\n  const [character, setCharacter] = useState(\"\");\n  const [bits, setBits] = useState(keyboard.getKey());\n  let currentKey = 0;\n\n  const toggleEnabled = () => {\n    setEnabled(!enabled);\n  };\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    if (!enabled) {\n      return;\n    }\n\n    setCharacter(getKeyDisplay(event.key));\n    const key = keyPressToHackCharacter(event);\n    if (key === currentKey) {\n      return;\n    }\n    setKey(key);\n    update?.();\n  };\n\n  const onKeyUp = (event: KeyboardEvent) => {\n    if (!enabled) {\n      return;\n    }\n\n    currentKey = 0;\n    keyboard.clearKey();\n    update?.();\n    setBits(keyboard.getKey());\n    setCharacter(\"\");\n  };\n\n  const setKey = (key: number) => {\n    if (key === 0) {\n      return;\n    }\n    keyboard.setKey(key);\n    setBits(keyboard.getKey());\n    currentKey = key;\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", onKeyDown);\n    window.addEventListener(\"keyup\", onKeyUp);\n\n    return () => {\n      window.removeEventListener(\"keydown\", onKeyDown);\n      window.removeEventListener(\"keyup\", onKeyUp);\n    };\n  });\n\n  return (\n    <div className=\"flex row align-baseline\">\n      <div className=\"flex-2\">\n        <RegisterComponent name=\"Key\" bits={bits} />\n      </div>\n      <div className=\"flex-2\">{`Char: ${character}`}</div>\n      <div className=\"flex-3\">\n        <button onClick={toggleEnabled}>\n          {/* <Icon name=\"keyboard\" /> */}\n          {`${enabled ? \"Disable\" : \"Enable\"} Keyboard`}\n        </button>\n      </div>\n    </div>\n  );\n};\n","import { width } from \"@davidsouther/jiffies/lib/esm/dom/css/sizing.js\";\nimport { useCallback, useState } from \"react\";\nimport { useStateInitializer } from \"./react.js\";\n\nconst Mode = { VIEW: 0, EDIT: 1 };\n\nexport const InlineEdit = (props: {\n  mode?: keyof typeof Mode;\n  value: string;\n  highlight: boolean;\n  onChange: (value: string) => void;\n  onFocus?: () => void;\n}) => {\n  const [mode, setMode] = useState(props.mode ?? Mode.VIEW);\n  const [value, setValue] = useStateInitializer(props.value);\n\n  const render = () => {\n    switch (mode) {\n      case Mode.EDIT:\n        return edit();\n      case Mode.VIEW:\n        return view();\n      default:\n        return <span />;\n    }\n  };\n\n  const view = () => (\n    <span\n      style={{ cursor: \"text\", ...width(\"full\", \"inline\") }}\n      onClick={() => {\n        setMode(Mode.EDIT);\n      }}\n    >\n      {value}\n    </span>\n  );\n\n  const doSelect = useCallback(\n    (ref: HTMLInputElement | null) => ref?.select(),\n    []\n  );\n  const doChange = useCallback(\n    (target: HTMLInputElement) => {\n      setMode(Mode.VIEW);\n      setValue(target.value ?? \"\");\n      props.onChange(target.value ?? \"\");\n    },\n    [props, setMode, setValue]\n  );\n  const edit = () => {\n    const edit = (\n      <span style={{ display: \"block\", position: \"relative\" }}>\n        <input\n          ref={doSelect}\n          style={{\n            zIndex: \"10\",\n            position: \"absolute\",\n            left: \"0\",\n            marginTop: \"-0.375rem\",\n            color: \"black\",\n          }}\n          onFocus={props.onFocus}\n          onBlur={({ target }) => doChange(target)}\n          onKeyPress={({ key, target }) => {\n            if (key === \"Enter\") {\n              doChange(target as HTMLInputElement);\n            }\n          }}\n          type=\"text\"\n          defaultValue={value}\n        />\n      </span>\n    );\n    return edit;\n  };\n\n  return render();\n};\n\nexport default InlineEdit;\n","import { Widths } from \"./constants.js\";\nexport function width(amount, block) {\n    if (amount === undefined && Widths[block] !== undefined) {\n        amount = block;\n    }\n    return {\n        ...(block === \"inline\" ? { display: \"inline-block\" } : {}),\n        width: Widths[amount] ?? \"0\",\n    };\n}\n","/* eslint-disable @typescript-eslint/ban-types */\nimport {\n  Key,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n} from \"react\";\n\nexport interface VirtualScrollSettings {\n  /**Minimum offset into the adapter. Default is 0.  */\n  minIndex: number;\n  /** Maximum offset into the adapter. Default is Number.MAX_SAFE_INTEGER.  */\n  maxIndex: number;\n  /** Initial index to start rendering from. Default is minIndex.  */\n  startIndex: number;\n  /**\n   * Number of items to render in visible area. Default is entire range from\n   * minIndex to maxIndex.\n   */\n  count: number;\n  /**\n   * Maximum number of items to render on either side of the visible area.\n   * Default is `count`.\n   */\n  tolerance: number;\n  /** Height of each item, in pixels. Default is 20px. */\n  itemHeight: number;\n}\n\nexport interface VirtualScrollDataAdapter<T> {\n  (offset: number, limit: number): Iterable<T>;\n}\n\nexport function arrayAdapter<T>(data: T[]): VirtualScrollDataAdapter<T> {\n  return (offset, limit) => data.slice(offset, offset + limit);\n}\n\nexport interface VirtualScrollProps<T, U extends ReactNode> {\n  settings?: Partial<VirtualScrollSettings>;\n  get: VirtualScrollDataAdapter<T>;\n  row: (t: T) => U;\n  rowKey: (t: T) => Key;\n}\n\nexport function fillVirtualScrollSettings(\n  settings: Partial<VirtualScrollSettings>\n): VirtualScrollSettings {\n  const {\n    minIndex = 0,\n    maxIndex = Number.MAX_SAFE_INTEGER,\n    startIndex = 0,\n    itemHeight = 20,\n    count = Math.max(maxIndex - minIndex, 1),\n    tolerance = count,\n  } = settings;\n\n  return { minIndex, maxIndex, startIndex, itemHeight, count, tolerance };\n}\n\nexport function initialState<T>(\n  settings: VirtualScrollSettings,\n  adapter: VirtualScrollDataAdapter<T>\n): VirtualScrollState<T> {\n  // From Denis Hilt, https://blog.logrocket.com/virtual-scrolling-core-principles-and-basic-implementation-in-react/\n  const { minIndex, maxIndex, startIndex, itemHeight, count, tolerance } =\n    settings;\n  const bufferedItems = count + 2 * tolerance;\n  const itemsAbove = Math.max(0, startIndex - tolerance - minIndex);\n\n  const viewportHeight = count * itemHeight;\n  const totalHeight = Math.max(maxIndex - minIndex, 1) * itemHeight;\n  const toleranceHeight = tolerance * itemHeight;\n  const bufferHeight = viewportHeight + 2 * toleranceHeight;\n  const topPaddingHeight = itemsAbove * itemHeight;\n  const bottomPaddingHeight = totalHeight - (topPaddingHeight + bufferHeight);\n\n  const state: VirtualScrollState<T> = {\n    scrollTop: 0,\n    settings,\n    viewportHeight,\n    totalHeight,\n    toleranceHeight,\n    bufferedItems,\n    topPaddingHeight,\n    bottomPaddingHeight,\n    data: [],\n  };\n\n  return {\n    ...state,\n    ...doScroll(topPaddingHeight + toleranceHeight, state, adapter),\n  };\n}\n\nexport function getData<T>(\n  minIndex: number,\n  maxIndex: number,\n  offset: number,\n  limit: number,\n  get: VirtualScrollDataAdapter<T>\n): T[] {\n  const start = Math.max(0, minIndex, offset);\n  const end = Math.min(maxIndex, offset + limit - 1);\n  const data = get(start, end - start);\n  return [...data];\n}\n\ninterface ScrollUpdate<T> {\n  scrollTop: number;\n  topPaddingHeight: number;\n  bottomPaddingHeight: number;\n  data: T[];\n}\n\nexport function doScroll<T>(\n  scrollTop: number,\n  state: VirtualScrollState<T>,\n  get: VirtualScrollDataAdapter<T>\n): ScrollUpdate<T> {\n  const {\n    totalHeight,\n    toleranceHeight,\n    bufferedItems,\n    settings: { itemHeight, minIndex, maxIndex },\n  } = state;\n  const index =\n    minIndex + Math.floor((scrollTop - toleranceHeight) / itemHeight);\n  const data = getData(minIndex, maxIndex, index, bufferedItems, get);\n  const topPaddingHeight = Math.max((index - minIndex) * itemHeight, 0);\n  const bottomPaddingHeight = Math.max(\n    totalHeight - (topPaddingHeight + data.length * itemHeight),\n    0\n  );\n\n  return { scrollTop, topPaddingHeight, bottomPaddingHeight, data };\n}\n\ninterface VirtualScrollState<T> {\n  settings: VirtualScrollSettings;\n  scrollTop: number; // px\n  bufferedItems: number; // count\n  totalHeight: number; // px\n  viewportHeight: number; // px\n  topPaddingHeight: number; // px\n  bottomPaddingHeight: number; // px\n  toleranceHeight: number; // px\n  data: T[];\n}\n\nconst scrollReducer =\n  <T extends {}>(get: VirtualScrollDataAdapter<T>) =>\n  (state: VirtualScrollState<T>, scrollTop: number) => ({\n    ...state,\n    ...doScroll(scrollTop, state, get),\n  });\n\nexport const VirtualScroll = <T extends {}, U extends ReactNode = ReactNode>(\n  props: VirtualScrollProps<T, U> & { className?: string }\n) => {\n  const viewportRef = useRef<HTMLDivElement | null>(null);\n\n  const { settings, startState, reducer } = useMemo(() => {\n    const settings = fillVirtualScrollSettings(props.settings ?? {});\n    const startState = initialState<T>(settings, props.get);\n    const reducer = scrollReducer(props.get);\n    return { settings, reducer, startState };\n  }, [props.settings, props.get]);\n\n  const [state, dispatchScroll] = useReducer(reducer, startState);\n\n  useEffect(() => {\n    if (viewportRef.current !== null) {\n      dispatchScroll(viewportRef.current.scrollTop);\n    }\n  }, [settings, props.row]);\n\n  const initialScroll = useCallback(\n    (div: HTMLDivElement | null) => {\n      if (div) {\n        div.scrollTop = viewportRef.current\n          ? viewportRef.current.scrollTop\n          : settings.startIndex * settings.itemHeight;\n      }\n      viewportRef.current = div;\n    },\n    [viewportRef, settings.startIndex, settings.itemHeight]\n  );\n\n  const rows = state.data.map((d) => (\n    <div key={props.rowKey(d)} style={{ height: `${settings.itemHeight}px` }}>\n      {props.row(d)}\n    </div>\n  ));\n\n  return (\n    <div\n      ref={initialScroll}\n      style={{\n        height: `${state.viewportHeight}px`,\n        overflowY: \"scroll\",\n        overflowAnchor: \"none\",\n      }}\n      className={props.className ?? \"\"}\n      onScroll={(e) => dispatchScroll((e.target as HTMLDivElement).scrollTop)}\n    >\n      <div style={{ height: `${state.topPaddingHeight}px` }} />\n      {rows}\n      <div style={{ height: `${state.bottomPaddingHeight}px` }} />\n    </div>\n  );\n};\n\nexport default VirtualScroll;\n","import { rounded } from \"@davidsouther/jiffies/lib/esm/dom/css/border.js\";\nimport {\n  ChangeEvent,\n  ReactNode,\n  useCallback,\n  useContext,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\n\nimport {\n  Format,\n  FORMATS,\n  MemoryAdapter,\n} from \"@nand2tetris/simulator/cpu/memory.js\";\nimport { loadAsm, loadBlob, loadHack } from \"@nand2tetris/simulator/loader.js\";\nimport { asm } from \"@nand2tetris/simulator/util/asm.js\";\nimport { bin, dec, hex } from \"@nand2tetris/simulator/util/twos.js\";\n\nimport { useClockReset } from \"../clockface.js\";\nimport InlineEdit from \"../inline_edit.js\";\nimport { useStateInitializer } from \"../react.js\";\nimport { BaseContext } from \"../stores/base.context.js\";\nimport VirtualScroll, { VirtualScrollSettings } from \"../virtual_scroll.js\";\n\nconst ITEM_HEIGHT = 34;\n\nexport const MemoryBlock = ({\n  memory,\n  jmp = { value: 0 },\n  highlight = -1,\n  editable = false,\n  justifyLeft = false,\n  format = dec,\n  onChange = () => undefined,\n  onFocus = () => undefined,\n}: {\n  jmp?: { value: number };\n  memory: MemoryAdapter;\n  highlight?: number;\n  editable?: boolean;\n  justifyLeft?: boolean;\n  format?: (v: number) => string;\n  onChange?: (i: number, value: string, previous: number) => void;\n  onFocus?: (i: number) => void;\n}) => {\n  const settings = useMemo<Partial<VirtualScrollSettings>>(\n    () => ({\n      count: Math.min(memory.size, 25),\n      maxIndex: memory.size,\n      itemHeight: ITEM_HEIGHT,\n      startIndex: jmp.value,\n    }),\n    [memory.size, jmp]\n  );\n  const get = useCallback(\n    (offset: number, count: number) =>\n      memory\n        .range(offset, offset + count)\n        .map((v, i) => [i + offset, v] as [number, number]),\n    [memory]\n  );\n  const row = useCallback(\n    ([i, v]: [number, number]) => (\n      <MemoryCell\n        index={i}\n        value={format(v)}\n        size={memory.size}\n        editable={editable}\n        justifyLeft={justifyLeft}\n        highlight={i === highlight}\n        onChange={onChange}\n        onFocus={onFocus}\n      />\n    ),\n    [format, editable, highlight, onChange]\n  );\n\n  return (\n    <VirtualScroll<[number, number], ReactNode>\n      settings={settings}\n      get={get}\n      row={row}\n      rowKey={([i]) => i}\n    />\n  );\n};\n\nexport const MemoryCell = ({\n  index,\n  value,\n  size,\n  highlight = false,\n  editable = false,\n  justifyLeft = false,\n  onChange = () => undefined,\n  onFocus = () => undefined,\n}: {\n  index: number;\n  value: string;\n  size?: number;\n  highlight?: boolean;\n  editable?: boolean;\n  justifyLeft?: boolean;\n  onChange?: (i: number, value: string, previous: number) => void;\n  onFocus?: (i: number) => void;\n}) => (\n  <div style={{ display: \"flex\", height: \"100%\" }}>\n    <code\n      style={{\n        ...rounded(\"none\"),\n        ...(highlight ? { background: \"var(--mark-background-color)\" } : {}),\n        whiteSpace: \"pre\",\n      }}\n    >\n      {size\n        ? dec(index).padStart(Math.ceil(Math.log10(size)), \" \")\n        : dec(index)}\n    </code>\n    <code\n      style={{\n        flex: \"1\",\n        textAlign: justifyLeft ? \"left\" : \"right\",\n        color: \"black\",\n        ...rounded(\"none\"),\n        ...(highlight ? { background: \"var(--mark-background-color)\" } : {}),\n      }}\n    >\n      {editable ? (\n        <InlineEdit\n          value={value}\n          highlight={highlight}\n          onChange={(newValue: string) =>\n            onChange(index, newValue, Number(value))\n          }\n          onFocus={() => onFocus(index)}\n        />\n      ) : (\n        <span style={{ color: \"black\" }}>{value}</span>\n      )}\n    </code>\n  </div>\n);\n\nexport const Memory = ({\n  name = \"Memory\",\n  displayEnabled = true,\n  highlight = -1,\n  editable = true,\n  memory,\n  format = \"dec\",\n  onUpload = undefined,\n  onChange = undefined,\n}: {\n  name?: string;\n  displayEnabled?: boolean;\n  editable?: boolean;\n  highlight?: number;\n  memory: MemoryAdapter;\n  format: Format;\n  onUpload?: (fileName: string) => void;\n  onChange?: () => void;\n}) => {\n  const [fmt, setFormat] = useStateInitializer(format);\n  const [jmp, setJmp] = useState(\"\");\n  const [goto, setGoto] = useState({ value: 0 });\n  const [highlighted, setHighlighted] = useStateInitializer(highlight);\n  const [renderKey, setRenderKey] = useState(0);\n\n  const jumpTo = () => {\n    const value =\n      !isNaN(parseInt(jmp)) && isFinite(parseInt(jmp)) ? Number(jmp) : 0;\n    setHighlighted(value);\n    setGoto({\n      value: value,\n    });\n  };\n\n  const fileUploadRef = useRef<HTMLInputElement>(null);\n  const doLoad = useCallback(() => {\n    onChange?.();\n    fileUploadRef.current?.click();\n  }, [fileUploadRef]);\n\n  const { setStatus } = useContext(BaseContext);\n  const upload = useCallback(async (event: ChangeEvent<HTMLInputElement>) => {\n    if (!event.target.files?.length) {\n      setStatus(\"No file selected\");\n      return;\n    }\n    const file = event.target.files[0];\n    onUpload?.(file.name);\n    const source = await file.text();\n    const loader = file.name.endsWith(\"hack\")\n      ? loadHack\n      : file.name.endsWith(\"asm\")\n      ? loadAsm\n      : loadBlob;\n    const bytes = await loader(source);\n    memory.loadBytes(bytes);\n    event.target.value = \"\"; // Clear the input out\n    setFormat(\n      file.name.endsWith(\"hack\")\n        ? \"bin\"\n        : file.name.endsWith(\"asm\")\n        ? \"asm\"\n        : fmt\n    );\n    jumpTo();\n  }, []);\n\n  const rerenderMemoryBlock = () => {\n    setRenderKey(renderKey + 1);\n  };\n\n  const clear = () => {\n    memory.reset();\n    onChange?.();\n    rerenderMemoryBlock();\n  };\n\n  const doUpdate = (i: number, v: string) => {\n    memory.update(i, v, fmt ?? \"dec\");\n    onChange?.();\n    rerenderMemoryBlock();\n  };\n\n  useClockReset(() => {\n    setJmp(\"\");\n    setGoto({ value: 0 });\n  });\n\n  return (\n    <article className={`panel memory ${name}`}>\n      <header>\n        <div>{name}</div>\n        <fieldset role=\"group\">\n          <input\n            type=\"file\"\n            style={{ display: \"none\" }}\n            ref={fileUploadRef}\n            onChange={upload}\n          />\n          <button\n            onClick={doLoad}\n            className=\"flex-0\"\n            data-tooltip={\"Load file\"}\n            data-placement=\"bottom\"\n          >\n            {/* <Icon name=\"upload_file\" /> */}\n            📂\n          </button>\n          <button\n            onClick={clear}\n            className=\"flex-0\"\n            data-tooltip={\"Clear\"}\n            data-placement=\"bottom\"\n          >\n            {/* <Icon name=\"upload_file\" /> */}\n            🆑\n          </button>\n          <input\n            style={{ width: \"4em\", height: \"100%\" }}\n            placeholder=\"Addr\"\n            value={jmp}\n            onKeyDown={({ key }) => key === \"Enter\" && jumpTo()}\n            onChange={({ target: { value } }) => setJmp(value)}\n          />\n          <button\n            onClick={jumpTo}\n            className=\"flex-0\"\n            data-tooltip={\"Scroll to address\"}\n            data-placement=\"bottom\"\n          >\n            {/* <Icon name=\"move_down\" /> */}\n            ⤵️\n          </button>\n          <select value={fmt} onChange={(e) => setFormat(e.target.value)}>\n            {FORMATS.map((option) => (\n              <option key={option}>{option}</option>\n            ))}\n          </select>\n        </fieldset>\n      </header>\n      {displayEnabled ? (\n        <MemoryBlock\n          key={renderKey}\n          jmp={goto}\n          memory={memory}\n          highlight={highlighted}\n          editable={editable}\n          justifyLeft={fmt == \"asm\"}\n          format={(v: number) => doFormat(fmt, v)}\n          onChange={doUpdate}\n          onFocus={(i) => setHighlighted(i)}\n        />\n      ) : (\n        \"Memory display is disabled\"\n      )}\n    </article>\n  );\n};\n\nexport default Memory;\n\nfunction doFormat(format: Format, v: number): string {\n  switch (format) {\n    case \"bin\":\n      return bin(v);\n    case \"hex\":\n      return hex(v);\n    case \"asm\":\n      return asm(v);\n    case \"dec\":\n    default:\n      return dec(v);\n  }\n}\n","import { dec } from \"@nand2tetris/simulator/util/twos.js\";\n\nexport const RegisterComponent = ({\n  name,\n  bits,\n}: {\n  name: string;\n  bits: number;\n}) => (\n  <div>\n    {name}: {dec(bits)}\n  </div>\n);\n","import { Memory } from \"@nand2tetris/simulator/cpu/memory.js\";\nimport { assertExists } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { useCallback, useRef } from \"react\";\nimport { useClockFrame, useClockReset } from \"../clockface.js\";\n\nconst WHITE = \"white\";\nconst BLACK = \"black\";\ntype COLOR = typeof WHITE | typeof BLACK;\n\nexport interface ScreenMemory {\n  get(idx: number): number;\n}\n\nexport function reduceScreen(memory: Memory, offset = 0): ScreenMemory {\n  return {\n    get(idx: number): number {\n      return memory.get(offset + idx);\n    },\n  };\n}\n\nfunction get(mem: ScreenMemory, x: number, y: number): COLOR {\n  const byte = mem.get(32 * y + ((x / 16) | 0));\n  const bit = byte & (1 << x % 16);\n  return bit === 0 ? WHITE : BLACK;\n}\n\nfunction set(data: Uint8ClampedArray, x: number, y: number, value: COLOR) {\n  const pixel = (y * 512 + x) * 4;\n  const color = value === WHITE ? 255 : 0;\n  data[pixel] = color;\n  data[pixel + 1] = color;\n  data[pixel + 2] = color;\n  data[pixel + 3] = 255;\n}\n\nfunction drawImage(ctx: CanvasRenderingContext2D, memory: ScreenMemory) {\n  const image = assertExists(\n    ctx.getImageData(0, 0, 512, 256),\n    \"Failed to create Context2d\"\n  );\n  for (let col = 0; col < 512; col++) {\n    for (let row = 0; row < 256; row++) {\n      const color = get(memory, col, row);\n      set(image.data, col, row, color);\n    }\n  }\n  ctx.putImageData(image, 0, 0);\n}\n\nexport const Screen = ({ memory }: { memory: ScreenMemory }) => {\n  const canvas = useRef<HTMLCanvasElement>();\n\n  const draw = useCallback(() => {\n    const ctx = canvas.current?.getContext(\"2d\") ?? undefined;\n\n    if (ctx) {\n      drawImage(ctx, memory);\n    }\n  }, [memory]);\n\n  const ctxRef = useCallback(\n    (ref: HTMLCanvasElement | null) => {\n      canvas.current = ref ?? undefined;\n      draw();\n    },\n    [canvas, draw]\n  );\n\n  useClockFrame(draw);\n  useClockReset(() => {\n    canvas.current\n      ?.getContext(\"2d\")\n      ?.clearRect(0, 0, canvas.current.width, canvas.current.height);\n  });\n\n  return (\n    <article className=\"panel\">\n      <header>Screen</header>\n      <main style={{ backgroundColor: \"var(--code-background-color)\" }}>\n        <figure\n          style={{\n            width: \"100%\",\n            maxWidth: \"512px\",\n            boxSizing: \"content-box\",\n            marginInline: \"auto\",\n            margin: \"auto\",\n            borderTop: \"2px solid gray\",\n            borderLeft: \"2px solid gray\",\n            borderBottom: \"2px solid lightgray\",\n            borderRight: \"2px solid lightgray\",\n          }}\n        >\n          <canvas ref={ctxRef} width={512} height={256}></canvas>\n        </figure>\n      </main>\n    </article>\n  );\n};\n","import { useEffect, useMemo, useState } from \"react\";\n\nimport { display } from \"@davidsouther/jiffies/lib/esm/display.js\";\nimport { Clock } from \"@nand2tetris/simulator/chip/clock.js\";\n\nexport function useClock(actions: {\n  tick?: () => void;\n  toggle?: () => void;\n  reset?: () => void;\n}) {\n  const clock = useMemo(() => Clock.get(), []);\n\n  useEffect(() => {\n    const subscription = clock.$.subscribe(() => {\n      actions.tick?.();\n    });\n    return () => subscription.unsubscribe();\n  }, [actions, clock.$]);\n\n  return {\n    toggle() {\n      clock.tick();\n      actions.toggle?.();\n    },\n\n    reset() {\n      clock.reset();\n      actions.reset?.();\n    },\n  };\n}\n\nexport function useClockFrame(frameFinished: () => void) {\n  useEffect(() => {\n    const subscription = Clock.get().frame$.subscribe(() => {\n      frameFinished();\n    });\n    return () => subscription.unsubscribe();\n  }, [frameFinished]);\n}\n\nexport function useClockReset(reset: () => void) {\n  useEffect(() => {\n    const subscription = Clock.get().reset$.subscribe(() => {\n      reset();\n    });\n    return () => subscription.unsubscribe();\n  }, [reset]);\n}\n\nexport function displayClock() {\n  return display(Clock.get());\n}\n\nexport function useClockface() {\n  const [clockface, setClockface] = useState(displayClock());\n\n  useEffect(() => {\n    const subscription = Clock.get().$.subscribe(() => {\n      setClockface(displayClock());\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n\n  return clockface;\n}\n\nexport const Clockface = () => {\n  const clockface = useClockface();\n  return <span style={{ whiteSpace: \"nowrap\" }}>{clockface}</span>;\n};\n","import { isErr, Ok } from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { CMP } from \"@nand2tetris/simulator/languages/cmp.js\";\n\nexport const compare = (cmp: string, out: string) => {\n  const cmpResult = CMP.parse(cmp);\n  const outResult = CMP.parse(out);\n\n  if (isErr(cmpResult) || isErr(outResult)) {\n    return false;\n  }\n\n  const cmpData = Ok(cmpResult);\n  const outData = Ok(outResult);\n\n  for (let i = 0; i < Math.min(cmpData.length, outData.length); i++) {\n    const cmpI = cmpData[i] ?? [];\n    const outI = outData[i] ?? [];\n\n    for (let j = 0; j < Math.max(cmpI.length, outI.length); j++) {\n      const cmpJ = cmpI[j] ?? \"\";\n      const outJ = outI[j] ?? \"\";\n      if (\n        !(cmpJ?.trim().match(/^\\*+$/) !== null || outJ?.trim() === cmpJ?.trim())\n      ) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n","import { CMP } from \"@nand2tetris/simulator/languages/cmp.js\";\nimport { display } from \"@davidsouther/jiffies/lib/esm/display.js\";\nimport { range } from \"@davidsouther/jiffies/lib/esm/range.js\";\nimport { Err, isErr, Ok } from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { ReactElement } from \"react\";\n\nexport const DiffTable = ({\n  className = \"\",\n  out,\n  cmp,\n  zeroState,\n}: {\n  out: string;\n  cmp: string;\n  className?: string;\n  zeroState?: ReactElement;\n}) => {\n  const output = CMP.parse(out);\n  const compare = CMP.parse(cmp);\n\n  if (isErr(output)) {\n    return (\n      <details>\n        <summary>Failed to parse output</summary>\n        <pre>{display(Err(output))}</pre>\n        <code>\n          <pre>{out}</pre>\n        </code>\n      </details>\n    );\n  }\n\n  if (isErr(compare)) {\n    return (\n      <details>\n        <summary>Failed to parse compare</summary>\n        <code>\n          <pre>{display(Err(compare))}</pre>\n          <pre>{cmp}</pre>\n        </code>\n      </details>\n    );\n  }\n\n  const cmpData = Ok(compare);\n  const outData = Ok(output);\n  let failures = 0;\n  const table = range(0, Math.min(cmpData.length, outData.length)).map((i) => {\n    const cmpI = cmpData[i] ?? [];\n    const outI = outData[i] ?? [];\n    return range(0, Math.max(cmpI.length, outI.length))\n      .map((_, j) => [cmpI[j] ?? \"\", outI[j] ?? \"\"])\n      .map(([cmp, out]) => {\n        const cell = {\n          cmp: cmp ?? '\"',\n          out: out ?? '\"',\n          pass:\n            cmp?.trim().match(/^\\*+$/) !== null || out?.trim() === cmp?.trim(),\n        };\n        if (!cell.pass) {\n          failures += 1;\n        }\n        return cell;\n      });\n  });\n\n  return (\n    <div className={\"scroll-x \" + className}>\n      {failures > 0 && (\n        <p>\n          {failures} failure{failures === 1 ? \"\" : \"s\"}\n        </p>\n      )}\n      {table.length > 0 ? (\n        <table\n          style={{\n            fontFamily: \"var(--font-family-monospace)\",\n            marginBottom: \"none\",\n          }}\n        >\n          <tbody>\n            {table.map((row, i) => (\n              <tr key={i}>\n                {row.map(({ cmp, out, pass }, i) => (\n                  <DiffCell cmp={cmp} out={out} pass={pass} key={i} />\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        zeroState ?? <p>Execute test script to compare output.</p>\n      )}\n    </div>\n  );\n};\n\nconst DiffCell = ({\n  cmp,\n  out,\n  pass,\n}: {\n  cmp: string;\n  out: string;\n  pass: boolean;\n}) => {\n  return pass ? (\n    <>\n      <td>{cmp}</td>\n    </>\n  ) : (\n    <>\n      <td>\n        <ins>{cmp}</ins>\n        <br />\n        <del>{out}</del>\n      </td>\n    </>\n  );\n};\n","export const isDisplay = (a) => typeof a?.toString === \"function\" ||\n    typeof a === \"string\";\nexport const display = (a) => {\n    if (isDisplay(a)) {\n        const str = a.toString();\n        if (str === \"[object Object]\")\n            return JSON.stringify(a);\n        return str;\n    }\n    return JSON.stringify(a);\n};\n","import { alu, COMMANDS_OP, Flags } from \"./alu.js\";\nimport {\n  Memory,\n  MemoryAdapter,\n  MemoryKeyboard,\n  SubMemory,\n  RAM as RAMMem,\n  SCREEN_OFFSET,\n  SCREEN_SIZE,\n} from \"./memory.js\";\n\nexport interface CPUInput {\n  inM: number;\n  instruction: number;\n  reset: boolean;\n}\n\nexport interface CPUOutput {\n  outM: number;\n  writeM: boolean;\n  addressM: number;\n}\n\nexport interface CPUState {\n  A: number;\n  D: number;\n  PC: number;\n  ALU: number;\n  flag: number;\n}\n\nexport function emptyState(): CPUState {\n  return { A: 0, D: 0, PC: 0, ALU: 0, flag: Flags.Zero };\n}\n\nconst BITS = {\n  c: 0b1000_0000_0000_0000,\n  x1: 0b1001_0000_0000_0000,\n  x2: 0b1001_0000_0000_0000,\n  am: 0b1001_0000_0000_0000,\n  op: 0b0000_1111_1100_0000,\n  d1: 0b1000_0000_0010_0000,\n  d2: 0b1000_0000_0001_0000,\n  d3: 0b1000_0000_0000_1000,\n  j1: 0b1000_0000_0000_0001,\n  j2: 0b1000_0000_0000_0010,\n  j3: 0b1000_0000_0000_0100,\n};\n\nexport function decode(instruction: number) {\n  function bit(bit: number): boolean {\n    return (instruction & bit) === bit;\n  }\n  const bits = {\n    c: bit(BITS.c),\n    x1: bit(BITS.x1),\n    x2: bit(BITS.x2),\n    am: bit(BITS.am),\n    op: ((instruction & BITS.op) >> 6) as COMMANDS_OP,\n    d1: bit(BITS.d1),\n    d2: bit(BITS.d2),\n    d3: bit(BITS.d3),\n    j1: bit(BITS.j1),\n    j2: bit(BITS.j2),\n    j3: bit(BITS.j3),\n  };\n\n  return bits;\n}\n\nexport function cpuTick(\n  { inM, instruction }: CPUInput,\n  { A, D, PC }: CPUState\n): [CPUState, boolean] {\n  const bits = decode(instruction);\n  const a = bits.am ? inM : A;\n  const [ALU, flag] = alu(bits.op, D, a);\n\n  return [{ A, D, PC: PC + 1, ALU, flag }, bits.d3];\n}\n\nexport function cpuTock(\n  { inM, instruction, reset }: CPUInput,\n  { A, D, PC, ALU, flag }: CPUState\n): [CPUOutput, CPUState] {\n  const bits = decode(instruction);\n\n  const j1 = bits.j1 && flag === Flags.Positive;\n  const j2 = bits.j2 && flag === Flags.Zero;\n  const j3 = bits.j3 && flag === Flags.Negative;\n  const jmp = j1 || j2 || j3;\n\n  PC = reset ? 0 : jmp ? A : PC;\n\n  if (bits.d2) {\n    D = ALU;\n  }\n\n  const oldA = A;\n  if (!bits.c) {\n    A = instruction & 0x7fff;\n  } else if (bits.d1) {\n    A = ALU;\n  }\n\n  const a = bits.am ? inM : A;\n  const alu2 = alu(bits.op, D, a);\n\n  ALU = alu2[0];\n  flag = alu2[1];\n\n  const output: CPUOutput = {\n    addressM: bits.d3 ? oldA : A,\n    outM: ALU,\n    writeM: bits.d3,\n  };\n\n  const state: CPUState = {\n    A,\n    D,\n    ALU,\n    flag,\n    PC,\n  };\n\n  return [output, state];\n}\n\nexport function cpu(input: CPUInput, state: CPUState): [CPUOutput, CPUState] {\n  const [tickState, _writeM] = cpuTick(input, state);\n  return cpuTock(input, tickState);\n}\n\nexport class CPU {\n  readonly RAM: Memory;\n  readonly ROM: Memory;\n  readonly Screen: MemoryAdapter;\n  readonly Keyboard: MemoryKeyboard;\n\n  #pc = 0;\n  #a = 0;\n  #d = 0;\n\n  #tickState: CPUState = {\n    A: 0,\n    D: 0,\n    PC: 0,\n    ALU: 0,\n    flag: Flags.Zero,\n  };\n\n  get state(): CPUState {\n    return this.#tickState;\n  }\n\n  get PC() {\n    return this.#pc;\n  }\n\n  get A() {\n    return this.#a;\n  }\n\n  get D() {\n    return this.#d;\n  }\n\n  setA(value: number) {\n    this.#a = value;\n  }\n\n  setD(value: number) {\n    this.#d = value;\n  }\n\n  setPC(value: number) {\n    this.#pc = value;\n  }\n\n  constructor({ RAM = new RAMMem(), ROM }: { RAM?: Memory; ROM: Memory }) {\n    this.RAM = RAM;\n    this.ROM = ROM;\n\n    // \"Device Map\"\n    this.Screen = new SubMemory(this.RAM, SCREEN_SIZE, SCREEN_OFFSET);\n    this.Keyboard = new MemoryKeyboard(this.RAM);\n  }\n\n  reset() {\n    this.#pc = 0;\n    this.#a = 0;\n    this.#d = 0;\n  }\n\n  tick() {\n    const [{ addressM, outM, writeM }, { A, D, PC }] = cpu(\n      {\n        inM: this.RAM.get(this.#a),\n        instruction: this.ROM.get(this.#pc),\n        reset: false,\n      },\n      {\n        A: this.#a,\n        D: this.#d,\n        PC: this.#pc,\n        ALU: this.#d,\n        flag: Flags.Zero,\n      }\n    );\n\n    this.#a = A;\n    this.#d = D;\n    this.#pc = PC;\n\n    if (writeM) {\n      this.RAM.set(addressM, outM);\n    }\n  }\n}\n","const cmp = `\nCmp <: Base {\n  Root := line*\n  line = bar cell+ newline?\n  cell = cellvalue bar\n  cellvalue = (~(bar|newline) any)*\n}`;\nexport default cmp;\n","import ohm from \"ohm-js\";\nimport { grammars, makeParser, baseSemantics } from \"./base.js\";\n\nexport type Cell = string;\nexport type Line = Cell[];\nexport type Cmp = Line[];\n\nimport cmpGrammar from \"./grammars/cmp.ohm.js\";\nexport const grammar = ohm.grammar(cmpGrammar, grammars);\nexport const cmpSemantics = grammar.extendSemantics(baseSemantics);\n\ncmpSemantics.addAttribute<Cell>(\"cell\", {\n  cell(value, _) {\n    return value.sourceString;\n  },\n});\n\ncmpSemantics.addAttribute<Line>(\"line\", {\n  line(_a, cells, _b) {\n    return cells.children.map((c) => c.cell);\n  },\n});\n\ncmpSemantics.addAttribute<Cmp>(\"root\", {\n  Root(lines) {\n    return lines.children.map((c) => c.line);\n  },\n});\n\nexport const CMP = {\n  grammar: cmpGrammar,\n  semantics: cmpSemantics,\n  parser: grammar,\n  parse: makeParser<Cmp>(grammar, cmpSemantics),\n};\n","const tst = `\nTst <: Base {\n  Root := Tst\n  Tst = (TstStatement | TstRepeat | TstWhile)+\n\n  TstRepeat = Repeat Number? OpenBrace TstStatement+ CloseBrace\n  TstWhile = While Condition OpenBrace TstStatement+ CloseBrace\n  TstStatement = List<TstOperation, \",\"> (Semi | Bang)\n\n  TstOperation =\n    | TstFileOperation\n    | TstOutputListOperation\n    | TstEvalOperation\n    | TstSetOperation\n    | TstOutputOperation\n    | TstEchoOperation\n    | TstClearEchoOperation\n    | TstLoadROMOperation\n\n  TstLoadROMOperation = ROM32K Load FileName\n  TstFileOperation = FileOperation FileName\n  TstOutputListOperation = \"output-list\" OutputFormat+\n  OutputFormat = Name Index? percent FormatStyle wholeDec dot wholeDec dot wholeDec\n  TstSetOperation = Set Name Index? Number\n  Index = OpenSquare wholeDec? CloseSquare\n  Condition = Value CompareOp Value\n  TstEvalOperation = Eval | TickTock| Tick | Tock\n  TstOutputOperation = Output\n  TstEchoOperation = Echo String\n  TstClearEchoOperation = ClearEcho\n\n  FileName = Name\n  FileOperation = \"load\" | \"output-file\" | \"compare-to\"\n\n  Set = \"set\"\n  Eval = \"eval\"\n  Tick = \"tick\"\n  Tock = \"tock\"\n  TickTock = \"ticktock\"\n  Echo = \"echo\"\n  Repeat = \"repeat\"\n  ClearEcho = \"clear-echo\"\n  Output = \"output\"\n  OutputList = \"output-list\"\n  FormatStyle = \"B\"|\"D\"|\"S\"|\"X\"\n  ROM32K = \"ROM32K\"\n  Load = \"load\"\n  While = \"while\"\n\n  CompareOp = \"<>\" | \"<=\" | \">=\" | \"=\" | \"<\" | \">\"\n}`;\nexport default tst;\n","/** Reads tst files to apply and perform test runs. */\n\nimport ohm from \"ohm-js\";\nimport { baseSemantics, grammars, makeParser, Span } from \"./base.js\";\n\nexport interface TstEchoOperation {\n  op: \"echo\";\n  message: string;\n}\n\nexport interface TstClearEchoOperation {\n  op: \"clear-echo\";\n}\n\nexport interface TstSetOperation {\n  op: \"set\";\n  id: string;\n  index?: number;\n  value: number;\n}\n\nexport interface TstEvalOperation {\n  op: \"eval\" | \"tick\" | \"tock\" | \"ticktock\";\n}\n\nexport interface TstOutputOperation {\n  op: \"output\";\n}\n\nexport interface TstOutputSpec {\n  id: string;\n  builtin: boolean;\n  address: number;\n  style: \"D\" | \"X\" | \"B\" | \"S\";\n  width: number;\n  lpad: number;\n  rpad: number;\n}\n\nexport interface TstOutputListOperation {\n  op: \"output-list\";\n  spec: TstOutputSpec[];\n}\n\nexport interface TstLoadROMOperation {\n  op: \"loadRom\";\n  file: string;\n}\n\nexport interface TstFileOperation {\n  op: \"load\" | \"output-file\" | \"compare-to\";\n  file: string;\n}\n\nexport type TstOperation =\n  | TstFileOperation\n  | TstEvalOperation\n  | TstEchoOperation\n  | TstClearEchoOperation\n  | TstOutputOperation\n  | TstSetOperation\n  | TstOutputListOperation\n  | TstLoadROMOperation;\n\nexport interface TstLineStatement {\n  ops: TstOperation[];\n  break?: true;\n  span: Span;\n}\n\nexport interface TstRepeat {\n  statements: TstLineStatement[];\n  count: number;\n  span: Span;\n}\n\nexport interface TstWhileCondition {\n  op: \"<\" | \"<=\" | \"=\" | \">=\" | \">\" | \"<>\";\n  left: string | number;\n  right: string | number;\n}\n\nexport interface TstWhileStatement {\n  statements: TstLineStatement[];\n  condition: TstWhileCondition;\n  span: Span;\n}\n\nexport type TstStatement = TstLineStatement | TstRepeat | TstWhileStatement;\n\nexport interface Tst {\n  lines: TstStatement[];\n}\n\nimport tstGrammar from \"./grammars/tst.ohm.js\";\nexport const grammar = ohm.grammar(tstGrammar, grammars);\nexport const tstSemantics = grammar.extendSemantics(baseSemantics);\n\ntstSemantics.extendAttribute<number>(\"value\", {\n  Index(_a, idx, _b) {\n    return idx?.child(0)?.value ?? -1;\n  },\n});\n\ntstSemantics.extendAttribute<string>(\"name\", {\n  FileName({ name }) {\n    return name;\n  },\n});\n\ntstSemantics.addAttribute<number>(\"index\", {\n  Index(_open, dec, _close) {\n    return dec.child(0)?.value ?? 0;\n  },\n});\n\ntstSemantics.addAttribute<TstOutputSpec>(\"format\", {\n  OutputFormat(\n    { name: id },\n    index,\n    _a,\n    { sourceString: style },\n    { value: lpad },\n    _b,\n    { value: width },\n    _c,\n    { value: rpad }\n  ) {\n    return {\n      id,\n      builtin: index?.child(0) !== undefined,\n      address: index?.child(0)?.value ?? -1,\n      style: style as TstOutputSpec[\"style\"],\n      width,\n      lpad,\n      rpad,\n    };\n  },\n});\n\ntstSemantics.addAttribute<TstOperation>(\"operation\", {\n  TstEvalOperation(op) {\n    return { op: op.sourceString as TstEvalOperation[\"op\"] };\n  },\n  TstOutputOperation(_) {\n    return { op: \"output\" };\n  },\n  TstOutputListOperation(_, formats) {\n    return {\n      op: \"output-list\",\n      spec: formats.children.map((n) => n.format),\n    };\n  },\n  TstSetOperation(op, { name }, index, { value }) {\n    const setOp: TstSetOperation = {\n      op: \"set\",\n      id: name,\n      value,\n    };\n    const child = index.child(0)?.child(1)?.child(0);\n    if (child) {\n      setOp.index = child.value;\n    }\n    return setOp;\n  },\n  TstEchoOperation(op, str) {\n    return {\n      op: \"echo\",\n      message: str.String as string,\n    };\n  },\n  TstClearEchoOperation(op) {\n    return {\n      op: \"clear-echo\",\n    };\n  },\n  TstLoadROMOperation(_r, _l, { name }) {\n    return {\n      op: \"loadRom\",\n      file: name,\n    };\n  },\n  TstFileOperation(op, file) {\n    return {\n      op: op.sourceString as TstFileOperation[\"op\"],\n      file: file.sourceString,\n    };\n  },\n});\n\ntstSemantics.addAttribute<TstWhileCondition>(\"condition\", {\n  Condition({ value: left }, { sourceString: op }, { value: right }) {\n    return {\n      left,\n      right,\n      op: op as \"<\" | \"<=\" | \"=\" | \">=\" | \">\" | \"<>\",\n    };\n  },\n});\n\ntstSemantics.addAttribute<TstStatement>(\"statement\", {\n  TstWhile(op, cond, _o, statements, _c) {\n    return {\n      statements: statements.children.map(({ statement }) => statement),\n      condition: cond.condition,\n      span: {\n        start: op.source.startIdx,\n        end: cond.source.endIdx,\n      },\n    };\n  },\n  TstRepeat(op, count, _o, statements, _c) {\n    return {\n      statements: statements.children.map(({ statement }) => statement),\n      count: count.child(0)?.value ?? -1,\n      span: {\n        start: op.source.startIdx,\n        end: count.source.endIdx,\n      },\n    };\n  },\n  TstStatement(list, end) {\n    const stmt: TstStatement = {\n      ops: list\n        .asIteration()\n        .children.map((node) => node.operation as TstOperation),\n      span: {\n        start: this.source.startIdx,\n        end: this.source.endIdx,\n      },\n    };\n    if (end.sourceString === \"!\") {\n      stmt.break = true;\n    }\n    return stmt;\n  },\n});\n\ntstSemantics.addAttribute<Tst>(\"tst\", {\n  Tst(lines) {\n    return {\n      lines: lines.children.map((n) => n.statement),\n    };\n  },\n});\n\ntstSemantics.addAttribute<Tst>(\"root\", {\n  Root({ tst }) {\n    return tst;\n  },\n});\n\nexport const TST = {\n  grammar: tstGrammar,\n  semantics: tstSemantics,\n  parser: grammar,\n  parse: makeParser<Tst>(grammar, tstSemantics),\n};\n","import { assert } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { bin, dec, hex } from \"./util/twos.js\";\nimport { Test } from \"./tst.js\";\n\nexport class Output {\n  private readonly fmt: \"B\" | \"X\" | \"D\" | \"S\";\n  private readonly lPad: number;\n  private readonly rPad: number;\n  private readonly len: number;\n  private readonly index: number;\n  private readonly builtin: boolean;\n\n  // new Output(inst.id, inst.style, inst.width, inst.lpad, inst.rpad)\n  constructor(\n    private variable: string,\n    format = \"%B1.1.1\",\n    len?: number,\n    lPad?: number,\n    rPad?: number,\n    builtin?: boolean,\n    index?: number\n  ) {\n    if (\n      format.startsWith(\"%\") &&\n      len === undefined &&\n      lPad === undefined &&\n      rPad === undefined\n    ) {\n      const { fmt, lPad, rPad, len } = format.match(\n        /^%(?<fmt>[BDXS])(?<lPad>\\d+)\\.(?<len>\\d+)\\.(?<rPad>\\d+)$/\n      )?.groups as {\n        fmt: \"B\" | \"X\" | \"D\" | \"S\";\n        lPad: string;\n        rPad: string;\n        len: string;\n      };\n      this.fmt = fmt;\n      this.lPad = parseInt(lPad);\n      this.rPad = parseInt(rPad);\n      this.len = parseInt(len);\n      this.builtin = false;\n      this.index = -1;\n    } else {\n      assert([\"B\", \"X\", \"D\", \"S\"].includes(format[0]));\n      this.fmt = format[0] as \"B\" | \"X\" | \"D\" | \"S\";\n      this.len = len ?? 3;\n      this.lPad = lPad ?? 1;\n      this.rPad = rPad ?? 1;\n      this.builtin = builtin ?? false;\n      this.index = index ?? -1;\n    }\n  }\n\n  header(test: Test) {\n    let variable = `${this.variable}`;\n    if (this.builtin) {\n      const index = this.index >= 0 ? this.index : \"\";\n      variable = `${variable}[${index}]`;\n    }\n    if (variable.length > this.len + this.lPad + this.rPad) {\n      return variable.substring(0, this.len + this.lPad + this.rPad);\n    }\n    return this.padCenter(variable);\n  }\n\n  print(test: Test) {\n    const val = test.getVar(this.variable, this.index);\n    if (this.fmt === \"S\") {\n      return this.padLeft(val as string);\n    }\n\n    const fmt = { B: bin, D: dec, X: hex }[this.fmt];\n    const value = fmt(val as number);\n    if (this.fmt === \"D\") {\n      return this.padRight(value);\n    } else {\n      return this.padCenter(value.slice(value.length - this.len));\n    }\n  }\n\n  private padCenter(value: string) {\n    const space = this.lPad + this.len + this.rPad;\n    const leftSpace = Math.floor((space - value.length) / 2);\n    const rightSpace = space - leftSpace - value.length;\n    const padLeft = leftSpace + value.length;\n    const padRight = padLeft + rightSpace;\n    value = value.padStart(padLeft);\n    value = value.padEnd(padRight);\n    return value;\n  }\n\n  private padLeft(value: string) {\n    value = value.substring(0, this.len);\n    const padRight = this.rPad + this.len;\n    const padLeft = this.lPad + padRight;\n    value = value.padEnd(padRight);\n    value = value.padStart(padLeft);\n    return value;\n  }\n\n  private padRight(value: string) {\n    value = value.substring(0, this.len);\n    const padLeft = this.lPad + this.len;\n    const padRight = this.rPad + padLeft;\n    value = value.padStart(padLeft);\n    value = value.padEnd(padRight);\n    return value;\n  }\n}\n","import {\n  assertExists,\n  checkExhaustive,\n} from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport { Span } from \"./languages/base.js\";\nimport {\n  Tst,\n  TstLineStatement,\n  TstOperation,\n  TstOutputSpec,\n  TstStatement,\n  TstWhileStatement,\n} from \"./languages/tst.js\";\nimport { Bus, Chip, HIGH, Low, LOW } from \"./chip/chip.js\";\nimport { Clock } from \"./chip/clock.js\";\nimport { Output } from \"./output.js\";\nimport { ROM } from \"./cpu/memory.js\";\nimport { CPU } from \"./cpu/cpu.js\";\n\nexport abstract class Test<IS extends TestInstruction = TestInstruction> {\n  protected readonly instructions: (IS | TestInstruction)[] = [];\n  protected _outputList: Output[] = [];\n  protected _log = \"\";\n  fs: FileSystem = new FileSystem();\n\n  setFileSystem(fs: FileSystem): this {\n    this.fs = fs;\n    return this;\n  }\n\n  echo(_content: string) {\n    return undefined;\n  }\n  clearEcho() {\n    return undefined;\n  }\n\n  async load(_filename: string): Promise<void> {\n    return undefined;\n  }\n  async compareTo(_filename: string): Promise<void> {\n    return undefined;\n  }\n  outputFile(_filename: string): void {\n    return undefined;\n  }\n  outputList(outputs: Output[]): void {\n    this._outputList = outputs;\n  }\n\n  addInstruction(instruction: IS | TestInstruction): void {\n    this.instructions.push(instruction);\n  }\n\n  reset(): this {\n    this._steps = (function* (test) {\n      for (const instruction of test.instructions) {\n        yield* instruction.steps(test);\n      }\n    })(this);\n    this._step = this._steps.next();\n    this._step; //?\n    this._log = \"\";\n    return this;\n  }\n\n  private _steps!: IterableIterator<IS | TestInstruction>;\n  private _step!: IteratorResult<IS | TestInstruction, IS | TestInstruction>;\n\n  get steps(): Iterator<IS | TestInstruction> {\n    if (this._steps === undefined) {\n      this.reset();\n      this._steps = assertExists(this._steps, \"Reset did not initialize steps\");\n      this._step = assertExists(this._step, \"Reset did not find first step\");\n    }\n    return this._steps;\n  }\n\n  get currentStep(): IS | TestInstruction | undefined {\n    return this._step?.value;\n  }\n\n  get done(): boolean {\n    return this._step?.done ?? false;\n  }\n\n  step() {\n    if (!this._step.done) {\n      this._step.value.do(this);\n      this._step = this.steps.next();\n      return false;\n    }\n    return true;\n  }\n\n  async run() {\n    this.reset();\n    while (!(await this.step()));\n  }\n\n  protected readonly breakpoints: Map<string, number> = new Map();\n  addBreakpoint(variable: string, value: number) {\n    this.breakpoints.set(variable, value);\n  }\n  clearBreakpoints() {\n    this.breakpoints.clear();\n  }\n\n  output() {\n    const values = this._outputList.map((output) => output.print(this));\n    this._log += `|${values.join(\"|\")}|\\n`;\n  }\n\n  header() {\n    const values = this._outputList.map((output) => output.header(this));\n    this._log += `|${values.join(\"|\")}|\\n`;\n  }\n\n  log() {\n    return this._log;\n  }\n\n  abstract hasVar(variable: string | number): boolean;\n  abstract getVar(variable: string | number, offset?: number): number | string;\n  abstract setVar(variable: string, value: number, offset?: number): void;\n}\n\nfunction isTstLineStatment(line: TstStatement): line is TstLineStatement {\n  return (line as TstLineStatement).ops !== undefined;\n}\n\nfunction isTstWhileStatement(line: TstStatement): line is TstWhileStatement {\n  return (line as TstWhileStatement).condition !== undefined;\n}\n\nfunction makeLineStatement(line: TstLineStatement) {\n  const statement = new TestCompoundInstruction();\n  statement.span = line.span;\n  for (const op of line.ops) {\n    const inst = makeInstruction(op);\n    if (inst !== undefined) statement.addInstruction(inst);\n  }\n  return statement;\n}\n\nfunction makeInstruction(inst: TstOperation) {\n  const { op } = inst;\n  switch (op) {\n    case \"tick\":\n      return new TestTickInstruction();\n    case \"tock\":\n      return new TestTockInstruction();\n    case \"ticktock\":\n      return new TestTickTockInstruction();\n    case \"eval\":\n      return new TestEvalInstruction();\n    case \"output\":\n      return new TestOutputInstruction();\n    case \"set\":\n      return new TestSetInstruction(inst.id, inst.value, inst.index);\n    case \"output-list\":\n      return new TestOutputListInstruction(inst.spec);\n    case \"echo\":\n      return new TestEchoInstruction(inst.message);\n    case \"clear-echo\":\n      return new TestClearEchoInstruction();\n    case \"loadRom\":\n      return new TestLoadROMInstruction(inst.file);\n    case \"load\":\n    case \"output-file\":\n    case \"compare-to\":\n      return undefined;\n    default:\n      checkExhaustive(op, `Unknown tst operation ${op}`);\n  }\n}\n\nfunction fill<T extends Test>(test: T, tst: Tst): T {\n  for (const line of tst.lines) {\n    if (isTstLineStatment(line)) {\n      test.addInstruction(makeLineStatement(line));\n    } else {\n      const repeat = isTstWhileStatement(line)\n        ? new TestWhileInstruction(\n            new Condition(\n              line.condition.left,\n              line.condition.right,\n              line.condition.op\n            )\n          )\n        : new TestRepeatInstruction(line.count);\n      repeat.span = line.span;\n      test.addInstruction(repeat);\n      for (const statement of line.statements) {\n        repeat.addInstruction(makeLineStatement(statement));\n      }\n    }\n  }\n\n  test.reset();\n\n  return test;\n}\n\nexport class ChipTest extends Test<ChipTestInstruction> {\n  private chip: Chip = new Low();\n  get chipId(): number {\n    return this.chip.id;\n  }\n\n  private clock = Clock.get();\n\n  static from(tst: Tst): ChipTest {\n    const test = new ChipTest();\n    return fill(test, tst);\n  }\n\n  with(chip: Chip): this {\n    this.chip = chip;\n    return this;\n  }\n\n  hasVar(variable: string | number): boolean {\n    if (variable === \"time\") {\n      return true;\n    }\n    variable = `${variable}`;\n    // Look up built-in chip state variables\n    return this.chip.hasIn(variable) || this.chip.hasOut(variable);\n  }\n\n  getVar(variable: string | number, offset?: number): number | string {\n    variable = `${variable}`;\n    if (variable === \"time\") {\n      return this.clock.toString();\n    }\n    const pin = this.chip.get(variable, offset);\n    if (!pin) return 0;\n    return pin instanceof Bus ? pin.busVoltage : pin.voltage();\n  }\n\n  setVar(variable: string, value: number, offset?: number): void {\n    // Look up built-in chip state variables\n    const pinOrBus = this.chip.get(variable, offset);\n    if (pinOrBus instanceof Bus) {\n      pinOrBus.busVoltage = value;\n    } else {\n      pinOrBus?.pull(value === 0 ? LOW : HIGH);\n    }\n  }\n\n  eval(): void {\n    this.chip.eval();\n  }\n\n  tick(): void {\n    this.chip.eval();\n    this.clock.tick();\n  }\n\n  tock(): void {\n    this.chip.eval();\n    this.clock.tock();\n  }\n\n  override async load(filename: string) {\n    await this.chip.load(this.fs, filename);\n  }\n\n  override async run() {\n    this.clock.reset();\n    await super.run();\n  }\n}\n\nexport class CPUTest extends Test<CPUTestInstruction> {\n  readonly cpu: CPU;\n  private ticks = 0;\n\n  static from(tst: Tst, rom?: ROM): CPUTest {\n    const test = new CPUTest(rom);\n    return fill(test, tst);\n  }\n\n  constructor(rom: ROM = new ROM(new Int16Array())) {\n    super();\n    this.cpu = new CPU({ ROM: rom });\n    this.reset();\n  }\n\n  override reset(): this {\n    super.reset();\n    this.cpu.reset();\n    this.ticks = 0;\n    return this;\n  }\n\n  hasVar(variable: string | number): boolean {\n    if (typeof variable === \"number\") {\n      return false;\n    }\n    // A: Current value of the address register (unsigned 15-bit);\n    // D: Current value of the data register (16-bit);\n    // PC: Current value of the Program Counter (unsigned 15-bit);\n    // RAM[i]: Current value of RAM location i (16-bit);\n    // time: Number of time units (also called clock cycles, or ticktocks) that elapsed since the simulation started (a read-only system variable).\n    if (\n      variable === \"A\" ||\n      variable === \"D\" ||\n      variable === \"PC\" ||\n      variable === \"time\" ||\n      variable.startsWith(\"RAM\")\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  getVar(variable: string | number, offset?: number): number {\n    switch (variable) {\n      case \"A\":\n        return this.cpu.A;\n      case \"D\":\n        return this.cpu.D;\n      case \"PC\":\n        return this.cpu.PC;\n      case \"time\":\n        return this.ticks;\n      case \"RAM\":\n        return offset === undefined ? 0 : this.cpu.RAM.get(offset);\n    }\n    if (typeof variable === \"number\") return 0;\n    return 0;\n  }\n\n  setVar(variable: string, value: number, index?: number): void {\n    // A: Current value of the address register (unsigned 15-bit);\n    // D: Current value of the data register (16-bit);\n    // PC: Current value of the Program Counter (unsigned 15-bit);\n    // RAM[i]: Current value of RAM location i (16-bit);\n    switch (variable) {\n      case \"A\":\n        this.cpu.setA(value);\n        break;\n      case \"D\":\n        this.cpu.setD(value);\n        break;\n      case \"PC\":\n        this.cpu.setPC(value);\n        break;\n      case \"RAM\":\n        this.cpu.RAM.set(index ?? 0, value);\n        break;\n    }\n    return;\n  }\n\n  ticktock(): void {\n    this.ticks += 1;\n    this.cpu.tick();\n  }\n\n  override async load(filename: string): Promise<void> {\n    await this.cpu.ROM.load(this.fs, filename);\n  }\n}\n\nexport class VMTest extends Test<VMTestInstruction> {\n  hasVar(_variable: string | number): boolean {\n    return false;\n  }\n  getVar(_variable: string | number): number {\n    return 0;\n  }\n  setVar(_variable: string, _value: number): void {\n    return undefined;\n  }\n  vmstep(): void {\n    return undefined;\n  }\n}\n\nexport interface TestInstruction {\n  span?: Span;\n  do(test: Test): void;\n  steps(test: Test): IterableIterator<TestInstruction>;\n}\n\nexport class TestSetInstruction implements TestInstruction {\n  constructor(\n    private variable: string,\n    private value: number,\n    private index?: number | undefined\n  ) {}\n\n  do(test: Test) {\n    test.setVar(this.variable, this.value, this.index);\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestOutputInstruction implements TestInstruction {\n  do(test: Test) {\n    test.output();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestOutputListInstruction implements TestInstruction {\n  private outputs: Output[] = [];\n\n  constructor(specs: TstOutputSpec[] = []) {\n    for (const spec of specs) {\n      this.addOutput(spec);\n    }\n  }\n\n  addOutput(inst: TstOutputSpec) {\n    this.outputs.push(\n      new Output(\n        inst.id,\n        inst.style,\n        inst.width,\n        inst.lpad,\n        inst.rpad,\n        inst.builtin,\n        inst.address\n      )\n    );\n  }\n\n  do(test: Test) {\n    test.outputList(this.outputs);\n    test.header();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestCompoundInstruction implements TestInstruction {\n  protected readonly instructions: TestInstruction[] = [];\n  span?: Span;\n\n  addInstruction(instruction: TestInstruction) {\n    this.instructions.push(instruction);\n  }\n\n  do(test: Test<TestInstruction>): void {\n    for (const instruction of this.instructions) {\n      instruction.do(test);\n    }\n  }\n\n  *steps(_test: Test): Generator<TestInstruction> {\n    yield this;\n  }\n}\n\nexport class TestRepeatInstruction extends TestCompoundInstruction {\n  constructor(public readonly repeat: number) {\n    super();\n  }\n\n  override do() {\n    return undefined;\n  }\n\n  private *innerSteps(test: Test) {\n    for (const instruction of this.instructions) {\n      yield* instruction.steps(test);\n    }\n  }\n\n  override *steps(test: Test) {\n    if (this.repeat === -1) {\n      yield this;\n      while (true) {\n        yield* this.innerSteps(test);\n      }\n    } else {\n      for (let i = 0; i < this.repeat; i++) {\n        yield this;\n        yield* this.innerSteps(test);\n      }\n    }\n  }\n}\n\nexport class Condition {\n  constructor(\n    public readonly x: string | number,\n    public readonly y: string | number,\n    public readonly op: \"<\" | \"<=\" | \"=\" | \">=\" | \">\" | \"<>\"\n  ) {}\n\n  check(test: Test): boolean {\n    const x = test.hasVar(this.x) ? test.getVar(this.x) : this.x;\n    const y = test.hasVar(this.y) ? test.getVar(this.y) : this.y;\n\n    if (typeof x === \"string\" || typeof y === \"string\") {\n      switch (this.op) {\n        case \"=\":\n          return `${x}` === `${y}`;\n        case \"<>\":\n          return `${x}` !== `${y}`;\n      }\n    } else {\n      switch (this.op) {\n        case \"<\":\n          return x < y;\n        case \"<=\":\n          return x <= y;\n        case \">\":\n          return x > y;\n        case \">=\":\n          return x >= y;\n        case \"=\":\n          return x === y;\n        case \"<>\":\n          return x !== y;\n      }\n    }\n    return false;\n  }\n}\n\nexport class TestWhileInstruction extends TestCompoundInstruction {\n  constructor(public readonly condition: Condition) {\n    super();\n  }\n\n  override *steps(test: Test) {\n    while (this.condition.check(test)) {\n      yield this;\n      for (const instruction of this.instructions) {\n        yield* instruction.steps(test);\n      }\n    }\n  }\n}\n\nexport class TestEchoInstruction implements TestInstruction {\n  constructor(public readonly content: string) {}\n  do(test: Test) {\n    test.echo(this.content);\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestClearEchoInstruction implements TestInstruction {\n  do(test: Test) {\n    test.clearEcho();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestLoadROMInstruction implements TestInstruction {\n  constructor(readonly file: string) {}\n  async do(test: Test) {\n    test.fs.pushd(\"/test\");\n    await test.load(this.file);\n    test.fs.popd();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestBreakpointInstruction implements TestInstruction {\n  constructor(readonly variable: string, readonly value: number) {}\n\n  do(test: Test) {\n    test.addBreakpoint(this.variable, this.value);\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestClearBreakpointsInstruction implements TestInstruction {\n  do(test: Test) {\n    test.clearBreakpoints();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport interface ChipTestInstruction extends TestInstruction {\n  _chipTestInstruction_: true;\n  do(test: ChipTest): void | Promise<void>;\n}\n\nexport class TestEvalInstruction implements ChipTestInstruction {\n  readonly _chipTestInstruction_ = true;\n  do(test: ChipTest) {\n    test.eval();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestTickInstruction implements ChipTestInstruction {\n  readonly _chipTestInstruction_ = true;\n  do(test: ChipTest) {\n    test.tick();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport class TestTockInstruction implements ChipTestInstruction {\n  readonly _chipTestInstruction_ = true;\n  do(test: ChipTest) {\n    test.tock();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport interface CPUTestInstruction extends TestInstruction {\n  _cpuTestInstruction_: true;\n  do(test: CPUTest): void | Promise<void>;\n}\n\nexport class TestTickTockInstruction implements CPUTestInstruction {\n  readonly _cpuTestInstruction_ = true;\n  do(test: CPUTest) {\n    test.ticktock();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n\nexport interface VMTestInstruction extends TestInstruction {\n  _vmTestInstruction_: true;\n  do(test: VMTest): void | Promise<void>;\n}\n\nexport class TestVMStepInstruction implements VMTestInstruction {\n  readonly _vmTestInstruction_ = true;\n  do(test: VMTest) {\n    test.vmstep();\n  }\n\n  *steps() {\n    yield this;\n  }\n}\n"],"names":["KeyMap","Enter","Backspace","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Home","End","PageUp","PageDown","Insert","Delete","Escape","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","keyDisplays","Keyboard","keyboard","update","enabled","setEnabled","useState","character","setCharacter","bits","setBits","getKey","currentKey","onKeyDown","event","key","getKeyDisplay","keypress","mapping","undefined","length","code","charCodeAt","keyPressToHackCharacter","setKey","onKeyUp","clearKey","useEffect","window","addEventListener","removeEventListener","_jsxs","className","children","_jsx","RegisterComponent","name","onClick","Mode","props","mode","setMode","value","setValue","useStateInitializer","view","style","cursor","amount","block","Widths","display","width","doSelect","useCallback","ref","select","doChange","target","onChange","edit","position","zIndex","left","marginTop","color","onFocus","onBlur","onKeyPress","type","defaultValue","render","doScroll","scrollTop","state","get","totalHeight","toleranceHeight","bufferedItems","settings","itemHeight","minIndex","maxIndex","index","Math","floor","data","offset","limit","start","max","min","getData","topPaddingHeight","bottomPaddingHeight","viewportRef","useRef","startState","reducer","useMemo","Number","MAX_SAFE_INTEGER","startIndex","count","tolerance","fillVirtualScrollSettings","adapter","itemsAbove","viewportHeight","initialState","dispatchScroll","useReducer","current","row","initialScroll","div","rows","map","d","height","rowKey","overflowY","overflowAnchor","onScroll","e","MemoryBlock","memory","jmp","highlight","editable","justifyLeft","format","dec","size","range","v","i","MemoryCell","VirtualScroll","rounded","background","whiteSpace","padStart","ceil","log10","flex","textAlign","InlineEdit","newValue","Memory","displayEnabled","onUpload","fmt","setFormat","setJmp","goto","setGoto","highlighted","setHighlighted","renderKey","setRenderKey","jumpTo","isNaN","parseInt","isFinite","fileUploadRef","doLoad","click","setStatus","useContext","BaseContext","upload","async","files","file","source","text","loader","endsWith","loadHack","loadAsm","loadBlob","bytes","loadBytes","rerenderMemoryBlock","useClockReset","role","reset","placeholder","FORMATS","option","bin","hex","asm","doFormat","WHITE","set","x","y","pixel","Screen","canvas","draw","ctx","getContext","image","assertExists","getImageData","col","putImageData","drawImage","ctxRef","useClockFrame","clearRect","backgroundColor","maxWidth","boxSizing","marginInline","margin","borderTop","borderLeft","borderBottom","borderRight","frameFinished","subscription","Clock","frame$","subscribe","unsubscribe","reset$","displayClock","Clockface","clockface","setClockface","$","useClockface","compare","cmp","out","cmpResult","CMP","outResult","isErr","cmpData","Ok","outData","cmpI","outI","j","cmpJ","outJ","trim","match","DiffTable","zeroState","output","Err","failures","table","_","cell","pass","fontFamily","marginBottom","DiffCell","a","toString","isDisplay","str","JSON","stringify","emptyState","A","D","PC","ALU","flag","Flags","BITS","decode","instruction","bit","c","x1","x2","am","op","d1","d2","d3","j1","j2","j3","cpuTick","inM","alu","cpuTock","oldA","alu2","addressM","outM","writeM","CPU","RAM","ROM","this","setA","setD","setPC","constructor","RAMMem","SubMemory","SCREEN_SIZE","SCREEN_OFFSET","MemoryKeyboard","tick","input","tickState","_writeM","cpu","grammar","ohm","cmpGrammar","grammars","cmpSemantics","extendSemantics","baseSemantics","addAttribute","sourceString","line","_a","cells","_b","Root","lines","semantics","parser","parse","makeParser","tstGrammar","tstSemantics","extendAttribute","Index","idx","child","FileName","_open","_close","OutputFormat","_c","id","lpad","rpad","builtin","address","TstEvalOperation","TstOutputOperation","TstOutputListOperation","formats","spec","n","TstSetOperation","setOp","TstEchoOperation","message","String","TstClearEchoOperation","TstLoadROMOperation","_r","_l","TstFileOperation","Condition","right","TstWhile","cond","_o","statements","statement","condition","span","startIdx","end","endIdx","TstRepeat","TstStatement","list","stmt","ops","asIteration","node","operation","break","Tst","tst","TST","Output","variable","lPad","rPad","len","startsWith","groups","assert","includes","header","test","substring","padCenter","print","val","getVar","padLeft","B","X","padRight","slice","space","leftSpace","rightSpace","padEnd","Test","instructions","_outputList","_log","fs","FileSystem","setFileSystem","echo","_content","clearEcho","_filename","outputFile","outputList","outputs","addInstruction","push","_steps","steps","_step","next","currentStep","done","step","do","breakpoints","Map","addBreakpoint","clearBreakpoints","clear","values","join","log","isTstLineStatment","isTstWhileStatement","makeLineStatement","TestCompoundInstruction","inst","makeInstruction","TestTickInstruction","TestTockInstruction","TestTickTockInstruction","TestEvalInstruction","TestOutputInstruction","TestSetInstruction","TestOutputListInstruction","TestEchoInstruction","TestClearEchoInstruction","TestLoadROMInstruction","checkExhaustive","fill","repeat","TestWhileInstruction","TestRepeatInstruction","ChipTest","chip","Low","chipId","clock","static","with","hasVar","hasIn","hasOut","pin","Bus","busVoltage","voltage","setVar","pinOrBus","pull","LOW","HIGH","eval","tock","filename","load","super","run","CPUTest","ticks","rom","Int16Array","ticktock","specs","addOutput","_test","innerSteps","check","content","pushd","popd","_chipTestInstruction_","_cpuTestInstruction_"],"sourceRoot":""}