{"version":3,"file":"static/js/896.e1052838.chunk.js","mappings":"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","sources":["../../components/src/stores/asm.store.ts","../../components/src/table.tsx","pages/asm.tsx"],"sourcesContent":["import { Err, Ok, isErr } from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport {\n  KEYBOARD_OFFSET,\n  SCREEN_OFFSET,\n} from \"@nand2tetris/simulator/cpu/memory.js\";\nimport {\n  ASM,\n  Asm,\n  fillLabel,\n  isAValueInstruction,\n  translateInstruction,\n} from \"@nand2tetris/simulator/languages/asm.js\";\nimport { Span } from \"@nand2tetris/simulator/languages/base.js\";\nimport { bin } from \"@nand2tetris/simulator/util/twos.js\";\nimport { Dispatch, MutableRefObject, useContext, useMemo, useRef } from \"react\";\nimport { useImmerReducer } from \"../react.js\";\nimport { BaseContext } from \"./base.context.js\";\n\nfunction defaultSymbols(): [string, string][] {\n  return [\n    [\"R0\", \"0\"],\n    [\"R1\", \"1\"],\n    [\"R2\", \"2\"],\n    [\"...\", \"\"],\n    [\"R15\", \"15\"],\n    [\"SCREEN\", SCREEN_OFFSET.toString()],\n    [\"KBD\", KEYBOARD_OFFSET.toString()],\n  ];\n}\n\ninterface HighlightInfo {\n  resultHighlight: Span | undefined;\n  sourceHighlight: Span | undefined;\n  highlightMap: Map<Span, Span>;\n}\n\nclass Translator {\n  asm: Asm | null = null;\n  current = -1;\n  done = false;\n  symbols: [string, string][] = [];\n  hiddenSymbols: Map<number, [string, boolean]> = new Map();\n  result = \"\";\n  lineNumbers: number[] = [];\n\n  load(asm: Asm, lineNum: number) {\n    this.symbols = defaultSymbols();\n    this.hiddenSymbols.clear();\n    this.asm = asm;\n    fillLabel(asm, (name, value, isVar) => {\n      if (isVar) {\n        this.hiddenSymbols.set(value, [name, false]);\n      } else {\n        this.symbols.push([name, value.toString()]);\n      }\n    });\n    asm.instructions = asm.instructions.filter(\n      (instruction) => instruction.type !== \"L\"\n    );\n\n    this.resolveLineNumbers(lineNum);\n    this.reset();\n  }\n\n  resolveLineNumbers(lineNum: number) {\n    if (this.asm === null) {\n      return;\n    }\n    this.lineNumbers = Array(lineNum);\n    let currentLine = 0;\n    for (const instruction of this.asm.instructions) {\n      if (instruction.type === \"A\" || instruction.type === \"C\") {\n        this.lineNumbers[instruction.lineNum] = currentLine;\n        currentLine++;\n      }\n    }\n  }\n\n  step(highlightInfo: HighlightInfo) {\n    if (this.asm === null || this.current >= this.asm.instructions.length - 1) {\n      return;\n    }\n    this.current++;\n    const instruction = this.asm.instructions[this.current];\n    if (instruction.type === \"A\" || instruction.type === \"C\") {\n      highlightInfo.sourceHighlight = instruction.span;\n      const result = translateInstruction(this.asm.instructions[this.current]);\n      if (result === undefined) {\n        return;\n      }\n      this.result += `${bin(result)}\\n`;\n      highlightInfo.resultHighlight = {\n        start: this.current * 17,\n        end: (this.current + 1) * 17,\n      };\n\n      highlightInfo.highlightMap.set(\n        instruction.span,\n        highlightInfo.resultHighlight\n      );\n\n      if (instruction.type === \"A\" && isAValueInstruction(instruction)) {\n        const variable = this.hiddenSymbols.get(instruction.value);\n        if (variable != undefined && !variable[1]) {\n          this.symbols.push([variable[0], instruction.value.toString()]);\n          this.hiddenSymbols.set(instruction.value, [variable[0], true]);\n        }\n      }\n\n      if (this.current === this.asm.instructions.length - 1) {\n        this.done = true;\n      }\n    }\n  }\n\n  resetSymbols() {\n    const hiddenSymbolNames: Set<string> = new Set();\n    for (const [value, variable] of this.hiddenSymbols) {\n      hiddenSymbolNames.add(variable[0]);\n      this.hiddenSymbols.set(value, [variable[0], false]);\n    }\n\n    this.symbols = this.symbols.filter(\n      (symbol) => !hiddenSymbolNames.has(symbol[0])\n    );\n  }\n\n  reset() {\n    this.current = -1;\n    this.result = \"\";\n    this.done = false;\n    this.resetSymbols();\n  }\n}\n\nexport interface AsmPageState {\n  asm: string;\n  current: number;\n  resultHighlight: Span | undefined;\n  sourceHighlight: Span | undefined;\n  symbols: [string, string][];\n  result: string;\n  compare: string;\n  lineNumbers: number[];\n}\n\nexport type AsmStoreDispatch = Dispatch<{\n  action: keyof ReturnType<typeof makeAsmStore>[\"reducers\"];\n  payload?: unknown;\n}>;\n\nexport function makeAsmStore(\n  setStatus: (status: string) => void,\n  dispatch: MutableRefObject<AsmStoreDispatch>\n) {\n  const translator = new Translator();\n  const highlightInfo = {\n    resultHighlight: undefined,\n    sourceHighlight: undefined,\n    highlightMap: new Map(),\n  };\n  let animate = true;\n\n  const reducers = {\n    setAsm(state: AsmPageState, { asm }: { asm: string }) {\n      state.asm = asm;\n    },\n\n    setCmp(state: AsmPageState, { cmp }: { cmp: string }) {\n      state.compare = cmp;\n      setStatus(\"Loaded compare file\");\n    },\n\n    update(state: AsmPageState) {\n      state.current = translator.current;\n      state.result = translator.result;\n      state.symbols = Array.from(translator.symbols);\n      state.lineNumbers = Array.from(translator.lineNumbers);\n      state.sourceHighlight = highlightInfo.sourceHighlight;\n      state.resultHighlight = highlightInfo.resultHighlight;\n    },\n\n    compare(state: AsmPageState) {\n      const resultLines = state.result.split(\"\\n\");\n      const compareLines = state.compare.split(\"\\n\");\n\n      if (resultLines.length != compareLines.length) {\n        setStatus(\"Comparison failed - different lengths\");\n        return;\n      }\n\n      for (let i = 0; i < compareLines.length; i++) {\n        for (let j = 0; j < compareLines[i].length; j++) {\n          if (resultLines[i][j] !== compareLines[i][j]) {\n            setStatus(`Comparison failed at ${i}:${j}`);\n            state.resultHighlight = {\n              start: i * 17,\n              end: (i + 1) * 17,\n            };\n            return;\n          }\n        }\n      }\n      setStatus(\"Comparison successful\");\n    },\n  };\n\n  const actions = {\n    loadAsm(asm: string) {\n      dispatch.current({ action: \"setAsm\", payload: { asm } });\n\n      const parseResult = ASM.parse(asm);\n      if (isErr(parseResult)) {\n        setStatus(`Error parsing asm file - ${Err(parseResult).message}`);\n        return;\n      }\n\n      translator.load(Ok(parseResult), asm.split(\"\\n\").length);\n      dispatch.current({ action: \"update\" });\n      setStatus(\"Loaded asm file\");\n    },\n\n    setAnimate(value: boolean) {\n      animate = value;\n    },\n\n    step(): boolean {\n      translator.step(highlightInfo);\n      if (animate || translator.done) {\n        dispatch.current({ action: \"update\" });\n      }\n      if (translator.done) {\n        setStatus(\"Translation done.\");\n      }\n      return translator.done;\n    },\n\n    updateHighlight(index: number, fromSource: boolean) {\n      for (const [sourceSpan, resultSpan] of highlightInfo.highlightMap) {\n        if (\n          (fromSource &&\n            sourceSpan.start <= index &&\n            index <= sourceSpan.end) ||\n          (!fromSource && resultSpan.start <= index && index <= resultSpan.end)\n        ) {\n          highlightInfo.sourceHighlight = sourceSpan;\n          highlightInfo.resultHighlight = resultSpan;\n        }\n      }\n      dispatch.current({ action: \"update\" });\n    },\n\n    resetHighlightInfo() {\n      highlightInfo.sourceHighlight = undefined;\n      highlightInfo.resultHighlight = undefined;\n      highlightInfo.highlightMap.clear();\n    },\n\n    reset() {\n      setStatus(\"Reset\");\n      translator.reset();\n      this.resetHighlightInfo();\n      dispatch.current({ action: \"update\" });\n    },\n  };\n\n  const initialState = {\n    asm: \"\",\n    current: -1,\n    resultHighlight: undefined,\n    sourceHighlight: undefined,\n    symbols: [],\n    result: \"\",\n    compare: \"\",\n    lineNumbers: [],\n  };\n\n  return { initialState, reducers, actions };\n}\n\nexport function useAsmPageStore() {\n  const { setStatus } = useContext(BaseContext);\n\n  const dispatch = useRef<AsmStoreDispatch>(() => undefined);\n\n  const { initialState, reducers, actions } = useMemo(\n    () => makeAsmStore(setStatus, dispatch),\n    [setStatus, dispatch]\n  );\n\n  const [state, dispatcher] = useImmerReducer(reducers, initialState);\n  dispatch.current = dispatcher;\n\n  return { state, dispatch, actions };\n}\n","import { rounded } from \"@davidsouther/jiffies/lib/esm/dom/css/border.js\";\n\nexport const Table = ({\n  values = [],\n  highlight = -1,\n  onClick,\n}: {\n  values?: [string, string][];\n  highlight?: number;\n  onClick?: (id: string, value: string) => void;\n}) => {\n  return (\n    <div>\n      {values.map((entry, i) => (\n        <TableRow\n          key={i}\n          identifier={entry[0]}\n          value={entry[1]}\n          highlight={i === highlight}\n          onClick={() => onClick?.(entry[0], entry[1])}\n        />\n      ))}\n    </div>\n  );\n};\n\nconst TableRow = ({\n  identifier,\n  value,\n  highlight = false,\n  onClick,\n}: {\n  identifier: string;\n  value: string;\n  highlight?: boolean;\n  onClick?: () => void;\n}) => {\n  return (\n    <div style={{ display: \"flex\", alignItems: \"center\" }} onClick={onClick}>\n      {identifier.length > 0 && (\n        <code\n          style={{\n            flex: \"1\",\n            ...rounded(\"none\"),\n            ...(highlight\n              ? { background: \"var(--mark-background-color)\" }\n              : {}),\n            whiteSpace: \"pre\",\n            padding: \"3px\",\n          }}\n        >\n          {identifier}\n        </code>\n      )}\n      {value.length > 0 && (\n        <code\n          style={{\n            flex: \"1\",\n            textAlign: \"right\",\n            color: \"black\",\n            padding: \"3px\",\n            ...rounded(\"none\"),\n            ...(highlight\n              ? { background: \"var(--mark-background-color)\" }\n              : {}),\n          }}\n        >\n          {value}\n        </code>\n      )}\n    </div>\n  );\n};\n","import { Trans } from \"@lingui/macro\";\nimport { Runbar } from \"@nand2tetris/components/runbar\";\nimport { useAsmPageStore } from \"@nand2tetris/components/stores/asm.store\";\nimport { BaseContext } from \"@nand2tetris/components/stores/base.context\";\nimport { Table } from \"@nand2tetris/components/table\";\nimport { ASM } from \"@nand2tetris/simulator/languages/asm.js\";\nimport { loadHack } from \"@nand2tetris/simulator/loader.js\";\nimport { Timer } from \"@nand2tetris/simulator/timer\";\nimport { ChangeEvent, useContext, useEffect, useRef, useState } from \"react\";\nimport { Editor } from \"../shell/editor\";\nimport { Panel } from \"../shell/panel\";\n\nimport { Link } from \"react-router-dom\";\nimport { AppContext } from \"src/App.context\";\nimport { useDialog } from \"src/shell/dialog\";\nimport URLs from \"src/urls\";\nimport \"./asm.scss\";\n\nexport const Asm = () => {\n  const { state, actions, dispatch } = useAsmPageStore();\n  const { toolStates } = useContext(AppContext);\n\n  const [asm, setAsm] = useState(\"\");\n  const [cmp, setCmp] = useState(\"\");\n  const sourceCursorPos = useRef(0);\n  const resultCursorPos = useRef(0);\n\n  const runner = useRef<Timer>();\n  const [runnerAssigned, setRunnerAssigned] = useState(false);\n\n  const dialog = useDialog();\n\n  useEffect(() => {\n    if (toolStates.asmState.program) {\n      actions.loadAsm(toolStates.asmState.program);\n\n      if (toolStates.asmState.name) {\n        setAsm(toolStates.asmState.name);\n      }\n      if (toolStates.asmState.compare) {\n        dispatch.current({\n          action: \"setCmp\",\n          payload: { cmp: toolStates.asmState.compare },\n        });\n      }\n      if (toolStates.asmState.compareName) {\n        setCmp(toolStates.asmState.compareName);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    toolStates.setAsmState(asm, state.asm, cmp, state.compare);\n  }, [state, toolStates.setAsmState, asm, cmp]);\n\n  useEffect(() => {\n    runner.current = new (class AsmRunner extends Timer {\n      override async tick(): Promise<boolean> {\n        sourceCursorPos.current = 0;\n        resultCursorPos.current = 0;\n        return actions.step();\n      }\n      override reset(): void {\n        actions.reset();\n      }\n      override toggle(): void {\n        return;\n      }\n    })();\n    setRunnerAssigned(true);\n\n    return () => {\n      runner.current?.stop();\n    };\n  }, [actions, dispatch]);\n\n  const fileUploadRef = useRef<HTMLInputElement>(null);\n  const fileDownloadRef = useRef<HTMLAnchorElement>(null);\n  const redirectRef = useRef<HTMLAnchorElement>(null);\n  let fileType: \"asm\" | \"cmp\" = \"asm\";\n\n  const loadAsm = () => {\n    fileType = \"asm\";\n    fileUploadRef.current?.click();\n  };\n\n  const loadCompare = () => {\n    fileType = \"cmp\";\n    fileUploadRef.current?.click();\n  };\n\n  const { setStatus } = useContext(BaseContext);\n  const uploadFile = async (event: ChangeEvent<HTMLInputElement>) => {\n    if (!event.target.files?.length) {\n      setStatus(\"No file selected\");\n      return;\n    }\n    setStatus(\"Loading\");\n    const file = event.target.files[0];\n    const source = await file.text();\n    if (fileType === \"asm\") {\n      if (!file.name.endsWith(\".asm\")) {\n        setStatus(\"File must be .asm file\");\n        return;\n      }\n      actions.loadAsm(source);\n      setAsm(file.name);\n    } else {\n      if (!file.name.endsWith(\".hack\")) {\n        setStatus(\"File must be .hack file\");\n        return;\n      }\n      dispatch.current({ action: \"setCmp\", payload: { cmp: source } });\n      setCmp(file.name);\n    }\n  };\n\n  const download = () => {\n    const blob = new Blob([state.result], { type: \"text/plain\" });\n    const url = URL.createObjectURL(blob);\n\n    if (!fileDownloadRef.current) {\n      return;\n    }\n    fileDownloadRef.current.href = url;\n    fileDownloadRef.current.download = asm.replace(\".asm\", \".hack\");\n    fileDownloadRef.current.click();\n\n    URL.revokeObjectURL(url);\n  };\n\n  const compare = () => {\n    dispatch.current({ action: \"compare\" });\n  };\n\n  const onSpeedChange = (speed: number) => {\n    actions.setAnimate(speed <= 2);\n  };\n\n  return (\n    <div className=\"AsmPage grid\">\n      <Panel\n        className=\"source\"\n        header={\n          <>\n            <div>\n              <Trans>Source</Trans>\n              {asm && `: ${asm}`}\n            </div>\n            <input\n              type=\"file\"\n              style={{ display: \"none\" }}\n              ref={fileUploadRef}\n              onChange={uploadFile}\n            />\n            <div className=\"flex-1\">\n              {runnerAssigned && runner.current && (\n                <Runbar\n                  runner={runner.current}\n                  prefix={\n                    <button\n                      className=\"flex-0\"\n                      onClick={loadAsm}\n                      data-tooltip=\"Load file\"\n                      data-placement=\"bottom\"\n                    >\n                      📂\n                    </button>\n                  }\n                  overrideTooltips={[\"Translate\", \"Translate all\"]}\n                  onSpeedChange={onSpeedChange}\n                />\n              )}\n            </div>\n          </>\n        }\n      >\n        <Editor\n          value={state.asm}\n          onChange={(source: string) => {\n            return;\n          }}\n          onCursorPositionChange={(index) => {\n            if (index == sourceCursorPos.current) {\n              return;\n            }\n            sourceCursorPos.current = index;\n            actions.updateHighlight(index, true);\n          }}\n          grammar={ASM.parser}\n          language={\"asm\"}\n          highlight={state.sourceHighlight}\n          disabled={true}\n          lineNumberTransform={(n) => {\n            const num = state.lineNumbers[n] as number | undefined;\n            return (num === undefined ? \"\" : num).toString();\n          }}\n        />\n      </Panel>\n      <Panel\n        className=\"result\"\n        header={\n          <>\n            <div>\n              <Trans>Binary Code</Trans>\n            </div>\n            <div>\n              <a ref={fileDownloadRef} style={{ display: \"none\" }} />\n              <fieldset role=\"group\">\n                <button onClick={dialog.open}>📂</button>\n              </fieldset>\n              <dialog open={dialog.isOpen}>\n                <article>\n                  <header\n                    style={{ display: \"flex\", flexDirection: \"row-reverse\" }}\n                  >\n                    <a\n                      style={{ color: \"rgba(0, 0, 0, 0)\" }}\n                      className=\"close\"\n                      href=\"#root\"\n                      onClick={(e) => {\n                        e.preventDefault();\n                        dialog.close();\n                      }}\n                    />\n                  </header>\n                  <main>\n                    <button\n                      onClick={() => {\n                        download();\n                        dialog.close();\n                      }}\n                    >\n                      Download\n                    </button>\n                    <Link\n                      ref={redirectRef}\n                      style={{ display: \"none\" }}\n                      to={URLs[\"cpu\"].href}\n                    />\n                    <button\n                      onClick={async () => {\n                        toolStates.setTool(\"cpu\");\n                        const bytes = await loadHack(state.result);\n                        toolStates.setCpuState(\n                          asm.replace(\".asm\", \".hack\"),\n                          bytes\n                        );\n                        redirectRef.current?.click();\n                      }}\n                    >\n                      Load in CPU Emulator\n                    </button>\n                  </main>\n                </article>\n              </dialog>\n            </div>\n          </>\n        }\n      >\n        <Editor\n          value={state.result}\n          highlight={state.resultHighlight}\n          disabled={true}\n          onChange={function (source: string): void {\n            return;\n          }}\n          onCursorPositionChange={(index) => {\n            if (index == resultCursorPos.current) {\n              return;\n            }\n            resultCursorPos.current = index;\n            actions.updateHighlight(index, false);\n          }}\n          grammar={undefined}\n          language={\"\"}\n          dynamicHeight={true}\n          lineNumberTransform={(n) => (n - 1).toString()}\n        />\n        {state.symbols.length > 0 && \"Symbol Table\"}\n        <Table values={state.symbols} />\n      </Panel>\n      <Panel\n        className=\"compare\"\n        header={\n          <>\n            <div>\n              <Trans>Compare</Trans>\n              {cmp && `: ${cmp}`}\n            </div>\n            <div>\n              <fieldset role=\"group\">\n                <button onClick={compare}>Compare</button>\n                <button\n                  onClick={loadCompare}\n                  data-tooltip=\"Load file\"\n                  data-placement=\"left\"\n                >\n                  📂\n                </button>\n              </fieldset>\n            </div>\n          </>\n        }\n      >\n        <Editor\n          value={state.compare}\n          highlight={state.resultHighlight}\n          disabled={true}\n          onChange={function (source: string): void {\n            return;\n          }}\n          onCursorPositionChange={(index) => {\n            if (index == resultCursorPos.current) {\n              return;\n            }\n            resultCursorPos.current = index;\n            actions.updateHighlight(index, false);\n          }}\n          language={\"\"}\n          lineNumberTransform={(n) => (n - 1).toString()}\n        />\n      </Panel>\n    </div>\n  );\n};\n\nexport default Asm;\n"],"names":["Translator","asm","current","done","symbols","hiddenSymbols","Map","result","lineNumbers","load","lineNum","this","SCREEN_OFFSET","KEYBOARD_OFFSET","clear","fillLabel","name","value","isVar","set","push","toString","instructions","filter","instruction","type","resolveLineNumbers","reset","Array","currentLine","step","highlightInfo","length","sourceHighlight","span","translateInstruction","undefined","bin","resultHighlight","start","end","highlightMap","isAValueInstruction","variable","get","resetSymbols","hiddenSymbolNames","Set","add","symbol","has","useAsmPageStore","setStatus","useContext","BaseContext","dispatch","useRef","initialState","reducers","actions","useMemo","translator","animate","setAsm","state","setCmp","cmp","compare","update","from","resultLines","split","compareLines","i","j","loadAsm","action","payload","parseResult","ASM","isErr","Err","message","Ok","setAnimate","updateHighlight","index","fromSource","sourceSpan","resultSpan","resetHighlightInfo","makeAsmStore","dispatcher","useImmerReducer","Table","values","highlight","onClick","_jsx","children","map","entry","TableRow","identifier","_jsxs","style","display","alignItems","flex","rounded","background","whiteSpace","padding","textAlign","color","Asm","toolStates","AppContext","useState","sourceCursorPos","resultCursorPos","runner","runnerAssigned","setRunnerAssigned","dialog","useDialog","useEffect","asmState","program","compareName","setAsmState","Timer","toggle","stop","fileUploadRef","fileDownloadRef","redirectRef","fileType","className","header","ref","onChange","async","event","target","files","file","source","text","endsWith","prefix","click","overrideTooltips","onSpeedChange","speed","onCursorPositionChange","grammar","language","disabled","lineNumberTransform","n","num","role","open","isOpen","flexDirection","href","e","preventDefault","close","blob","Blob","url","URL","createObjectURL","download","replace","revokeObjectURL","to","URLs","setTool","bytes","loadHack","setCpuState","dynamicHeight"],"sourceRoot":""}