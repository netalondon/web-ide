{"version":3,"file":"static/js/906.b89e44de.chunk.js","mappings":"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","sources":["../../simulator/src/chip/builtins/sequential/ram.tsx","../../simulator/src/chip/builtins/computer/computer.tsx","../../simulator/src/chip/builtins/logic/and.ts","../../simulator/src/chip/builtins/logic/dmux.ts","../../simulator/src/chip/builtins/logic/mux.ts","../../simulator/src/chip/builtins/logic/nand.ts","../../simulator/src/chip/builtins/logic/not.ts","../../simulator/src/chip/builtins/logic/or.ts","../../simulator/src/chip/builtins/logic/xor.ts","../../simulator/src/chip/builtins/arithmetic/add_16.ts","../../simulator/src/chip/builtins/arithmetic/alu.tsx","../../simulator/src/chip/builtins/arithmetic/half_adder.ts","../../simulator/src/chip/builtins/arithmetic/full_adder.ts","../../simulator/src/chip/builtins/arithmetic/inc16.ts","../../simulator/src/chip/builtins/sequential/bit.tsx","../../simulator/src/chip/builtins/sequential/dff.ts","../../simulator/src/chip/builtins/index.ts","../../components/src/chips/alu.tsx","../../components/src/chips/visualizations.tsx","../../components/src/pin_display.ts","../../components/src/pinout.tsx","../../simulator/src/languages/grammars/hdl.ohm.js","../../simulator/src/languages/hdl.ts","../../simulator/src/chip/builder.ts","../../components/src/stores/chip.store.ts","pages/chip.tsx"],"sourcesContent":["import { Bus, ClockedChip, Pin } from \"../../chip.js\";\nimport { assert } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { Memory, Memory as MemoryChip } from \"../../../cpu/memory.js\";\n\nexport class RAM extends ClockedChip {\n  protected _memory: MemoryChip;\n  private _nextData = 0;\n  private _address = 0;\n\n  get memory() {\n    return this._memory;\n  }\n  get address() {\n    return this._address;\n  }\n\n  constructor(readonly width: number, name?: string) {\n    super([\"in[16]\", \"load\", `address[${width}]`], [`out[16]`], name);\n    this._memory = new MemoryChip(Math.pow(2, this.width));\n  }\n\n  override tick() {\n    const load = this.in(\"load\").voltage();\n    this._address = this.in(\"address\").busVoltage;\n    if (load) {\n      this._nextData = this.in().busVoltage;\n      this._memory.set(this._address, this._nextData);\n    }\n  }\n\n  override tock() {\n    this.out().busVoltage = this._memory?.get(this._address) ?? 0;\n  }\n\n  override eval() {\n    const address = this.in(\"address\").busVoltage;\n    this.out().busVoltage = this._memory?.get(address) ?? 0;\n  }\n\n  at(idx: number): Pin {\n    assert(\n      idx < this._memory.size,\n      () => `Request out of bounds (${idx} >= ${this._memory.size})`\n    );\n    return new RamBus(`${this.name}[${idx}]`, idx, this._memory);\n  }\n\n  override reset(): void {\n    this._memory.reset();\n    super.reset();\n  }\n}\n\nexport class RamBus extends Bus {\n  constructor(\n    name: string,\n    private readonly index: number,\n    private ram: Memory\n  ) {\n    super(name);\n  }\n\n  override get busVoltage(): number {\n    return this.ram.get(this.index);\n  }\n\n  override set busVoltage(num: number) {\n    this.ram.set(this.index, num);\n  }\n}\n\nexport class RAM8 extends RAM {\n  constructor(name?: string) {\n    super(3, name);\n  }\n}\n\nexport class RAM64 extends RAM {\n  constructor(name?: string) {\n    super(6, name);\n  }\n}\n\nexport class RAM512 extends RAM {\n  constructor(name?: string) {\n    super(9, name);\n  }\n}\n\nexport class RAM4K extends RAM {\n  constructor(name?: string) {\n    super(12, name);\n  }\n}\n\nexport class RAM16K extends RAM {\n  constructor(name?: string) {\n    super(14, name);\n  }\n}\n","import { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport { Chip, ClockedChip, ConstantBus, HIGH, LOW, Pin } from \"../../chip.js\";\nimport { RAM, RAM16K } from \"../sequential/ram.js\";\nimport {\n  CPUInput,\n  CPUState,\n  cpuTick,\n  cpuTock,\n  emptyState,\n} from \"../../../cpu/cpu.js\";\nimport { int10 } from \"../../../util/twos.js\";\nimport { load } from \"../../../fs.js\";\nimport {\n  KEYBOARD_OFFSET,\n  KeyboardAdapter,\n  SCREEN_OFFSET,\n  SCREEN_SIZE,\n} from \"../../../cpu/memory.js\";\n\nexport class ROM32K extends RAM {\n  constructor() {\n    super(16, \"ROM\");\n  }\n\n  override async load(fs: FileSystem, path: string) {\n    try {\n      (await load(fs, path)).map((v, i) => (this.at(i).busVoltage = v));\n    } catch (cause) {\n      // throw new Error(`ROM32K Failed to load file ${path}`, { cause });\n      throw new Error(`ROM32K Failed to load file ${path}`);\n    }\n  }\n}\n\nexport class Screen extends RAM {\n  static readonly SIZE = SCREEN_SIZE;\n  static readonly OFFSET = SCREEN_OFFSET;\n\n  constructor() {\n    super(13, \"Screen\");\n  }\n}\n\nexport class Keyboard extends Chip implements KeyboardAdapter {\n  static readonly OFFSET = KEYBOARD_OFFSET;\n\n  constructor() {\n    super([], [\"out[16]\"], \"Keyboard\");\n  }\n\n  getKey() {\n    return this.out().busVoltage;\n  }\n\n  setKey(key: number) {\n    this.out().busVoltage = key & 0xffff;\n  }\n\n  clearKey() {\n    this.out().busVoltage = 0;\n  }\n}\n\nexport class Memory extends ClockedChip {\n  private ram = new RAM16K();\n  private screen = new Screen();\n  private keyboard = new Keyboard();\n  private address = 0;\n\n  constructor() {\n    super([\"in[16]\", \"load\", \"address[15])\"], [\"out[16]\"], \"Memory\");\n    this.parts.add(this.keyboard);\n    this.parts.add(this.screen);\n    this.parts.add(this.ram);\n  }\n\n  override tick() {\n    const load = this.in(\"load\").voltage();\n    this.address = this.in(\"address\").busVoltage;\n    if (load) {\n      const inn = this.in().busVoltage;\n      if (this.address >= Keyboard.OFFSET) {\n        // Keyboard, do nothing\n      } else if (this.address >= Screen.OFFSET) {\n        this.screen.at(this.address - Screen.OFFSET).busVoltage = inn;\n      } else {\n        this.ram.at(this.address).busVoltage = inn;\n      }\n    }\n  }\n\n  override tock() {\n    this.eval();\n  }\n\n  override eval() {\n    if (!this.ram) return;\n    this.address = this.in(\"address\").busVoltage;\n    let out = 0;\n    if (this.address >= Keyboard.OFFSET) {\n      // Keyboard, do nothing\n      out = this.keyboard?.out().busVoltage ?? 0;\n    } else if (this.address >= Screen.OFFSET) {\n      out = this.screen?.at(this.address - Screen.OFFSET).busVoltage ?? 0;\n    } else {\n      out = this.ram?.at(this.address).busVoltage ?? 0;\n    }\n    this.out().busVoltage = out;\n  }\n\n  override in(pin?: string): Pin {\n    if (pin?.startsWith(\"RAM16K\")) {\n      const idx = int10(pin.match(/\\[(?<idx>\\d+)]/)?.groups?.idx ?? \"0\");\n      return this.ram.at(idx);\n    }\n    if (pin?.startsWith(\"Screen\")) {\n      const idx = int10(pin.match(/\\[(?<idx>\\d+)]/)?.groups?.idx ?? \"0\");\n      return this.screen.at(idx);\n    }\n    return super.in(pin);\n  }\n\n  override get(name: string, offset = 0): Pin | undefined {\n    if (name.startsWith(\"RAM16K\")) {\n      return this.at(offset & 0x3fff);\n    }\n    if (name.startsWith(\"Screen\")) {\n      return this.at(offset & (0x1fff + Screen.OFFSET));\n    }\n    if (name.startsWith(\"Keyboard\")) {\n      return this.at(Keyboard.OFFSET);\n    }\n    if (name.startsWith(\"Memory\")) {\n      return this.at(offset);\n    }\n    return super.get(name, offset);\n  }\n\n  at(offset: number): Pin {\n    if (offset >= Keyboard.OFFSET) {\n      return this.keyboard.out();\n    }\n    if (offset >= Screen.OFFSET) {\n      return this.screen.at(offset - Screen.OFFSET);\n    } else {\n      return this.ram.at(offset);\n    }\n  }\n\n  override reset(): void {\n    this.address = 0;\n    this.ram.reset();\n    this.screen.reset();\n    super.reset();\n  }\n}\n\nexport class CPU extends ClockedChip {\n  private _state: CPUState = emptyState();\n\n  get state(): CPUState {\n    return this._state;\n  }\n\n  constructor() {\n    super(\n      [\"inM[16]\", \"instruction[16]\", \"reset\"],\n      [\"outM[16]\", \"writeM\", \"addressM[15]\", \"pc[15]\"]\n    );\n  }\n\n  override tick(): void {\n    const [state, writeM] = cpuTick(this.cpuInput(), this._state);\n    this._state = state;\n    this.out(\"writeM\").pull(writeM ? HIGH : LOW);\n    this.out(\"outM\").busVoltage = this._state.ALU ?? 0;\n}\n\n  override tock(): void {\n    if (!this._state) return; // Skip initial tock\n    const [output, state] = cpuTock(this.cpuInput(), this._state);\n    this._state = state;\n\n    this.out(\"addressM\").busVoltage = output.addressM ?? 0;\n    this.out(\"outM\").busVoltage = output.outM ?? 0;\n    this.out(\"writeM\").pull(output.writeM ? HIGH : LOW);\n    this.out(\"pc\").busVoltage = this._state?.PC ?? 0;\n  }\n\n  private cpuInput(): CPUInput {\n    const inM = this.in(\"inM\").busVoltage;\n    const instruction = this.in(\"instruction\").busVoltage;\n    const reset = this.in(\"reset\").busVoltage === 1;\n    return { inM, instruction, reset };\n  }\n\n  override get(pin: string, offset?: number): Pin | undefined {\n    if (pin?.startsWith(\"ARegister\")) {\n      return new ConstantBus(\"ARegister\", this._state.A);\n    }\n    if (pin?.startsWith(\"DRegister\")) {\n      return new ConstantBus(\"DRegister\", this._state.D);\n    }\n    if (pin?.startsWith(\"PC\")) {\n      return new ConstantBus(\"PC\", this._state.PC);\n    }\n    return super.get(pin, offset);\n  }\n\n  override reset() {\n    this._state = emptyState();\n\n    // This is a bit of a hack, but because super.reset() does ticktock,\n    // we need to set PC to -1, so that it will be 0 after the reset\n    this._state.PC = -1;\n\n    super.reset();\n  }\n}\n\nexport class Computer extends Chip {\n  #cpu = new CPU();\n  #ram = new Memory();\n  #rom = new ROM32K();\n\n  constructor() {\n    super([\"reset\"], []);\n\n    this.wire(this.#cpu, [\n      { from: { name: \"reset\", start: 0 }, to: { name: \"reset\", start: 0 } },\n      {\n        from: { name: \"instruction\", start: 0 },\n        to: { name: \"instruction\", start: 0 },\n      },\n      { from: { name: \"oldOutM\", start: 0 }, to: { name: \"inM\", start: 0 } },\n      { from: { name: \"writeM\", start: 0 }, to: { name: \"writeM\", start: 0 } },\n      {\n        from: { name: \"addressM\", start: 0 },\n        to: { name: \"addressM\", start: 0 },\n      },\n      { from: { name: \"newInM\", start: 0 }, to: { name: \"outM\", start: 0 } },\n      { from: { name: \"pc\", start: 0 }, to: { name: \"pc\", start: 0 } },\n    ]);\n\n    this.wire(this.#rom, [\n      { from: { name: \"pc\", start: 0 }, to: { name: \"address\", start: 0 } },\n      {\n        from: { name: \"instruction\", start: 0 },\n        to: { name: \"out\", start: 0 },\n      },\n    ]);\n\n    this.wire(this.#ram, [\n      { from: { name: \"newInM\", start: 0 }, to: { name: \"in\", start: 0 } },\n      { from: { name: \"writeM\", start: 0 }, to: { name: \"load\", start: 0 } },\n      {\n        from: { name: \"addressM\", start: 0 },\n        to: { name: \"address\", start: 0 },\n      },\n      { from: { name: \"oldOutM\", start: 0 }, to: { name: \"out\", start: 0 } },\n    ]);\n  }\n\n  override eval() {\n    super.eval();\n  }\n\n  override get(name: string, offset?: number): Pin | undefined {\n    if (\n      name.startsWith(\"PC\") ||\n      name.startsWith(\"ARegister\") ||\n      name.startsWith(\"DRegister\")\n    ) {\n      return this.#cpu.get(name);\n    }\n    if (name.startsWith(\"RAM16K\")) {\n      return this.#ram.get(name, offset);\n    }\n    return super.get(name, offset);\n  }\n\n  override async load(fs: FileSystem, path: string): Promise<void> {\n    return await this.#rom.load(fs, path);\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function and(a: Voltage, b: Voltage): [Voltage] {\n  return [a === 1 && b === 1 ? HIGH : LOW];\n}\n\nexport function and16(a: number, b: number): [number] {\n  return [a & b & 0xffff];\n}\n\nexport class And extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [n] = and(a, b);\n    this.out().pull(n);\n  }\n}\n\nexport class And16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const [n] = and16(a, b);\n    this.out().busVoltage = n;\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function dmux(inn: Voltage, sel: Voltage): [Voltage, Voltage] {\n  const a = sel === LOW && inn === HIGH ? HIGH : LOW;\n  const b = sel === HIGH && inn === HIGH ? HIGH : LOW;\n  return [a, b];\n}\n\nexport function dmux4way(\n  inn: Voltage,\n  sel: number\n): [Voltage, Voltage, Voltage, Voltage] {\n  const a = sel === 0b00 && inn === HIGH ? HIGH : LOW;\n  const b = sel === 0b01 && inn === HIGH ? HIGH : LOW;\n  const c = sel === 0b10 && inn === HIGH ? HIGH : LOW;\n  const d = sel === 0b11 && inn === HIGH ? HIGH : LOW;\n  return [a, b, c, d];\n}\n\nexport function dmux8way(\n  inn: Voltage,\n  sel: number\n): [Voltage, Voltage, Voltage, Voltage, Voltage, Voltage, Voltage, Voltage] {\n  const a = sel === 0b000 && inn === HIGH ? HIGH : LOW;\n  const b = sel === 0b001 && inn === HIGH ? HIGH : LOW;\n  const c = sel === 0b010 && inn === HIGH ? HIGH : LOW;\n  const d = sel === 0b011 && inn === HIGH ? HIGH : LOW;\n  const e = sel === 0b100 && inn === HIGH ? HIGH : LOW;\n  const f = sel === 0b101 && inn === HIGH ? HIGH : LOW;\n  const g = sel === 0b110 && inn === HIGH ? HIGH : LOW;\n  const h = sel === 0b111 && inn === HIGH ? HIGH : LOW;\n  return [a, b, c, d, e, f, g, h];\n}\n\nexport class DMux extends Chip {\n  constructor() {\n    super([\"in\", \"sel\"], [\"a\", \"b\"]);\n  }\n\n  override eval() {\n    const inn = this.in(\"in\").voltage();\n    const sel = this.in(\"sel\").voltage();\n\n    const [a, b] = dmux(inn, sel);\n    this.out(\"a\").pull(a);\n    this.out(\"b\").pull(b);\n  }\n}\n\nexport class DMux4Way extends Chip {\n  constructor() {\n    super([\"in\", \"sel[2]\"], [\"a\", \"b\", \"c\", \"d\"]);\n  }\n\n  override eval() {\n    const inn = this.in(\"in\").voltage();\n    const sel = this.in(\"sel\").busVoltage;\n\n    const [a, b, c, d] = dmux4way(inn, sel);\n    this.out(\"a\").pull(a);\n    this.out(\"b\").pull(b);\n    this.out(\"c\").pull(c);\n    this.out(\"d\").pull(d);\n  }\n}\n\nexport class DMux8Way extends Chip {\n  constructor() {\n    super([\"in\", \"sel[3]\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]);\n  }\n\n  override eval() {\n    const inn = this.in(\"in\").voltage();\n    const sel = this.in(\"sel\").busVoltage;\n\n    const [a, b, c, d, e, f, g, h] = dmux8way(inn, sel);\n    this.out(\"a\").pull(a);\n    this.out(\"b\").pull(b);\n    this.out(\"c\").pull(c);\n    this.out(\"d\").pull(d);\n    this.out(\"e\").pull(e);\n    this.out(\"f\").pull(f);\n    this.out(\"g\").pull(g);\n    this.out(\"h\").pull(h);\n  }\n}\n","import { Chip, LOW, Voltage } from \"../../chip.js\";\n\nexport function mux(a: Voltage, b: Voltage, sel: Voltage): [Voltage] {\n  return [sel === LOW ? a : b];\n}\n\nexport function mux16(a: number, b: number, sel: Voltage): [number] {\n  return [sel === LOW ? a : b];\n}\n\nexport function mux16_4(\n  a: number,\n  b: number,\n  c: number,\n  d: number,\n  sel: number\n): [number] {\n  const s2 = (sel & 0b01) as Voltage;\n  return (sel & 0b10) === 0b00 ? mux16(a, b, s2) : mux16(c, d, s2);\n}\n\nexport function mux16_8(\n  a: number,\n  b: number,\n  c: number,\n  d: number,\n  e: number,\n  f: number,\n  g: number,\n  h: number,\n  sel: number\n): [number] {\n  const s2 = (sel & 0b11) as Voltage;\n  return (sel & 0b100) === 0b000\n    ? mux16_4(a, b, c, d, s2)\n    : mux16_4(e, f, g, h, s2);\n}\n\nexport class Mux extends Chip {\n  constructor() {\n    super([\"a\", \"b\", \"sel\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const sel = this.in(\"sel\").voltage();\n\n    const [set] = mux(a, b, sel);\n    this.out().pull(set);\n  }\n}\n\nexport class Mux16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\", \"sel\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const sel = this.in(\"sel\").voltage();\n    const [out] = mux16(a, b, sel);\n    this.out().busVoltage = out;\n  }\n}\n\nexport class Mux4Way16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\", \"c[16]\", \"d[16]\", \"sel[2]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const c = this.in(\"c\").busVoltage;\n    const d = this.in(\"d\").busVoltage;\n    const sel = this.in(\"sel\").busVoltage;\n    const [out] = mux16_4(a, b, c, d, sel);\n\n    this.out().busVoltage = out;\n  }\n}\n\nexport class Mux8Way16 extends Chip {\n  constructor() {\n    super(\n      [\n        \"a[16]\",\n        \"b[16]\",\n        \"c[16]\",\n        \"d[16]\",\n        \"e[16]\",\n        \"f[16]\",\n        \"g[16]\",\n        \"h[16]\",\n        \"sel[3]\",\n      ],\n      [\"out[16]\"]\n    );\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const c = this.in(\"c\").busVoltage;\n    const d = this.in(\"d\").busVoltage;\n    const e = this.in(\"e\").busVoltage;\n    const f = this.in(\"f\").busVoltage;\n    const g = this.in(\"g\").busVoltage;\n    const h = this.in(\"h\").busVoltage;\n    const sel = this.in(\"sel\").busVoltage;\n    const [out] = mux16_8(a, b, c, d, e, f, g, h, sel);\n\n    this.out().busVoltage = out;\n  }\n}\n","import { nand16 } from \"../../../util/twos.js\";\nimport { HIGH, LOW, Chip, Voltage } from \"../../chip.js\";\n\nexport function nand(a: Voltage, b: Voltage): [Voltage] {\n  return [a === 1 && b === 1 ? LOW : HIGH];\n}\n\nexport class Nand extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [out] = nand(a, b);\n    this.out().pull(out);\n  }\n}\n\nexport class Nand16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    this.out().busVoltage = nand16(a, b);\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function not(inn: Voltage): [Voltage] {\n  return [inn === LOW ? HIGH : LOW];\n}\n\nexport function not16(inn: number): [number] {\n  return [~inn & 0xffff];\n}\n\nexport class Not extends Chip {\n  constructor() {\n    super([\"in\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"in\").voltage();\n    const [out] = not(a);\n    this.out().pull(out);\n  }\n}\n\nexport class Not16 extends Chip {\n  constructor() {\n    super([\"in[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const [n] = not16(this.in().busVoltage);\n    this.out().busVoltage = n;\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function or(a: Voltage, b: Voltage): [Voltage] {\n  return [a === 1 || b === 1 ? HIGH : LOW];\n}\n\nexport function or16(a: number, b: number): [number] {\n  return [(a | b) & 0xffff];\n}\n\nexport function or8way(a: number): [Voltage] {\n  return [(a & 0xff) === 0 ? LOW : HIGH];\n}\n\nexport class Or extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [out] = or(a, b);\n    this.out().pull(out);\n  }\n}\n\nexport class Or16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const [out] = or16(a, b);\n    this.out().busVoltage = out;\n  }\n}\n\nexport class Or8way extends Chip {\n  constructor() {\n    super([\"in[8]\"], [\"out\"], \"Or8way\");\n  }\n\n  override eval() {\n    const inn = this.in().busVoltage;\n    const [out] = or8way(inn);\n    this.out().pull(out);\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function xor(a: Voltage, b: Voltage): [Voltage] {\n  return [(a === HIGH && b === LOW) || (a === LOW && b === HIGH) ? HIGH : LOW];\n}\n\nexport function xor16(a: number, b: number): [number] {\n  return [(a ^ b) & 0xffff];\n}\n\nexport class Xor extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [out] = xor(a, b);\n    this.out().pull(out);\n  }\n}\n\nexport class Xor16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const [out] = xor16(a, b);\n    this.out().busVoltage = out;\n  }\n}\n","import { Chip } from \"../../chip.js\";\n\nexport function add16(a: number, b: number): [number] {\n  return [(a + b) & 0xffff];\n}\n\nexport class Add16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"], \"Add16\");\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const [out] = add16(a, b);\n    this.out().busVoltage = out;\n  }\n}\n","import { alu, alua, COMMANDS_OP, Flags } from \"../../../cpu/alu.js\";\nimport { Chip, HIGH, LOW } from \"../../chip.js\";\n\nexport class ALUNoStat extends Chip {\n  constructor() {\n    super(\n      [\n        \"x[16]\",\n        \"y[16]\", // 16-bit inputs\n        \"zx\", // zero the x input?\n        \"nx\", // negate the x input?\n        \"zy\", // zero the y input?\n        \"ny\", // negate the y input?\n        \"f\", // compute out = x + y (if 1) or x & y (if 0)\n        \"no\", // negate the out output?\n      ],\n      [\n        \"out[16]\", // 16-bit output\n      ],\n      \"ALU\"\n    );\n  }\n\n  override eval() {\n    const x = this.in(\"x\").busVoltage;\n    const y = this.in(\"y\").busVoltage;\n    const zx = this.in(\"zx\").busVoltage << 5;\n    const nx = this.in(\"nx\").busVoltage << 4;\n    const zy = this.in(\"zy\").busVoltage << 3;\n    const ny = this.in(\"ny\").busVoltage << 2;\n    const f = this.in(\"f\").busVoltage << 1;\n    const no = this.in(\"no\").busVoltage << 0;\n    const op = zx + nx + zy + ny + f + no;\n\n    const [out] = alu(op, x, y);\n\n    this.out().busVoltage = out;\n  }\n}\n\nexport class ALU extends Chip {\n  constructor() {\n    super(\n      [\n        \"x[16]\",\n        \"y[16]\", // 16-bit inputs\n        \"zx\", // zero the x input?\n        \"nx\", // negate the x input?\n        \"zy\", // zero the y input?\n        \"ny\", // negate the y input?\n        \"f\", // compute out = x + y (if 1) or x & y (if 0)\n        \"no\", // negate the out output?\n      ],\n      [\n        \"out[16]\", // 16-bit output\n        \"zr\", // 1 if (out === 0), 0 otherwise\n        \"ng\", // 1 if (out < 0),  0 otherwise\n      ],\n      \"ALU\"\n    );\n  }\n\n  override eval() {\n    const x = this.in(\"x\").busVoltage;\n    const y = this.in(\"y\").busVoltage;\n    const zx = this.in(\"zx\").busVoltage << 5;\n    const nx = this.in(\"nx\").busVoltage << 4;\n    const zy = this.in(\"zy\").busVoltage << 3;\n    const ny = this.in(\"ny\").busVoltage << 2;\n    const f = this.in(\"f\").busVoltage << 1;\n    const no = this.in(\"no\").busVoltage << 0;\n    const op = zx + nx + zy + ny + f + no;\n\n    const [out, flags] = alu(op, x, y);\n\n    const ng = flags === Flags.Negative ? HIGH : LOW;\n    const zr = flags === Flags.Zero ? HIGH : LOW;\n    this.out(\"out\").busVoltage = out;\n    this.out(\"ng\").pull(ng);\n    this.out(\"zr\").pull(zr);\n  }\n\n  op(): COMMANDS_OP {\n    const zx = this.in(\"zx\").busVoltage << 5;\n    const nx = this.in(\"nx\").busVoltage << 4;\n    const zy = this.in(\"zy\").busVoltage << 3;\n    const ny = this.in(\"ny\").busVoltage << 2;\n    const f = this.in(\"f\").busVoltage << 1;\n    const no = this.in(\"no\").busVoltage << 0;\n    const op = zx + nx + zy + ny + f + no;\n    return op as COMMANDS_OP;\n  }\n}\n\nexport class ALUAll extends Chip {\n  constructor() {\n    super(\n      [\n        \"x[16]\",\n        \"y[16]\", // 16-bit inputs\n        \"zx\", // zero the x input?\n        \"nx\", // negate the x input?\n        \"zy\", // zero the y input?\n        \"ny\", // negate the y input?\n        \"f\", // compute out = x + y (if 1) or x & y (if 0)\n        \"no\", // negate the out output?\n      ],\n      [\n        \"out[16]\", // 16-bit output\n        \"zr\", // 1 if (out === 0), 0 otherwise\n        \"ng\", // 1 if (out < 0),  0 otherwise\n      ],\n      \"ALU\"\n    );\n  }\n\n  override eval() {\n    const x = this.in(\"x\").busVoltage;\n    const y = this.in(\"y\").busVoltage;\n    const zx = this.in(\"zx\").busVoltage << 5;\n    const nx = this.in(\"nx\").busVoltage << 4;\n    const zy = this.in(\"zy\").busVoltage << 3;\n    const ny = this.in(\"ny\").busVoltage << 2;\n    const f = this.in(\"f\").busVoltage << 1;\n    const no = this.in(\"no\").busVoltage << 0;\n    const op = zx + nx + zy + ny + f + no;\n\n    const [out, flags] = alua(op, x, y);\n\n    const ng = flags === Flags.Negative ? HIGH : LOW;\n    const zr = flags === Flags.Zero ? HIGH : LOW;\n    this.out(\"out\").busVoltage = out;\n    this.out(\"ng\").pull(ng);\n    this.out(\"zr\").pull(zr);\n  }\n\n  op(): COMMANDS_OP {\n    const zx = this.in(\"zx\").busVoltage << 5;\n    const nx = this.in(\"nx\").busVoltage << 4;\n    const zy = this.in(\"zy\").busVoltage << 3;\n    const ny = this.in(\"ny\").busVoltage << 2;\n    const f = this.in(\"f\").busVoltage << 1;\n    const no = this.in(\"no\").busVoltage << 0;\n    const op = zx + nx + zy + ny + f + no;\n    return op as COMMANDS_OP;\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function halfAdder(a: Voltage, b: Voltage): [Voltage, Voltage] {\n  const sum = (a === 1 && b === 0) || (a === 0 && b === 1) ? HIGH : LOW;\n  const car = a === 1 && b === 1 ? HIGH : LOW;\n\n  return [sum, car];\n}\n\nexport class HalfAdder extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"sum\", \"carry\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [sum, carry] = halfAdder(a, b);\n    this.out(\"sum\").pull(sum);\n    this.out(\"carry\").pull(carry);\n  }\n}\n","import { Chip, Voltage } from \"../../chip.js\";\nimport { or } from \"../logic/or.js\";\nimport { halfAdder } from \"./half_adder.js\";\n\nexport function fullAdder(\n  a: Voltage,\n  b: Voltage,\n  c: Voltage\n): [Voltage, Voltage] {\n  const [s, ca] = halfAdder(a, b);\n  const [sum, cb] = halfAdder(s, c);\n  const [carry] = or(ca, cb);\n\n  return [sum, carry];\n}\n\nexport class FullAdder extends Chip {\n  constructor() {\n    super([\"a\", \"b\", \"c\"], [\"sum\", \"carry\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const c = this.in(\"c\").voltage();\n    const [sum, carry] = fullAdder(a, b, c);\n    this.out(\"sum\").pull(sum);\n    this.out(\"carry\").pull(carry);\n  }\n}\n","import { Chip } from \"../../chip.js\";\nimport { add16 } from \"./add_16.js\";\n\nexport function inc16(n: number): [number] {\n  return add16(n, 1);\n}\n\nexport class Inc16 extends Chip {\n  constructor() {\n    super([\"in[16]\"], [\"out[16]\"], \"Inc16\");\n  }\n\n  override eval() {\n    const a = this.in().busVoltage;\n    const [out] = inc16(a);\n    this.out().busVoltage = out;\n  }\n}\n","import { ClockedChip, HIGH, LOW, Pin, Voltage } from \"../../chip.js\";\n\nexport class Bit extends ClockedChip {\n  bit: Voltage = LOW;\n\n  constructor(name?: string) {\n    super([\"in\", \"load\"], [\"out\"], name);\n  }\n\n  override tick() {\n    if (this.in(\"load\").voltage() === HIGH) {\n      this.bit = this.in().voltage();\n    }\n  }\n\n  override tock() {\n    this.out().pull(this.bit ?? 0);\n  }\n\n  override reset() {\n    this.bit = LOW;\n    super.reset();\n  }\n}\n\nexport class Register extends ClockedChip {\n  bits = 0x00;\n\n  constructor(name?: string) {\n    super([\"in[16]\", \"load\"], [\"out[16]\"], name);\n  }\n\n  override tick() {\n    if (this.in(\"load\").voltage() === HIGH) {\n      this.bits = this.in().busVoltage & 0xffff;\n    }\n  }\n\n  override tock() {\n    this.out().busVoltage = this.bits & 0xffff;\n  }\n\n  override get(name: string, offset?: number): Pin | undefined {\n    return name === this.name ? this.out() : super.get(name, offset);\n  }\n\n  override reset() {\n    this.bits = 0x00;\n    super.reset();\n  }\n}\n\nexport class VRegister extends Register {}\n\nexport class PC extends ClockedChip {\n  bits = 0x00;\n\n  constructor(name?: string) {\n    super([\"in[16]\", \"load\", \"inc\", \"reset\"], [\"out[16]\"], name);\n  }\n\n  override tick() {\n    if (this.in(\"reset\").voltage() === HIGH) {\n      this.bits = 0;\n    } else if (this.in(\"load\").voltage() === HIGH) {\n      this.bits = this.in().busVoltage & 0xffff;\n    } else if (this.in(\"inc\").voltage() === HIGH) {\n      this.bits += 1;\n    }\n  }\n\n  override tock() {\n    this.out().busVoltage = this.bits & 0xffff;\n  }\n\n  override get(name: string, offset?: number): Pin | undefined {\n    return name === this.name ? this.out() : super.get(name, offset);\n  }\n\n  override reset() {\n    this.bits = 0x00;\n    super.reset();\n  }\n}\n","import { ClockedChip } from \"../../chip.js\";\n\nexport class DFF extends ClockedChip {\n  constructor(name?: string) {\n    super([\"in\"], [\"out\"], name, [\"t\"]);\n  }\n\n  override tick() {\n    // Read in into t\n    const t = this.in().voltage();\n    this.pin(\"t\").pull(t);\n  }\n\n  override tock() {\n    // write t into out\n    const t = this.pin(\"t\").voltage();\n    this.out().pull(t);\n  }\n}\n","import { Err, Ok, Result } from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { Chip } from \"../chip.js\";\n\nimport { And, And16 } from \"./logic/and.js\";\nimport { DMux, DMux4Way, DMux8Way } from \"./logic/dmux.js\";\nimport { Mux, Mux16, Mux4Way16, Mux8Way16 } from \"./logic/mux.js\";\nimport { Nand, Nand16 } from \"./logic/nand.js\";\nimport { Not, Not16 } from \"./logic/not.js\";\nimport { Or, Or16, Or8way } from \"./logic/or.js\";\nimport { Xor, Xor16 } from \"./logic/xor.js\";\n\nimport { Add16 } from \"./arithmetic/add_16.js\";\nimport { ALU, ALUNoStat } from \"./arithmetic/alu.js\";\nimport { FullAdder } from \"./arithmetic/full_adder.js\";\nimport { HalfAdder } from \"./arithmetic/half_adder.js\";\nimport { Inc16 } from \"./arithmetic/inc16.js\";\n\nimport {\n  Computer,\n  CPU,\n  Keyboard,\n  Memory,\n  ROM32K,\n  Screen,\n} from \"./computer/computer.js\";\nimport { Bit, PC, Register, VRegister } from \"./sequential/bit.js\";\nimport { DFF } from \"./sequential/dff.js\";\nimport { RAM16K, RAM4K, RAM512, RAM64, RAM8 } from \"./sequential/ram.js\";\n\nexport {\n  And,\n  And16,\n  DMux,\n  Mux,\n  Mux16,\n  Mux4Way16,\n  Mux8Way16,\n  Nand,\n  Nand16,\n  Not,\n  Not16,\n  Or,\n  Or16,\n  Or8way,\n  Xor,\n  Xor16,\n  HalfAdder,\n  FullAdder,\n  Add16,\n  Inc16,\n  ALU,\n  Bit,\n  Register,\n  VRegister as ARegister,\n  VRegister as DRegister,\n  DFF,\n  RAM8,\n  RAM64,\n  RAM512,\n  RAM4K,\n  RAM16K,\n};\n\nexport const REGISTRY = new Map<string, () => Chip>(\n  (\n    [\n      [\"Nand\", Nand],\n      [\"Nand16\", Nand16],\n      [\"Not\", Not],\n      [\"Not16\", Not16],\n      [\"And\", And],\n      [\"And16\", And16],\n      [\"Or\", Or],\n      [\"Or16\", Or16],\n      [\"Or8Way\", Or8way],\n      [\"XOr\", Xor],\n      [\"XOr16\", Xor16],\n      [\"Xor\", Xor],\n      [\"Xor16\", Xor16],\n      [\"Mux\", Mux],\n      [\"Mux16\", Mux16],\n      [\"Mux4Way16\", Mux4Way16],\n      [\"Mux8Way16\", Mux8Way16],\n      [\"DMux\", DMux],\n      [\"DMux4Way\", DMux4Way],\n      [\"DMux8Way\", DMux8Way],\n      [\"HalfAdder\", HalfAdder],\n      [\"FullAdder\", FullAdder],\n      [\"Add16\", Add16],\n      [\"Inc16\", Inc16],\n      [\"ALU\", ALU],\n      [\"ALUNoStat\", ALUNoStat],\n      [\"DFF\", DFF],\n      [\"Bit\", Bit],\n      [\"Register\", Register],\n      [\"ARegister\", Register],\n      [\"DRegister\", Register],\n      [\"PC\", PC],\n      [\"RAM8\", RAM8],\n      [\"RAM64\", RAM64],\n      [\"RAM512\", RAM512],\n      [\"RAM4K\", RAM4K],\n      [\"RAM16K\", RAM16K],\n      [\"ROM32K\", ROM32K],\n      [\"Screen\", Screen],\n      [\"Keyboard\", Keyboard],\n      [\"CPU\", CPU],\n      [\"Computer\", Computer],\n      [\"Memory\", Memory],\n      [\"ARegister\", VRegister],\n      [\"DRegister\", VRegister],\n    ] as [string, { new (): Chip }][]\n  ).map(([name, ChipCtor]) => [\n    name,\n    () => {\n      const chip = new ChipCtor();\n      chip.name = name;\n      return chip;\n    },\n  ])\n);\n\nexport function hasBuiltinChip(name: string): boolean {\n  return REGISTRY.has(name);\n}\n\nexport function getBuiltinChip(name: string): Result<Chip> {\n  const chip = REGISTRY.get(name);\n  return chip\n    ? Ok(chip())\n    : Err(new Error(`Chip ${name} not in builtin registry`));\n}\n","import {\n  COMMANDS_ALU,\n  COMMANDS_OP,\n  Flags,\n} from \"@nand2tetris/simulator/cpu/alu.js\";\n\nexport const ALUComponent = ({\n  A,\n  op,\n  D,\n  out,\n  flag,\n}: {\n  A: number;\n  op: COMMANDS_OP;\n  D: number;\n  out: number;\n  flag: keyof typeof Flags;\n}) => (\n  <div>\n    <span>ALU</span>\n    <svg width=\"250\" height=\"250\" xmlns=\"http://www.w3.org/2000/svg\">\n      <g>\n        <rect x=\"1\" y=\"20\" height=\"85\" width=\"70\" fill=\"black\" />\n        <rect x=\"1\" y=\"145\" height=\"85\" width=\"70\" fill=\"black\" />\n        <rect x=\"180\" y=\"95\" height=\"60\" width=\"70\" fill=\"black\" />\n        <polygon\n          points=\"70,10 180,85 180,165 70,240 70,135 90,125 70,115\"\n          stroke=\"#000\"\n          fill=\"#6D97AB\"\n        />\n        <text\n          xmlSpace=\"preserve\"\n          textAnchor=\"middle\"\n          fontFamily=\"Noto Sans JP\"\n          fontSize=\"14\"\n          strokeWidth=\"0\"\n          id=\"svg_9\"\n          y=\"63\"\n          x=\"35\"\n          stroke=\"white\"\n          fill=\"#ffffff\"\n        >\n          {A}\n        </text>\n        <text\n          xmlSpace=\"preserve\"\n          textAnchor=\"middle\"\n          fontFamily=\"Noto Sans JP\"\n          fontSize=\"14\"\n          id=\"svg_10\"\n          y=\"188\"\n          x=\"35\"\n          strokeWidth=\"0\"\n          stroke=\"white\"\n          fill=\"#ffffff\"\n        >\n          {D}\n        </text>\n        <text\n          xmlSpace=\"preserve\"\n          textAnchor=\"middle\"\n          fontFamily=\"Noto Sans JP\"\n          fontSize=\"14\"\n          id=\"svg_11\"\n          y=\"125\"\n          x=\"215\"\n          strokeWidth=\"0\"\n          stroke=\"white\"\n          fill=\"#ffffff\"\n        >\n          {out}\n        </text>\n        <text\n          xmlSpace=\"preserve\"\n          textAnchor=\"middle\"\n          fontFamily=\"Noto Sans JP\"\n          fontSize=\"14\"\n          id=\"svg_13\"\n          y=\"125\"\n          x=\"135\"\n          strokeWidth=\"0\"\n          stroke=\"white\"\n          fill=\"#ffffff\"\n        >\n          {COMMANDS_ALU.op[op] ?? \"(??)\"}\n        </text>\n      </g>\n    </svg>\n  </div>\n);\n","import {\n  CPU,\n  Keyboard,\n  ROM32K,\n  Screen,\n} from \"@nand2tetris/simulator/chip/builtins/computer/computer.js\";\nimport { ALU } from \"@nand2tetris/simulator/chip/builtins/index.js\";\nimport {\n  PC,\n  Register,\n} from \"@nand2tetris/simulator/chip/builtins/sequential/bit.js\";\nimport {\n  RAM,\n  RAM8,\n} from \"@nand2tetris/simulator/chip/builtins/sequential/ram.js\";\nimport { Chip, HIGH } from \"@nand2tetris/simulator/chip/chip.js\";\nimport { Flags } from \"@nand2tetris/simulator/cpu/alu.js\";\nimport { decode } from \"@nand2tetris/simulator/cpu/cpu.js\";\nimport { ReactElement } from \"react\";\nimport { ALUComponent } from \"./alu.js\";\nimport { Keyboard as KeyboardComponent } from \"./keyboard.js\";\nimport { Memory as MemoryComponent } from \"./memory.js\";\nimport { RegisterComponent } from \"./register.js\";\nimport { Screen as ScreenComponent } from \"./screen.js\";\n\nexport function getBuiltinVisualization(part: Chip): ReactElement | undefined {\n  switch (part.name) {\n    case \"Register\":\n    case \"ARegister\":\n    case \"DRegister\":\n    case \"PC\":\n    case \"KEYBOARD\":\n    case \"RAM8\":\n    case \"RAM64\":\n    case \"RAM512\":\n    case \"RAM4K\":\n    case \"RAM16K\":\n    case \"ROM32K\":\n    case \"Screen\":\n    case \"Memory\":\n    default:\n      return undefined;\n  }\n}\n\nexport function makeVisualization(\n  chip: Chip,\n  updateAction?: () => void\n): ReactElement | undefined {\n  if (chip instanceof ALU) {\n    return (\n      <ALUComponent\n        A={chip.in(\"x\").busVoltage}\n        op={chip.op()}\n        D={chip.in(\"y\").busVoltage}\n        out={chip.out().busVoltage}\n        flag={\n          (chip.out(\"zr\").voltage() === HIGH\n            ? Flags.Zero\n            : chip.out(\"ng\").voltage() === HIGH\n            ? Flags.Negative\n            : Flags.Positive) as keyof typeof Flags\n        }\n      />\n    );\n  }\n  if (chip instanceof Register) {\n    return (\n      <RegisterComponent\n        name={chip.name ?? `Chip ${chip.id}`}\n        bits={chip.bits}\n      />\n    );\n  }\n  if (chip instanceof PC) {\n    return <RegisterComponent name=\"PC\" bits={chip.bits} />;\n  }\n  if (chip instanceof Keyboard) {\n    return <KeyboardComponent keyboard={chip} update={updateAction} />;\n  }\n  if (chip instanceof Screen) {\n    return <ScreenComponent memory={chip.memory} />;\n  }\n  if (chip instanceof RAM) {\n    return (\n      <MemoryComponent\n        name={chip.name}\n        memory={chip.memory}\n        format={chip instanceof ROM32K ? \"asm\" : \"dec\"}\n        highlight={chip.address}\n      />\n    );\n  }\n  if (chip instanceof RAM8) {\n    return <span>RAM {chip.width}</span>;\n  }\n  if (chip instanceof CPU) {\n    const bits = decode(chip.in(\"instruction\").busVoltage);\n    return (\n      <>\n        <RegisterComponent name={\"A\"} bits={chip.state.A} />\n        <RegisterComponent name={\"D\"} bits={chip.state.D} />\n        <RegisterComponent name={\"PC\"} bits={chip.state.PC} />\n        <ALUComponent\n          A={bits.am ? chip.in(\"inM\").busVoltage : chip.state.A}\n          D={chip.state.D}\n          out={chip.state.ALU}\n          op={bits.op}\n          flag={chip.state.flag as keyof typeof Flags}\n        />\n      </>\n    );\n  }\n\n  const vis = [...chip.parts]\n    .map((chip) => makeVisualization(chip, updateAction))\n    .filter((v) => v !== undefined);\n  return vis.length > 0 ? <>{vis}</> : undefined;\n}\n\nexport function makeVisualizationsWithId(\n  chip: {\n    parts: Chip[];\n  },\n  updateAction?: () => void\n): [string, ReactElement][] {\n  return [...chip.parts]\n    .map((part, i): [string, ReactElement | undefined] => [\n      `${part.id}_${i}`,\n      makeVisualization(part, updateAction),\n    ])\n    .filter(([_, v]) => v !== undefined) as [string, ReactElement][];\n}\n","import { Ok, isOk } from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport {\n  REGISTRY as BUILTIN_REGISTRY,\n  getBuiltinChip,\n} from \"@nand2tetris/simulator/chip/builtins/index.js\";\n\nexport class ChipDisplayInfo {\n  signBehaviors: Map<string, boolean> = new Map();\n\n  public constructor(chipName: string, unsigned?: string[]) {\n    if (BUILTIN_REGISTRY.has(chipName)) {\n      const chip = getBuiltinChip(chipName);\n      if (isOk(chip)) {\n        const pins = Array.from(Ok(chip).ins.entries()).concat(\n          Array.from(Ok(chip).outs.entries())\n        );\n        for (const pin of pins) {\n          this.signBehaviors.set(\n            pin.name,\n            !unsigned || !unsigned.includes(pin.name)\n          );\n        }\n      }\n    }\n  }\n\n  public isSigned(pin: string) {\n    return this.signBehaviors.get(pin);\n  }\n}\n\nconst UNSIGNED_PINS = new Map<string, string[]>([\n  [\"Mux4Way16\", [\"sel\"]],\n  [\"Mux8Way16\", [\"sel\"]],\n  [\"DMux4Way\", [\"sel\"]],\n  [\"DMux8Way\", [\"sel\"]],\n  [\"RAM8\", [\"address\"]],\n  [\"RAM64\", [\"address\"]],\n  [\"RAM512\", [\"address\"]],\n  [\"RAM4K\", [\"address\"]],\n  [\"RAM16K\", [\"address\"]],\n  [\"Screen\", [\"address\"]],\n  [\"Memory\", [\"address\"]],\n  [\"CPU\", [\"addressM\", \"pc\"]],\n]);\n\nexport const getDisplayInfo = (chipName: string) =>\n  new ChipDisplayInfo(chipName, UNSIGNED_PINS.get(chipName));\n","// import { plural, Trans } from \"@lingui/macro\";\nimport {\n  Pin as ChipPin,\n  Pins,\n  Voltage,\n} from \"@nand2tetris/simulator/chip/chip.js\";\nimport { range } from \"@davidsouther/jiffies/lib/esm/range.js\";\nimport { ChipSim } from \"./stores/chip.store.js\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ChipDisplayInfo, getDisplayInfo } from \"./pin_display.js\";\n\nexport const PinContext = createContext({});\n\nexport interface ImmPin {\n  bits: [number, Voltage][];\n  pin: ChipPin;\n}\n\nexport function reducePin(pin: ChipPin) {\n  return {\n    pin,\n    bits: range(0, pin.width)\n      .map((i) => [i, pin.voltage(i)] as [number, Voltage])\n      .reverse(),\n  };\n}\n\nexport function reducePins(pins: Pins): ImmPin[] {\n  return [...pins.entries()].map(reducePin);\n}\n\nexport interface PinoutPins {\n  pins: ImmPin[];\n  toggle?: (pin: ChipPin, bit?: number) => void;\n}\n\nexport const FullPinout = (props: {\n  sim: ChipSim;\n  toggle: (pin: ChipPin, i: number | undefined) => void;\n  setInputValid: (pending: boolean) => void;\n  hideInternal?: boolean;\n}) => {\n  const { inPins, outPins, internalPins } = props.sim;\n  const displayInfo = getDisplayInfo(props.sim.chip[0].name ?? \"\");\n  return (\n    <>\n      <style>{`\n        table.pinout th {\n          font-weight: bold;\n        }\n\n        table.pinout tbody td:first-child {\n          text-align: right;\n          --font-size: 1rem;\n          width: 0;\n          white-space: nowrap;\n          border-right: var(--border-width) solid var(--table-border-color);\n        }\n\n        table.pinout tbody button {\n          --font-size: 0.875em;\n          font-family: var(--font-family-monospace);\n          max-width: 2em;\n        }\n        `}</style>\n      <table className=\"pinout\">\n        <tbody>\n          <PinoutBlock\n            pins={inPins}\n            header=\"Input pins\"\n            toggle={props.toggle}\n            setInputValid={props.setInputValid}\n            displayInfo={displayInfo}\n          />\n          <PinoutBlock\n            pins={outPins}\n            header=\"Output pins\"\n            disabled={props.sim.pending}\n            enableEdit={false}\n            displayInfo={displayInfo}\n          />\n          {!props.hideInternal && (\n            <PinoutBlock\n              pins={internalPins}\n              header=\"Internal pins\"\n              disabled={props.sim.pending}\n              enableEdit={false}\n              displayInfo={displayInfo}\n            />\n          )}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport const PinoutBlock = (\n  props: PinoutPins & {\n    header: string;\n    disabled?: boolean;\n    enableEdit?: boolean;\n    setInputValid?: (valid: boolean) => void;\n    displayInfo: ChipDisplayInfo;\n  }\n) => (\n  <>\n    {props.pins.length > 0 && (\n      <tr>\n        <th colSpan={2}>{props.header}</th>\n      </tr>\n    )}\n    {[...props.pins].map((immPin) => (\n      <tr key={immPin.pin.name}>\n        <td>{immPin.pin.name}</td>\n        <td>\n          <Pin\n            pin={immPin}\n            toggle={props.toggle}\n            disabled={props.disabled}\n            enableEdit={props.enableEdit}\n            signed={props.displayInfo.isSigned(immPin.pin.name)}\n            setInputValid={props.setInputValid}\n            internal={props.header === \"Internal pins\" ? true : false}\n          />\n        </td>\n      </tr>\n    ))}\n  </>\n);\n\nexport const Pinout = ({\n  pins,\n  toggle,\n}: {\n  pins: ImmPin[];\n  toggle?: (pin: ChipPin, bit?: number) => void;\n}) => {\n  if (pins.length === 0) {\n    return <>None</>;\n  }\n  return (\n    <table className=\"pinout\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Value</th>\n        </tr>\n      </thead>\n      <tbody>\n        {[...pins].map((immPin) => (\n          <tr key={immPin.pin.name}>\n            <td>{immPin.pin.name}</td>\n            <td>\n              <Pin pin={immPin} toggle={toggle} internal />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nconst Pin = ({\n  pin,\n  toggle,\n  disabled = false,\n  enableEdit = true,\n  signed = true,\n  setInputValid,\n  internal = false,\n}: {\n  pin: ImmPin;\n  toggle: ((pin: ChipPin, bit?: number) => void) | undefined;\n  disabled?: boolean;\n  enableEdit?: boolean;\n  signed?: boolean;\n  setInputValid?: (valid: boolean) => void;\n  internal: boolean;\n}) => {\n  const [isBin, setIsBin] = useState(true);\n  let inputValid = true;\n  const [decimal, setDecimal] = useState(\"\");\n\n  const toggleBin = () => {\n    setIsBin(!isBin);\n  };\n\n  const resetDispatcher = useContext(PinContext);\n  if (resetDispatcher instanceof PinResetDispatcher) {\n    resetDispatcher.registerCallback(() => {\n      setIsBin(true);\n    });\n  }\n\n  const setInputValidity = (valid: boolean) => {\n    inputValid = valid;\n    setInputValid?.(valid);\n  };\n\n  const handleDecimalChange = (value: string) => {\n    const positive = value.replace(/[^\\d]/g, \"\");\n    const numeric = signed && value[0] === \"-\" ? `-${positive}` : positive;\n\n    setDecimal(numeric);\n    if (isNaN(parseInt(numeric))) {\n      setInputValidity(false);\n    } else {\n      const newValue = parseInt(numeric);\n      if (\n        (!signed && newValue >= Math.pow(2, pin.bits.length)) ||\n        (signed &&\n          (newValue >= Math.pow(2, pin.bits.length - 1) ||\n            newValue < -Math.pow(2, pin.bits.length - 1)))\n      ) {\n        setInputValidity(false);\n      } else {\n        updatePins(newValue);\n        setInputValidity(true);\n      }\n    }\n  };\n\n  const updatePins = (n: number) => {\n    for (let i = 0; i < pin.bits.length; i++) {\n      if (pin.bits[pin.bits.length - i - 1][1] !== ((n >> i) & 1)) {\n        toggle?.(pin.pin, i);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (!isBin && inputValid) {\n      let value = 0;\n      if (signed && pin.bits[0][1]) {\n        // negative\n        for (const [i, v] of pin.bits) {\n          if (i < pin.bits.length - 1 && !v) {\n            value += 2 ** i;\n          }\n        }\n        value = -value - 1;\n      } else {\n        // positive\n        const limit = signed ? pin.bits.length - 1 : pin.bits.length;\n        for (const [i, v] of pin.bits) {\n          if (i < limit && v) {\n            value += 2 ** i;\n          }\n        }\n      }\n      setDecimal(value.toString());\n    }\n  }, [pin, isBin]);\n\n  return (\n    <div\n      style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }}\n    >\n      <fieldset role=\"group\" style={{ width: `${pin.bits.length}rem` }}>\n        {isBin ? (\n          pin.bits.map(([i, v]) => (\n            <button\n              key={i}\n              disabled={disabled}\n              style={internal ? { backgroundColor: \"grey\" } : {}}\n              onClick={() => toggle?.(pin.pin, i)}\n              data-testid={`pin-${i}`}\n            >\n              {v}\n            </button>\n          ))\n        ) : (\n          <input\n            className=\"colored\"\n            value={decimal}\n            onChange={(e) => {\n              handleDecimalChange(e.target.value);\n            }}\n            disabled={!enableEdit}\n          />\n        )}\n      </fieldset>\n      {pin.bits.length > 1 && (\n        <>\n          <div style={{ width: \"1em\" }} />\n          <button\n            style={{ maxWidth: \"3em\", margin: 0 }}\n            onClick={() => toggleBin()}\n          >\n            {isBin ? \"dec\" : \"bin\"}\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport class PinResetDispatcher {\n  private callbacks: (() => void)[] = [];\n\n  registerCallback(callback: () => void) {\n    this.callbacks.push(callback);\n  }\n\n  reset() {\n    for (const callback of this.callbacks) {\n      callback();\n    }\n  }\n}\n","const hdl = `\nHdl <: Base{\n  Root := Chip\n  Chip = \"CHIP\" Name OpenBrace ChipBody CloseBrace\n  ChipBody = InList? OutList? PartList ClockedList?\n  InList = \"IN\" PinList Semi\n  OutList = \"OUT\" PinList Semi\n  PartList = BuiltinPart | Parts\n  PinList = List<PinDecl, Comma>\n  PinDecl = Name PinWidth?\n  PinWidth = OpenSquare decNumber CloseSquare\n  BuiltinPart = \"BUILTIN\" Semi\n  Parts = \"PARTS:\" Part*\n  Part = Name \"(\" Wires \")\" Semi\n  Wires = List<Wire, Comma>\n  Wire = WireSide Equal (WireSide | True | False) \n  WireSide = Name SubBus? \n  SubBus = OpenSquare decNumber subBusRest? CloseSquare\n  subBusRest = \"..\" decNumber\n  ClockedList = \"CLOCKED\" SimplePinList Semi\n  SimplePinList = List<Name, Comma>\n}`;\nexport default hdl;\n","/** Reads and parses HDL chip descriptions. */\nimport ohm from \"ohm-js\";\nimport { grammars, baseSemantics } from \"./base.js\";\nimport { makeParser } from \"./base.js\";\n\nexport interface PinIndex {\n  start?: number | undefined;\n  end?: number | undefined;\n}\n\nexport interface PinParts extends PinIndex {\n  pin: string;\n}\n\nexport interface PinDeclaration {\n  pin: string | string;\n  width: number;\n}\n\nexport interface Wire {\n  lhs: PinParts;\n  rhs: PinParts;\n}\n\nexport interface Part {\n  name: string;\n  wires: Wire[];\n}\n\nexport interface HdlParse {\n  name: string;\n  ins: PinDeclaration[];\n  outs: PinDeclaration[];\n  clocked: string[];\n  parts: \"BUILTIN\" | Part[];\n}\n\nimport hdlGrammar from \"./grammars/hdl.ohm.js\";\nexport const grammar = ohm.grammar(hdlGrammar, grammars);\n\nexport const hdlSemantics = grammar.extendSemantics(baseSemantics);\n\nhdlSemantics.addAttribute<PinIndex>(\"SubBus\", {\n  SubBus(_a, startNode, endNode, _b) {\n    const start = startNode.value;\n    const end = endNode.child(0)?.child(1)?.value ?? start;\n    return { start, end };\n  },\n});\n\nhdlSemantics.addAttribute<PinParts>(\"WireSide\", {\n  WireSide({ name }, index) {\n    const { start, end } = (index.child(0)?.SubBus as PinIndex) ?? {\n      start: undefined,\n      end: undefined,\n    };\n    return { pin: name, start, end };\n  },\n});\n\nhdlSemantics.addAttribute<Wire>(\"Wire\", {\n  Wire(left, _, right) {\n    const rhs: PinParts = right.isTerminal()\n      ? { pin: right.sourceString }\n      : right.WireSide;\n    return { lhs: left.WireSide as PinParts, rhs };\n  },\n});\n\nhdlSemantics.addAttribute<Wire[]>(\"Wires\", {\n  Wires(list) {\n    return list.asIteration().children.map((node) => node.Wire as Wire);\n  },\n});\n\nhdlSemantics.addAttribute<Part>(\"Part\", {\n  Part({ name }, _a, { Wires }, _b, _c) {\n    return { name: name as string, wires: Wires as Wire[] };\n  },\n});\n\nhdlSemantics.addAttribute<Part[] | \"BUILTIN\">(\"Parts\", {\n  Parts(_, parts) {\n    return parts.children.map((c) => c.Part);\n  },\n  BuiltinPart(_a, _b) {\n    return \"BUILTIN\";\n  },\n});\n\nhdlSemantics.addAttribute<\"BUILTIN\" | Part[]>(\"PartList\", {\n  PartList(list) {\n    return list.Parts;\n  },\n});\n\nhdlSemantics.addAttribute<string[]>(\"Clocked\", {\n  ClockedList(_a, clocked, _b) {\n    return (\n      clocked\n        .asIteration()\n        .children.map(\n          ({ sourceString }: { sourceString: string }) => sourceString\n        ) ?? []\n    );\n  },\n});\n\nhdlSemantics.addAttribute<PinDeclaration>(\"PinDecl\", {\n  PinDecl({ name }, width) {\n    return {\n      pin: name,\n      width: width.child(0)?.child(1)?.value ?? 1,\n    };\n  },\n});\n\nhdlSemantics.addAttribute<PinDeclaration[]>(\"PinList\", {\n  PinList(list) {\n    return list\n      .asIteration()\n      .children.map((node) => node.PinDecl as PinDeclaration);\n  },\n});\n\nhdlSemantics.addAttribute<HdlParse>(\"Chip\", {\n  Chip(_a, { name }, _b, body, _c) {\n    return {\n      name,\n      ins: body.child(0).child(0)?.child(1)?.PinList ?? [],\n      outs: body.child(1).child(0)?.child(1)?.PinList ?? [],\n      parts: body.child(2).PartList ?? [],\n      clocked: body.child(3).child(0)?.Clocked,\n    };\n  },\n});\n\nhdlSemantics.addAttribute<HdlParse>(\"Root\", {\n  Root(root) {\n    return root.child(0)?.Chip;\n  },\n});\n\nexport const HDL = {\n  parser: grammar,\n  grammar: hdlGrammar,\n  semantics: hdlSemantics,\n  parse: makeParser<HdlParse>(grammar, hdlSemantics, (n) => n.Chip),\n};\n","import { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport {\n  Err,\n  isErr,\n  isOk,\n  Ok,\n  Result,\n} from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { HDL, HdlParse } from \"../languages/hdl.js\";\nimport { getBuiltinChip, hasBuiltinChip } from \"./builtins/index.js\";\nimport { Chip, Connection } from \"./chip.js\";\n\nfunction pinWidth(start: number, end: number | undefined): number | undefined {\n  if (end === undefined) {\n    return undefined;\n  }\n  if (end >= start) {\n    return end - start + 1;\n  }\n  if (start > 0 && end === 0) {\n    return 1;\n  }\n  throw new Error(`Bus specification has start > end (${start} > ${end})`);\n}\n\nexport async function parse(\n  code: string\n): Promise<Result<Chip, Error | { message: string; shortMessage: string }>> {\n  const parsed = HDL.parse(code.toString());\n  if (isErr(parsed)) return parsed;\n  return build(Ok(parsed));\n}\n\nexport async function loadChip(\n  name: string,\n  fs?: FileSystem\n): Promise<Result<Chip>> {\n  if (hasBuiltinChip(name) || fs === undefined) {\n    return getBuiltinChip(name);\n  }\n  try {\n    const file = await fs.readFile(`${name}.hdl`);\n    const maybeParsedHDL = HDL.parse(file);\n    const chip = isOk(maybeParsedHDL)\n      ? build(Ok(maybeParsedHDL), fs)\n      : Err(new Error(\"HDL Was not parsed\"));\n    return chip;\n  } catch (e) {\n    return Err(new Error(`Could not load chip ${name}.hdl` /*, { cause: e }*/));\n  }\n}\n\nexport async function build(\n  parts: HdlParse,\n  fs?: FileSystem\n): Promise<Result<Chip, Error>> {\n  if (parts.parts === \"BUILTIN\") {\n    return getBuiltinChip(parts.name.toString());\n  }\n\n  const buildChip = new Chip(\n    parts.ins.map(({ pin, width }) => ({ pin: pin.toString(), width })),\n    parts.outs.map(({ pin, width }) => ({ pin: pin.toString(), width })),\n    parts.name.toString(),\n    [],\n    parts.clocked\n  );\n\n  for (const part of parts.parts) {\n    const builtin = await loadChip(part.name.toString(), fs);\n    if (isErr(builtin)) return builtin;\n    const partChip = Ok(builtin);\n\n    const wires = part.wires.map<Connection>(({ lhs, rhs }) => ({\n      to: {\n        name: lhs.pin.toString(),\n        start: lhs.start ?? 0,\n        width: pinWidth(lhs.start ?? 0, lhs.end),\n      },\n      from: {\n        name: rhs.pin.toString(),\n        start: rhs.start ?? 0,\n        width: pinWidth(rhs.start ?? 0, rhs.end),\n      },\n    }));\n\n    try {\n      buildChip.wire(partChip, wires);\n    } catch (e) {\n      return Err(e as Error);\n    }\n  }\n\n  return Ok(buildChip);\n}\n","import { display } from \"@davidsouther/jiffies/lib/esm/display.js\";\nimport { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport { Err, isErr, Ok } from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { Dispatch, MutableRefObject, useContext, useMemo, useRef } from \"react\";\n\nimport { build as buildChip } from \"@nand2tetris/simulator/chip/builder.js\";\nimport {\n  getBuiltinChip,\n  REGISTRY,\n} from \"@nand2tetris/simulator/chip/builtins/index.js\";\nimport {\n  Chip,\n  Chip as SimChip,\n  Low,\n  Pin,\n} from \"@nand2tetris/simulator/chip/chip.js\";\nimport { Clock } from \"@nand2tetris/simulator/chip/clock.js\";\nimport { Span } from \"@nand2tetris/simulator/languages/base.js\";\nimport { HDL } from \"@nand2tetris/simulator/languages/hdl.js\";\nimport { TST } from \"@nand2tetris/simulator/languages/tst.js\";\nimport {\n  BUILTIN_CHIP_PROJECTS,\n  CHIP_ORDER,\n  CHIP_PROJECTS,\n  ChipProjects,\n} from \"@nand2tetris/projects/index.js\";\nimport { ChipTest } from \"@nand2tetris/simulator/tst.js\";\n\nimport { ImmPin, reducePins } from \"../pinout.js\";\nimport { useImmerReducer } from \"../react.js\";\n\nimport { BaseContext } from \"./base.context.js\";\nimport { assert } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { compare } from \"../compare.js\";\n\nexport const PROJECT_NAMES = [\n  [\"01\", `Project 1`],\n  [\"02\", `Project 2`],\n  [\"03\", `Project 3`],\n  [\"05\", `Project 5`],\n];\n\nfunction getChips(project: keyof typeof CHIP_PROJECTS) {\n  return project in CHIP_ORDER\n    ? (CHIP_ORDER as Record<typeof project, string[]>)[project]\n    : BUILTIN_CHIP_PROJECTS[project].concat(CHIP_PROJECTS[project]);\n}\n\nfunction findDropdowns(storage: Record<string, string>) {\n  const project =\n    (storage[\"/chip/project\"] as keyof typeof CHIP_PROJECTS) ?? \"01\";\n  const chips = getChips(project);\n  const chipName = storage[\"/chip/chip\"] ?? CHIP_PROJECTS[project][0];\n  return { project, chips, chipName };\n}\n\nfunction makeHdl(name: string) {\n  return `CHIP ${name} {\n  IN in;\n  OUT out;\n  PARTS:\n}`;\n}\n\nfunction makeTst() {\n  return `repeat 10 {\n  tick,\n  tock;\n}`;\n}\n\nfunction makeCmp() {\n  return `| in|out|`;\n}\n\nexport function isBuiltinOnly(chipName: string) {\n  return Object.values(BUILTIN_CHIP_PROJECTS).flat().includes(chipName);\n}\n\nfunction getTemplate(project: keyof typeof CHIP_PROJECTS, chipName: string) {\n  if (isBuiltinOnly(chipName)) {\n    return (ChipProjects[project].BUILTIN_CHIPS as Record<string, string>)[\n      chipName\n    ];\n  }\n\n  return (\n    ChipProjects[project].CHIPS as Record<string, Record<string, string>>\n  )[chipName][`${chipName}.hdl`] as string;\n}\n\nfunction getBuiltinCode(project: keyof typeof CHIP_PROJECTS, chipName: string) {\n  const template = getTemplate(project, chipName);\n  if (isBuiltinOnly(chipName)) {\n    return template;\n  }\n  const bodyComment = \"//// Replace this comment with your code.\";\n  const builtinLine = `BUILTIN ${chipName};`;\n  const builtinCode = template.includes(bodyComment)\n    ? template.replace(bodyComment, builtinLine)\n    : template.replace(\"PARTS:\", `PARTS:\\n    ${builtinLine}`);\n  return builtinCode;\n}\n\nexport interface ChipPageState {\n  files: Files;\n  sim: ChipSim;\n  controls: ControlsState;\n}\n\nexport interface ChipSim {\n  clocked: boolean;\n  inPins: ImmPin[];\n  outPins: ImmPin[];\n  internalPins: ImmPin[];\n  chip: [Chip];\n  pending: boolean;\n  invalid: boolean;\n}\n\nexport interface Files {\n  hdl: string;\n  cmp: string;\n  tst: string;\n  out: string;\n}\n\nexport interface ControlsState {\n  project: keyof typeof CHIP_PROJECTS;\n  chips: string[];\n  chipName: string;\n  hasBuiltin: boolean;\n  builtinOnly: boolean;\n  runningTest: boolean;\n  span?: Span;\n  error: string;\n}\n\nfunction reduceChip(chip: SimChip, pending = false, invalid = false): ChipSim {\n  return {\n    clocked: chip.clocked,\n    inPins: reducePins(chip.ins),\n    outPins: reducePins(chip.outs),\n    internalPins: reducePins(chip.pins),\n    chip: [chip],\n    pending,\n    invalid,\n  };\n}\n\nconst clock = Clock.get();\n\nexport type ChipStoreDispatch = Dispatch<{\n  action: keyof ReturnType<typeof makeChipStore>[\"reducers\"];\n  payload?: unknown;\n}>;\n\nexport function makeChipStore(\n  fs: FileSystem,\n  setStatus: (status: string) => void,\n  storage: Record<string, string>,\n  dispatch: MutableRefObject<ChipStoreDispatch>\n) {\n  const dropdowns = findDropdowns(storage);\n  let { project, chipName } = dropdowns;\n  const { chips } = dropdowns;\n  let chip = new Low();\n  let test = new ChipTest();\n  let usingBuiltin = false;\n  let builtinOnly = false;\n\n  const reducers = {\n    setFiles(\n      state: ChipPageState,\n      {\n        hdl = state.files.hdl,\n        tst = state.files.tst,\n        cmp = state.files.cmp,\n        out = \"\",\n      }: {\n        hdl?: string;\n        tst?: string;\n        cmp?: string;\n        out?: string;\n      }\n    ) {\n      state.files.hdl = hdl;\n      state.files.tst = tst;\n      state.files.cmp = cmp;\n      state.files.out = out;\n    },\n\n    updateChip(\n      state: ChipPageState,\n      payload?: {\n        pending?: boolean;\n        invalid?: boolean;\n        chipName?: string;\n        error?: string;\n      }\n    ) {\n      state.sim = reduceChip(\n        chip,\n        payload?.pending ?? state.sim.pending,\n        payload?.invalid ?? state.sim.invalid\n      );\n      state.controls.error = state.sim.invalid\n        ? payload?.error ?? state.controls.error\n        : \"\";\n      state.controls.chips = getChips(state.controls.project);\n      state.controls.chipName = state.sim.invalid\n        ? payload?.chipName ?? chipName\n        : chip.name ?? payload?.chipName ?? chipName;\n      if (!state.controls.chips.includes(state.controls.chipName)) {\n        state.controls.chips = [\n          ...state.controls.chips,\n          state.controls.chipName,\n        ];\n      }\n    },\n\n    setProject(state: ChipPageState, project: keyof typeof CHIP_PROJECTS) {\n      const chips = getChips(project);\n      const chipName =\n        state.controls.chipName && chips.includes(state.controls.chipName)\n          ? state.controls.chipName\n          : chips[0];\n      state.controls.project = project;\n      state.controls.chips = chips;\n      this.setChip(state, chipName);\n    },\n\n    setChip(state: ChipPageState, chipName: string) {\n      state.controls.chipName = chipName;\n      state.controls.hasBuiltin = REGISTRY.has(chipName);\n      state.controls.builtinOnly = isBuiltinOnly(chipName);\n    },\n\n    testRunning(state: ChipPageState) {\n      state.controls.runningTest = true;\n    },\n\n    testFinished(state: ChipPageState) {\n      state.controls.runningTest = false;\n      const passed = compare(state.files.cmp.trim(), state.files.out.trim());\n      setStatus(\n        passed\n          ? `Simulation successful: The output file is identical to the compare file`\n          : `Simulation error: The output file differs from the compare file`\n      );\n    },\n\n    updateTestStep(state: ChipPageState) {\n      state.files.out = test?.log() ?? \"\";\n      if (test?.currentStep?.span) {\n        state.controls.span = test.currentStep.span;\n      } else {\n        if (test.done) {\n          const end = state.files.tst.length;\n          state.controls.span = {\n            start: end - 1,\n            end,\n          };\n        }\n      }\n      this.updateChip(state, {\n        pending: state.sim.pending,\n        invalid: state.sim.invalid,\n      });\n    },\n  };\n\n  const actions = {\n    setProject(p: keyof typeof CHIP_PROJECTS) {\n      project = storage[\"/chip/project\"] = p;\n      dispatch.current({ action: \"setProject\", payload: project });\n      this.setChip(CHIP_PROJECTS[project][0]);\n    },\n\n    async setChip(chip: string, project = storage[\"/chip/project\"] ?? \"01\") {\n      chipName = storage[\"/chip/chip\"] = chip;\n      dispatch.current({ action: \"setChip\", payload: chipName });\n      builtinOnly = isBuiltinOnly(chipName);\n\n      if (builtinOnly) {\n        dispatch.current({\n          action: \"setFiles\",\n          payload: { hdl: \"\", tst: \"\", cmp: \"\" },\n        });\n        this.useBuiltin();\n        return;\n      }\n      await this.loadChip(project, chipName);\n      if (usingBuiltin) {\n        this.useBuiltin();\n      }\n    },\n\n    reset() {\n      Clock.get().reset();\n      chip.reset();\n      test.reset();\n      dispatch.current({ action: \"setFiles\", payload: {} });\n      dispatch.current({ action: \"updateChip\" });\n    },\n\n    async updateFiles({\n      hdl,\n      tst,\n      cmp,\n    }: {\n      hdl?: string;\n      tst?: string;\n      cmp: string;\n    }) {\n      dispatch.current({ action: \"setFiles\", payload: { hdl, tst, cmp } });\n      try {\n        if (hdl) {\n          await this.compileChip(hdl);\n        }\n        if (tst) {\n          this.compileTest(tst);\n        }\n      } catch (e) {\n        setStatus(display(e));\n      }\n    },\n\n    async compileChip(hdl: string) {\n      chip.remove();\n      const maybeParsed = HDL.parse(hdl);\n      if (isErr(maybeParsed)) {\n        setStatus(\"Failed to parse chip\");\n        dispatch.current({\n          action: \"updateChip\",\n          payload: { invalid: true, error: display(Err(maybeParsed)) },\n        });\n        return;\n      }\n      const maybeChip = await buildChip(Ok(maybeParsed));\n      if (isErr(maybeChip)) {\n        const error = display(Err(maybeChip));\n        setStatus(error);\n        dispatch.current({\n          action: \"updateChip\",\n          payload: { invalid: true, error },\n        });\n        return;\n      }\n      setStatus(`Compiled ${chip.name}`);\n      this.replaceChip(Ok(maybeChip));\n    },\n\n    replaceChip(nextChip: SimChip) {\n      // Store current inPins\n      const inPins = chip.ins;\n      for (const [pin, { busVoltage }] of inPins) {\n        const nextPin = nextChip.ins.get(pin);\n        if (nextPin) {\n          nextPin.busVoltage = busVoltage;\n        }\n      }\n      clock.reset();\n      nextChip.eval();\n      chip = nextChip;\n      chip.reset();\n      test = test.with(chip).reset();\n      dispatch.current({ action: \"updateChip\", payload: { invalid: false } });\n      dispatch.current({ action: \"updateTestStep\" });\n    },\n\n    async loadChip(project: string, name: string) {\n      storage[\"/chip/chip\"] = name;\n      const fsName = (ext: string) =>\n        `/projects/${project}/${name}/${name}.${ext}`;\n\n      const [hdl, tst, cmp] = await Promise.all([\n        fs.readFile(fsName(\"hdl\")).catch(() => makeHdl(name)),\n        fs.readFile(fsName(\"tst\")).catch((e) => {\n          return makeTst();\n        }),\n        fs.readFile(fsName(\"cmp\")).catch(() => makeCmp()),\n      ]);\n\n      dispatch.current({ action: \"setFiles\", payload: { hdl, tst, cmp } });\n      await this.compileChip(hdl);\n      this.compileTest(tst);\n    },\n\n    async saveChip(hdl: string, prj = project, name = chipName) {\n      dispatch.current({ action: \"setFiles\", payload: { hdl } });\n      const path = `/projects/${prj}/${name}/${name}.hdl`;\n      await fs.writeFile(path, hdl);\n      setStatus(`Saved ${path}`);\n    },\n\n    toggle(pin: Pin, i: number | undefined) {\n      if (i !== undefined) {\n        pin.busVoltage = pin.busVoltage ^ (1 << i);\n      } else {\n        if (pin.width === 1) {\n          pin.toggle();\n        } else {\n          pin.busVoltage += 1;\n        }\n      }\n      dispatch.current({ action: \"updateChip\", payload: { pending: true } });\n    },\n\n    eval() {\n      chip.eval();\n      dispatch.current({ action: \"updateChip\", payload: { pending: false } });\n    },\n\n    clock() {\n      clock.toggle();\n      if (clock.isLow) {\n        clock.frame();\n      }\n      dispatch.current({ action: \"updateChip\" });\n    },\n\n    async useBuiltin(doUseBuiltin = true, oldHdl?: string) {\n      if (!doUseBuiltin) {\n        if (!builtinOnly) {\n          usingBuiltin = false;\n        }\n        await this.loadChip(project, chipName);\n        return;\n      }\n      if (!builtinOnly) {\n        usingBuiltin = true;\n      }\n      const builtinName = chipName;\n      const nextChip = getBuiltinChip(builtinName);\n      if (isErr(nextChip)) {\n        setStatus(\n          `Failed to load builtin ${builtinName}: ${display(Err(nextChip))}`\n        );\n        return;\n      }\n\n      // Save hdl code that will be overwritten by the switch\n      if (oldHdl) {\n        await this.saveChip(oldHdl, project, chipName);\n      }\n\n      const hdl = getBuiltinCode(project, builtinName);\n      dispatch.current({ action: \"setFiles\", payload: { hdl } });\n      this.replaceChip(Ok(nextChip));\n    },\n\n    async initialize() {\n      await this.setChip(chipName, project);\n    },\n\n    compileTest(file: string) {\n      dispatch.current({ action: \"setFiles\", payload: { tst: file } });\n      const tst = TST.parse(file);\n\n      if (isErr(tst)) {\n        setStatus(`Failed to parse test`);\n        return false;\n      }\n      setStatus(`Parsed tst`);\n\n      test = ChipTest.from(Ok(tst)).with(chip).reset();\n      test.setFileSystem(fs);\n      dispatch.current({ action: \"updateTestStep\" });\n      return true;\n    },\n\n    async runTest(file: string) {\n      if (!this.compileTest(file)) {\n        return;\n      }\n      dispatch.current({ action: \"testRunning\" });\n\n      fs.pushd(\"/samples\");\n      await test.run();\n      fs.popd();\n\n      dispatch.current({ action: \"updateTestStep\" });\n      dispatch.current({ action: \"testFinished\" });\n    },\n\n    tick(): boolean {\n      return this.stepTest();\n    },\n\n    stepTest(): boolean {\n      assert(test.chipId === chip.id, \"Test and chip out of sync\");\n      const done = test.step();\n      dispatch.current({ action: \"updateTestStep\" });\n      if (done) {\n        dispatch.current({ action: \"testFinished\" });\n      }\n      return done;\n    },\n  };\n\n  const initialState: ChipPageState = (() => {\n    const controls: ControlsState = {\n      project,\n      chips,\n      chipName,\n      hasBuiltin: REGISTRY.has(chipName),\n      builtinOnly: isBuiltinOnly(chipName),\n      runningTest: false,\n      error: \"\",\n    };\n\n    const maybeChip = getBuiltinChip(controls.chipName);\n    if (isErr(maybeChip)) {\n      setStatus(display(Err(maybeChip)));\n      chip = new Low();\n    } else {\n      chip = Ok(maybeChip);\n    }\n\n    const sim = reduceChip(chip);\n\n    return {\n      controls,\n      files: {\n        hdl: \"\",\n        cmp: \"\",\n        tst: \"\",\n        out: \"\",\n      },\n      sim,\n    };\n  })();\n\n  return { initialState, reducers, actions };\n}\n\nexport function useChipPageStore() {\n  const { fs, setStatus, storage } = useContext(BaseContext);\n\n  const dispatch = useRef<ChipStoreDispatch>(() => undefined);\n\n  const { initialState, reducers, actions } = useMemo(\n    () => makeChipStore(fs, setStatus, storage, dispatch),\n    [fs, setStatus, storage, dispatch]\n  );\n\n  const [state, dispatcher] = useImmerReducer(reducers, initialState);\n  dispatch.current = dispatcher;\n\n  return { state, dispatch, actions };\n}\n","import { Trans } from \"@lingui/macro\";\nimport {\n  CSSProperties,\n  ReactNode,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\n\nimport \"./chip.scss\";\n\nimport { makeVisualizationsWithId } from \"@nand2tetris/components/chips/visualizations.js\";\nimport { Clockface } from \"@nand2tetris/components/clockface.js\";\nimport { DiffTable } from \"@nand2tetris/components/difftable.js\";\nimport {\n  FullPinout,\n  PinContext,\n  PinResetDispatcher,\n} from \"@nand2tetris/components/pinout.js\";\nimport { useStateInitializer } from \"@nand2tetris/components/react.js\";\nimport { Runbar } from \"@nand2tetris/components/runbar.js\";\nimport { BaseContext } from \"@nand2tetris/components/stores/base.context.js\";\nimport {\n  Files,\n  PROJECT_NAMES,\n  isBuiltinOnly,\n  useChipPageStore,\n} from \"@nand2tetris/components/stores/chip.store.js\";\nimport { CHIP_PROJECTS } from \"@nand2tetris/projects/index.js\";\nimport { CMP } from \"@nand2tetris/simulator/languages/cmp.js\";\nimport { HDL } from \"@nand2tetris/simulator/languages/hdl.js\";\nimport { TST } from \"@nand2tetris/simulator/languages/tst.js\";\nimport { Timer } from \"@nand2tetris/simulator/timer.js\";\nimport { AppContext } from \"../App.context\";\nimport { Icon } from \"../pico/icon\";\nimport { Editor } from \"../shell/editor\";\nimport { Accordian, Panel } from \"../shell/panel\";\n\nexport const Chip = () => {\n  const { fs, setStatus } = useContext(BaseContext);\n  const { filePicker, tracking } = useContext(AppContext);\n  const { state, actions, dispatch } = useChipPageStore();\n\n  const [hdl, setHdl] = useStateInitializer(state.files.hdl);\n  const [tst, setTst] = useStateInitializer(state.files.tst);\n  const [cmp, setCmp] = useStateInitializer(state.files.cmp);\n  const [out] = useStateInitializer(state.files.out);\n\n  useEffect(() => {\n    actions.initialize();\n  }, [actions]);\n\n  useEffect(() => {\n    tracking.trackPage(\"/chip\");\n  }, [tracking]);\n\n  const saveChip = () => {\n    actions.saveChip(hdl);\n  };\n\n  useEffect(() => {\n    tracking.trackEvent(\"action\", \"setProject\", state.controls.project);\n    tracking.trackEvent(\"action\", \"setChip\", state.controls.chipName);\n  }, []);\n\n  const setProject = useCallback(\n    (project: keyof typeof CHIP_PROJECTS) => {\n      actions.setProject(project);\n      tracking.trackEvent(\"action\", \"setProject\", project);\n    },\n    [actions, tracking]\n  );\n\n  const setChip = useCallback(\n    (chip: string) => {\n      actions.setChip(chip);\n      tracking.trackEvent(\"action\", \"setChip\", chip);\n      pinResetDispatcher.reset();\n    },\n    [actions, tracking]\n  );\n\n  const doEval = useCallback(() => {\n    actions.eval();\n    tracking.trackEvent(\"action\", \"eval\");\n  }, [actions, tracking]);\n\n  const compile = useRef<(files?: Partial<Files>) => void>(() => undefined);\n  compile.current = async (files: Partial<Files> = {}) => {\n    await actions.updateFiles({\n      hdl: files.hdl,\n      tst: files.tst ?? tst,\n      cmp: files.cmp ?? cmp,\n    });\n  };\n\n  const loadTest = useCallback(async () => {\n    try {\n      const path = await filePicker.select();\n      const tst = await fs.readFile(path);\n      await compile.current({ tst });\n    } catch (e) {\n      console.error(e);\n      setStatus(`Failed to load into memory`);\n    }\n  }, [filePicker, setStatus, fs, compile]);\n\n  const runner = useRef<Timer>();\n  useEffect(() => {\n    runner.current = new (class ChipTimer extends Timer {\n      async reset(): Promise<void> {\n        await compile.current();\n        await actions.reset();\n      }\n\n      override finishFrame(): void {\n        super.finishFrame();\n        dispatch.current({ action: \"updateTestStep\" });\n      }\n\n      async tick(): Promise<boolean> {\n        return await actions.stepTest();\n      }\n\n      toggle(): void {\n        dispatch.current({ action: \"updateTestStep\" });\n      }\n    })();\n\n    return () => {\n      runner.current?.stop();\n    };\n  }, [compile, actions, dispatch]);\n\n  const clockActions = useMemo(\n    () => ({\n      toggle() {\n        actions.clock();\n        tracking.trackEvent(\"action\", \"toggleClock\");\n      },\n      reset() {\n        tracking.trackEvent(\"action\", \"resetClock\");\n        actions.reset();\n      },\n    }),\n    [actions]\n  );\n\n  const [useBuiltin, setUseBuiltin] = useState(false);\n  const toggleUseBuiltin = () => {\n    if (useBuiltin) {\n      setUseBuiltin(false);\n      actions.useBuiltin(false);\n    } else {\n      setUseBuiltin(true);\n      actions.useBuiltin(true, hdl);\n    }\n    pinResetDispatcher.reset();\n  };\n\n  const selectors = (\n    <>\n      <fieldset role=\"group\">\n        <select\n          value={state.controls.project}\n          onChange={({ target: { value } }) => {\n            setProject(value as keyof typeof CHIP_PROJECTS);\n          }}\n          data-testid=\"project-picker\"\n        >\n          {PROJECT_NAMES.map(([number, label]) => (\n            <option key={number} value={number}>\n              {label}\n            </option>\n          ))}\n        </select>\n        <select\n          value={state.controls.chipName}\n          onChange={({ target: { value } }) => {\n            setChip(value);\n          }}\n          data-testid=\"chip-picker\"\n        >\n          {state.controls.chips.map((chip) => (\n            <option\n              key={chip}\n              value={chip}\n              style={isBuiltinOnly(chip) ? { color: \"rgb(170, 170, 170)\" } : {}}\n            >\n              {`${chip} ${isBuiltinOnly(chip) ? \"(given)\" : \"\"}`}\n            </option>\n          ))}\n        </select>\n        <button className=\"flex-0\" onClick={saveChip} disabled={useBuiltin}>\n          <Trans>Save</Trans>\n        </button>\n      </fieldset>\n    </>\n  );\n  const hdlPanel = (\n    <Panel\n      className=\"_hdl_panel\"\n      header={\n        <>\n          <div tabIndex={0}>HDL</div>\n          <fieldset>\n            {state.controls.hasBuiltin && !state.controls.builtinOnly && (\n              <label>\n                <input\n                  type=\"checkbox\"\n                  role=\"switch\"\n                  checked={useBuiltin}\n                  onChange={toggleUseBuiltin}\n                />\n                <Trans>Builtin</Trans>\n              </label>\n            )}\n          </fieldset>\n          {selectors}\n        </>\n      }\n    >\n      <Editor\n        className=\"flex-1\"\n        value={hdl}\n        onChange={(source) => {\n          setHdl(source);\n          compile.current(\n            useBuiltin || state.controls.builtinOnly ? {} : { hdl: source }\n          );\n        }}\n        grammar={HDL.parser}\n        language={\"hdl\"}\n        disabled={useBuiltin || state.controls.builtinOnly}\n      />\n    </Panel>\n  );\n\n  const [inputValid, setInputValid] = useState(true);\n\n  const chipButtons = (\n    <fieldset role=\"group\">\n      <button\n        onClick={doEval}\n        onKeyDown={doEval}\n        disabled={!state.sim.pending || !inputValid}\n      >\n        <Trans>Eval</Trans>\n      </button>\n      <button\n        onClick={clockActions.toggle}\n        style={{ maxWidth: \"initial\" }}\n        disabled={!state.sim.clocked}\n      >\n        <Trans>Clock</Trans>:{\"\\u00a0\"}\n        <Clockface />\n      </button>\n      <button\n        onClick={clockActions.reset}\n        style={{ maxWidth: \"initial\" }}\n        disabled={!state.sim.clocked}\n      >\n        <Trans>Reset</Trans>\n      </button>\n    </fieldset>\n  );\n\n  const visualizations: [string, ReactNode][] = makeVisualizationsWithId(\n    {\n      parts: state.sim.chip,\n    },\n    () => {\n      dispatch.current({ action: \"updateChip\" });\n    }\n  );\n\n  const pinResetDispatcher = new PinResetDispatcher();\n\n  const pinsPanel = (\n    <Panel\n      className=\"_parts_panel\"\n      header={\n        <>\n          <div>\n            <Trans>Chip</Trans> {state.controls.chipName}\n          </div>\n          {chipButtons}\n        </>\n      }\n    >\n      {state.sim.invalid ? (\n        <Trans>Syntax errors in the HDL code</Trans>\n      ) : (\n        <>\n          <PinContext.Provider value={pinResetDispatcher}>\n            <FullPinout\n              sim={state.sim}\n              toggle={actions.toggle}\n              setInputValid={setInputValid}\n              hideInternal={state.controls.builtinOnly || useBuiltin}\n            />\n          </PinContext.Provider>\n          {visualizations.length > 0 && (\n            <Accordian summary={<Trans>Visualization</Trans>} open={true}>\n              <main>{visualizations.map(([_, v]) => v)}</main>\n            </Accordian>\n          )}\n        </>\n      )}\n    </Panel>\n  );\n\n  const [selectedTestTab, doSetSelectedTestTab] = useState<\n    \"tst\" | \"cmp\" | \"out\"\n  >(\"tst\");\n\n  const setSelectedTestTab = useCallback(\n    (tab: typeof selectedTestTab) => {\n      doSetSelectedTestTab(tab);\n      tracking.trackEvent(\"tab\", \"change\", tab);\n    },\n    [tracking]\n  );\n\n  const testPanel = (\n    <Panel\n      className=\"_test_panel\"\n      header={\n        <>\n          <div className=\"flex-1\">\n            <Trans>Test</Trans>\n          </div>\n          <div className=\"flex-2\">\n            {runner.current && <Runbar runner={runner.current} />}\n          </div>\n          <div>\n            <button onClick={loadTest}>\n              <Icon name=\"upload_file\" />{\" \"}\n            </button>\n          </div>\n        </>\n      }\n    >\n      <div role=\"tablist\" style={{ \"--tab-count\": \"3\" } as CSSProperties}>\n        <div\n          role=\"tab\"\n          id=\"test-tab-tst\"\n          aria-controls=\"test-tabpanel-tst\"\n          aria-selected={selectedTestTab === \"tst\"}\n        >\n          <label>\n            <input\n              type=\"radio\"\n              name=\"test-tabs\"\n              aria-controls=\"test-tabpanel-tst\"\n              value=\"tst\"\n              checked={selectedTestTab === \"tst\"}\n              onChange={() => setSelectedTestTab(\"tst\")}\n            />\n            Test Script\n          </label>\n        </div>\n        <div\n          role=\"tabpanel\"\n          aria-labelledby=\"test-tab-tst\"\n          id=\"test-tabpanel-tst\"\n        >\n          <Editor\n            value={tst}\n            onChange={setTst}\n            grammar={TST.parser}\n            language={\"tst\"}\n            highlight={state.controls.span}\n            disabled={state.controls.builtinOnly}\n          />\n        </div>\n        <div\n          role=\"tab\"\n          id=\"test-tab-cmp\"\n          aria-controls=\"test-tablpanel-cmp\"\n          aria-selected={selectedTestTab === \"cmp\"}\n        >\n          <label>\n            <input\n              type=\"radio\"\n              name=\"test-tabs\"\n              aria-controls=\"test-tabpanel-cmp\"\n              value=\"cmp\"\n              checked={selectedTestTab === \"cmp\"}\n              onChange={() => setSelectedTestTab(\"cmp\")}\n            />\n            Compare File\n          </label>\n        </div>\n        <div\n          role=\"tabpanel\"\n          aria-labelledby=\"test-tab-cmp\"\n          id=\"test-tabpanel-cmp\"\n          style={{ position: \"relative\" }}\n        >\n          <Editor\n            value={cmp}\n            onChange={setCmp}\n            grammar={CMP.parser}\n            language={\"cmp\"}\n            disabled={state.controls.builtinOnly}\n          />\n        </div>\n        <div\n          role=\"tab\"\n          id=\"test-tab-out\"\n          aria-controls=\"test-tabpanel-out\"\n          aria-selected={selectedTestTab === \"out\"}\n        >\n          <label>\n            <input\n              type=\"radio\"\n              name=\"test-tabs\"\n              aria-controls=\"test-tabpanel-out\"\n              value=\"out\"\n              checked={selectedTestTab === \"out\"}\n              onChange={() => setSelectedTestTab(\"out\")}\n            />\n            Output File\n          </label>\n        </div>\n        <div\n          role=\"tabpanel\"\n          id=\"test-tabpanel-out\"\n          aria-labelledby=\"test-tab-out\"\n        >\n          <DiffTable cmp={cmp} out={out} />\n        </div>\n      </div>\n    </Panel>\n  );\n\n  return (\n    <div className=\"ChipPage grid\">\n      {hdlPanel}\n      {pinsPanel}\n      {testPanel}\n    </div>\n  );\n};\n\nexport default Chip;\n"],"names":["RAM","ClockedChip","width","_memory","_nextData","_address","memory","this","address","constructor","name","super","MemoryChip","Math","pow","tick","load","in","voltage","busVoltage","set","tock","out","get","eval","at","idx","assert","size","RamBus","reset","Bus","index","ram","num","RAM8","RAM16K","ROM32K","async","fs","path","map","v","i","cause","Error","Screen","static","SCREEN_SIZE","SCREEN_OFFSET","Keyboard","Chip","KEYBOARD_OFFSET","getKey","setKey","key","clearKey","Memory","screen","keyboard","parts","add","inn","OFFSET","pin","startsWith","int10","match","groups","offset","CPU","_state","emptyState","state","writeM","cpuTick","cpuInput","pull","HIGH","LOW","ALU","output","cpuTock","addressM","outM","PC","inM","instruction","ConstantBus","A","D","Computer","wire","from","start","to","And","a","b","n","and","And16","and16","DMux","sel","dmux","DMux4Way","c","d","dmux4way","DMux8Way","e","f","g","h","dmux8way","mux16","mux16_4","s2","Mux","mux","Mux16","Mux4Way16","Mux8Way16","mux16_8","Nand","nand","Nand16","nand16","Not","Not16","or","Or","Or16","or16","Or8way","Xor","xor","Xor16","xor16","add16","Add16","ALUNoStat","x","y","op","alu","flags","ng","Flags","zr","halfAdder","HalfAdder","sum","carry","FullAdder","s","ca","cb","fullAdder","Inc16","Bit","bit","Register","bits","VRegister","DFF","t","REGISTRY","Map","ChipCtor","chip","getBuiltinChip","Ok","Err","ALUComponent","flag","_jsxs","children","_jsx","height","xmlns","fill","points","stroke","xmlSpace","textAnchor","fontFamily","fontSize","strokeWidth","id","COMMANDS_ALU","makeVisualization","updateAction","RegisterComponent","KeyboardComponent","update","ScreenComponent","MemoryComponent","format","highlight","decode","am","vis","filter","undefined","length","ChipDisplayInfo","signBehaviors","chipName","unsigned","BUILTIN_REGISTRY","isOk","pins","Array","ins","entries","concat","outs","includes","isSigned","UNSIGNED_PINS","PinContext","createContext","reducePin","range","reverse","reducePins","FullPinout","props","inPins","outPins","internalPins","sim","displayInfo","className","PinoutBlock","header","toggle","setInputValid","disabled","pending","enableEdit","hideInternal","colSpan","immPin","Pin","signed","internal","isBin","setIsBin","useState","inputValid","decimal","setDecimal","resetDispatcher","useContext","PinResetDispatcher","registerCallback","setInputValidity","valid","updatePins","useEffect","value","limit","toString","style","display","flexDirection","alignItems","role","backgroundColor","onClick","onChange","positive","replace","numeric","isNaN","parseInt","newValue","handleDecimalChange","target","maxWidth","margin","callbacks","callback","push","grammar","ohm","hdlGrammar","grammars","hdlSemantics","extendSemantics","baseSemantics","addAttribute","SubBus","_a","startNode","endNode","_b","end","child","WireSide","Wire","left","_","right","rhs","isTerminal","sourceString","lhs","Wires","list","asIteration","node","Part","_c","wires","Parts","BuiltinPart","PartList","ClockedList","clocked","PinDecl","PinList","body","Clocked","Root","root","HDL","parser","semantics","parse","makeParser","pinWidth","loadChip","has","hasBuiltinChip","file","readFile","maybeParsedHDL","build","buildChip","part","builtin","isErr","partChip","PROJECT_NAMES","getChips","project","CHIP_ORDER","BUILTIN_CHIP_PROJECTS","CHIP_PROJECTS","isBuiltinOnly","Object","values","flat","getBuiltinCode","template","ChipProjects","BUILTIN_CHIPS","CHIPS","getTemplate","bodyComment","builtinLine","reduceChip","invalid","clock","Clock","makeChipStore","setStatus","storage","dispatch","dropdowns","chips","findDropdowns","Low","test","ChipTest","usingBuiltin","builtinOnly","reducers","setFiles","hdl","files","tst","cmp","updateChip","payload","controls","error","setProject","setChip","hasBuiltin","testRunning","runningTest","testFinished","passed","compare","trim","updateTestStep","log","currentStep","span","done","actions","p","current","action","useBuiltin","compileChip","compileTest","remove","maybeParsed","maybeChip","replaceChip","nextChip","nextPin","with","fsName","ext","Promise","all","catch","makeHdl","prj","writeFile","isLow","frame","oldHdl","builtinName","saveChip","TST","setFileSystem","pushd","run","popd","stepTest","chipId","step","initialState","BaseContext","filePicker","tracking","AppContext","useRef","useMemo","dispatcher","useImmerReducer","useChipPageStore","setHdl","useStateInitializer","setTst","setCmp","initialize","trackPage","trackEvent","useCallback","pinResetDispatcher","doEval","compile","updateFiles","loadTest","select","console","runner","Timer","finishFrame","stop","clockActions","setUseBuiltin","selectors","number","label","color","hdlPanel","tabIndex","type","checked","source","language","chipButtons","onKeyDown","visualizations","makeVisualizationsWithId","pinsPanel","Provider","summary","open","selectedTestTab","doSetSelectedTestTab","setSelectedTestTab","tab","testPanel","position","CMP"],"sourceRoot":""}