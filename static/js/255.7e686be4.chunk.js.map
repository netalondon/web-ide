{"version":3,"file":"static/js/255.7e686be4.chunk.js","mappings":"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","sources":["../../simulator/src/testing/mult.ts","../../components/src/stores/cpu.store.ts","shell/test_panel.tsx","pages/cpu.tsx"],"sourcesContent":["export const JACK = `\nwhile (R0 > 0) {\n    R2 = R2 + R1\n    R0 = R0 - 1\n}`;\n\nexport const ASM = `\n@R2\nM=0\n(LOOP)\n  @R0\n  D=M\n  @END\n  D;JEQ\n\n  @R1\n  D=M\n  @R2\n  D=D+M\n  M=D\n\n  @R0\n  M=M-1\n  @LOOP\n  0;JMP\n(END)\n  @END\n  0;JMP\n`;\n\nexport const HACK = new Int16Array([\n  0x0002, // @R2\n  0xda88, // M=0\n  0x0000, // (LOOP) @R0\n  0xfc10, // D=M\n  0x000f, // @END\n  0xd302, // D;JEQ\n  0x0001, // @R1\n  0xfc10, // D=M\n  0x0002, // @R2\n  0xf090, // D=D+M\n  0xd308, // M=D\n  0x0000, // @R0\n  0xfc88, // M=M-1\n  0x0002, // @LOOP\n  0xda87, // 0;JMP\n  0x000f, // (END) @END\n  0xda87, // 0;JMP\n]);\n","import { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs\";\nimport {\n  KeyboardAdapter,\n  MemoryAdapter,\n  MemoryKeyboard,\n  ROM,\n  SubMemory,\n} from \"@nand2tetris/simulator/cpu/memory.js\";\nimport { Span } from \"@nand2tetris/simulator/languages/base.js\";\nimport { HACK } from \"@nand2tetris/simulator/testing/mult.js\";\nimport { CPUTest } from \"@nand2tetris/simulator/tst.js\";\nimport { Dispatch, MutableRefObject, useContext, useMemo, useRef } from \"react\";\nimport { useImmerReducer } from \"../react.js\";\nimport { BaseContext } from \"./base.context.js\";\n\nexport interface CpuSim {\n  A: number;\n  D: number;\n  PC: number;\n  RAM: MemoryAdapter;\n  ROM: MemoryAdapter;\n  Screen: MemoryAdapter;\n  Keyboard: KeyboardAdapter;\n}\n\nexport interface CPUTestSim {\n  highlight: Span | undefined;\n}\n\nexport interface CpuPageState {\n  sim: CpuSim;\n  test: CPUTestSim;\n}\n\nclass ImmMemory extends SubMemory {\n  constructor(\n    parent: MemoryAdapter,\n    private dispatch: MutableRefObject<CpuStoreDispatch>\n  ) {\n    super(parent, parent.size, 0);\n  }\n\n  override async load(fs: FileSystem, path: string): Promise<void> {\n    await super.load(fs, path);\n    this.dispatch.current({ action: \"update\" });\n  }\n}\n\nfunction reduceCPUTest(\n  cpuTest: CPUTest,\n  dispatch: MutableRefObject<CpuStoreDispatch>\n): CpuSim {\n  const RAM = new ImmMemory(cpuTest.cpu.RAM, dispatch);\n  const ROM = new ImmMemory(cpuTest.cpu.ROM, dispatch);\n  const Screen = new ImmMemory(cpuTest.cpu.Screen, dispatch);\n  const Keyboard = new MemoryKeyboard(new ImmMemory(cpuTest.cpu.RAM, dispatch));\n\n  return {\n    A: cpuTest.cpu.A,\n    D: cpuTest.cpu.D,\n    PC: cpuTest.cpu.PC,\n    RAM,\n    ROM,\n    Screen,\n    Keyboard,\n  };\n}\n\nexport type CpuStoreDispatch = Dispatch<{\n  action: keyof ReturnType<typeof makeCpuStore>[\"reducers\"];\n  payload?: unknown;\n}>;\n\nexport function makeCpuStore(\n  fs: FileSystem,\n  setStatus: (status: string) => void,\n  storage: Record<string, string>,\n  dispatch: MutableRefObject<CpuStoreDispatch>\n) {\n  const test = new CPUTest(new ROM(HACK));\n\n  const reducers = {\n    update(state: CpuPageState) {\n      state.sim = reduceCPUTest(test, dispatch);\n      state.test.highlight = test.currentStep?.span;\n    },\n  };\n\n  const actions = {\n    tick() {\n      test.cpu.tick();\n    },\n\n    testStep() {\n      test.step();\n    },\n\n    resetRAM() {\n      // test.cpu.RAM.set(0, 3);\n      // test.cpu.RAM.set(1, 2);\n      test.cpu.RAM.loadBytes([]);\n      dispatch.current({ action: \"update\" });\n      setStatus(\"Reset RAM\");\n    },\n\n    toggleUseTest() {\n      dispatch.current({ action: \"update\" });\n    },\n\n    resetCPU() {\n      test.reset();\n      dispatch.current({ action: \"update\" });\n      setStatus(\"Reset CPU\");\n    },\n\n    reset() {\n      this.resetRAM();\n      this.resetCPU();\n      setStatus(\"Reset CPU & RAM\");\n    },\n  };\n\n  const initialState = {\n    sim: reduceCPUTest(test, dispatch),\n    test: {\n      highlight: test.currentStep?.span,\n    },\n  };\n\n  return { initialState, reducers, actions };\n}\n\nexport function useCpuPageStore() {\n  const { fs, setStatus, storage } = useContext(BaseContext);\n\n  const dispatch = useRef<CpuStoreDispatch>(() => undefined);\n\n  const { initialState, reducers, actions } = useMemo(\n    () => makeCpuStore(fs, setStatus, storage, dispatch),\n    [fs, setStatus, storage, dispatch]\n  );\n\n  const [state, dispatcher] = useImmerReducer(reducers, initialState);\n  dispatch.current = dispatcher;\n\n  return { state, dispatch, actions };\n}\n","import {\n  CSSProperties,\n  Dispatch,\n  RefObject,\n  useCallback,\n  useContext,\n  useState,\n} from \"react\";\nimport { Trans } from \"@lingui/macro\";\nimport { DiffTable } from \"@nand2tetris/components/difftable.js\";\nimport { Runbar } from \"@nand2tetris/components/runbar.js\";\nimport { CMP } from \"@nand2tetris/simulator/languages/cmp.js\";\nimport { BaseContext } from \"@nand2tetris/components/stores/base.context.js\";\nimport { Timer } from \"@nand2tetris/simulator/timer.js\";\nimport { TST } from \"@nand2tetris/simulator/languages/tst.js\";\nimport { AppContext } from \"../App.context\";\nimport { Editor } from \"./editor\";\nimport { Panel } from \"./panel\";\nimport { Span } from \"@nand2tetris/simulator/languages/base\";\n\nexport const TestPanel = ({\n  runner,\n  tst: [tst, setTst, tstHighlight],\n  cmp: [cmp, setCmp],\n  out: [out],\n  disabled = false,\n}: {\n  runner: RefObject<Timer | undefined>;\n  tst: [string, Dispatch<string>, Span | undefined];\n  cmp: [string, Dispatch<string>];\n  out: [string, Dispatch<string>];\n  disabled?: boolean;\n}) => {\n  const { fs, setStatus } = useContext(BaseContext);\n  const { filePicker, tracking } = useContext(AppContext);\n\n  const [selectedTestTab, doSetSelectedTestTab] = useState<\n    \"tst\" | \"cmp\" | \"out\"\n  >(\"tst\");\n\n  const setSelectedTestTab = useCallback(\n    (tab: typeof selectedTestTab) => {\n      doSetSelectedTestTab(tab);\n      tracking.trackEvent(\"tab\", \"change\", tab);\n    },\n    [tracking]\n  );\n\n  const loadTest = useCallback(async () => {\n    try {\n      const path = await filePicker.select();\n      const tst = await fs.readFile(path);\n      setTst(tst);\n      // await compile.current({ tst });\n    } catch (e) {\n      console.error(e);\n      setStatus(`Failed to load test`);\n    }\n  }, [filePicker, setStatus, fs]);\n\n  return (\n    <Panel\n      className=\"_test_panel\"\n      header={\n        <>\n          <div className=\"flex-0\">\n            <Trans>Test</Trans>\n          </div>\n          <div className=\"flex-1\">\n            {runner.current && <Runbar runner={runner.current} />}\n          </div>\n          <div>\n            <fieldset role=\"group\">\n              <button onClick={loadTest}>📂</button>\n            </fieldset>\n          </div>\n        </>\n      }\n    >\n      <div role=\"tablist\" style={{ \"--tab-count\": \"3\" } as CSSProperties}>\n        <div\n          role=\"tab\"\n          id=\"test-tab-tst\"\n          aria-controls=\"test-tabpanel-tst\"\n          aria-selected={selectedTestTab === \"tst\"}\n        >\n          <label>\n            <input\n              type=\"radio\"\n              name=\"test-tabs\"\n              aria-controls=\"test-tabpanel-tst\"\n              value=\"tst\"\n              checked={selectedTestTab === \"tst\"}\n              onChange={() => setSelectedTestTab(\"tst\")}\n            />\n            Test Script\n          </label>\n        </div>\n        <div\n          role=\"tabpanel\"\n          aria-labelledby=\"test-tab-tst\"\n          id=\"test-tabpanel-tst\"\n        >\n          <Editor\n            value={tst}\n            onChange={setTst}\n            grammar={TST.parser}\n            language={\"tst\"}\n            highlight={tstHighlight}\n            disabled={disabled}\n          />\n        </div>\n        <div\n          role=\"tab\"\n          id=\"test-tab-cmp\"\n          aria-controls=\"test-tablpanel-cmp\"\n          aria-selected={selectedTestTab === \"cmp\"}\n        >\n          <label>\n            <input\n              type=\"radio\"\n              name=\"test-tabs\"\n              aria-controls=\"test-tabpanel-cmp\"\n              value=\"cmp\"\n              checked={selectedTestTab === \"cmp\"}\n              onChange={() => setSelectedTestTab(\"cmp\")}\n            />\n            Compare File\n          </label>\n        </div>\n        <div\n          role=\"tabpanel\"\n          aria-labelledby=\"test-tab-cmp\"\n          id=\"test-tabpanel-cmp\"\n          style={{ position: \"relative\" }}\n        >\n          <Editor\n            value={cmp}\n            onChange={setCmp}\n            grammar={CMP.parser}\n            language={\"cmp\"}\n            disabled={disabled}\n          />\n        </div>\n        <div\n          role=\"tab\"\n          id=\"test-tab-out\"\n          aria-controls=\"test-tabpanel-out\"\n          aria-selected={selectedTestTab === \"out\"}\n        >\n          <label>\n            <input\n              type=\"radio\"\n              name=\"test-tabs\"\n              aria-controls=\"test-tabpanel-out\"\n              value=\"out\"\n              checked={selectedTestTab === \"out\"}\n              onChange={() => setSelectedTestTab(\"out\")}\n            />\n            Output File\n          </label>\n        </div>\n        <div\n          role=\"tabpanel\"\n          id=\"test-tabpanel-out\"\n          aria-labelledby=\"test-tab-out\"\n        >\n          <DiffTable cmp={cmp} out={out} />\n        </div>\n      </div>\n    </Panel>\n  );\n};\n","import { Timer } from \"@nand2tetris/simulator/timer.js\";\n\nimport { Keyboard } from \"@nand2tetris/components/chips/keyboard\";\nimport MemoryComponent from \"@nand2tetris/components/chips/memory.js\";\n// import { Screen } from \"@nand2tetris/components/chips/screen.js\";\nimport { useCpuPageStore } from \"@nand2tetris/components/stores/cpu.store\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\nimport { Trans } from \"@lingui/macro\";\nimport { Runbar } from \"@nand2tetris/components/runbar\";\nimport { Panel } from \"src/shell/panel\";\nimport { TestPanel } from \"src/shell/test_panel\";\nimport \"./cpu.scss\";\n\nexport const CPU = () => {\n  const { state, actions, dispatch } = useCpuPageStore();\n\n  const [tst, setTst] = useState(\"repeat {\\n\\tticktock;\\n}\");\n  const [out, setOut] = useState(\"\");\n  const [cmp, setCmp] = useState(\"\");\n  const [fileName, setFileName] = useState<string | null>(null);\n  const [displayEnabled, setDisplayEnabled] = useState(true);\n\n  const toggleDisplayEnabled = () => {\n    setDisplayEnabled(!displayEnabled);\n  };\n\n  const cpuRunner = useRef<Timer>();\n  const testRunner = useRef<Timer>();\n  const [runnersAssigned, setRunnersAssigned] = useState(false);\n  useEffect(() => {\n    cpuRunner.current = new (class CPUTimer extends Timer {\n      override tick() {\n        actions.tick();\n        return false;\n      }\n\n      override finishFrame() {\n        dispatch.current({ action: \"update\" });\n        console.log(state.sim.PC);\n      }\n\n      override reset() {\n        actions.reset();\n      }\n\n      override toggle() {\n        dispatch.current({ action: \"update\" });\n      }\n    })();\n\n    testRunner.current = new (class CPUTestTimer extends Timer {\n      override tick() {\n        actions.testStep();\n        return false;\n      }\n\n      override finishFrame() {\n        dispatch.current({ action: \"update\" });\n      }\n\n      override reset() {\n        actions.reset();\n      }\n\n      override toggle() {\n        dispatch.current({ action: \"update\" });\n      }\n    })();\n    setRunnersAssigned(true);\n\n    return () => {\n      cpuRunner.current?.stop();\n      testRunner.current?.stop();\n    };\n  }, [actions, dispatch]);\n\n  const onUpload = useCallback(\n    (fileName: string) => {\n      setFileName(fileName);\n      actions.reset();\n    },\n    [setFileName, actions.reset]\n  );\n\n  return (\n    <div className=\"CpuPage grid\">\n      <MemoryComponent\n        name=\"ROM\"\n        memory={displayEnabled ? state.sim.ROM : undefined}\n        highlight={displayEnabled ? state.sim.PC : undefined}\n        format=\"asm\"\n        onUpload={onUpload}\n      />\n      <MemoryComponent\n        name=\"RAM\"\n        memory={displayEnabled ? state.sim.RAM : undefined}\n        format=\"hex\"\n      />\n      <Panel\n        className=\"IO\"\n        header={\n          <>\n            {fileName && <div className=\"flex-0\">{fileName}</div>}\n            <div className=\"flex-1\">\n              {runnersAssigned && cpuRunner.current && (\n                <Runbar runner={cpuRunner.current} />\n              )}\n            </div>\n          </>\n        }\n      >\n        {/* <Screen memory={state.sim.Screen}></Screen> */}\n        <Keyboard keyboard={state.sim.Keyboard} />\n        <label>\n          <input\n            type=\"checkbox\"\n            role=\"switch\"\n            checked={displayEnabled}\n            onChange={toggleDisplayEnabled}\n          />\n          <Trans>{displayEnabled ? \"Disable display\" : \"Enable display\"}</Trans>\n        </label>\n        {displayEnabled && (\n          <div>\n            <dl>\n              <dt>PC</dt>\n              <dd>{state.sim.PC}</dd>\n              <dt>A</dt>\n              <dd>{state.sim.A}</dd>\n              <dt>D</dt>\n              <dd>{state.sim.D}</dd>\n            </dl>\n          </div>\n        )}\n      </Panel>\n      {runnersAssigned && (\n        <TestPanel\n          runner={testRunner}\n          tst={[tst, setTst, state.test.highlight]}\n          out={[out, setOut]}\n          cmp={[cmp, setCmp]}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default CPU;\n"],"names":["HACK","Int16Array","ImmMemory","parent","dispatch","size","fs","path","this","current","action","SubMemory","reduceCPUTest","cpuTest","RAM","cpu","ROM","Screen","Keyboard","MemoryKeyboard","A","D","PC","useCpuPageStore","useContext","BaseContext","setStatus","storage","useRef","useMemo","makeCpuStore","test","CPUTest","reducers","update","state","sim","highlight","currentStep","span","actions","tick","testStep","step","resetRAM","loadBytes","toggleUseTest","resetCPU","reset","initialState","useImmerReducer","dispatcher","TestPanel","runner","tst","setTst","tstHighlight","cmp","setCmp","out","disabled","AppContext","filePicker","tracking","useState","selectedTestTab","doSetSelectedTestTab","setSelectedTestTab","useCallback","tab","trackEvent","loadTest","select","readFile","console","error","className","header","role","onClick","style","id","type","name","value","checked","onChange","grammar","TST","language","position","CMP","CPU","setOut","fileName","setFileName","displayEnabled","setDisplayEnabled","cpuRunner","testRunner","runnersAssigned","setRunnersAssigned","useEffect","log","Timer","stop","onUpload","memory","undefined","format","keyboard","toggleDisplayEnabled"],"sourceRoot":""}