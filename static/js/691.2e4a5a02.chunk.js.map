{"version":3,"file":"static/js/691.2e4a5a02.chunk.js","mappings":"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","sources":["../../simulator/src/chip/builder.ts","../../simulator/src/chip/builtins/computer/computer.tsx","../../simulator/src/chip/builtins/logic/and.ts","../../simulator/src/chip/builtins/logic/dmux.ts","../../simulator/src/chip/builtins/logic/mux.ts","../../simulator/src/chip/builtins/logic/nand.ts","../../simulator/src/chip/builtins/logic/not.ts","../../simulator/src/chip/builtins/logic/or.ts","../../simulator/src/chip/builtins/logic/xor.ts","../../simulator/src/chip/builtins/arithmetic/add_16.ts","../../simulator/src/chip/builtins/arithmetic/alu.tsx","../../simulator/src/chip/builtins/arithmetic/half_adder.ts","../../simulator/src/chip/builtins/arithmetic/full_adder.ts","../../simulator/src/chip/builtins/arithmetic/inc16.ts","../../simulator/src/chip/builtins/sequential/dff.ts","../../simulator/src/chip/builtins/index.ts","../../simulator/src/chip/builtins/sequential/bit.tsx","../../simulator/src/chip/builtins/sequential/ram.tsx","../../simulator/src/languages/grammars/hdl.ohm.js","../../simulator/src/languages/hdl.ts"],"sourcesContent":["import { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport {\n  Err,\n  isErr,\n  isOk,\n  Ok,\n  Result,\n} from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { HDL, HdlParse } from \"../languages/hdl.js\";\nimport { getBuiltinChip, hasBuiltinChip } from \"./builtins/index.js\";\nimport { Chip, Connection } from \"./chip.js\";\n\nfunction pinWidth(start: number, end: number | undefined): number | undefined {\n  if (end === undefined) {\n    return undefined;\n  }\n  if (end >= start) {\n    return end - start + 1;\n  }\n  if (start > 0 && end === 0) {\n    return 1;\n  }\n  throw new Error(`Bus specification has start > end (${start} > ${end})`);\n}\n\nexport async function parse(\n  code: string\n): Promise<Result<Chip, Error | { message: string; shortMessage: string }>> {\n  const parsed = HDL.parse(code.toString());\n  if (isErr(parsed)) return parsed;\n  return build(Ok(parsed));\n}\n\nexport async function loadChip(\n  name: string,\n  fs?: FileSystem\n): Promise<Result<Chip>> {\n  if (hasBuiltinChip(name) || fs === undefined) {\n    return getBuiltinChip(name);\n  }\n  try {\n    const file = await fs.readFile(`${name}.hdl`);\n    const maybeParsedHDL = HDL.parse(file);\n    const chip = isOk(maybeParsedHDL)\n      ? build(Ok(maybeParsedHDL), fs)\n      : Err(new Error(\"HDL Was not parsed\"));\n    return chip;\n  } catch (e) {\n    return Err(new Error(`Could not load chip ${name}.hdl` /*, { cause: e }*/));\n  }\n}\n\nexport async function build(\n  parts: HdlParse,\n  fs?: FileSystem\n): Promise<Result<Chip, Error>> {\n  if (parts.parts === \"BUILTIN\") {\n    return getBuiltinChip(parts.name.toString());\n  }\n\n  const buildChip = new Chip(\n    parts.ins.map(({ pin, width }) => ({ pin: pin.toString(), width })),\n    parts.outs.map(({ pin, width }) => ({ pin: pin.toString(), width })),\n    parts.name.toString(),\n    [],\n    parts.clocked\n  );\n\n  for (const part of parts.parts) {\n    const builtin = await loadChip(part.name.toString(), fs);\n    if (isErr(builtin)) return builtin;\n    const partChip = Ok(builtin);\n\n    const wires = part.wires.map<Connection>(({ lhs, rhs }) => ({\n      to: {\n        name: lhs.pin.toString(),\n        start: lhs.start ?? 0,\n        width: pinWidth(lhs.start ?? 0, lhs.end),\n      },\n      from: {\n        name: rhs.pin.toString(),\n        start: rhs.start ?? 0,\n        width: pinWidth(rhs.start ?? 0, rhs.end),\n      },\n    }));\n\n    try {\n      buildChip.wire(partChip, wires);\n    } catch (e) {\n      return Err(e as Error);\n    }\n  }\n\n  return Ok(buildChip);\n}\n","import { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport { Chip, ClockedChip, ConstantBus, HIGH, LOW, Pin } from \"../../chip.js\";\nimport { RAM, RAM16K } from \"../sequential/ram.js\";\nimport {\n  CPUInput,\n  CPUState,\n  cpuTick,\n  cpuTock,\n  emptyState,\n} from \"../../../cpu/cpu.js\";\nimport { int10 } from \"../../../util/twos.js\";\nimport { load } from \"../../../fs.js\";\nimport {\n  KEYBOARD_OFFSET,\n  KeyboardAdapter,\n  SCREEN_OFFSET,\n  SCREEN_SIZE,\n} from \"../../../cpu/memory.js\";\n\nexport class ROM32K extends RAM {\n  constructor() {\n    super(16, \"ROM\");\n  }\n\n  override async load(fs: FileSystem, path: string) {\n    try {\n      (await load(fs, path)).map((v, i) => (this.at(i).busVoltage = v));\n    } catch (cause) {\n      // throw new Error(`ROM32K Failed to load file ${path}`, { cause });\n      throw new Error(`ROM32K Failed to load file ${path}`);\n    }\n  }\n}\n\nexport class Screen extends RAM {\n  static readonly SIZE = SCREEN_SIZE;\n  static readonly OFFSET = SCREEN_OFFSET;\n\n  constructor() {\n    super(13, \"Screen\");\n  }\n}\n\nexport class Keyboard extends Chip implements KeyboardAdapter {\n  static readonly OFFSET = KEYBOARD_OFFSET;\n\n  constructor() {\n    super([], [\"out[16]\"], \"Keyboard\");\n  }\n\n  getKey() {\n    return this.out().busVoltage;\n  }\n\n  setKey(key: number) {\n    this.out().busVoltage = key & 0xffff;\n  }\n\n  clearKey() {\n    this.out().busVoltage = 0;\n  }\n}\n\nexport class Memory extends ClockedChip {\n  private ram = new RAM16K();\n  private screen = new Screen();\n  private keyboard = new Keyboard();\n  private address = 0;\n\n  constructor() {\n    super([\"in[16]\", \"load\", \"address[15])\"], [\"out[16]\"], \"Memory\");\n    this.parts.add(this.keyboard);\n    this.parts.add(this.screen);\n    this.parts.add(this.ram);\n  }\n\n  override tick() {\n    const load = this.in(\"load\").voltage();\n    this.address = this.in(\"address\").busVoltage;\n    if (load) {\n      const inn = this.in().busVoltage;\n      if (this.address >= Keyboard.OFFSET) {\n        // Keyboard, do nothing\n      } else if (this.address >= Screen.OFFSET) {\n        this.screen.at(this.address - Screen.OFFSET).busVoltage = inn;\n      } else {\n        this.ram.at(this.address).busVoltage = inn;\n      }\n    }\n  }\n\n  override tock() {\n    this.eval();\n  }\n\n  override eval() {\n    if (!this.ram) return;\n    this.address = this.in(\"address\").busVoltage;\n    let out = 0;\n    if (this.address >= Keyboard.OFFSET) {\n      // Keyboard, do nothing\n      out = this.keyboard?.out().busVoltage ?? 0;\n    } else if (this.address >= Screen.OFFSET) {\n      out = this.screen?.at(this.address - Screen.OFFSET).busVoltage ?? 0;\n    } else {\n      out = this.ram?.at(this.address).busVoltage ?? 0;\n    }\n    this.out().busVoltage = out;\n  }\n\n  override in(pin?: string): Pin {\n    if (pin?.startsWith(\"RAM16K\")) {\n      const idx = int10(pin.match(/\\[(?<idx>\\d+)]/)?.groups?.idx ?? \"0\");\n      return this.ram.at(idx);\n    }\n    if (pin?.startsWith(\"Screen\")) {\n      const idx = int10(pin.match(/\\[(?<idx>\\d+)]/)?.groups?.idx ?? \"0\");\n      return this.screen.at(idx);\n    }\n    return super.in(pin);\n  }\n\n  override get(name: string, offset = 0): Pin | undefined {\n    if (name.startsWith(\"RAM16K\")) {\n      return this.at(offset & 0x3fff);\n    }\n    if (name.startsWith(\"Screen\")) {\n      return this.at(offset & (0x1fff + Screen.OFFSET));\n    }\n    if (name.startsWith(\"Keyboard\")) {\n      return this.at(Keyboard.OFFSET);\n    }\n    if (name.startsWith(\"Memory\")) {\n      return this.at(offset);\n    }\n    return super.get(name, offset);\n  }\n\n  at(offset: number): Pin {\n    if (offset >= Keyboard.OFFSET) {\n      return this.keyboard.out();\n    }\n    if (offset >= Screen.OFFSET) {\n      return this.screen.at(offset - Screen.OFFSET);\n    } else {\n      return this.ram.at(offset);\n    }\n  }\n\n  override reset(): void {\n    this.address = 0;\n    this.ram.reset();\n    this.screen.reset();\n    super.reset();\n  }\n}\n\nexport class CPU extends ClockedChip {\n  private _state: CPUState = emptyState();\n\n  get state(): CPUState {\n    return this._state;\n  }\n\n  constructor() {\n    super(\n      [\"inM[16]\", \"instruction[16]\", \"reset\"],\n      [\"outM[16]\", \"writeM\", \"addressM[15]\", \"pc[15]\"]\n    );\n  }\n\n  override tick(): void {\n    const [state, writeM] = cpuTick(this.cpuInput(), this._state);\n    this._state = state;\n    this.out(\"writeM\").pull(writeM ? HIGH : LOW);\n    this.out(\"outM\").busVoltage = this._state.ALU ?? 0;\n  }\n\n  override tock(): void {\n    if (!this._state) return; // Skip initial tock\n    const [output, state] = cpuTock(this.cpuInput(), this._state);\n    this._state = state;\n\n    this.out(\"addressM\").busVoltage = output.addressM ?? 0;\n    this.out(\"outM\").busVoltage = output.outM ?? 0;\n    this.out(\"writeM\").pull(output.writeM ? HIGH : LOW);\n    this.out(\"pc\").busVoltage = this._state?.PC ?? 0;\n  }\n\n  private cpuInput(): CPUInput {\n    const inM = this.in(\"inM\").busVoltage;\n    const instruction = this.in(\"instruction\").busVoltage;\n    const reset = this.in(\"reset\").busVoltage === 1;\n    return { inM, instruction, reset };\n  }\n\n  override get(pin: string, offset?: number): Pin | undefined {\n    if (pin?.startsWith(\"ARegister\")) {\n      return new ConstantBus(\"ARegister\", this._state.A);\n    }\n    if (pin?.startsWith(\"DRegister\")) {\n      return new ConstantBus(\"DRegister\", this._state.D);\n    }\n    if (pin?.startsWith(\"PC\")) {\n      return new ConstantBus(\"PC\", this._state.PC);\n    }\n    return super.get(pin, offset);\n  }\n\n  override reset() {\n    this._state = emptyState();\n\n    // This is a bit of a hack, but because super.reset() does ticktock,\n    // we need to set PC to -1, so that it will be 0 after the reset\n    this._state.PC = -1;\n\n    super.reset();\n  }\n}\n\nexport class Computer extends Chip {\n  #ram = new Memory();\n  #rom = new ROM32K();\n  #cpu = new CPU();\n\n  constructor() {\n    super([\"reset\"], []);\n\n    this.wire(this.#cpu, [\n      { from: { name: \"reset\", start: 0 }, to: { name: \"reset\", start: 0 } },\n      {\n        from: { name: \"instruction\", start: 0 },\n        to: { name: \"instruction\", start: 0 },\n      },\n      { from: { name: \"outM\", start: 0 }, to: { name: \"inM\", start: 0 } },\n      { from: { name: \"writeM\", start: 0 }, to: { name: \"writeM\", start: 0 } },\n      {\n        from: { name: \"addressM\", start: 0 },\n        to: { name: \"addressM\", start: 0 },\n      },\n    ]);\n\n    this.wire(this.#rom, [\n      { from: { name: \"pc\", start: 0 }, to: { name: \"address\", start: 0 } },\n      {\n        from: { name: \"instruction\", start: 0 },\n        to: { name: \"out\", start: 0 },\n      },\n    ]);\n\n    this.wire(this.#ram, [\n      { from: { name: \"inM\", start: 0 }, to: { name: \"in\", start: 0 } },\n      { from: { name: \"writeM\", start: 0 }, to: { name: \"load\", start: 0 } },\n      {\n        from: { name: \"addressM\", start: 0 },\n        to: { name: \"address\", start: 0 },\n      },\n      { from: { name: \"outM\", start: 0 }, to: { name: \"out\", start: 0 } },\n    ]);\n  }\n\n  override eval() {\n    super.eval();\n  }\n\n  override get(name: string, offset?: number): Pin | undefined {\n    if (\n      name.startsWith(\"PC\") ||\n      name.startsWith(\"ARegister\") ||\n      name.startsWith(\"DRegister\")\n    ) {\n      return this.#cpu.get(name);\n    }\n    if (name.startsWith(\"RAM16K\")) {\n      return this.#ram.get(name, offset);\n    }\n    return super.get(name, offset);\n  }\n\n  override load(fs: FileSystem, path: string): Promise<void> {\n    return this.#rom.load(fs, path);\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function and(a: Voltage, b: Voltage): [Voltage] {\n  return [a === 1 && b === 1 ? HIGH : LOW];\n}\n\nexport function and16(a: number, b: number): [number] {\n  return [a & b & 0xffff];\n}\n\nexport class And extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [n] = and(a, b);\n    this.out().pull(n);\n  }\n}\n\nexport class And16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const [n] = and16(a, b);\n    this.out().busVoltage = n;\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function dmux(inn: Voltage, sel: Voltage): [Voltage, Voltage] {\n  const a = sel === LOW && inn === HIGH ? HIGH : LOW;\n  const b = sel === HIGH && inn === HIGH ? HIGH : LOW;\n  return [a, b];\n}\n\nexport function dmux4way(\n  inn: Voltage,\n  sel: number\n): [Voltage, Voltage, Voltage, Voltage] {\n  const a = sel === 0b00 && inn === HIGH ? HIGH : LOW;\n  const b = sel === 0b01 && inn === HIGH ? HIGH : LOW;\n  const c = sel === 0b10 && inn === HIGH ? HIGH : LOW;\n  const d = sel === 0b11 && inn === HIGH ? HIGH : LOW;\n  return [a, b, c, d];\n}\n\nexport function dmux8way(\n  inn: Voltage,\n  sel: number\n): [Voltage, Voltage, Voltage, Voltage, Voltage, Voltage, Voltage, Voltage] {\n  const a = sel === 0b000 && inn === HIGH ? HIGH : LOW;\n  const b = sel === 0b001 && inn === HIGH ? HIGH : LOW;\n  const c = sel === 0b010 && inn === HIGH ? HIGH : LOW;\n  const d = sel === 0b011 && inn === HIGH ? HIGH : LOW;\n  const e = sel === 0b100 && inn === HIGH ? HIGH : LOW;\n  const f = sel === 0b101 && inn === HIGH ? HIGH : LOW;\n  const g = sel === 0b110 && inn === HIGH ? HIGH : LOW;\n  const h = sel === 0b111 && inn === HIGH ? HIGH : LOW;\n  return [a, b, c, d, e, f, g, h];\n}\n\nexport class DMux extends Chip {\n  constructor() {\n    super([\"in\", \"sel\"], [\"a\", \"b\"]);\n  }\n\n  override eval() {\n    const inn = this.in(\"in\").voltage();\n    const sel = this.in(\"sel\").voltage();\n\n    const [a, b] = dmux(inn, sel);\n    this.out(\"a\").pull(a);\n    this.out(\"b\").pull(b);\n  }\n}\n\nexport class DMux4Way extends Chip {\n  constructor() {\n    super([\"in\", \"sel[2]\"], [\"a\", \"b\", \"c\", \"d\"]);\n  }\n\n  override eval() {\n    const inn = this.in(\"in\").voltage();\n    const sel = this.in(\"sel\").busVoltage;\n\n    const [a, b, c, d] = dmux4way(inn, sel);\n    this.out(\"a\").pull(a);\n    this.out(\"b\").pull(b);\n    this.out(\"c\").pull(c);\n    this.out(\"d\").pull(d);\n  }\n}\n\nexport class DMux8Way extends Chip {\n  constructor() {\n    super([\"in\", \"sel[3]\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]);\n  }\n\n  override eval() {\n    const inn = this.in(\"in\").voltage();\n    const sel = this.in(\"sel\").busVoltage;\n\n    const [a, b, c, d, e, f, g, h] = dmux8way(inn, sel);\n    this.out(\"a\").pull(a);\n    this.out(\"b\").pull(b);\n    this.out(\"c\").pull(c);\n    this.out(\"d\").pull(d);\n    this.out(\"e\").pull(e);\n    this.out(\"f\").pull(f);\n    this.out(\"g\").pull(g);\n    this.out(\"h\").pull(h);\n  }\n}\n","import { Chip, LOW, Voltage } from \"../../chip.js\";\n\nexport function mux(a: Voltage, b: Voltage, sel: Voltage): [Voltage] {\n  return [sel === LOW ? a : b];\n}\n\nexport function mux16(a: number, b: number, sel: Voltage): [number] {\n  return [sel === LOW ? a : b];\n}\n\nexport function mux16_4(\n  a: number,\n  b: number,\n  c: number,\n  d: number,\n  sel: number\n): [number] {\n  const s2 = (sel & 0b01) as Voltage;\n  return (sel & 0b10) === 0b00 ? mux16(a, b, s2) : mux16(c, d, s2);\n}\n\nexport function mux16_8(\n  a: number,\n  b: number,\n  c: number,\n  d: number,\n  e: number,\n  f: number,\n  g: number,\n  h: number,\n  sel: number\n): [number] {\n  const s2 = (sel & 0b11) as Voltage;\n  return (sel & 0b100) === 0b000\n    ? mux16_4(a, b, c, d, s2)\n    : mux16_4(e, f, g, h, s2);\n}\n\nexport class Mux extends Chip {\n  constructor() {\n    super([\"a\", \"b\", \"sel\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const sel = this.in(\"sel\").voltage();\n\n    const [set] = mux(a, b, sel);\n    this.out().pull(set);\n  }\n}\n\nexport class Mux16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\", \"sel\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const sel = this.in(\"sel\").voltage();\n    const [out] = mux16(a, b, sel);\n    this.out().busVoltage = out;\n  }\n}\n\nexport class Mux4Way16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\", \"c[16]\", \"d[16]\", \"sel[2]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const c = this.in(\"c\").busVoltage;\n    const d = this.in(\"d\").busVoltage;\n    const sel = this.in(\"sel\").busVoltage;\n    const [out] = mux16_4(a, b, c, d, sel);\n\n    this.out().busVoltage = out;\n  }\n}\n\nexport class Mux8Way16 extends Chip {\n  constructor() {\n    super(\n      [\n        \"a[16]\",\n        \"b[16]\",\n        \"c[16]\",\n        \"d[16]\",\n        \"e[16]\",\n        \"f[16]\",\n        \"g[16]\",\n        \"h[16]\",\n        \"sel[3]\",\n      ],\n      [\"out[16]\"]\n    );\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const c = this.in(\"c\").busVoltage;\n    const d = this.in(\"d\").busVoltage;\n    const e = this.in(\"e\").busVoltage;\n    const f = this.in(\"f\").busVoltage;\n    const g = this.in(\"g\").busVoltage;\n    const h = this.in(\"h\").busVoltage;\n    const sel = this.in(\"sel\").busVoltage;\n    const [out] = mux16_8(a, b, c, d, e, f, g, h, sel);\n\n    this.out().busVoltage = out;\n  }\n}\n","import { nand16 } from \"../../../util/twos.js\";\nimport { HIGH, LOW, Chip, Voltage } from \"../../chip.js\";\n\nexport function nand(a: Voltage, b: Voltage): [Voltage] {\n  return [a === 1 && b === 1 ? LOW : HIGH];\n}\n\nexport class Nand extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [out] = nand(a, b);\n    this.out().pull(out);\n  }\n}\n\nexport class Nand16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    this.out().busVoltage = nand16(a, b);\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function not(inn: Voltage): [Voltage] {\n  return [inn === LOW ? HIGH : LOW];\n}\n\nexport function not16(inn: number): [number] {\n  return [~inn & 0xffff];\n}\n\nexport class Not extends Chip {\n  constructor() {\n    super([\"in\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"in\").voltage();\n    const [out] = not(a);\n    this.out().pull(out);\n  }\n}\n\nexport class Not16 extends Chip {\n  constructor() {\n    super([\"in[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const [n] = not16(this.in().busVoltage);\n    this.out().busVoltage = n;\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function or(a: Voltage, b: Voltage): [Voltage] {\n  return [a === 1 || b === 1 ? HIGH : LOW];\n}\n\nexport function or16(a: number, b: number): [number] {\n  return [(a | b) & 0xffff];\n}\n\nexport function or8way(a: number): [Voltage] {\n  return [(a & 0xff) === 0 ? LOW : HIGH];\n}\n\nexport class Or extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [out] = or(a, b);\n    this.out().pull(out);\n  }\n}\n\nexport class Or16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const [out] = or16(a, b);\n    this.out().busVoltage = out;\n  }\n}\n\nexport class Or8way extends Chip {\n  constructor() {\n    super([\"in[8]\"], [\"out\"], \"Or8way\");\n  }\n\n  override eval() {\n    const inn = this.in().busVoltage;\n    const [out] = or8way(inn);\n    this.out().pull(out);\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function xor(a: Voltage, b: Voltage): [Voltage] {\n  return [(a === HIGH && b === LOW) || (a === LOW && b === HIGH) ? HIGH : LOW];\n}\n\nexport function xor16(a: number, b: number): [number] {\n  return [(a ^ b) & 0xffff];\n}\n\nexport class Xor extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [out] = xor(a, b);\n    this.out().pull(out);\n  }\n}\n\nexport class Xor16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const [out] = xor16(a, b);\n    this.out().busVoltage = out;\n  }\n}\n","import { Chip } from \"../../chip.js\";\n\nexport function add16(a: number, b: number): [number] {\n  return [(a + b) & 0xffff];\n}\n\nexport class Add16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"], \"Add16\");\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const [out] = add16(a, b);\n    this.out().busVoltage = out;\n  }\n}\n","import { alu, alua, COMMANDS_OP, Flags } from \"../../../cpu/alu.js\";\nimport { Chip, HIGH, LOW } from \"../../chip.js\";\n\nexport class ALUNoStat extends Chip {\n  constructor() {\n    super(\n      [\n        \"x[16]\",\n        \"y[16]\", // 16-bit inputs\n        \"zx\", // zero the x input?\n        \"nx\", // negate the x input?\n        \"zy\", // zero the y input?\n        \"ny\", // negate the y input?\n        \"f\", // compute out = x + y (if 1) or x & y (if 0)\n        \"no\", // negate the out output?\n      ],\n      [\n        \"out[16]\", // 16-bit output\n      ],\n      \"ALU\"\n    );\n  }\n\n  override eval() {\n    const x = this.in(\"x\").busVoltage;\n    const y = this.in(\"y\").busVoltage;\n    const zx = this.in(\"zx\").busVoltage << 5;\n    const nx = this.in(\"nx\").busVoltage << 4;\n    const zy = this.in(\"zy\").busVoltage << 3;\n    const ny = this.in(\"ny\").busVoltage << 2;\n    const f = this.in(\"f\").busVoltage << 1;\n    const no = this.in(\"no\").busVoltage << 0;\n    const op = zx + nx + zy + ny + f + no;\n\n    const [out] = alu(op, x, y);\n\n    this.out().busVoltage = out;\n  }\n}\n\nexport class ALU extends Chip {\n  constructor() {\n    super(\n      [\n        \"x[16]\",\n        \"y[16]\", // 16-bit inputs\n        \"zx\", // zero the x input?\n        \"nx\", // negate the x input?\n        \"zy\", // zero the y input?\n        \"ny\", // negate the y input?\n        \"f\", // compute out = x + y (if 1) or x & y (if 0)\n        \"no\", // negate the out output?\n      ],\n      [\n        \"out[16]\", // 16-bit output\n        \"zr\", // 1 if (out === 0), 0 otherwise\n        \"ng\", // 1 if (out < 0),  0 otherwise\n      ],\n      \"ALU\"\n    );\n  }\n\n  override eval() {\n    const x = this.in(\"x\").busVoltage;\n    const y = this.in(\"y\").busVoltage;\n    const zx = this.in(\"zx\").busVoltage << 5;\n    const nx = this.in(\"nx\").busVoltage << 4;\n    const zy = this.in(\"zy\").busVoltage << 3;\n    const ny = this.in(\"ny\").busVoltage << 2;\n    const f = this.in(\"f\").busVoltage << 1;\n    const no = this.in(\"no\").busVoltage << 0;\n    const op = zx + nx + zy + ny + f + no;\n\n    const [out, flags] = alu(op, x, y);\n\n    const ng = flags === Flags.Negative ? HIGH : LOW;\n    const zr = flags === Flags.Zero ? HIGH : LOW;\n    this.out(\"out\").busVoltage = out;\n    this.out(\"ng\").pull(ng);\n    this.out(\"zr\").pull(zr);\n  }\n\n  op(): COMMANDS_OP {\n    const zx = this.in(\"zx\").busVoltage << 5;\n    const nx = this.in(\"nx\").busVoltage << 4;\n    const zy = this.in(\"zy\").busVoltage << 3;\n    const ny = this.in(\"ny\").busVoltage << 2;\n    const f = this.in(\"f\").busVoltage << 1;\n    const no = this.in(\"no\").busVoltage << 0;\n    const op = zx + nx + zy + ny + f + no;\n    return op as COMMANDS_OP;\n  }\n}\n\nexport class ALUAll extends Chip {\n  constructor() {\n    super(\n      [\n        \"x[16]\",\n        \"y[16]\", // 16-bit inputs\n        \"zx\", // zero the x input?\n        \"nx\", // negate the x input?\n        \"zy\", // zero the y input?\n        \"ny\", // negate the y input?\n        \"f\", // compute out = x + y (if 1) or x & y (if 0)\n        \"no\", // negate the out output?\n      ],\n      [\n        \"out[16]\", // 16-bit output\n        \"zr\", // 1 if (out === 0), 0 otherwise\n        \"ng\", // 1 if (out < 0),  0 otherwise\n      ],\n      \"ALU\"\n    );\n  }\n\n  override eval() {\n    const x = this.in(\"x\").busVoltage;\n    const y = this.in(\"y\").busVoltage;\n    const zx = this.in(\"zx\").busVoltage << 5;\n    const nx = this.in(\"nx\").busVoltage << 4;\n    const zy = this.in(\"zy\").busVoltage << 3;\n    const ny = this.in(\"ny\").busVoltage << 2;\n    const f = this.in(\"f\").busVoltage << 1;\n    const no = this.in(\"no\").busVoltage << 0;\n    const op = zx + nx + zy + ny + f + no;\n\n    const [out, flags] = alua(op, x, y);\n\n    const ng = flags === Flags.Negative ? HIGH : LOW;\n    const zr = flags === Flags.Zero ? HIGH : LOW;\n    this.out(\"out\").busVoltage = out;\n    this.out(\"ng\").pull(ng);\n    this.out(\"zr\").pull(zr);\n  }\n\n  op(): COMMANDS_OP {\n    const zx = this.in(\"zx\").busVoltage << 5;\n    const nx = this.in(\"nx\").busVoltage << 4;\n    const zy = this.in(\"zy\").busVoltage << 3;\n    const ny = this.in(\"ny\").busVoltage << 2;\n    const f = this.in(\"f\").busVoltage << 1;\n    const no = this.in(\"no\").busVoltage << 0;\n    const op = zx + nx + zy + ny + f + no;\n    return op as COMMANDS_OP;\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function halfAdder(a: Voltage, b: Voltage): [Voltage, Voltage] {\n  const sum = (a === 1 && b === 0) || (a === 0 && b === 1) ? HIGH : LOW;\n  const car = a === 1 && b === 1 ? HIGH : LOW;\n\n  return [sum, car];\n}\n\nexport class HalfAdder extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"sum\", \"carry\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [sum, carry] = halfAdder(a, b);\n    this.out(\"sum\").pull(sum);\n    this.out(\"carry\").pull(carry);\n  }\n}\n","import { Chip, Voltage } from \"../../chip.js\";\nimport { or } from \"../logic/or.js\";\nimport { halfAdder } from \"./half_adder.js\";\n\nexport function fullAdder(\n  a: Voltage,\n  b: Voltage,\n  c: Voltage\n): [Voltage, Voltage] {\n  const [s, ca] = halfAdder(a, b);\n  const [sum, cb] = halfAdder(s, c);\n  const [carry] = or(ca, cb);\n\n  return [sum, carry];\n}\n\nexport class FullAdder extends Chip {\n  constructor() {\n    super([\"a\", \"b\", \"c\"], [\"sum\", \"carry\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const c = this.in(\"c\").voltage();\n    const [sum, carry] = fullAdder(a, b, c);\n    this.out(\"sum\").pull(sum);\n    this.out(\"carry\").pull(carry);\n  }\n}\n","import { Chip } from \"../../chip.js\";\nimport { add16 } from \"./add_16.js\";\n\nexport function inc16(n: number): [number] {\n  return add16(n, 1);\n}\n\nexport class Inc16 extends Chip {\n  constructor() {\n    super([\"in[16]\"], [\"out[16]\"], \"Inc16\");\n  }\n\n  override eval() {\n    const a = this.in().busVoltage;\n    const [out] = inc16(a);\n    this.out().busVoltage = out;\n  }\n}\n","import { ClockedChip } from \"../../chip.js\";\n\nexport class DFF extends ClockedChip {\n  constructor(name?: string) {\n    super([\"in\"], [\"out\"], name, [\"t\"]);\n  }\n\n  override tick() {\n    // Read in into t\n    const t = this.in().voltage();\n    this.pin(\"t\").pull(t);\n  }\n\n  override tock() {\n    // write t into out\n    const t = this.pin(\"t\").voltage();\n    this.out().pull(t);\n  }\n}\n","import { Err, Ok, Result } from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { Chip } from \"../chip.js\";\n\nimport { And, And16 } from \"./logic/and.js\";\nimport { DMux, DMux4Way, DMux8Way } from \"./logic/dmux.js\";\nimport { Mux, Mux16, Mux4Way16, Mux8Way16 } from \"./logic/mux.js\";\nimport { Nand, Nand16 } from \"./logic/nand.js\";\nimport { Not, Not16 } from \"./logic/not.js\";\nimport { Or, Or16, Or8way } from \"./logic/or.js\";\nimport { Xor, Xor16 } from \"./logic/xor.js\";\n\nimport { Add16 } from \"./arithmetic/add_16.js\";\nimport { ALU, ALUNoStat } from \"./arithmetic/alu.js\";\nimport { FullAdder } from \"./arithmetic/full_adder.js\";\nimport { HalfAdder } from \"./arithmetic/half_adder.js\";\nimport { Inc16 } from \"./arithmetic/inc16.js\";\n\nimport {\n  Computer,\n  CPU,\n  Keyboard,\n  Memory,\n  ROM32K,\n  Screen,\n} from \"./computer/computer.js\";\nimport { Bit, PC, Register, VRegister } from \"./sequential/bit.js\";\nimport { DFF } from \"./sequential/dff.js\";\nimport { RAM16K, RAM4K, RAM512, RAM64, RAM8 } from \"./sequential/ram.js\";\n\nexport {\n  And,\n  And16,\n  DMux,\n  Mux,\n  Mux16,\n  Mux4Way16,\n  Mux8Way16,\n  Nand,\n  Nand16,\n  Not,\n  Not16,\n  Or,\n  Or16,\n  Or8way,\n  Xor,\n  Xor16,\n  HalfAdder,\n  FullAdder,\n  Add16,\n  Inc16,\n  ALU,\n  Bit,\n  Register,\n  VRegister as ARegister,\n  VRegister as DRegister,\n  DFF,\n  RAM8,\n  RAM64,\n  RAM512,\n  RAM4K,\n  RAM16K,\n};\n\nexport const REGISTRY = new Map<string, () => Chip>(\n  (\n    [\n      [\"Nand\", Nand],\n      [\"Nand16\", Nand16],\n      [\"Not\", Not],\n      [\"Not16\", Not16],\n      [\"And\", And],\n      [\"And16\", And16],\n      [\"Or\", Or],\n      [\"Or16\", Or16],\n      [\"Or8Way\", Or8way],\n      [\"XOr\", Xor],\n      [\"XOr16\", Xor16],\n      [\"Xor\", Xor],\n      [\"Xor16\", Xor16],\n      [\"Mux\", Mux],\n      [\"Mux16\", Mux16],\n      [\"Mux4Way16\", Mux4Way16],\n      [\"Mux8Way16\", Mux8Way16],\n      [\"DMux\", DMux],\n      [\"DMux4Way\", DMux4Way],\n      [\"DMux8Way\", DMux8Way],\n      [\"HalfAdder\", HalfAdder],\n      [\"FullAdder\", FullAdder],\n      [\"Add16\", Add16],\n      [\"Inc16\", Inc16],\n      [\"ALU\", ALU],\n      [\"ALUNoStat\", ALUNoStat],\n      [\"DFF\", DFF],\n      [\"Bit\", Bit],\n      [\"Register\", Register],\n      [\"ARegister\", Register],\n      [\"DRegister\", Register],\n      [\"PC\", PC],\n      [\"RAM8\", RAM8],\n      [\"RAM64\", RAM64],\n      [\"RAM512\", RAM512],\n      [\"RAM4K\", RAM4K],\n      [\"RAM16K\", RAM16K],\n      [\"ROM32K\", ROM32K],\n      [\"Screen\", Screen],\n      [\"Keyboard\", Keyboard],\n      [\"CPU\", CPU],\n      [\"Computer\", Computer],\n      [\"Memory\", Memory],\n      [\"ARegister\", VRegister],\n      [\"DRegister\", VRegister],\n    ] as [string, { new (): Chip }][]\n  ).map(([name, ChipCtor]) => [\n    name,\n    () => {\n      const chip = new ChipCtor();\n      chip.name = name;\n      return chip;\n    },\n  ])\n);\n\nexport function hasBuiltinChip(name: string): boolean {\n  return REGISTRY.has(name);\n}\n\nexport function getBuiltinChip(name: string): Result<Chip> {\n  const chip = REGISTRY.get(name);\n  return chip\n    ? Ok(chip())\n    : Err(new Error(`Chip ${name} not in builtin registry`));\n}\n","import { ClockedChip, HIGH, LOW, Pin, Voltage } from \"../../chip.js\";\n\nexport class Bit extends ClockedChip {\n  bit: Voltage = LOW;\n\n  constructor(name?: string) {\n    super([\"in\", \"load\"], [\"out\"], name);\n  }\n\n  override tick() {\n    if (this.in(\"load\").voltage() === HIGH) {\n      this.bit = this.in().voltage();\n    }\n  }\n\n  override tock() {\n    this.out().pull(this.bit ?? 0);\n  }\n\n  override reset() {\n    this.bit = LOW;\n    super.reset();\n  }\n}\n\nexport class Register extends ClockedChip {\n  bits = 0x00;\n\n  constructor(name?: string) {\n    super([\"in[16]\", \"load\"], [\"out[16]\"], name);\n  }\n\n  override tick() {\n    if (this.in(\"load\").voltage() === HIGH) {\n      this.bits = this.in().busVoltage & 0xffff;\n    }\n  }\n\n  override tock() {\n    this.out().busVoltage = this.bits & 0xffff;\n  }\n\n  override get(name: string, offset?: number): Pin | undefined {\n    return name === this.name ? this.out() : super.get(name, offset);\n  }\n\n  override reset() {\n    this.bits = 0x00;\n    super.reset();\n  }\n}\n\nexport class VRegister extends Register {}\n\nexport class PC extends ClockedChip {\n  bits = 0x00;\n\n  constructor(name?: string) {\n    super([\"in[16]\", \"load\", \"inc\", \"reset\"], [\"out[16]\"], name);\n  }\n\n  override tick() {\n    if (this.in(\"reset\").voltage() === HIGH) {\n      this.bits = 0;\n    } else if (this.in(\"load\").voltage() === HIGH) {\n      this.bits = this.in().busVoltage & 0xffff;\n    } else if (this.in(\"inc\").voltage() === HIGH) {\n      this.bits += 1;\n    }\n  }\n\n  override tock() {\n    this.out().busVoltage = this.bits & 0xffff;\n  }\n\n  override get(name: string, offset?: number): Pin | undefined {\n    return name === this.name ? this.out() : super.get(name, offset);\n  }\n\n  override reset() {\n    this.bits = 0x00;\n    super.reset();\n  }\n}\n","import { Bus, ClockedChip, Pin } from \"../../chip.js\";\nimport { assert } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { Memory, Memory as MemoryChip } from \"../../../cpu/memory.js\";\n\nexport class RAM extends ClockedChip {\n  protected _memory: MemoryChip;\n  private _nextData = 0;\n  private _address = 0;\n\n  get memory() {\n    return this._memory;\n  }\n  get address() {\n    return this._address;\n  }\n\n  constructor(readonly width: number, name?: string) {\n    super([\"in[16]\", \"load\", `address[${width}]`], [`out[16]`], name);\n    this._memory = new MemoryChip(Math.pow(2, this.width));\n  }\n\n  override tick() {\n    const load = this.in(\"load\").voltage();\n    this._address = this.in(\"address\").busVoltage;\n    if (load) {\n      this._nextData = this.in().busVoltage;\n      this._memory.set(this._address, this._nextData);\n    }\n  }\n\n  override tock() {\n    this.out().busVoltage = this._memory?.get(this._address) ?? 0;\n  }\n\n  override eval() {\n    const address = this.in(\"address\").busVoltage;\n    this.out().busVoltage = this._memory?.get(address) ?? 0;\n  }\n\n  at(idx: number): Pin {\n    assert(\n      idx < this._memory.size,\n      () => `Request out of bounds (${idx} >= ${this._memory.size})`\n    );\n    return new RamBus(`${this.name}[${idx}]`, idx, this._memory);\n  }\n\n  override reset(): void {\n    console.log(\"ram reset\");\n    this._memory.reset();\n    super.reset();\n  }\n}\n\nexport class RamBus extends Bus {\n  constructor(\n    name: string,\n    private readonly index: number,\n    private ram: Memory\n  ) {\n    super(name);\n  }\n\n  override get busVoltage(): number {\n    return this.ram.get(this.index);\n  }\n\n  override set busVoltage(num: number) {\n    this.ram.set(this.index, num);\n  }\n}\n\nexport class RAM8 extends RAM {\n  constructor(name?: string) {\n    super(3, name);\n  }\n}\n\nexport class RAM64 extends RAM {\n  constructor(name?: string) {\n    super(6, name);\n  }\n}\n\nexport class RAM512 extends RAM {\n  constructor(name?: string) {\n    super(9, name);\n  }\n}\n\nexport class RAM4K extends RAM {\n  constructor(name?: string) {\n    super(12, name);\n  }\n}\n\nexport class RAM16K extends RAM {\n  constructor(name?: string) {\n    super(14, name);\n  }\n}\n","const hdl = `\nHdl <: Base{\n  Root := Chip\n  Chip = \"CHIP\" Name OpenBrace ChipBody CloseBrace\n  ChipBody = InList? OutList? PartList ClockedList?\n  InList = \"IN\" PinList Semi\n  OutList = \"OUT\" PinList Semi\n  PartList = BuiltinPart | Parts\n  PinList = List<PinDecl, Comma>\n  PinDecl = Name PinWidth?\n  PinWidth = OpenSquare decNumber CloseSquare\n  BuiltinPart = \"BUILTIN\" Semi\n  Parts = \"PARTS:\" Part*\n  Part = Name \"(\" Wires \")\" Semi\n  Wires = List<Wire, Comma>\n  Wire = WireSide Equal (WireSide | True | False) \n  WireSide = Name SubBus? \n  SubBus = OpenSquare decNumber subBusRest? CloseSquare\n  subBusRest = \"..\" decNumber\n  ClockedList = \"CLOCKED\" SimplePinList Semi\n  SimplePinList = List<Name, Comma>\n}`;\nexport default hdl;\n","/** Reads and parses HDL chip descriptions. */\nimport ohm from \"ohm-js\";\nimport { grammars, baseSemantics } from \"./base.js\";\nimport { makeParser } from \"./base.js\";\n\nexport interface PinIndex {\n  start?: number | undefined;\n  end?: number | undefined;\n}\n\nexport interface PinParts extends PinIndex {\n  pin: string;\n}\n\nexport interface PinDeclaration {\n  pin: string | string;\n  width: number;\n}\n\nexport interface Wire {\n  lhs: PinParts;\n  rhs: PinParts;\n}\n\nexport interface Part {\n  name: string;\n  wires: Wire[];\n}\n\nexport interface HdlParse {\n  name: string;\n  ins: PinDeclaration[];\n  outs: PinDeclaration[];\n  clocked: string[];\n  parts: \"BUILTIN\" | Part[];\n}\n\nimport hdlGrammar from \"./grammars/hdl.ohm.js\";\nexport const grammar = ohm.grammar(hdlGrammar, grammars);\n\nexport const hdlSemantics = grammar.extendSemantics(baseSemantics);\n\nhdlSemantics.addAttribute<PinIndex>(\"SubBus\", {\n  SubBus(_a, startNode, endNode, _b) {\n    const start = startNode.value;\n    const end = endNode.child(0)?.child(1)?.value ?? start;\n    return { start, end };\n  },\n});\n\nhdlSemantics.addAttribute<PinParts>(\"WireSide\", {\n  WireSide({ name }, index) {\n    const { start, end } = (index.child(0)?.SubBus as PinIndex) ?? {\n      start: undefined,\n      end: undefined,\n    };\n    return { pin: name, start, end };\n  },\n});\n\nhdlSemantics.addAttribute<Wire>(\"Wire\", {\n  Wire(left, _, right) {\n    const rhs: PinParts = right.isTerminal()\n      ? { pin: right.sourceString }\n      : right.WireSide;\n    return { lhs: left.WireSide as PinParts, rhs };\n  },\n});\n\nhdlSemantics.addAttribute<Wire[]>(\"Wires\", {\n  Wires(list) {\n    return list.asIteration().children.map((node) => node.Wire as Wire);\n  },\n});\n\nhdlSemantics.addAttribute<Part>(\"Part\", {\n  Part({ name }, _a, { Wires }, _b, _c) {\n    return { name: name as string, wires: Wires as Wire[] };\n  },\n});\n\nhdlSemantics.addAttribute<Part[] | \"BUILTIN\">(\"Parts\", {\n  Parts(_, parts) {\n    return parts.children.map((c) => c.Part);\n  },\n  BuiltinPart(_a, _b) {\n    return \"BUILTIN\";\n  },\n});\n\nhdlSemantics.addAttribute<\"BUILTIN\" | Part[]>(\"PartList\", {\n  PartList(list) {\n    return list.Parts;\n  },\n});\n\nhdlSemantics.addAttribute<string[]>(\"Clocked\", {\n  ClockedList(_a, clocked, _b) {\n    return (\n      clocked\n        .asIteration()\n        .children.map(\n          ({ sourceString }: { sourceString: string }) => sourceString\n        ) ?? []\n    );\n  },\n});\n\nhdlSemantics.addAttribute<PinDeclaration>(\"PinDecl\", {\n  PinDecl({ name }, width) {\n    return {\n      pin: name,\n      width: width.child(0)?.child(1)?.value ?? 1,\n    };\n  },\n});\n\nhdlSemantics.addAttribute<PinDeclaration[]>(\"PinList\", {\n  PinList(list) {\n    return list\n      .asIteration()\n      .children.map((node) => node.PinDecl as PinDeclaration);\n  },\n});\n\nhdlSemantics.addAttribute<HdlParse>(\"Chip\", {\n  Chip(_a, { name }, _b, body, _c) {\n    return {\n      name,\n      ins: body.child(0).child(0)?.child(1)?.PinList ?? [],\n      outs: body.child(1).child(0)?.child(1)?.PinList ?? [],\n      parts: body.child(2).PartList ?? [],\n      clocked: body.child(3).child(0)?.Clocked,\n    };\n  },\n});\n\nhdlSemantics.addAttribute<HdlParse>(\"Root\", {\n  Root(root) {\n    return root.child(0)?.Chip;\n  },\n});\n\nexport const HDL = {\n  parser: grammar,\n  grammar: hdlGrammar,\n  semantics: hdlSemantics,\n  parse: makeParser<HdlParse>(grammar, hdlSemantics, (n) => n.Chip),\n};\n"],"names":["pinWidth","start","end","undefined","Error","loadChip","name","fs","hasBuiltinChip","getBuiltinChip","readFile","file","maybeParsedHDL","HDL","chip","isOk","build","Ok","Err","parts","toString","buildChip","Chip","ins","map","pin","width","outs","clocked","part","builtin","isErr","partChip","wires","lhs","rhs","to","from","wire","ROM32K","path","load","v","i","at","busVoltage","RAM","Screen","SCREEN_SIZE","SCREEN_OFFSET","Keyboard","getKey","this","out","setKey","key","clearKey","KEYBOARD_OFFSET","Memory","RAM16K","add","keyboard","screen","ram","tick","in","voltage","address","inn","OFFSET","tock","eval","startsWith","idx","int10","match","groups","get","offset","reset","ClockedChip","CPU","emptyState","_state","cpuTick","cpuInput","state","writeM","pull","HIGH","LOW","ALU","cpuTock","output","addressM","outM","PC","inM","instruction","ConstantBus","A","D","Computer","And","and","a","b","n","And16","and16","DMux","dmux","sel","DMux4Way","dmux4way","c","d","DMux8Way","dmux8way","e","f","g","h","mux16","mux16_4","s2","Mux","mux","set","Mux16","Mux4Way16","Mux8Way16","mux16_8","Nand","nand","Nand16","nand16","Not","not","Not16","not16","or","Or","Or16","or16","Or8way","or8way","Xor","xor","Xor16","xor16","add16","Add16","ALUNoStat","x","y","op","alu","flags","ng","Flags","zr","halfAdder","HalfAdder","sum","carry","FullAdder","fullAdder","s","ca","Inc16","inc16","DFF","t","REGISTRY","Map","Bit","Register","RAM8","RAM64","RAM512","RAM4K","VRegister","ChipCtor","has","bit","bits","_memory","MemoryChip","Math","pow","_address","_nextData","assert","size","RamBus","console","log","index","num","Bus","grammar","ohm","hdlGrammar","grammars","hdlSemantics","extendSemantics","baseSemantics","addAttribute","SubBus","_a","startNode","endNode","_b","value","child","WireSide","Wire","left","_","right","isTerminal","sourceString","Wires","list","asIteration","children","node","Part","_c","Parts","BuiltinPart","PartList","ClockedList","PinDecl","PinList","body","Clocked","Root","root","parser","semantics","parse","makeParser"],"sourceRoot":""}