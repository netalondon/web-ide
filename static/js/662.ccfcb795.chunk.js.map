{"version":3,"file":"static/js/662.ccfcb795.chunk.js","mappings":"w8BAmBaA,EAAQ,CACnBC,IAAK,CACH,UClBe,uUDmBf,UCJe,wFDKf,UCvBe,2DDyBjBC,IAAK,CACH,UE1Be,yVF2Bf,UEXe,gLFYf,UENe,yIFQjBC,GAAI,CACF,SG1Be,oVH2Bf,SGZe,kLHaf,SGjCe,yIHmCjBC,IAAK,CACH,UI/Be,mXJgCf,UIjBe,kLJkBf,UItCe,yIJwCjBC,IAAK,CACH,UKhCe,kVLiCf,UKlBe,uVLmBf,UK3Ce,6TL6CjBC,KAAM,CACJ,WM9Ce,mWN+Cf,WMhCe,sLNiCf,WMzBe,iLN2BjBC,MAAO,CACL,YOnDe,8WPoDf,YOrCe,wPPsCf,YOhCe,wPPkCjBC,MAAO,CACL,YQxDe,sXRyDf,YQ1Ce,mcR2Cf,YQlCe,saRoCjBC,KAAM,CACJ,WStDe,mXTuDf,WSxCe,icTyCf,WS/De,saTiEjBC,MAAO,CACL,YUzDe,gYV0Df,YU3Ce,gcV4Cf,YUpEe,olBVsEjBC,UAAW,CACT,gBW9De,kdX+Df,gBW7Ce,8aX8Cf,gBWzEe,m7BX2EjBC,UAAW,CACT,gBY3De,kfZ4Df,gBYxCe,kzBZyCf,gBY9Ee,whGZgFjBC,SAAU,CACR,eajFe,sgBbkFf,eahEe,wUbiEf,earDe,0WbuDjBC,SAAU,CACR,ectFe,klBduFf,ecpEe,omBdqEf,ecjDe,kkCdmDjBC,OAAQ,CACN,aerFe,kWfsFf,aevEe,gNfwEf,ae7Fe,uIfiGNC,EAAgB,CAC3BC,KgBlGiB,gUhBqGZ,SAAeC,WAAW,GAAD,yCAI/B,kEAJM,iBAA0BC,GAAc,+FACvCA,EAAGC,MAAM,gBAAe,wBACxBC,EAAAA,EAAAA,IAAMF,EAAInB,GAAM,uBAChBmB,EAAGG,OAAM,kDAChB,sBiBzGM,ICUMtB,EAAQ,CACnBuB,UAAW,CACT,gBDZe,+ZCaf,gBDOe,iNCNf,gBDCe,iLCCjBC,UAAW,CACT,gBCjBe,2aDkBf,gBCMe,8VDLf,gBCJe,qYDMjBC,MAAO,CACL,YEtBe,yZFuBf,YEDe,+dFEf,YETe,saFWjBC,MAAO,CACL,YG3Be,iVH4Bf,YGPe,4QHQf,YGde,iNHgBjBC,UAAW,CACT,gBIhCe,41CJiCf,gBI2Ce,gvHJ1Cf,gBIIe,wiGJFjBC,IAAK,CACH,UKrCe,2kDLsCf,UK2Ce,wjHL1Cf,UKKe,80GLHjBC,OAAQ,CACN,aM1Ce,m0DN2Cf,aM2De,2xJN1Df,aMOe,ulJNHNb,EAAgB,CAAC,EAEvB,SAAeE,sBAAW,GAAD,yDAI/B,kGAJM,iBAA0BC,GAAc,+FACvCA,EAAGC,MAAM,gBAAe,wBACxBC,EAAAA,EAAAA,IAAMF,EAAInB,GAAM,uBAChBmB,EAAGG,OAAM,kDAChB,sBOtDM,I,UCYMtB,EAAQ,CACnB8B,IAAK,CACH,UCde,sdDef,UCEe,64KDDf,UC6Ge,s4LD3GjBC,SAAU,CACR,eEnBe,yeFoBf,eEFF,8DACA,CACE,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,EAAE,MAAO,GACT,CAAC,MAAO,GACR,EAAE,MAAO,GACT,EAAE,MAAO,GACT,EAAE,MAAO,GACT,CAAC,MAAO,GACR,CAAC,EAAG,GACJ,CAAC,EAAG,IAEHC,KACC,+BAAEC,EAAG,KAAEC,EAAI,4BACCD,EAAG,sBAAcC,EAAI,oCAElCC,KAAK,MACR,KACA,CACE,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,sBAECH,KACC,SAACI,GAAC,uBACUA,EAAC,wFAEdD,KAAK,MFtDN,eEwDe,48JFtDjBE,GAAI,CACF,SGxBe,2iBHyBf,SGNe,y0BHOf,SGYe,o5CHVjBC,KAAM,CACJ,WI7Be,yhBJ8Bf,WIbe,+rKJcf,WIkIe,omOJhIjBC,MAAO,CACL,YKlCe,giBLmCf,YKlBe,4vWLmBf,YKwSe,koaLtSjBC,OAAQ,CACN,aMvCe,2hBNwCf,aMvBe,m8XNwBf,aMgTe,koaN9SjBC,MAAO,CACL,YO5Ce,yhBP6Cf,YO5Be,okZP6Bf,YOyRe,k8aPvRjBC,OAAQ,CACN,aQjDe,4hBRkDf,aQjCe,8haRkCf,aQ6Re,mwbRzRN1B,EAAgB,CAC3B2B,IDxDiB,8WC2DZ,SAAezB,sBAAW,GAAD,yDAI/B,kGAJM,iBAA0BC,GAAc,+FACvCA,EAAGC,MAAM,gBAAe,wBACxBC,EAAAA,EAAAA,IAAMF,EAAInB,GAAM,uBAChBmB,EAAGG,OAAM,kDAChB,sBS/DM,ICqDMsB,EAAO,iSC1CP5C,EAAQ,CACnB6C,OAAQ,CACN,aFbe,26BEcf,aFSe,m/FERf,aFoHe,syEElHjBC,IAAK,CACH,UClBe,qzDDmBf,UCiBe,ulHDhBf,UC8Je,i0ND5JjBC,SAAU,CACR,eDvBe,60BCwBf,eDHe,gtBCIf,eD4Ce,u8DCxCN/B,EAAgB,CAC3BgC,OE9BiB,mqCF+BjBC,SG/BiB,ucHgCjBC,UIhCiB,unBJiCjBC,UKjCiB,wnBLkCjBC,OMlCiB,k7BNqCZ,SAAelC,sBAAW,GAAD,yDAS/B,kGATM,iBAA0BC,GAAc,+FACvCA,EAAGC,MAAM,gBAAe,wBACxBC,EAAAA,EAAAA,IAAMF,EAAInB,GAAM,uBAChBmB,EAAGG,OAAM,uBAGTH,EAAGC,MAAM,SAAQ,wBACjBD,EAAGkC,UAAU,WAAYN,GAAc,yBACvC5B,EAAGG,OAAM,mDAChB,sBOpBM,IAAMgC,EAAe,CAC1B,KAAMC,EACN,KAAMC,EACN,KAAMC,EACN,KAAMC,GAGJrC,GAAQ,EACCH,EAAU,yCAAG,iBAAOC,GAAc,mFACzCE,EAAO,CAAF,gDACI,OAAbA,GAAQ,EAAK,SACPkC,WAAsBpC,GAAG,uBACzBqC,sBAAsBrC,GAAG,uBACzBsC,sBAAsBtC,GAAG,wBACzBuC,sBAAsBvC,GAAG,QAC/BE,GAAQ,EAAM,kDACf,gBARYH,WAAU,sCAUVyC,EAGT,CACF,KAAM,CAAC,QACP,KAAM,GACN,KAAM,CAAC,OACP,KAAM,CAAC,SAAU,WAAY,YAAa,YAAa,WAG5CC,EAA6D,CACxE,KAAM,CACJ,MACA,MACA,KACA,MACA,MACA,OACA,QACA,QACA,OACA,QACA,YACA,YACA,WACA,WACA,UAEF,KAAM,CACJ,YACA,YACA,QACA,QACA,OAGF,KAAM,CAAC,MAAO,WAAY,KAAM,OAAQ,QAAS,SAAU,QAAS,UACpE,KAAM,CAAC,SAAU,MAAO,aAGbC,EACX,CACE,KAAM,CACJ,SACA,MACA,WACA,SACA,WACA,YACA,YACA,WAIOC,EAAuC,CAClD,KAAM,CAAC,MAAO,MAAO,YAAa,SAGvBC,GAAc,kCACtBR,GACAC,GACAC,GACAC,E","sources":["../../projects/src/project_01/index.ts","../../projects/src/project_01/01_not.ts","../../projects/src/project_01/02_and.ts","../../projects/src/project_01/03_or.ts","../../projects/src/project_01/04_xor.ts","../../projects/src/project_01/05_mux.ts","../../projects/src/project_01/06_dmux.ts","../../projects/src/project_01/07_not16.ts","../../projects/src/project_01/08_and16.ts","../../projects/src/project_01/09_or16.ts","../../projects/src/project_01/10_mux16.ts","../../projects/src/project_01/11_mux4way16.ts","../../projects/src/project_01/12_mux8way16.ts","../../projects/src/project_01/13_dmux4way.ts","../../projects/src/project_01/14_dmux8way.ts","../../projects/src/project_01/15_or8way.ts","../../projects/src/project_01/00_nand.ts","../../projects/src/project_02/01_half_adder.ts","../../projects/src/project_02/index.ts","../../projects/src/project_02/02_full_adder.ts","../../projects/src/project_02/03_add16.ts","../../projects/src/project_02/04_inc16.ts","../../projects/src/project_02/05_alu_no_stat.ts","../../projects/src/project_02/06_alu.ts","../../projects/src/project_02/06_alu_all.ts","../../projects/src/project_03/00_dff.ts","../../projects/src/project_03/index.ts","../../projects/src/project_03/01_bit.ts","../../projects/src/project_03/02_register.ts","../../projects/src/project_03/03_pc.ts","../../projects/src/project_03/04_ram8.ts","../../projects/src/project_03/05_ram64.ts","../../projects/src/project_03/06_ram512.ts","../../projects/src/project_03/07_ram4k.ts","../../projects/src/project_03/08_ram16k.ts","../../projects/src/project_05/01_memory.ts","../../projects/src/project_05/03_computer.ts","../../projects/src/project_05/index.ts","../../projects/src/project_05/02_cpu.ts","../../projects/src/project_05/04_screen.ts","../../projects/src/project_05/05_keyboard.ts","../../projects/src/project_05/06_d_register.ts","../../projects/src/project_05/07_a_register.ts","../../projects/src/project_05/08_rom32k.ts","../../projects/src/index.ts"],"sourcesContent":["import { FileSystem, reset } from \"@davidsouther/jiffies/lib/esm/fs.js\";\n\nimport * as Nand from \"./00_nand.js\";\nimport * as Not from \"./01_not.js\";\nimport * as And from \"./02_and.js\";\nimport * as Or from \"./03_or.js\";\nimport * as Xor from \"./04_xor.js\";\nimport * as Mux from \"./05_mux.js\";\nimport * as DMux from \"./06_dmux.js\";\nimport * as Not16 from \"./07_not16.js\";\nimport * as And16 from \"./08_and16.js\";\nimport * as Or16 from \"./09_or16.js\";\nimport * as Mux16 from \"./10_mux16.js\";\nimport * as Mux4Way16 from \"./11_mux4way16.js\";\nimport * as Mux8Way16 from \"./12_mux8way16.js\";\nimport * as DMux4Way from \"./13_dmux4way.js\";\nimport * as DMux8Way from \"./14_dmux8way.js\";\nimport * as Or8Way from \"./15_or8way.js\";\n\nexport const CHIPS = {\n  Not: {\n    \"Not.hdl\": Not.hdl,\n    \"Not.tst\": Not.tst,\n    \"Not.cmp\": Not.cmp,\n  },\n  And: {\n    \"And.hdl\": And.hdl,\n    \"And.tst\": And.tst,\n    \"And.cmp\": And.cmp,\n  },\n  Or: {\n    \"Or.hdl\": Or.hdl,\n    \"Or.tst\": Or.tst,\n    \"Or.cmp\": Or.cmp,\n  },\n  XOr: {\n    \"XOr.hdl\": Xor.hdl,\n    \"XOr.tst\": Xor.tst,\n    \"XOr.cmp\": Xor.cmp,\n  },\n  Mux: {\n    \"Mux.hdl\": Mux.hdl,\n    \"Mux.tst\": Mux.tst,\n    \"Mux.cmp\": Mux.cmp,\n  },\n  DMux: {\n    \"DMux.hdl\": DMux.hdl,\n    \"DMux.tst\": DMux.tst,\n    \"DMux.cmp\": DMux.cmp,\n  },\n  Not16: {\n    \"Not16.hdl\": Not16.hdl,\n    \"Not16.tst\": Not16.tst,\n    \"Not16.cmp\": Not16.cmp,\n  },\n  And16: {\n    \"And16.hdl\": And16.hdl,\n    \"And16.tst\": And16.tst,\n    \"And16.cmp\": And16.cmp,\n  },\n  Or16: {\n    \"Or16.hdl\": Or16.hdl,\n    \"Or16.tst\": Or16.tst,\n    \"Or16.cmp\": Or16.cmp,\n  },\n  Mux16: {\n    \"Mux16.hdl\": Mux16.hdl,\n    \"Mux16.tst\": Mux16.tst,\n    \"Mux16.cmp\": Mux16.cmp,\n  },\n  Mux4Way16: {\n    \"Mux4Way16.hdl\": Mux4Way16.hdl,\n    \"Mux4Way16.tst\": Mux4Way16.tst,\n    \"Mux4Way16.cmp\": Mux4Way16.cmp,\n  },\n  Mux8Way16: {\n    \"Mux8Way16.hdl\": Mux8Way16.hdl,\n    \"Mux8Way16.tst\": Mux8Way16.tst,\n    \"Mux8Way16.cmp\": Mux8Way16.cmp,\n  },\n  DMux4Way: {\n    \"DMux4Way.hdl\": DMux4Way.hdl,\n    \"DMux4Way.tst\": DMux4Way.tst,\n    \"DMux4Way.cmp\": DMux4Way.cmp,\n  },\n  DMux8Way: {\n    \"DMux8Way.hdl\": DMux8Way.hdl,\n    \"DMux8Way.tst\": DMux8Way.tst,\n    \"DMux8Way.cmp\": DMux8Way.cmp,\n  },\n  Or8Way: {\n    \"Or8Way.hdl\": Or8Way.hdl,\n    \"Or8Way.tst\": Or8Way.tst,\n    \"Or8Way.cmp\": Or8Way.cmp,\n  },\n};\n\nexport const BUILTIN_CHIPS = {\n  Nand: Nand.hdl,\n};\n\nexport async function resetFiles(fs: FileSystem): Promise<void> {\n  await fs.pushd(\"/projects/01\");\n  await reset(fs, CHIPS);\n  await fs.popd();\n}\n","export const cmp = `|  in   |  out  |\n|   0   |   1   |\n|   1   |   0   |`;\nexport const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/01/Not.hdl\n /**\n * Not gate:\n * out = ((in == 0), 1, 0)\n */\nCHIP Not {\n    IN in;\n    OUT out;\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const tst = `output-list in%B3.1.3 out%B3.1.3;\n\nset in 0, eval, output;\nset in 1, eval, output;`;\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/01/And.hdl\n/**\n * And gate:\n * out = (((a == 1) && (b == 1))), 1, 0) \n */\n\nCHIP And {\n    IN a, b;\n    OUT out;\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const tst = `output-list a%B3.1.3 b%B3.1.3 out%B3.1.3;\nset a 0, set b 0, eval, output;\nset a 0, set b 1, eval, output;\nset a 1, set b 0, eval, output;\nset a 1, set b 1, eval, output;`;\n\nexport const cmp = `|   a   |   b   |  out  |\n|   0   |   0   |   0   |\n|   0   |   1   |   0   |\n|   1   |   0   |   0   |\n|   1   |   1   |   1   |`;\n","export const cmp = `|   a   |   b   |  out  |\n|   0   |   0   |   0   |\n|   0   |   1   |   1   |\n|   1   |   0   |   1   |\n|   1   |   1   |   1   |`;\nexport const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/01/Or.hdl\n/**\n * Or gate:\n * out = (((a == 1) || (b == 1))), 1, 0) \n */\nCHIP Or {\n    IN a, b;\n    OUT out;\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const tst = `output-list a%B3.1.3 b%B3.1.3 out%B3.1.3;\n\nset a 0, set b 0, eval, output;\nset a 0, set b 1, eval, output;\nset a 1, set b 0, eval, output;\nset a 1, set b 1, eval, output;`;\n","export const cmp = `|   a   |   b   |  out  |\n|   0   |   0   |   0   |\n|   0   |   1   |   1   |\n|   1   |   0   |   1   |\n|   1   |   1   |   0   |`;\nexport const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/01/Xor.hdl\n/**\n * Exclusive-or gate:\n * out = (((a == 0) & (b = 1)) | ((a == 1) & (b = 0)), 1, 0)\n */\nCHIP Xor {\n    IN a, b;\n    OUT out;\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const tst = `output-list a%B3.1.3 b%B3.1.3 out%B3.1.3;\n\nset a 0, set b 0, eval, output;\nset a 0, set b 1, eval, output;\nset a 1, set b 0, eval, output;\nset a 1, set b 1, eval, output;`;\n","export const cmp = `|   a   |   b   |  sel  |  out  |\n|   0   |   0   |   0   |   0   |\n|   0   |   0   |   1   |   0   |\n|   0   |   1   |   0   |   0   |\n|   0   |   1   |   1   |   1   |\n|   1   |   0   |   0   |   1   |\n|   1   |   0   |   1   |   0   |\n|   1   |   1   |   0   |   1   |\n|   1   |   1   |   1   |   1   |`;\nexport const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/01/Mux.hdl\n/** \n * Multiplexor:\n * out = ((sel == 0), a, b)\n */\nCHIP Mux {\n    IN a, b, sel;\n    OUT out;\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const tst = `output-list a%B3.1.3 b%B3.1.3 sel%B3.1.3 out%B3.1.3;\n\nset a 0, set b 0, set sel 0, eval, output;\nset sel 1, eval, output;\n\nset a 0, set b 1, set sel 0, eval, output;\nset sel 1, eval, output;\n\nset a 1, set b 0, set sel 0, eval, output;\nset sel 1, eval, output;\n\nset a 1, set b 1, set sel 0, eval, output;\nset sel 1, eval, output;`;\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/01/DMux.hdl\n/**\n * Demultiplexor:\n * [a, b] = ((sel == 0), [in, 0], [0, in])\n */\nCHIP DMux {\n    IN in, sel;\n    OUT a, b;\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const tst = `output-list in%B3.1.3 sel%B3.1.3 a%B3.1.3 b%B3.1.3;\n\nset in 0, set sel 0, eval, output;\nset sel 1, eval, output;\n\nset in 1, set sel 0, eval, output;\nset sel 1, eval, output;`;\n\nexport const cmp = `|  in   |  sel  |   a   |   b   |\n|   0   |   0   |   0   |   0   |\n|   0   |   1   |   0   |   0   |\n|   1   |   0   |   1   |   0   |\n|   1   |   1   |   0   |   1   |`;\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/01/Not16.hdl\n/**\n * 16-bit Not gate:\n * out[i] = ((in[i] == 0), 1, 0) for i = 0..15 \n */\nCHIP Not16 {\n    IN in[16];\n    OUT out[16];\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const tst = `output-list in%B1.16.1 out%B1.16.1;\nset in %B0000000000000000, eval, output;\nset in %B1111111111111111, eval, output;\nset in %B1010101010101010, eval, output;\nset in %B0011110011000011, eval, output;\nset in %B0001001000110100, eval, output;`;\nexport const cmp = `|        in        |       out        |\n| 0000000000000000 | 1111111111111111 |\n| 1111111111111111 | 0000000000000000 |\n| 1010101010101010 | 0101010101010101 |\n| 0011110011000011 | 1100001100111100 |\n| 0001001000110100 | 1110110111001011 |`;\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/01/And16.hdl\n/**\n * 16-bit bitwise And gate:\n * out[i] = And(a[i],b[i]) for i = 0..15 \n */\nCHIP And16 {\n    IN a[16], b[16];\n    OUT out[16];\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const tst = `output-list a%B1.16.1 b%B1.16.1 out%B1.16.1;\n\nset a %B0000000000000000, set b %B0000000000000000, eval, output;\nset a %B0000000000000000, set b %B1111111111111111, eval, output;\nset a %B1111111111111111, set b %B1111111111111111, eval, output;\nset a %B1010101010101010, set b %B0101010101010101, eval, output;\nset a %B0011110011000011, set b %B0000111111110000, eval, output;\nset a %B0001001000110100, set b %B1001100001110110, eval, output;`;\n\nexport const cmp = `|        a         |        b         |       out        |\n| 0000000000000000 | 0000000000000000 | 0000000000000000 |\n| 0000000000000000 | 1111111111111111 | 0000000000000000 |\n| 1111111111111111 | 1111111111111111 | 1111111111111111 |\n| 1010101010101010 | 0101010101010101 | 0000000000000000 |\n| 0011110011000011 | 0000111111110000 | 0000110011000000 |\n| 0001001000110100 | 1001100001110110 | 0001000000110100 |`;\n","export const cmp = `|        a         |        b         |       out        |\n| 0000000000000000 | 0000000000000000 | 0000000000000000 |\n| 0000000000000000 | 1111111111111111 | 1111111111111111 |\n| 1111111111111111 | 1111111111111111 | 1111111111111111 |\n| 1010101010101010 | 0101010101010101 | 1111111111111111 |\n| 0011110011000011 | 0000111111110000 | 0011111111110011 |\n| 0001001000110100 | 1001100001110110 | 1001101001110110 |`;\nexport const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/01/Or16.hdl\n/**\n * 16-bit bitwise Or gate:\n * out[i] = (a[i] Or b[i]) for i = 0..15 \n */\nCHIP Or16 {\n    IN a[16], b[16];\n    OUT out[16];\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const tst = `output-list a%B1.16.1 b%B1.16.1 out%B1.16.1;\nset a %B0000000000000000, set b %B0000000000000000, eval, output;\nset a %B0000000000000000, set b %B1111111111111111, eval, output;\nset a %B1111111111111111, set b %B1111111111111111, eval, output;\nset a %B1010101010101010, set b %B0101010101010101, eval, output;\nset a %B0011110011000011, set b %B0000111111110000, eval, output;\nset a %B0001001000110100, set b %B1001100001110110, eval, output;`;\n","export const cmp = `|        a         |        b         | sel |       out        |\n| 0000000000000000 | 0000000000000000 |  0  | 0000000000000000 |\n| 0000000000000000 | 0000000000000000 |  1  | 0000000000000000 |\n| 0000000000000000 | 0001001000110100 |  0  | 0000000000000000 |\n| 0000000000000000 | 0001001000110100 |  1  | 0001001000110100 |\n| 1001100001110110 | 0000000000000000 |  0  | 1001100001110110 |\n| 1001100001110110 | 0000000000000000 |  1  | 0000000000000000 |\n| 1010101010101010 | 0101010101010101 |  0  | 1010101010101010 |\n| 1010101010101010 | 0101010101010101 |  1  | 0101010101010101 |`;\nexport const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/01/Mux16.hdl\n/**\n * 16-bit multiplexor: \n * out[i] = ((sel == 0), a[i], b[i]) for i = 0..15\n */\nCHIP Mux16 {\n    IN a[16], b[16], sel;\n    OUT out[16];\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const tst = `output-list a%B1.16.1 b%B1.16.1 sel%D2.1.2 out%B1.16.1;\n\nset a 0, set b 0, set sel 0, eval, output;\nset sel 1, eval, output;\n\nset a %B0000000000000000, set b %B0001001000110100, set sel 0, eval, output;\nset sel 1, eval, output;\n\nset a %B1001100001110110, set b %B0000000000000000, set sel 0, eval, output;\nset sel 1, eval, output;\n\nset a %B1010101010101010, set b %B0101010101010101, set sel 0, eval, output;\nset sel 1, eval, output;`;\n","export const cmp = `|        a         |        b         |        c         |        d         | sel  |       out        |\n| 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  00  | 0000000000000000 |\n| 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  01  | 0000000000000000 |\n| 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  10  | 0000000000000000 |\n| 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  11  | 0000000000000000 |\n| 0001001000110100 | 1001100001110110 | 1010101010101010 | 0101010101010101 |  00  | 0001001000110100 |\n| 0001001000110100 | 1001100001110110 | 1010101010101010 | 0101010101010101 |  01  | 1001100001110110 |\n| 0001001000110100 | 1001100001110110 | 1010101010101010 | 0101010101010101 |  10  | 1010101010101010 |\n| 0001001000110100 | 1001100001110110 | 1010101010101010 | 0101010101010101 |  11  | 0101010101010101 |`;\nexport const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/01/Mux4Way16.hdl\n/**\n * 4-way 16-bit multiplexor:\n * out = a if sel == 00\n *       b if sel == 01\n *       c if sel == 10\n *       d if sel == 11\n */\nCHIP Mux4Way16 {\n    IN a[16], b[16], c[16], d[16], sel[2];\n    OUT out[16];\n    \n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const tst = `output-list a%B1.16.1 b%B1.16.1 c%B1.16.1 d%B1.16.1 sel%B2.2.2 out%B1.16.1;\n\nset a 0, set b 0, set c 0, set d 0, set sel 0, eval, output;\nset sel 1, eval, output;\nset sel 2, eval, output;\nset sel 3, eval, output;\n\nset a %B0001001000110100, set b %B1001100001110110, set c %B1010101010101010, set d %B0101010101010101, set sel 0, eval, output;\nset sel 1, eval, output;\nset sel 2, eval, output;\nset sel 3, eval, output;`;\n","export const cmp = `|        a         |        b         |        c         |        d         |        e         |        f         |        g         |        h         |  sel  |       out        |\n| 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  000  | 0000000000000000 |\n| 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  001  | 0000000000000000 |\n| 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  010  | 0000000000000000 |\n| 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  011  | 0000000000000000 |\n| 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  100  | 0000000000000000 |\n| 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  101  | 0000000000000000 |\n| 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  110  | 0000000000000000 |\n| 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  111  | 0000000000000000 |\n| 0001001000110100 | 0010001101000101 | 0011010001010110 | 0100010101100111 | 0101011001111000 | 0110011110001001 | 0111100010011010 | 1000100110101011 |  000  | 0001001000110100 |\n| 0001001000110100 | 0010001101000101 | 0011010001010110 | 0100010101100111 | 0101011001111000 | 0110011110001001 | 0111100010011010 | 1000100110101011 |  001  | 0010001101000101 |\n| 0001001000110100 | 0010001101000101 | 0011010001010110 | 0100010101100111 | 0101011001111000 | 0110011110001001 | 0111100010011010 | 1000100110101011 |  010  | 0011010001010110 |\n| 0001001000110100 | 0010001101000101 | 0011010001010110 | 0100010101100111 | 0101011001111000 | 0110011110001001 | 0111100010011010 | 1000100110101011 |  011  | 0100010101100111 |\n| 0001001000110100 | 0010001101000101 | 0011010001010110 | 0100010101100111 | 0101011001111000 | 0110011110001001 | 0111100010011010 | 1000100110101011 |  100  | 0101011001111000 |\n| 0001001000110100 | 0010001101000101 | 0011010001010110 | 0100010101100111 | 0101011001111000 | 0110011110001001 | 0111100010011010 | 1000100110101011 |  101  | 0110011110001001 |\n| 0001001000110100 | 0010001101000101 | 0011010001010110 | 0100010101100111 | 0101011001111000 | 0110011110001001 | 0111100010011010 | 1000100110101011 |  110  | 0111100010011010 |\n| 0001001000110100 | 0010001101000101 | 0011010001010110 | 0100010101100111 | 0101011001111000 | 0110011110001001 | 0111100010011010 | 1000100110101011 |  111  | 1000100110101011 |`;\nexport const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/01/Mux8Way16.hdl\n/**\n * 8-way 16-bit multiplexor:\n * out = a if sel == 000\n *       b if sel == 001\n *       ...\n *       h if sel == 111\n */\nCHIP Mux8Way16 {\n    IN a[16], b[16], c[16], d[16],\n       e[16], f[16], g[16], h[16],\n       sel[3];\n    OUT out[16];\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const tst = `output-list a%B1.16.1 b%B1.16.1 c%B1.16.1 d%B1.16.1 e%B1.16.1 f%B1.16.1 g%B1.16.1 h%B1.16.1 sel%B2.3.2 out%B1.16.1;\n\nset a 0, set b 0, set c 0, set d 0, set e 0, set f 0, set g 0, set h 0, set sel 0, eval, output;\nset sel 1, eval, output;\nset sel 2, eval, output;\nset sel 3, eval, output;\nset sel 4, eval, output;\nset sel 5, eval, output;\nset sel 6, eval, output;\nset sel 7, eval, output;\n\nset a %B0001001000110100, set b %B0010001101000101, set c %B0011010001010110, set d %B0100010101100111, set e %B0101011001111000, set f %B0110011110001001, set g %B0111100010011010, set h %B1000100110101011, set sel 0, eval, output;\nset sel 1, eval, output;\nset sel 2, eval, output;\nset sel 3, eval, output;\nset sel 4, eval, output;\nset sel 5, eval, output;\nset sel 6, eval, output;\nset sel 7, eval, output;`;\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/01/DMux4Way.hdl\n/**\n * 4-way demultiplexor:\n * [a, b, c, d] = [in, 0, 0, 0] if sel == 00\n *                [0, in, 0, 0] if sel == 01\n *                [0, 0, in, 0] if sel == 10\n *                [0, 0, 0, in] if sel == 11\n */\nCHIP DMux4Way {\n    IN in, sel[2];\n    OUT a, b, c, d;\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const tst = `output-list in%B2.1.2 sel%B2.2.2 a%B2.1.2 b%B2.1.2 c%B2.1.2 d%B2.1.2;\n\nset in 0, set sel %B00, eval, output;\nset sel %B01, eval, output;\nset sel %B10, eval, output;\nset sel %B11, eval, output;\n\nset in 1, set sel %B00, eval, output;\nset sel %B01, eval, output;\nset sel %B10, eval, output;\nset sel %B11, eval, output;`;\n\nexport const cmp = `| in  | sel  |  a  |  b  |  c  |  d  |\n|  0  |  00  |  0  |  0  |  0  |  0  |\n|  0  |  01  |  0  |  0  |  0  |  0  |\n|  0  |  10  |  0  |  0  |  0  |  0  |\n|  0  |  11  |  0  |  0  |  0  |  0  |\n|  1  |  00  |  1  |  0  |  0  |  0  |\n|  1  |  01  |  0  |  1  |  0  |  0  |\n|  1  |  10  |  0  |  0  |  1  |  0  |\n|  1  |  11  |  0  |  0  |  0  |  1  |`;\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/01/DMux8Way.hdl\n/**\n * 8-way demultiplexor:\n * [a, b, c, d, e, f, g, h] = [in, 0, 0, 0, 0, 0, 0, 0] if sel == 000\n *                            [0, in, 0, 0, 0, 0, 0, 0] if sel == 001\n *                            ...\n *                            [0, 0, 0, 0, 0, 0, 0, in] if sel == 111\n */\nCHIP DMux8Way {\n    IN in, sel[3];\n    OUT a, b, c, d, e, f, g, h;\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\n\nexport const tst = `output-list in%B2.1.2 sel%B2.2.2 a%B2.1.2 b%B2.1.2 c%B2.1.2 d%B2.1.2 e%B2.1.2 f%B2.1.2 g%B2.1.2 h%B2.1.2;\n\nset in 0, set sel %B000, eval, output;\nset sel %B001, eval, output;\nset sel %B010, eval, output;\nset sel %B011, eval, output;\nset sel %B100, eval, output;\nset sel %B101, eval, output;\nset sel %B110, eval, output;\nset sel %B111, eval, output;\n\nset in 1, set sel %B000, eval, output;\nset sel %B001, eval, output;\nset sel %B010, eval, output;\nset sel %B011, eval, output;\nset sel %B100, eval, output;\nset sel %B101, eval, output;\nset sel %B110, eval, output;\nset sel %B111, eval, output;`;\n\nexport const cmp = `| in  | sel  |  a  |  b  |  c  |  d  |  e  |  f  |  g  |  h  |\n|  0  |  00  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |\n|  0  |  01  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |\n|  0  |  10  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |\n|  0  |  11  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |\n|  0  |  00  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |\n|  0  |  01  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |\n|  0  |  10  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |\n|  0  |  11  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |\n|  1  |  00  |  1  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |\n|  1  |  01  |  0  |  1  |  0  |  0  |  0  |  0  |  0  |  0  |\n|  1  |  10  |  0  |  0  |  1  |  0  |  0  |  0  |  0  |  0  |\n|  1  |  11  |  0  |  0  |  0  |  1  |  0  |  0  |  0  |  0  |\n|  1  |  00  |  0  |  0  |  0  |  0  |  1  |  0  |  0  |  0  |\n|  1  |  01  |  0  |  0  |  0  |  0  |  0  |  1  |  0  |  0  |\n|  1  |  10  |  0  |  0  |  0  |  0  |  0  |  0  |  1  |  0  |\n|  1  |  11  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  1  |`;\n","export const cmp = `|     in     | out |\n|  00000000  |  0  |\n|  11111111  |  1  |\n|  00010000  |  1  |\n|  00000001  |  1  |\n|  00100110  |  1  |`;\nexport const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/01/Or8Way.hdl\n/**\n * 8-way Or gate: \n * out = in[0] Or in[1] Or ... Or in[7]\n */\nCHIP Or8Way {\n    IN in[8];\n    OUT out;\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const tst = `output-list in%B2.8.2 out%B2.1.2;\n\nset in %B00000000, eval, output;\nset in %B11111111, eval, output;\nset in %B00010000, eval, output;\nset in %B00000001, eval, output;\nset in %B00100110, eval, output;`;\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/01/Nand.hdl\n/**\n * Nand gate:\n * out = (((a == 1) && (b == 1))), 0, 1) \n */\nCHIP Nand {\n    IN  a, b;\n    OUT out;\n\n    PARTS:\n    BUILTIN Nand;\n}`;\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/02/HalfAdder.hdl\n/**\n * Computes the sum of two bits.\n */\nCHIP HalfAdder {\n    IN a, b;    // 1-bit inputs\n    OUT sum,    // Right bit of a + b \n        carry;  // Left bit of a + b\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const cmp = `|   a   |   b   |  sum  | carry |\n|   0   |   0   |   0   |   0   |\n|   0   |   1   |   1   |   0   |\n|   1   |   0   |   1   |   0   |\n|   1   |   1   |   0   |   1   |`;\nexport const tst = `output-list a%B3.1.3 b%B3.1.3 sum%B3.1.3 carry%B3.1.3;\n\nset a 0,\nset b 0,\neval,\noutput;\n\nset a 0,\nset b 1,\neval,\noutput;\n\nset a 1,\nset b 0,\neval,\noutput;\n\nset a 1,\nset b 1,\neval,\noutput;`;\n","import { FileSystem, reset } from \"@davidsouther/jiffies/lib/esm/fs.js\";\n\nimport * as HalfAdder from \"./01_half_adder.js\";\nimport * as FullAdder from \"./02_full_adder.js\";\nimport * as Add16 from \"./03_add16.js\";\nimport * as Inc16 from \"./04_inc16.js\";\nimport * as Alu from \"./05_alu_no_stat.js\";\nimport * as AluStatus from \"./06_alu.js\";\nimport * as AluAll from \"./06_alu_all.js\";\n\nexport const CHIPS = {\n  HalfAdder: {\n    \"HalfAdder.hdl\": HalfAdder.hdl,\n    \"HalfAdder.tst\": HalfAdder.tst,\n    \"HalfAdder.cmp\": HalfAdder.cmp,\n  },\n  FullAdder: {\n    \"FullAdder.hdl\": FullAdder.hdl,\n    \"FullAdder.tst\": FullAdder.tst,\n    \"FullAdder.cmp\": FullAdder.cmp,\n  },\n  Add16: {\n    \"Add16.hdl\": Add16.hdl,\n    \"Add16.tst\": Add16.tst,\n    \"Add16.cmp\": Add16.cmp,\n  },\n  Inc16: {\n    \"Inc16.hdl\": Inc16.hdl,\n    \"Inc16.tst\": Inc16.tst,\n    \"Inc16.cmp\": Inc16.cmp,\n  },\n  ALUNoStat: {\n    \"ALUNoStat.hdl\": Alu.hdl,\n    \"ALUNoStat.tst\": Alu.tst,\n    \"ALUNoStat.cmp\": Alu.cmp,\n  },\n  ALU: {\n    \"ALU.hdl\": AluStatus.hdl,\n    \"ALU.tst\": AluStatus.tst,\n    \"ALU.cmp\": AluStatus.cmp,\n  },\n  ALUAll: {\n    \"ALUAll.hdl\": AluAll.hdl,\n    \"ALUAll.tst\": AluAll.tst,\n    \"ALUAll.cmp\": AluAll.cmp,\n  },\n};\n\nexport const BUILTIN_CHIPS = {};\n\nexport async function resetFiles(fs: FileSystem): Promise<void> {\n  await fs.pushd(\"/projects/02\");\n  await reset(fs, CHIPS);\n  await fs.popd();\n}\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/02/FullAdder.hdl\n/**\n * Computes the sum of three bits.\n */\nCHIP FullAdder {\n    IN a, b, c;  // 1-bit inputs\n    OUT sum,     // Right bit of a + b + c\n        carry;   // Left bit of a + b + c\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const cmp = `|   a   |   b   |   c   |  sum  | carry |\n|   0   |   0   |   0   |   0   |   0   |\n|   0   |   0   |   1   |   1   |   0   |\n|   0   |   1   |   0   |   1   |   0   |\n|   0   |   1   |   1   |   0   |   1   |\n|   1   |   0   |   0   |   1   |   0   |\n|   1   |   0   |   1   |   0   |   1   |\n|   1   |   1   |   0   |   0   |   1   |\n|   1   |   1   |   1   |   1   |   1   |`;\nexport const tst = `output-list a%B3.1.3 b%B3.1.3 c%B3.1.3 sum%B3.1.3 carry%B3.1.3;\n\nset a 0,\nset b 0,\nset c 0,\neval,\noutput;\n\nset c 1,\neval,\noutput;\n\nset b 1,\nset c 0,\neval,\noutput;\n\nset c 1,\neval,\noutput;\n\nset a 1,\nset b 0,\nset c 0,\neval,\noutput;\n\nset c 1,\neval,\noutput;\n\nset b 1,\nset c 0,\neval,\noutput;\n\nset c 1,\neval,\noutput;`;\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/02/Add16.hdl\n/**\n * 16-bit adder: Adds two 16-bit two's complement values.\n * The most significant carry bit is ignored.\n */\nCHIP Add16 {\n    IN a[16], b[16];\n    OUT out[16];\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const cmp = `|        a         |        b         |       out        |\n| 0000000000000000 | 0000000000000000 | 0000000000000000 |\n| 0000000000000000 | 1111111111111111 | 1111111111111111 |\n| 1111111111111111 | 1111111111111111 | 1111111111111110 |\n| 1010101010101010 | 0101010101010101 | 1111111111111111 |\n| 0011110011000011 | 0000111111110000 | 0100110010110011 |\n| 0001001000110100 | 1001100001110110 | 1010101010101010 |`;\nexport const tst = `output-list a%B1.16.1 b%B1.16.1 out%B1.16.1;\n\nset a %B0000000000000000,\nset b %B0000000000000000,\neval,\noutput;\n\nset a %B0000000000000000,\nset b %B1111111111111111,\neval,\noutput;\n\nset a %B1111111111111111,\nset b %B1111111111111111,\neval,\noutput;\n\nset a %B1010101010101010,\nset b %B0101010101010101,\neval,\noutput;\n\nset a %B0011110011000011,\nset b %B0000111111110000,\neval,\noutput;\n\nset a %B0001001000110100,\nset b %B1001100001110110,\neval,\noutput;`;\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/02/Inc16.hdl\n/**\n * 16-bit incrementer:\n * out = in + 1\n */\nCHIP Inc16 {\n    IN in[16];\n    OUT out[16];\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const cmp = `|        in        |       out        |\n| 0000000000000000 | 0000000000000001 |\n| 1111111111111111 | 0000000000000000 |\n| 0000000000000101 | 0000000000000110 |\n| 1111111111111011 | 1111111111111100 |\n`;\nexport const tst = `output-list in%B1.16.1 out%B1.16.1;\n\nset in %B0000000000000000,  // in = 0\neval,\noutput;\n\nset in %B1111111111111111,  // in = -1\neval,\noutput;\n\nset in %B0000000000000101,  // in = 5\neval,\noutput;\n\nset in %B1111111111111011,  // in = -5\neval,\noutput;`;\n","export const hdl = `/**\n * The ALU (Arithmetic Logic Unit).\n * Computes one of the following functions:\n * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,\n * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, \n * according to 6 input bits denoted zx,nx,zy,ny,f,no.\n * In addition, the ALU computes two 1-bit outputs:\n * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;\n * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.\n */\n\n// Implementation: the ALU logic manipulates the x and y inputs\n// and operates on the resulting values, as follows:\n// if (zx == 1) set x = 0        // 16-bit constant\n// if (nx == 1) set x = !x       // bitwise not\n// if (zy == 1) set y = 0        // 16-bit constant\n// if (ny == 1) set y = !y       // bitwise not\n// if (f == 1)  set out = x + y  // integer 2's complement addition\n// if (f == 0)  set out = x & y  // bitwise and\n// if (no == 1) set out = !out   // bitwise not\n// if (out == 0) set zr = 1\n// if (out < 0) set ng = 1\n\nCHIP ALU {\n    IN  \n        x[16], y[16],  // 16-bit inputs        \n        zx, // zero the x input?\n        nx, // negate the x input?\n        zy, // zero the y input?\n        ny, // negate the y input?\n        f,  // compute out = x + y (if 1) or x & y (if 0)\n        no; // negate the out output?\n\n    OUT \n        out[16]; // 16-bit output\n\n    PARTS:\n}`;\nexport const cmp = `|        x         |        y         |zx |nx |zy |ny | f |no |       out        |\n| 0000000000000000 | 1111111111111111 | 1 | 0 | 1 | 0 | 1 | 0 | 0000000000000000 |\n| 0000000000000000 | 1111111111111111 | 1 | 1 | 1 | 1 | 1 | 1 | 0000000000000001 |\n| 0000000000000000 | 1111111111111111 | 1 | 1 | 1 | 0 | 1 | 0 | 1111111111111111 |\n| 0000000000000000 | 1111111111111111 | 0 | 0 | 1 | 1 | 0 | 0 | 0000000000000000 |\n| 0000000000000000 | 1111111111111111 | 1 | 1 | 0 | 0 | 0 | 0 | 1111111111111111 |\n| 0000000000000000 | 1111111111111111 | 0 | 0 | 1 | 1 | 0 | 1 | 1111111111111111 |\n| 0000000000000000 | 1111111111111111 | 1 | 1 | 0 | 0 | 0 | 1 | 0000000000000000 |\n| 0000000000000000 | 1111111111111111 | 0 | 0 | 1 | 1 | 1 | 1 | 0000000000000000 |\n| 0000000000000000 | 1111111111111111 | 1 | 1 | 0 | 0 | 1 | 1 | 0000000000000001 |\n| 0000000000000000 | 1111111111111111 | 0 | 1 | 1 | 1 | 1 | 1 | 0000000000000001 |\n| 0000000000000000 | 1111111111111111 | 1 | 1 | 0 | 1 | 1 | 1 | 0000000000000000 |\n| 0000000000000000 | 1111111111111111 | 0 | 0 | 1 | 1 | 1 | 0 | 1111111111111111 |\n| 0000000000000000 | 1111111111111111 | 1 | 1 | 0 | 0 | 1 | 0 | 1111111111111110 |\n| 0000000000000000 | 1111111111111111 | 0 | 0 | 0 | 0 | 1 | 0 | 1111111111111111 |\n| 0000000000000000 | 1111111111111111 | 0 | 1 | 0 | 0 | 1 | 1 | 0000000000000001 |\n| 0000000000000000 | 1111111111111111 | 0 | 0 | 0 | 1 | 1 | 1 | 1111111111111111 |\n| 0000000000000000 | 1111111111111111 | 0 | 0 | 0 | 0 | 0 | 0 | 0000000000000000 |\n| 0000000000000000 | 1111111111111111 | 0 | 1 | 0 | 1 | 0 | 1 | 1111111111111111 |\n| 0101101110100000 | 0001111011010010 | 1 | 0 | 1 | 0 | 1 | 0 | 0000000000000000 |\n| 0101101110100000 | 0001111011010010 | 1 | 1 | 1 | 1 | 1 | 1 | 0000000000000001 |\n| 0101101110100000 | 0001111011010010 | 1 | 1 | 1 | 0 | 1 | 0 | 1111111111111111 |\n| 0101101110100000 | 0001111011010010 | 0 | 0 | 1 | 1 | 0 | 0 | 0101101110100000 |\n| 0101101110100000 | 0001111011010010 | 1 | 1 | 0 | 0 | 0 | 0 | 0001111011010010 |\n| 0101101110100000 | 0001111011010010 | 0 | 0 | 1 | 1 | 0 | 1 | 1010010001011111 |\n| 0101101110100000 | 0001111011010010 | 1 | 1 | 0 | 0 | 0 | 1 | 1110000100101101 |\n| 0101101110100000 | 0001111011010010 | 0 | 0 | 1 | 1 | 1 | 1 | 1010010001100000 |\n| 0101101110100000 | 0001111011010010 | 1 | 1 | 0 | 0 | 1 | 1 | 1110000100101110 |\n| 0101101110100000 | 0001111011010010 | 0 | 1 | 1 | 1 | 1 | 1 | 0101101110100001 |\n| 0101101110100000 | 0001111011010010 | 1 | 1 | 0 | 1 | 1 | 1 | 0001111011010011 |\n| 0101101110100000 | 0001111011010010 | 0 | 0 | 1 | 1 | 1 | 0 | 0101101110011111 |\n| 0101101110100000 | 0001111011010010 | 1 | 1 | 0 | 0 | 1 | 0 | 0001111011010001 |\n| 0101101110100000 | 0001111011010010 | 0 | 0 | 0 | 0 | 1 | 0 | 0111101001110010 |\n| 0101101110100000 | 0001111011010010 | 0 | 1 | 0 | 0 | 1 | 1 | 0011110011001110 |\n| 0101101110100000 | 0001111011010010 | 0 | 0 | 0 | 1 | 1 | 1 | 1100001100110010 |\n| 0101101110100000 | 0001111011010010 | 0 | 0 | 0 | 0 | 0 | 0 | 0001101010000000 |\n| 0101101110100000 | 0001111011010010 | 0 | 1 | 0 | 1 | 0 | 1 | 0101111111110010 |\n`;\nexport const tst = `\n// ALU no stat tst provides a partial test of the ALU chip.\n// It IS NOT a replacement for ALU.tst.\n\n// ALU-nostat.tst tests only the computation part of the ALU.\n// The 'zr' and 'ng' status outputs are ignored.\n\n// This test lets you concentrate on getting the ALU computation right without the\n// additional task of handling the status outputs.\n\n// Once your ALU passes ALU-nostat.tst you need to test it with ALU.tst.\n// This way, any comparison failures during ALU.tst will be caused by errors in\n// the handling of the 'zr' and 'ng' status outputs.\n\noutput-list x%B1.16.1 y%B1.16.1 zx%B1.1.1 nx%B1.1.1 zy%B1.1.1 \n            ny%B1.1.1 f%B1.1.1 no%B1.1.1 out%B1.16.1;\n\nset x %B0000000000000000,\nset y %B1111111111111111,\n\nset zx 1,\nset nx 0,\nset zy 1,\nset ny 0,\nset f  1,\nset no 0,\neval,\noutput;\n\nset zx 1,\nset nx 1,\nset zy 1,\nset ny 1,\nset f  1,\nset no 1,\neval,\noutput;\n\nset zx 1,\nset nx 1,\nset zy 1,\nset ny 0,\nset f  1,\nset no 0,\neval,\noutput;\n\nset zx 0,\nset nx 0,\nset zy 1,\nset ny 1,\nset f  0,\nset no 0,\neval,\noutput;\n\nset zx 1,\nset nx 1,\nset zy 0,\nset ny 0,\nset f  0,\nset no 0,\neval,\noutput;\n\nset zx 0,\nset nx 0,\nset zy 1,\nset ny 1,\nset f  0,\nset no 1,\neval,\noutput;\n\nset zx 1,\nset nx 1,\nset zy 0,\nset ny 0,\nset f  0,\nset no 1,\neval,\noutput;\n\nset zx 0,\nset nx 0,\nset zy 1,\nset ny 1,\nset f  1,\nset no 1,\neval,\noutput;\n\nset zx 1,\nset nx 1,\nset zy 0,\nset ny 0,\nset f  1,\nset no 1,\neval,\noutput;\n\nset zx 0,\nset nx 1,\nset zy 1,\nset ny 1,\nset f  1,\nset no 1,\neval,\noutput;\n\nset zx 1,\nset nx 1,\nset zy 0,\nset ny 1,\nset f  1,\nset no 1,\neval,\noutput;\n\nset zx 0,\nset nx 0,\nset zy 1,\nset ny 1,\nset f  1,\nset no 0,\neval,\noutput;\n\nset zx 1,\nset nx 1,\nset zy 0,\nset ny 0,\nset f  1,\nset no 0,\neval,\noutput;\n\nset zx 0,\nset nx 0,\nset zy 0,\nset ny 0,\nset f  1,\nset no 0,\neval,\noutput;\n\nset zx 0,\nset nx 1,\nset zy 0,\nset ny 0,\nset f  1,\nset no 1,\neval,\noutput;\n\nset zx 0,\nset nx 0,\nset zy 0,\nset ny 1,\nset f  1,\nset no 1,\neval,\noutput;\n\nset zx 0,\nset nx 0,\nset zy 0,\nset ny 0,\nset f  0,\nset no 0,\neval,\noutput;\n\nset zx 0,\nset nx 1,\nset zy 0,\nset ny 1,\nset f  0,\nset no 1,\neval,\noutput;\n\nset x %B101101110100000,\nset y %B001111011010010,\n\nset zx 1,\nset nx 0,\nset zy 1,\nset ny 0,\nset f  1,\nset no 0,\neval,\noutput;\n\nset zx 1,\nset nx 1,\nset zy 1,\nset ny 1,\nset f  1,\nset no 1,\neval,\noutput;\n\nset zx 1,\nset nx 1,\nset zy 1,\nset ny 0,\nset f  1,\nset no 0,\neval,\noutput;\n\nset zx 0,\nset nx 0,\nset zy 1,\nset ny 1,\nset f  0,\nset no 0,\neval,\noutput;\n\nset zx 1,\nset nx 1,\nset zy 0,\nset ny 0,\nset f  0,\nset no 0,\neval,\noutput;\n\nset zx 0,\nset nx 0,\nset zy 1,\nset ny 1,\nset f  0,\nset no 1,\neval,\noutput;\n\nset zx 1,\nset nx 1,\nset zy 0,\nset ny 0,\nset f  0,\nset no 1,\neval,\noutput;\n\nset zx 0,\nset nx 0,\nset zy 1,\nset ny 1,\nset f  1,\nset no 1,\neval,\noutput;\n\nset zx 1,\nset nx 1,\nset zy 0,\nset ny 0,\nset f  1,\nset no 1,\neval,\noutput;\n\nset zx 0,\nset nx 1,\nset zy 1,\nset ny 1,\nset f  1,\nset no 1,\neval,\noutput;\n\nset zx 1,\nset nx 1,\nset zy 0,\nset ny 1,\nset f  1,\nset no 1,\neval,\noutput;\n\nset zx 0,\nset nx 0,\nset zy 1,\nset ny 1,\nset f  1,\nset no 0,\neval,\noutput;\n\nset zx 1,\nset nx 1,\nset zy 0,\nset ny 0,\nset f  1,\nset no 0,\neval,\noutput;\n\nset zx 0,\nset nx 0,\nset zy 0,\nset ny 0,\nset f  1,\nset no 0,\neval,\noutput;\n\nset zx 0,\nset nx 1,\nset zy 0,\nset ny 0,\nset f  1,\nset no 1,\neval,\noutput;\n\nset zx 0,\nset nx 0,\nset zy 0,\nset ny 1,\nset f  1,\nset no 1,\neval,\noutput;\n\nset zx 0,\nset nx 0,\nset zy 0,\nset ny 0,\nset f  0,\nset no 0,\neval,\noutput;\n\nset zx 0,\nset nx 1,\nset zy 0,\nset ny 1,\nset f  0,\nset no 1,\neval,\noutput;`;\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/02/ALU.hdl\n/**\n * ALU (Arithmetic Logic Unit):\n * Computes out = one of the following functions:\n *                0, 1, -1,\n *                x, y, !x, !y, -x, -y,\n *                x + 1, y + 1, x - 1, y - 1,\n *                x + y, x - y, y - x,\n *                x & y, x | y\n * on the 16-bit inputs x, y,\n * according to the input bits zx, nx, zy, ny, f, no.\n * In addition, computes the output bits:\n * zr = (out == 0, 1, 0)\n * ng = (out < 0,  1, 0)\n */\n// Implementation: Manipulates the x and y inputs\n// and operates on the resulting values, as follows:\n// if (zx == 1) sets x = 0        // 16-bit constant\n// if (nx == 1) sets x = !x       // bitwise not\n// if (zy == 1) sets y = 0        // 16-bit constant\n// if (ny == 1) sets y = !y       // bitwise not\n// if (f == 1)  sets out = x + y  // integer 2's complement addition\n// if (f == 0)  sets out = x & y  // bitwise and\n// if (no == 1) sets out = !out   // bitwise not\nCHIP ALU {\n    IN  \n        x[16], y[16],  // 16-bit inputs        \n        zx, // zero the x input?\n        nx, // negate the x input?\n        zy, // zero the y input?\n        ny, // negate the y input?\n        f,  // compute (out = x + y) or (out = x & y)?\n        no; // negate the out output?\n    OUT \n        out[16], // 16-bit output\n        zr,      // (out == 0, 1, 0)\n        ng;      // (out < 0,  1, 0)\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const cmp = `|        x         |        y         |zx |nx |zy |ny | f |no |       out        |zr |ng |\n| 0000000000000000 | 1111111111111111 | 1 | 0 | 1 | 0 | 1 | 0 | 0000000000000000 | 1 | 0 |\n| 0000000000000000 | 1111111111111111 | 1 | 1 | 1 | 1 | 1 | 1 | 0000000000000001 | 0 | 0 |\n| 0000000000000000 | 1111111111111111 | 1 | 1 | 1 | 0 | 1 | 0 | 1111111111111111 | 0 | 1 |\n| 0000000000000000 | 1111111111111111 | 0 | 0 | 1 | 1 | 0 | 0 | 0000000000000000 | 1 | 0 |\n| 0000000000000000 | 1111111111111111 | 1 | 1 | 0 | 0 | 0 | 0 | 1111111111111111 | 0 | 1 |\n| 0000000000000000 | 1111111111111111 | 0 | 0 | 1 | 1 | 0 | 1 | 1111111111111111 | 0 | 1 |\n| 0000000000000000 | 1111111111111111 | 1 | 1 | 0 | 0 | 0 | 1 | 0000000000000000 | 1 | 0 |\n| 0000000000000000 | 1111111111111111 | 0 | 0 | 1 | 1 | 1 | 1 | 0000000000000000 | 1 | 0 |\n| 0000000000000000 | 1111111111111111 | 1 | 1 | 0 | 0 | 1 | 1 | 0000000000000001 | 0 | 0 |\n| 0000000000000000 | 1111111111111111 | 0 | 1 | 1 | 1 | 1 | 1 | 0000000000000001 | 0 | 0 |\n| 0000000000000000 | 1111111111111111 | 1 | 1 | 0 | 1 | 1 | 1 | 0000000000000000 | 1 | 0 |\n| 0000000000000000 | 1111111111111111 | 0 | 0 | 1 | 1 | 1 | 0 | 1111111111111111 | 0 | 1 |\n| 0000000000000000 | 1111111111111111 | 1 | 1 | 0 | 0 | 1 | 0 | 1111111111111110 | 0 | 1 |\n| 0000000000000000 | 1111111111111111 | 0 | 0 | 0 | 0 | 1 | 0 | 1111111111111111 | 0 | 1 |\n| 0000000000000000 | 1111111111111111 | 0 | 1 | 0 | 0 | 1 | 1 | 0000000000000001 | 0 | 0 |\n| 0000000000000000 | 1111111111111111 | 0 | 0 | 0 | 1 | 1 | 1 | 1111111111111111 | 0 | 1 |\n| 0000000000000000 | 1111111111111111 | 0 | 0 | 0 | 0 | 0 | 0 | 0000000000000000 | 1 | 0 |\n| 0000000000000000 | 1111111111111111 | 0 | 1 | 0 | 1 | 0 | 1 | 1111111111111111 | 0 | 1 |\n| 0000000000010001 | 0000000000000011 | 1 | 0 | 1 | 0 | 1 | 0 | 0000000000000000 | 1 | 0 |\n| 0000000000010001 | 0000000000000011 | 1 | 1 | 1 | 1 | 1 | 1 | 0000000000000001 | 0 | 0 |\n| 0000000000010001 | 0000000000000011 | 1 | 1 | 1 | 0 | 1 | 0 | 1111111111111111 | 0 | 1 |\n| 0000000000010001 | 0000000000000011 | 0 | 0 | 1 | 1 | 0 | 0 | 0000000000010001 | 0 | 0 |\n| 0000000000010001 | 0000000000000011 | 1 | 1 | 0 | 0 | 0 | 0 | 0000000000000011 | 0 | 0 |\n| 0000000000010001 | 0000000000000011 | 0 | 0 | 1 | 1 | 0 | 1 | 1111111111101110 | 0 | 1 |\n| 0000000000010001 | 0000000000000011 | 1 | 1 | 0 | 0 | 0 | 1 | 1111111111111100 | 0 | 1 |\n| 0000000000010001 | 0000000000000011 | 0 | 0 | 1 | 1 | 1 | 1 | 1111111111101111 | 0 | 1 |\n| 0000000000010001 | 0000000000000011 | 1 | 1 | 0 | 0 | 1 | 1 | 1111111111111101 | 0 | 1 |\n| 0000000000010001 | 0000000000000011 | 0 | 1 | 1 | 1 | 1 | 1 | 0000000000010010 | 0 | 0 |\n| 0000000000010001 | 0000000000000011 | 1 | 1 | 0 | 1 | 1 | 1 | 0000000000000100 | 0 | 0 |\n| 0000000000010001 | 0000000000000011 | 0 | 0 | 1 | 1 | 1 | 0 | 0000000000010000 | 0 | 0 |\n| 0000000000010001 | 0000000000000011 | 1 | 1 | 0 | 0 | 1 | 0 | 0000000000000010 | 0 | 0 |\n| 0000000000010001 | 0000000000000011 | 0 | 0 | 0 | 0 | 1 | 0 | 0000000000010100 | 0 | 0 |\n| 0000000000010001 | 0000000000000011 | 0 | 1 | 0 | 0 | 1 | 1 | 0000000000001110 | 0 | 0 |\n| 0000000000010001 | 0000000000000011 | 0 | 0 | 0 | 1 | 1 | 1 | 1111111111110010 | 0 | 1 |\n| 0000000000010001 | 0000000000000011 | 0 | 0 | 0 | 0 | 0 | 0 | 0000000000000001 | 0 | 0 |\n| 0000000000010001 | 0000000000000011 | 0 | 1 | 0 | 1 | 0 | 1 | 0000000000010011 | 0 | 0 |`;\nexport const tst = `output-list x%B1.16.1 y%B1.16.1 zx%B1.1.1 nx%B1.1.1 zy%B1.1.1 \nny%B1.1.1 f%B1.1.1 no%B1.1.1 out%B1.16.1 zr%B1.1.1\nng%B1.1.1;\n\nset x %B0000000000000000,  // x = 0\nset y %B1111111111111111;  // y = -1\n\n// Compute 0\nset zx 1, set nx 0, set zy 1, set ny 0, set f  1, set no 0, eval, output;\n\n// Compute 1\nset zx 1, set nx 1, set zy 1, set ny 1, set f  1, set no 1, eval, output;\n\n// Compute -1\nset zx 1, set nx 1, set zy 1, set ny 0, set f  1, set no 0, eval, output;\n\n// Compute x\nset zx 0, set nx 0, set zy 1, set ny 1, set f  0, set no 0, eval, output;\n\n// Compute y\nset zx 1, set nx 1, set zy 0, set ny 0, set f  0, set no 0, eval, output;\n\n// Compute !x\nset zx 0, set nx 0, set zy 1, set ny 1, set f  0, set no 1, eval, output;\n\n// Compute !y\nset zx 1, set nx 1, set zy 0, set ny 0, set f  0, set no 1, eval, output;\n\n// Compute -x\nset zx 0, set nx 0, set zy 1, set ny 1, set f  1, set no 1, eval, output;\n\n// Compute -y\nset zx 1, set nx 1, set zy 0, set ny 0, set f  1, set no 1, eval, output;\n\n// Compute x + 1\nset zx 0, set nx 1, set zy 1, set ny 1, set f  1, set no 1, eval, output;\n\n// Compute y + 1\nset zx 1, set nx 1, set zy 0, set ny 1, set f  1, set no 1, eval, output;\n\n// Compute x - 1\nset zx 0, set nx 0, set zy 1, set ny 1, set f  1, set no 0, eval, output;\n\n// Compute y - 1\nset zx 1, set nx 1, set zy 0, set ny 0, set f  1, set no 0, eval, output;\n\n// Compute x + y\nset zx 0, set nx 0, set zy 0, set ny 0, set f  1, set no 0, eval, output;\n\n// Compute x - y\nset zx 0, set nx 1, set zy 0, set ny 0, set f  1, set no 1, eval, output;\n\n// Compute y - x\nset zx 0, set nx 0, set zy 0, set ny 1, set f  1, set no 1, eval, output;\n\n// Compute x & y\nset zx 0, set nx 0, set zy 0, set ny 0, set f  0, set no 0, eval, output;\n\n// Compute x | y\nset zx 0, set nx 1, set zy 0, set ny 1, set f  0, set no 1, eval, output;\n\nset x %B000000000010001,  // x = 17\nset y %B000000000000011;  // y =  3\n\n// Compute 0\nset zx 1, set nx 0, set zy 1, set ny 0, set f  1, set no 0, eval, output;\n\n// Compute 1\nset zx 1, set nx 1, set zy 1, set ny 1, set f  1, set no 1, eval, output;\n\n// Compute -1\nset zx 1, set nx 1, set zy 1, set ny 0, set f  1, set no 0, eval, output;\n\n// Compute x\nset zx 0, set nx 0, set zy 1, set ny 1, set f  0, set no 0, eval, output;\n\n// Compute y\nset zx 1, set nx 1, set zy 0, set ny 0, set f  0, set no 0, eval, output;\n\n// Compute !x\nset zx 0, set nx 0, set zy 1, set ny 1, set f  0, set no 1, eval, output;\n\n// Compute !y\nset zx 1, set nx 1, set zy 0, set ny 0, set f  0, set no 1, eval, output;\n\n// Compute -x\nset zx 0, set nx 0, set zy 1, set ny 1, set f  1, set no 1, eval, output;\n\n// Compute -y\nset zx 1, set nx 1, set zy 0, set ny 0, set f  1, set no 1, eval, output;\n\n// Compute x + 1\nset zx 0, set nx 1, set zy 1, set ny 1, set f  1, set no 1, eval, output;\n\n// Compute y + 1\nset zx 1, set nx 1, set zy 0, set ny 1, set f  1, set no 1, eval, output;\n\n// Compute x - 1\nset zx 0, set nx 0, set zy 1, set ny 1, set f  1, set no 0, eval, output;\n\n// Compute y - 1\nset zx 1, set nx 1, set zy 0, set ny 0, set f  1, set no 0, eval, output;\n\n// Compute x + y\nset zx 0, set nx 0, set zy 0, set ny 0, set f  1, set no 0, eval, output;\n\n// Compute x - y\nset zx 0, set nx 1, set zy 0, set ny 0, set f  1, set no 1, eval, output;\n\n// Compute y - x\nset zx 0, set nx 0, set zy 0, set ny 1, set f  1, set no 1, eval, output;\n\n// Compute x & y\nset zx 0, set nx 0, set zy 0, set ny 0, set f  0, set no 0, eval, output;\n\n// Compute x | y\nset zx 0, set nx 1, set zy 0, set ny 1, set f  0, set no 1, eval, output;`;\n","export const hdl = `/**\n * The ALU (Arithmetic Logic Unit).\n * Computes one of the following functions:\n * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,\n * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, \n * according to 6 input bits denoted zx,nx,zy,ny,f,no.\n * \n * All operations:\n * Ensure your solution handles these undocumented opcodes:\n * \n * -2, !(x&y), !(x|y), !x&y, !(!x&y), !(x&!y), x&!y\n * x+y+1, x-y-1, -(x+2), -(y+2), -(x+y+2), -(x+y+1), -(x-y+1)\n * \n * In addition, the ALU computes two 1-bit outputs:\n * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;\n * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.\n */\n\n// Implementation: the ALU logic manipulates the x and y inputs\n// and operates on the resulting values, as follows:\n// if (zx == 1) set x = 0        // 16-bit constant\n// if (nx == 1) set x = !x       // bitwise not\n// if (zy == 1) set y = 0        // 16-bit constant\n// if (ny == 1) set y = !y       // bitwise not\n// if (f == 1)  set out = x + y  // integer 2's complement addition\n// if (f == 0)  set out = x & y  // bitwise and\n// if (no == 1) set out = !out   // bitwise not\n// if (out == 0) set zr = 1\n// if (out < 0) set ng = 1\n\n// Testing: the test script below has tests for the undocumented instructions\n// listed first, and then has the tests for the documented ALU instructions.\n\nCHIP ALU {\n    IN  \n        x[16], y[16],  // 16-bit inputs        \n        zx, // zero the x input?\n        nx, // negate the x input?\n        zy, // zero the y input?\n        ny, // negate the y input?\n        f,  // compute out = x + y (if 1) or x & y (if 0)\n        no; // negate the out output?\n\n    OUT \n        out[16], // 16-bit output\n        zr, // 1 if (out == 0), 0 otherwise\n        ng; // 1 if (out < 0),  0 otherwise\n\n    PARTS:\n   // Put you code here:\n}`;\nexport const cmp = `|        x         |        y         |zx |nx |zy |ny | f |no |       out        |zr |ng |\n| 0000000000000000 | 0000000000000000 | 1 | 1 | 1 | 1 | 1 | 0 | 1111111111111110 | 0 | 1 |\n| 0000000000000011 | 0000000000000101 | 0 | 0 | 0 | 0 | 0 | 1 | 1111111111111110 | 0 | 1 |\n| 0000000000000011 | 0000000000000101 | 0 | 1 | 0 | 1 | 0 | 0 | 1111111111111000 | 0 | 1 |\n| 0000000000000011 | 0000000000000101 | 0 | 1 | 0 | 0 | 0 | 0 | 1111111111110100 | 0 | 1 |\n| 0000000000000011 | 0000000000000101 | 0 | 1 | 0 | 0 | 0 | 1 | 1111111111111011 | 0 | 1 |\n| 0000000000000011 | 0000000000000101 | 0 | 0 | 0 | 1 | 0 | 1 | 1111111111111101 | 0 | 1 |\n| 0000000000000011 | 0000000000000101 | 0 | 0 | 0 | 1 | 0 | 0 | 1111111111110010 | 0 | 1 |\n| 0000000000001101 | 0000000000010011 | 0 | 1 | 0 | 1 | 1 | 1 | 0000000000100001 | 0 | 0 |\n| 0000000000001101 | 0000000000010011 | 0 | 0 | 0 | 1 | 1 | 0 | 1111111111111001 | 0 | 1 |\n| 0000000000001101 | 0000000000010011 | 0 | 1 | 1 | 1 | 1 | 0 | 1111111111110001 | 0 | 1 |\n| 0000000000001101 | 0000000000010011 | 1 | 1 | 0 | 1 | 1 | 0 | 1111111111101011 | 0 | 1 |\n| 0000000000001101 | 0000000000010011 | 0 | 1 | 0 | 1 | 1 | 0 | 1111111111011110 | 0 | 1 |\n| 0000000000001101 | 0000000000010011 | 0 | 0 | 0 | 0 | 1 | 1 | 1111111111011111 | 0 | 1 |\n| 0000000000001101 | 0000000000010011 | 0 | 1 | 0 | 0 | 1 | 0 | 0000000000000101 | 0 | 1 |\n| 0000000000000000 | 1111111111111111 | 1 | 0 | 1 | 0 | 1 | 0 | 0000000000000000 | 1 | 0 |\n| 0000000000000000 | 1111111111111111 | 1 | 1 | 1 | 1 | 1 | 1 | 0000000000000001 | 0 | 0 |\n| 0000000000000000 | 1111111111111111 | 1 | 1 | 1 | 0 | 1 | 0 | 1111111111111111 | 0 | 1 |\n| 0000000000000000 | 1111111111111111 | 0 | 0 | 1 | 1 | 0 | 0 | 0000000000000000 | 1 | 0 |\n| 0000000000000000 | 1111111111111111 | 1 | 1 | 0 | 0 | 0 | 0 | 1111111111111111 | 0 | 1 |\n| 0000000000000000 | 1111111111111111 | 0 | 0 | 1 | 1 | 0 | 1 | 1111111111111111 | 0 | 1 |\n| 0000000000000000 | 1111111111111111 | 1 | 1 | 0 | 0 | 0 | 1 | 0000000000000000 | 1 | 0 |\n| 0000000000000000 | 1111111111111111 | 0 | 0 | 1 | 1 | 1 | 1 | 0000000000000000 | 1 | 0 |\n| 0000000000000000 | 1111111111111111 | 1 | 1 | 0 | 0 | 1 | 1 | 0000000000000001 | 0 | 0 |\n| 0000000000000000 | 1111111111111111 | 0 | 1 | 1 | 1 | 1 | 1 | 0000000000000001 | 0 | 0 |\n| 0000000000000000 | 1111111111111111 | 1 | 1 | 0 | 1 | 1 | 1 | 0000000000000000 | 1 | 0 |\n| 0000000000000000 | 1111111111111111 | 0 | 0 | 1 | 1 | 1 | 0 | 1111111111111111 | 0 | 1 |\n| 0000000000000000 | 1111111111111111 | 1 | 1 | 0 | 0 | 1 | 0 | 1111111111111110 | 0 | 1 |\n| 0000000000000000 | 1111111111111111 | 0 | 0 | 0 | 0 | 1 | 0 | 1111111111111111 | 0 | 1 |\n| 0000000000000000 | 1111111111111111 | 0 | 1 | 0 | 0 | 1 | 1 | 0000000000000001 | 0 | 0 |\n| 0000000000000000 | 1111111111111111 | 0 | 0 | 0 | 1 | 1 | 1 | 1111111111111111 | 0 | 1 |\n| 0000000000000000 | 1111111111111111 | 0 | 0 | 0 | 0 | 0 | 0 | 0000000000000000 | 1 | 0 |\n| 0000000000000000 | 1111111111111111 | 0 | 1 | 0 | 1 | 0 | 1 | 1111111111111111 | 0 | 1 |\n| 0000000000010001 | 0000000000000011 | 1 | 0 | 1 | 0 | 1 | 0 | 0000000000000000 | 1 | 0 |\n| 0000000000010001 | 0000000000000011 | 1 | 1 | 1 | 1 | 1 | 1 | 0000000000000001 | 0 | 0 |\n| 0000000000010001 | 0000000000000011 | 1 | 1 | 1 | 0 | 1 | 0 | 1111111111111111 | 0 | 1 |\n| 0000000000010001 | 0000000000000011 | 0 | 0 | 1 | 1 | 0 | 0 | 0000000000010001 | 0 | 0 |\n| 0000000000010001 | 0000000000000011 | 1 | 1 | 0 | 0 | 0 | 0 | 0000000000000011 | 0 | 0 |\n| 0000000000010001 | 0000000000000011 | 0 | 0 | 1 | 1 | 0 | 1 | 1111111111101110 | 0 | 1 |\n| 0000000000010001 | 0000000000000011 | 1 | 1 | 0 | 0 | 0 | 1 | 1111111111111100 | 0 | 1 |\n| 0000000000010001 | 0000000000000011 | 0 | 0 | 1 | 1 | 1 | 1 | 1111111111101111 | 0 | 1 |\n| 0000000000010001 | 0000000000000011 | 1 | 1 | 0 | 0 | 1 | 1 | 1111111111111101 | 0 | 1 |\n| 0000000000010001 | 0000000000000011 | 0 | 1 | 1 | 1 | 1 | 1 | 0000000000010010 | 0 | 0 |\n| 0000000000010001 | 0000000000000011 | 1 | 1 | 0 | 1 | 1 | 1 | 0000000000000100 | 0 | 0 |\n| 0000000000010001 | 0000000000000011 | 0 | 0 | 1 | 1 | 1 | 0 | 0000000000010000 | 0 | 0 |\n| 0000000000010001 | 0000000000000011 | 1 | 1 | 0 | 0 | 1 | 0 | 0000000000000010 | 0 | 0 |\n| 0000000000010001 | 0000000000000011 | 0 | 0 | 0 | 0 | 1 | 0 | 0000000000010100 | 0 | 0 |\n| 0000000000010001 | 0000000000000011 | 0 | 1 | 0 | 0 | 1 | 1 | 0000000000001110 | 0 | 0 |\n| 0000000000010001 | 0000000000000011 | 0 | 0 | 0 | 1 | 1 | 1 | 1111111111110010 | 0 | 1 |\n| 0000000000010001 | 0000000000000011 | 0 | 0 | 0 | 0 | 0 | 0 | 0000000000000001 | 0 | 0 |\n| 0000000000010001 | 0000000000000011 | 0 | 1 | 0 | 1 | 0 | 1 | 0000000000010011 | 0 | 0 |`;\nexport const tst = `output-list x%B1.16.1 y%B1.16.1 zx%B1.1.1 nx%B1.1.1 zy%B1.1.1 \nny%B1.1.1 f%B1.1.1 no%B1.1.1 out%B1.16.1 zr%B1.1.1\nng%B1.1.1;\n\n// Compute -2 \nset x %B0000000000000000,\nset y %B0000000000000000,\nset zx 1, set nx 1, set zy 1, set ny 1, set f  1, set no 0, eval, output;\n\nset x %B0000000000000011,\nset y %B0000000000000101;\n\nset zx 0, set nx 0, set zy 0, set ny 0, set f  0, set no 1, eval, output;\nset zx 0, set nx 1, set zy 0, set ny 1, set f  0, set no 0, eval, output;\nset zx 0, set nx 1, set zy 0, set ny 0, set f  0, set no 0, eval, output;\nset zx 0, set nx 1, set zy 0, set ny 0, set f  0, set no 1, eval, output;\nset zx 0, set nx 0, set zy 0, set ny 1, set f  0, set no 1, eval, output;\nset zx 0, set nx 0, set zy 0, set ny 1, set f  0, set no 0, eval, output;\n\nset x %B0000000000001101, // x = 13\nset y %B0000000000010011; // y = 19\n\nset zx 0, set nx 1, set zy 0, set ny 1, set f 1, set no 1, eval, output;\nset zx 0, set nx 0, set zy 0, set ny 1, set f 1, set no 0, eval, output;\nset zx 0, set nx 1, set zy 1, set ny 1, set f 1, set no 0, eval, output;\nset zx 1, set nx 1, set zy 0, set ny 1, set f 1, set no 0, eval, output;\nset zx 0, set nx 1, set zy 0, set ny 1, set f 1, set no 0, eval, output;\nset zx 0, set nx 0, set zy 0, set ny 0, set f 1, set no 1, eval, output;\nset zx 0, set nx 1, set zy 0, set ny 0, set f 1, set no 0, eval, output;\n\nset x %B0000000000000000,  // x = 0\nset y %B1111111111111111;  // y = -1\n\n// Compute 0\nset zx 1, set nx 0, set zy 1, set ny 0, set f  1, set no 0, eval, output;\n\n// Compute 1\nset zx 1, set nx 1, set zy 1, set ny 1, set f  1, set no 1, eval, output;\n\n// Compute -1\nset zx 1, set nx 1, set zy 1, set ny 0, set f  1, set no 0, eval, output;\n\n// Compute x\nset zx 0, set nx 0, set zy 1, set ny 1, set f  0, set no 0, eval, output;\n\n// Compute y\nset zx 1, set nx 1, set zy 0, set ny 0, set f  0, set no 0, eval, output;\n\n// Compute !x\nset zx 0, set nx 0, set zy 1, set ny 1, set f  0, set no 1, eval, output;\n\n// Compute !y\nset zx 1, set nx 1, set zy 0, set ny 0, set f  0, set no 1, eval, output;\n\n// Compute -x\nset zx 0, set nx 0, set zy 1, set ny 1, set f  1, set no 1, eval, output;\n\n// Compute -y\nset zx 1, set nx 1, set zy 0, set ny 0, set f  1, set no 1, eval, output;\n\n// Compute x + 1\nset zx 0, set nx 1, set zy 1, set ny 1, set f  1, set no 1, eval, output;\n\n// Compute y + 1\nset zx 1, set nx 1, set zy 0, set ny 1, set f  1, set no 1, eval, output;\n\n// Compute x - 1\nset zx 0, set nx 0, set zy 1, set ny 1, set f  1, set no 0, eval, output;\n\n// Compute y - 1\nset zx 1, set nx 1, set zy 0, set ny 0, set f  1, set no 0, eval, output;\n\n// Compute x + y\nset zx 0, set nx 0, set zy 0, set ny 0, set f  1, set no 0, eval, output;\n\n// Compute x - y\nset zx 0, set nx 1, set zy 0, set ny 0, set f  1, set no 1, eval, output;\n\n// Compute y - x\nset zx 0, set nx 0, set zy 0, set ny 1, set f  1, set no 1, eval, output;\n\n// Compute x & y\nset zx 0, set nx 0, set zy 0, set ny 0, set f  0, set no 0, eval, output;\n\n// Compute x | y\nset zx 0, set nx 1, set zy 0, set ny 1, set f  0, set no 1, eval, output;\n\nset x %B000000000010001,  // x = 17\nset y %B000000000000011;  // y =  3\n\n// Compute 0\nset zx 1, set nx 0, set zy 1, set ny 0, set f  1, set no 0, eval, output;\n\n// Compute 1\nset zx 1, set nx 1, set zy 1, set ny 1, set f  1, set no 1, eval, output;\n\n// Compute -1\nset zx 1, set nx 1, set zy 1, set ny 0, set f  1, set no 0, eval, output;\n\n// Compute x\nset zx 0, set nx 0, set zy 1, set ny 1, set f  0, set no 0, eval, output;\n\n// Compute y\nset zx 1, set nx 1, set zy 0, set ny 0, set f  0, set no 0, eval, output;\n\n// Compute !x\nset zx 0, set nx 0, set zy 1, set ny 1, set f  0, set no 1, eval, output;\n\n// Compute !y\nset zx 1, set nx 1, set zy 0, set ny 0, set f  0, set no 1, eval, output;\n\n// Compute -x\nset zx 0, set nx 0, set zy 1, set ny 1, set f  1, set no 1, eval, output;\n\n// Compute -y\nset zx 1, set nx 1, set zy 0, set ny 0, set f  1, set no 1, eval, output;\n\n// Compute x + 1\nset zx 0, set nx 1, set zy 1, set ny 1, set f  1, set no 1, eval, output;\n\n// Compute y + 1\nset zx 1, set nx 1, set zy 0, set ny 1, set f  1, set no 1, eval, output;\n\n// Compute x - 1\nset zx 0, set nx 0, set zy 1, set ny 1, set f  1, set no 0, eval, output;\n\n// Compute y - 1\nset zx 1, set nx 1, set zy 0, set ny 0, set f  1, set no 0, eval, output;\n\n// Compute x + y\nset zx 0, set nx 0, set zy 0, set ny 0, set f  1, set no 0, eval, output;\n\n// Compute x - y\nset zx 0, set nx 1, set zy 0, set ny 0, set f  1, set no 1, eval, output;\n\n// Compute y - x\nset zx 0, set nx 0, set zy 0, set ny 1, set f  1, set no 1, eval, output;\n\n// Compute x & y\nset zx 0, set nx 0, set zy 0, set ny 0, set f  0, set no 0, eval, output;\n\n// Compute x | y\nset zx 0, set nx 1, set zy 0, set ny 1, set f  0, set no 1, eval, output;`;\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/03/DFF.hdl\n/**\n * Data Flip-flop: out(t) = in(t-1) \n * where t is the current time unit, or clock cycle.\n */\nCHIP DFF {\n    IN  in;\n    OUT out;\n\n    PARTS:\n    BUILTIN DFF;\n    CLOCKED in;\n}`;\n","import { FileSystem, reset } from \"@davidsouther/jiffies/lib/esm/fs.js\";\n\nimport * as DFF from \"./00_dff.js\";\nimport * as Bit from \"./01_bit.js\";\nimport * as Register from \"./02_register.js\";\nimport * as PC from \"./03_pc.js\";\nimport * as RAM8 from \"./04_ram8.js\";\nimport * as RAM64 from \"./05_ram64.js\";\nimport * as RAM512 from \"./06_ram512.js\";\nimport * as RAM4k from \"./07_ram4k.js\";\nimport * as RAM16k from \"./08_ram16k.js\";\n\nexport const CHIPS = {\n  Bit: {\n    \"Bit.hdl\": Bit.hdl,\n    \"Bit.tst\": Bit.tst,\n    \"Bit.cmp\": Bit.cmp,\n  },\n  Register: {\n    \"Register.hdl\": Register.hdl,\n    \"Register.tst\": Register.tst,\n    \"Register.cmp\": Register.cmp,\n  },\n  PC: {\n    \"PC.hdl\": PC.hdl,\n    \"PC.tst\": PC.tst,\n    \"PC.cmp\": PC.cmp,\n  },\n  RAM8: {\n    \"RAM8.hdl\": RAM8.hdl,\n    \"RAM8.tst\": RAM8.tst,\n    \"RAM8.cmp\": RAM8.cmp,\n  },\n  RAM64: {\n    \"RAM64.hdl\": RAM64.hdl,\n    \"RAM64.tst\": RAM64.tst,\n    \"RAM64.cmp\": RAM64.cmp,\n  },\n  RAM512: {\n    \"RAM512.hdl\": RAM512.hdl,\n    \"RAM512.tst\": RAM512.tst,\n    \"RAM512.cmp\": RAM512.cmp,\n  },\n  RAM4K: {\n    \"RAM4K.hdl\": RAM4k.hdl,\n    \"RAM4K.tst\": RAM4k.tst,\n    \"RAM4K.cmp\": RAM4k.cmp,\n  },\n  RAM16K: {\n    \"RAM16K.hdl\": RAM16k.hdl,\n    \"RAM16K.tst\": RAM16k.tst,\n    \"RAM16K.cmp\": RAM16k.cmp,\n  },\n};\n\nexport const BUILTIN_CHIPS = {\n  DFF: DFF.hdl,\n};\n\nexport async function resetFiles(fs: FileSystem): Promise<void> {\n  await fs.pushd(\"/projects/03\");\n  await reset(fs, CHIPS);\n  await fs.popd();\n}\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/03/a/Bit.hdl\n/**\n * 1-bit register:\n * If load is asserted, the register's value is set to in;\n * Otherwise, the register maintains its current value.\n * out(t+1) = (load(t), in(t), out(t))\n */\nCHIP Bit {\n    IN in, load;\n    OUT out;\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const tst = `output-list time%S1.4.1 in%B2.1.2 load%B2.1.2 out%B2.1.2;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 1, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 1, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 0, set load 1, tick, output; tock, output;\nset in 1, set load 1, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 0, tick, output; tock, output;\nset in 0, set load 1, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;\nset in 1, set load 0, tick, output; tock, output;`;\nexport const cmp = `| time | in  |load | out |\n| 0+   |  0  |  0  |  0  |\n| 1    |  0  |  0  |  0  |\n| 1+   |  0  |  1  |  0  |\n| 2    |  0  |  1  |  0  |\n| 2+   |  1  |  0  |  0  |\n| 3    |  1  |  0  |  0  |\n| 3+   |  1  |  1  |  0  |\n| 4    |  1  |  1  |  1  |\n| 4+   |  0  |  0  |  1  |\n| 5    |  0  |  0  |  1  |\n| 5+   |  1  |  0  |  1  |\n| 6    |  1  |  0  |  1  |\n| 6+   |  0  |  1  |  1  |\n| 7    |  0  |  1  |  0  |\n| 7+   |  1  |  1  |  0  |\n| 8    |  1  |  1  |  1  |\n| 8+   |  0  |  0  |  1  |\n| 9    |  0  |  0  |  1  |\n| 9+   |  0  |  0  |  1  |\n| 10   |  0  |  0  |  1  |\n| 10+  |  0  |  0  |  1  |\n| 11   |  0  |  0  |  1  |\n| 11+  |  0  |  0  |  1  |\n| 12   |  0  |  0  |  1  |\n| 12+  |  0  |  0  |  1  |\n| 13   |  0  |  0  |  1  |\n| 13+  |  0  |  0  |  1  |\n| 14   |  0  |  0  |  1  |\n| 14+  |  0  |  0  |  1  |\n| 15   |  0  |  0  |  1  |\n| 15+  |  0  |  0  |  1  |\n| 16   |  0  |  0  |  1  |\n| 16+  |  0  |  0  |  1  |\n| 17   |  0  |  0  |  1  |\n| 17+  |  0  |  0  |  1  |\n| 18   |  0  |  0  |  1  |\n| 18+  |  0  |  0  |  1  |\n| 19   |  0  |  0  |  1  |\n| 19+  |  0  |  0  |  1  |\n| 20   |  0  |  0  |  1  |\n| 20+  |  0  |  0  |  1  |\n| 21   |  0  |  0  |  1  |\n| 21+  |  0  |  0  |  1  |\n| 22   |  0  |  0  |  1  |\n| 22+  |  0  |  0  |  1  |\n| 23   |  0  |  0  |  1  |\n| 23+  |  0  |  0  |  1  |\n| 24   |  0  |  0  |  1  |\n| 24+  |  0  |  0  |  1  |\n| 25   |  0  |  0  |  1  |\n| 25+  |  0  |  0  |  1  |\n| 26   |  0  |  0  |  1  |\n| 26+  |  0  |  0  |  1  |\n| 27   |  0  |  0  |  1  |\n| 27+  |  0  |  0  |  1  |\n| 28   |  0  |  0  |  1  |\n| 28+  |  0  |  0  |  1  |\n| 29   |  0  |  0  |  1  |\n| 29+  |  0  |  0  |  1  |\n| 30   |  0  |  0  |  1  |\n| 30+  |  0  |  0  |  1  |\n| 31   |  0  |  0  |  1  |\n| 31+  |  0  |  0  |  1  |\n| 32   |  0  |  0  |  1  |\n| 32+  |  0  |  0  |  1  |\n| 33   |  0  |  0  |  1  |\n| 33+  |  0  |  0  |  1  |\n| 34   |  0  |  0  |  1  |\n| 34+  |  0  |  0  |  1  |\n| 35   |  0  |  0  |  1  |\n| 35+  |  0  |  0  |  1  |\n| 36   |  0  |  0  |  1  |\n| 36+  |  0  |  0  |  1  |\n| 37   |  0  |  0  |  1  |\n| 37+  |  0  |  0  |  1  |\n| 38   |  0  |  0  |  1  |\n| 38+  |  0  |  0  |  1  |\n| 39   |  0  |  0  |  1  |\n| 39+  |  0  |  0  |  1  |\n| 40   |  0  |  0  |  1  |\n| 40+  |  0  |  0  |  1  |\n| 41   |  0  |  0  |  1  |\n| 41+  |  0  |  0  |  1  |\n| 42   |  0  |  0  |  1  |\n| 42+  |  0  |  0  |  1  |\n| 43   |  0  |  0  |  1  |\n| 43+  |  0  |  0  |  1  |\n| 44   |  0  |  0  |  1  |\n| 44+  |  0  |  0  |  1  |\n| 45   |  0  |  0  |  1  |\n| 45+  |  0  |  0  |  1  |\n| 46   |  0  |  0  |  1  |\n| 46+  |  0  |  0  |  1  |\n| 47   |  0  |  0  |  1  |\n| 47+  |  0  |  0  |  1  |\n| 48   |  0  |  0  |  1  |\n| 48+  |  0  |  0  |  1  |\n| 49   |  0  |  0  |  1  |\n| 49+  |  0  |  0  |  1  |\n| 50   |  0  |  0  |  1  |\n| 50+  |  0  |  0  |  1  |\n| 51   |  0  |  0  |  1  |\n| 51+  |  0  |  0  |  1  |\n| 52   |  0  |  0  |  1  |\n| 52+  |  0  |  0  |  1  |\n| 53   |  0  |  0  |  1  |\n| 53+  |  0  |  0  |  1  |\n| 54   |  0  |  0  |  1  |\n| 54+  |  0  |  0  |  1  |\n| 55   |  0  |  0  |  1  |\n| 55+  |  0  |  0  |  1  |\n| 56   |  0  |  0  |  1  |\n| 56+  |  0  |  0  |  1  |\n| 57   |  0  |  0  |  1  |\n| 57+  |  0  |  1  |  1  |\n| 58   |  0  |  1  |  0  |\n| 58+  |  1  |  0  |  0  |\n| 59   |  1  |  0  |  0  |\n| 59+  |  1  |  0  |  0  |\n| 60   |  1  |  0  |  0  |\n| 60+  |  1  |  0  |  0  |\n| 61   |  1  |  0  |  0  |\n| 61+  |  1  |  0  |  0  |\n| 62   |  1  |  0  |  0  |\n| 62+  |  1  |  0  |  0  |\n| 63   |  1  |  0  |  0  |\n| 63+  |  1  |  0  |  0  |\n| 64   |  1  |  0  |  0  |\n| 64+  |  1  |  0  |  0  |\n| 65   |  1  |  0  |  0  |\n| 65+  |  1  |  0  |  0  |\n| 66   |  1  |  0  |  0  |\n| 66+  |  1  |  0  |  0  |\n| 67   |  1  |  0  |  0  |\n| 67+  |  1  |  0  |  0  |\n| 68   |  1  |  0  |  0  |\n| 68+  |  1  |  0  |  0  |\n| 69   |  1  |  0  |  0  |\n| 69+  |  1  |  0  |  0  |\n| 70   |  1  |  0  |  0  |\n| 70+  |  1  |  0  |  0  |\n| 71   |  1  |  0  |  0  |\n| 71+  |  1  |  0  |  0  |\n| 72   |  1  |  0  |  0  |\n| 72+  |  1  |  0  |  0  |\n| 73   |  1  |  0  |  0  |\n| 73+  |  1  |  0  |  0  |\n| 74   |  1  |  0  |  0  |\n| 74+  |  1  |  0  |  0  |\n| 75   |  1  |  0  |  0  |\n| 75+  |  1  |  0  |  0  |\n| 76   |  1  |  0  |  0  |\n| 76+  |  1  |  0  |  0  |\n| 77   |  1  |  0  |  0  |\n| 77+  |  1  |  0  |  0  |\n| 78   |  1  |  0  |  0  |\n| 78+  |  1  |  0  |  0  |\n| 79   |  1  |  0  |  0  |\n| 79+  |  1  |  0  |  0  |\n| 80   |  1  |  0  |  0  |\n| 80+  |  1  |  0  |  0  |\n| 81   |  1  |  0  |  0  |\n| 81+  |  1  |  0  |  0  |\n| 82   |  1  |  0  |  0  |\n| 82+  |  1  |  0  |  0  |\n| 83   |  1  |  0  |  0  |\n| 83+  |  1  |  0  |  0  |\n| 84   |  1  |  0  |  0  |\n| 84+  |  1  |  0  |  0  |\n| 85   |  1  |  0  |  0  |\n| 85+  |  1  |  0  |  0  |\n| 86   |  1  |  0  |  0  |\n| 86+  |  1  |  0  |  0  |\n| 87   |  1  |  0  |  0  |\n| 87+  |  1  |  0  |  0  |\n| 88   |  1  |  0  |  0  |\n| 88+  |  1  |  0  |  0  |\n| 89   |  1  |  0  |  0  |\n| 89+  |  1  |  0  |  0  |\n| 90   |  1  |  0  |  0  |\n| 90+  |  1  |  0  |  0  |\n| 91   |  1  |  0  |  0  |\n| 91+  |  1  |  0  |  0  |\n| 92   |  1  |  0  |  0  |\n| 92+  |  1  |  0  |  0  |\n| 93   |  1  |  0  |  0  |\n| 93+  |  1  |  0  |  0  |\n| 94   |  1  |  0  |  0  |\n| 94+  |  1  |  0  |  0  |\n| 95   |  1  |  0  |  0  |\n| 95+  |  1  |  0  |  0  |\n| 96   |  1  |  0  |  0  |\n| 96+  |  1  |  0  |  0  |\n| 97   |  1  |  0  |  0  |\n| 97+  |  1  |  0  |  0  |\n| 98   |  1  |  0  |  0  |\n| 98+  |  1  |  0  |  0  |\n| 99   |  1  |  0  |  0  |\n| 99+  |  1  |  0  |  0  |\n| 100  |  1  |  0  |  0  |\n| 100+ |  1  |  0  |  0  |\n| 101  |  1  |  0  |  0  |\n| 101+ |  1  |  0  |  0  |\n| 102  |  1  |  0  |  0  |\n| 102+ |  1  |  0  |  0  |\n| 103  |  1  |  0  |  0  |\n| 103+ |  1  |  0  |  0  |\n| 104  |  1  |  0  |  0  |\n| 104+ |  1  |  0  |  0  |\n| 105  |  1  |  0  |  0  |\n| 105+ |  1  |  0  |  0  |\n| 106  |  1  |  0  |  0  |\n| 106+ |  1  |  0  |  0  |\n| 107  |  1  |  0  |  0  |`;\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/03/a/Register.hdl\n/**\n * 16-bit register:\n * If load is asserted, the register's value is set to in;\n * Otherwise, the register maintains its current value.\n * out(t+1) = (load(t), in(t), out(t))\n */\nCHIP Register {\n    IN in[16], load;\n    OUT out[16];\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const tst =\n  `output-list time%S1.4.1 in%D1.6.1 load%B2.1.2 out%D1.6.1;\\n` +\n  [\n    [0, 0],\n    [0, 1],\n    [-32123, 0],\n    [11111, 0],\n    [-32123, 1],\n    [-32123, 1],\n    [-32123, 0],\n    [12345, 1],\n    [0, 0],\n    [0, 1],\n  ]\n    .map(\n      ([inn, load]) =>\n        `set in ${inn}, set load ${load}, tick, output; tock, output;`\n    )\n    .join(\"\\n\") +\n  \"\\n\" +\n  [\n    \"%B0000000000000001\",\n    \"%B0000000000000010\",\n    \"%B0000000000000100\",\n    \"%B0000000000001000\",\n    \"%B0000000000010000\",\n    \"%B0000000000100000\",\n    \"%B0000000001000000\",\n    \"%B0000000010000000\",\n    \"%B0000000100000000\",\n    \"%B0000001000000000\",\n    \"%B0000010000000000\",\n    \"%B0000100000000000\",\n    \"%B0001000000000000\",\n    \"%B0010000000000000\",\n    \"%B0100000000000000\",\n    \"%B1000000000000000\",\n    \"%B1111111111111110\",\n    \"%B1111111111111101\",\n    \"%B1111111111111011\",\n    \"%B1111111111110111\",\n    \"%B1111111111101111\",\n    \"%B1111111111011111\",\n    \"%B1111111110111111\",\n    \"%B1111111101111111\",\n    \"%B1111111011111111\",\n    \"%B1111110111111111\",\n    \"%B1111101111111111\",\n    \"%B1111011111111111\",\n    \"%B1110111111111111\",\n    \"%B1101111111111111\",\n    \"%B1011111111111111\",\n    \"%B0111111111111111\",\n  ]\n    .map(\n      (n) =>\n        `set in ${n}, set load 0, tick, output; tock, output; set load 1, tick, output; tock, output;`\n    )\n    .join(\"\\n\");\n\nexport const cmp = `| time |   in   |load |  out   |\n| 0+   |      0 |  0  |      0 |\n| 1    |      0 |  0  |      0 |\n| 1+   |      0 |  1  |      0 |\n| 2    |      0 |  1  |      0 |\n| 2+   | -32123 |  0  |      0 |\n| 3    | -32123 |  0  |      0 |\n| 3+   |  11111 |  0  |      0 |\n| 4    |  11111 |  0  |      0 |\n| 4+   | -32123 |  1  |      0 |\n| 5    | -32123 |  1  | -32123 |\n| 5+   | -32123 |  1  | -32123 |\n| 6    | -32123 |  1  | -32123 |\n| 6+   | -32123 |  0  | -32123 |\n| 7    | -32123 |  0  | -32123 |\n| 7+   |  12345 |  1  | -32123 |\n| 8    |  12345 |  1  |  12345 |\n| 8+   |      0 |  0  |  12345 |\n| 9    |      0 |  0  |  12345 |\n| 9+   |      0 |  1  |  12345 |\n| 10   |      0 |  1  |      0 |\n| 10+  |      1 |  0  |      0 |\n| 11   |      1 |  0  |      0 |\n| 11+  |      1 |  1  |      0 |\n| 12   |      1 |  1  |      1 |\n| 12+  |      2 |  0  |      1 |\n| 13   |      2 |  0  |      1 |\n| 13+  |      2 |  1  |      1 |\n| 14   |      2 |  1  |      2 |\n| 14+  |      4 |  0  |      2 |\n| 15   |      4 |  0  |      2 |\n| 15+  |      4 |  1  |      2 |\n| 16   |      4 |  1  |      4 |\n| 16+  |      8 |  0  |      4 |\n| 17   |      8 |  0  |      4 |\n| 17+  |      8 |  1  |      4 |\n| 18   |      8 |  1  |      8 |\n| 18+  |     16 |  0  |      8 |\n| 19   |     16 |  0  |      8 |\n| 19+  |     16 |  1  |      8 |\n| 20   |     16 |  1  |     16 |\n| 20+  |     32 |  0  |     16 |\n| 21   |     32 |  0  |     16 |\n| 21+  |     32 |  1  |     16 |\n| 22   |     32 |  1  |     32 |\n| 22+  |     64 |  0  |     32 |\n| 23   |     64 |  0  |     32 |\n| 23+  |     64 |  1  |     32 |\n| 24   |     64 |  1  |     64 |\n| 24+  |    128 |  0  |     64 |\n| 25   |    128 |  0  |     64 |\n| 25+  |    128 |  1  |     64 |\n| 26   |    128 |  1  |    128 |\n| 26+  |    256 |  0  |    128 |\n| 27   |    256 |  0  |    128 |\n| 27+  |    256 |  1  |    128 |\n| 28   |    256 |  1  |    256 |\n| 28+  |    512 |  0  |    256 |\n| 29   |    512 |  0  |    256 |\n| 29+  |    512 |  1  |    256 |\n| 30   |    512 |  1  |    512 |\n| 30+  |   1024 |  0  |    512 |\n| 31   |   1024 |  0  |    512 |\n| 31+  |   1024 |  1  |    512 |\n| 32   |   1024 |  1  |   1024 |\n| 32+  |   2048 |  0  |   1024 |\n| 33   |   2048 |  0  |   1024 |\n| 33+  |   2048 |  1  |   1024 |\n| 34   |   2048 |  1  |   2048 |\n| 34+  |   4096 |  0  |   2048 |\n| 35   |   4096 |  0  |   2048 |\n| 35+  |   4096 |  1  |   2048 |\n| 36   |   4096 |  1  |   4096 |\n| 36+  |   8192 |  0  |   4096 |\n| 37   |   8192 |  0  |   4096 |\n| 37+  |   8192 |  1  |   4096 |\n| 38   |   8192 |  1  |   8192 |\n| 38+  |  16384 |  0  |   8192 |\n| 39   |  16384 |  0  |   8192 |\n| 39+  |  16384 |  1  |   8192 |\n| 40   |  16384 |  1  |  16384 |\n| 40+  | -32768 |  0  |  16384 |\n| 41   | -32768 |  0  |  16384 |\n| 41+  | -32768 |  1  |  16384 |\n| 42   | -32768 |  1  | -32768 |\n| 42+  |     -2 |  0  | -32768 |\n| 43   |     -2 |  0  | -32768 |\n| 43+  |     -2 |  1  | -32768 |\n| 44   |     -2 |  1  |     -2 |\n| 44+  |     -3 |  0  |     -2 |\n| 45   |     -3 |  0  |     -2 |\n| 45+  |     -3 |  1  |     -2 |\n| 46   |     -3 |  1  |     -3 |\n| 46+  |     -5 |  0  |     -3 |\n| 47   |     -5 |  0  |     -3 |\n| 47+  |     -5 |  1  |     -3 |\n| 48   |     -5 |  1  |     -5 |\n| 48+  |     -9 |  0  |     -5 |\n| 49   |     -9 |  0  |     -5 |\n| 49+  |     -9 |  1  |     -5 |\n| 50   |     -9 |  1  |     -9 |\n| 50+  |    -17 |  0  |     -9 |\n| 51   |    -17 |  0  |     -9 |\n| 51+  |    -17 |  1  |     -9 |\n| 52   |    -17 |  1  |    -17 |\n| 52+  |    -33 |  0  |    -17 |\n| 53   |    -33 |  0  |    -17 |\n| 53+  |    -33 |  1  |    -17 |\n| 54   |    -33 |  1  |    -33 |\n| 54+  |    -65 |  0  |    -33 |\n| 55   |    -65 |  0  |    -33 |\n| 55+  |    -65 |  1  |    -33 |\n| 56   |    -65 |  1  |    -65 |\n| 56+  |   -129 |  0  |    -65 |\n| 57   |   -129 |  0  |    -65 |\n| 57+  |   -129 |  1  |    -65 |\n| 58   |   -129 |  1  |   -129 |\n| 58+  |   -257 |  0  |   -129 |\n| 59   |   -257 |  0  |   -129 |\n| 59+  |   -257 |  1  |   -129 |\n| 60   |   -257 |  1  |   -257 |\n| 60+  |   -513 |  0  |   -257 |\n| 61   |   -513 |  0  |   -257 |\n| 61+  |   -513 |  1  |   -257 |\n| 62   |   -513 |  1  |   -513 |\n| 62+  |  -1025 |  0  |   -513 |\n| 63   |  -1025 |  0  |   -513 |\n| 63+  |  -1025 |  1  |   -513 |\n| 64   |  -1025 |  1  |  -1025 |\n| 64+  |  -2049 |  0  |  -1025 |\n| 65   |  -2049 |  0  |  -1025 |\n| 65+  |  -2049 |  1  |  -1025 |\n| 66   |  -2049 |  1  |  -2049 |\n| 66+  |  -4097 |  0  |  -2049 |\n| 67   |  -4097 |  0  |  -2049 |\n| 67+  |  -4097 |  1  |  -2049 |\n| 68   |  -4097 |  1  |  -4097 |\n| 68+  |  -8193 |  0  |  -4097 |\n| 69   |  -8193 |  0  |  -4097 |\n| 69+  |  -8193 |  1  |  -4097 |\n| 70   |  -8193 |  1  |  -8193 |\n| 70+  | -16385 |  0  |  -8193 |\n| 71   | -16385 |  0  |  -8193 |\n| 71+  | -16385 |  1  |  -8193 |\n| 72   | -16385 |  1  | -16385 |\n| 72+  |  32767 |  0  | -16385 |\n| 73   |  32767 |  0  | -16385 |\n| 73+  |  32767 |  1  | -16385 |\n| 74   |  32767 |  1  |  32767 |`;\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/03/a/PC.hdl\n/**\n * A 16-bit counter with reset, load, and inc control bits.\n * if      (reset(t) == 1) out(t+1) = 0\n * else if (load(t) == 1)  out(t+1) = in(t)\n * else if (inc(t) == 1)   out(t+1) = out(t) + 1\n * else                    out(t+1) = out(t)\n */\n\nCHIP PC {\n    IN in[16], load, inc, reset;\n    OUT out[16];\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const tst = `output-list time%S1.4.1 in%D1.6.1 reset%B2.1.2 load%B2.1.2 inc%B2.1.2 out%D1.6.1;\n\nset in 0, set reset 0, set load 0, set inc 0, tick, output;\ntock, output;\n\nset inc 1, tick, output; tock, output;\nset in -32123, tick, output; tock, output;\nset load 1, tick, output; tock, output;\nset load 0, tick, output; tock, output;\ntick, output; tock, output;\nset in 12345, set load 1, set inc 0, tick, output; tock, output;\nset reset 1, tick, output; tock, output;\nset reset 0, set inc 1, tick, output; tock, output;\nset reset 1, tick, output; tock, output;\nset reset 0, set load 0, tick, output; tock, output;\nset reset 1, tick, output; tock, output;\nset in 0, set reset 0, set load 1, tick, output; tock, output;\nset load 0, set inc 1, tick, output; tock, output;\nset in 22222, set reset 1, set inc 0, tick, output; tock, output;`;\nexport const cmp = `| time |   in   |reset|load | inc |  out   |\n| 0+   |      0 |  0  |  0  |  0  |      0 |\n| 1    |      0 |  0  |  0  |  0  |      0 |\n| 1+   |      0 |  0  |  0  |  1  |      0 |\n| 2    |      0 |  0  |  0  |  1  |      1 |\n| 2+   | -32123 |  0  |  0  |  1  |      1 |\n| 3    | -32123 |  0  |  0  |  1  |      2 |\n| 3+   | -32123 |  0  |  1  |  1  |      2 |\n| 4    | -32123 |  0  |  1  |  1  | -32123 |\n| 4+   | -32123 |  0  |  0  |  1  | -32123 |\n| 5    | -32123 |  0  |  0  |  1  | -32122 |\n| 5+   | -32123 |  0  |  0  |  1  | -32122 |\n| 6    | -32123 |  0  |  0  |  1  | -32121 |\n| 6+   |  12345 |  0  |  1  |  0  | -32121 |\n| 7    |  12345 |  0  |  1  |  0  |  12345 |\n| 7+   |  12345 |  1  |  1  |  0  |  12345 |\n| 8    |  12345 |  1  |  1  |  0  |      0 |\n| 8+   |  12345 |  0  |  1  |  1  |      0 |\n| 9    |  12345 |  0  |  1  |  1  |  12345 |\n| 9+   |  12345 |  1  |  1  |  1  |  12345 |\n| 10   |  12345 |  1  |  1  |  1  |      0 |\n| 10+  |  12345 |  0  |  0  |  1  |      0 |\n| 11   |  12345 |  0  |  0  |  1  |      1 |\n| 11+  |  12345 |  1  |  0  |  1  |      1 |\n| 12   |  12345 |  1  |  0  |  1  |      0 |\n| 12+  |      0 |  0  |  1  |  1  |      0 |\n| 13   |      0 |  0  |  1  |  1  |      0 |\n| 13+  |      0 |  0  |  0  |  1  |      0 |\n| 14   |      0 |  0  |  0  |  1  |      1 |\n| 14+  |  22222 |  1  |  0  |  0  |      1 |\n| 15   |  22222 |  1  |  0  |  0  |      0 |`;\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/03/a/RAM8.hdl\n/**\n * Memory of eight 16-bit registers.\n * If load is asserted, the value of the register selected by\n * address is set to in; Otherwise, the value does not change.\n * The value of the selected register is emitted by out.\n */\nCHIP RAM8 {\n    IN in[16], load, address[3];\n    OUT out[16];\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const tst = `output-list time%S1.4.1 in%D1.6.1 load%B2.1.2 address%D3.1.3 out%D1.6.1;\n\nset in 0, set load 0, set address 0, tick, output; tock, output;\nset load 1, tick, output; tock, output;\n\nset in 11111, set load 0, tick, output; tock, output;\nset load 1, set address 1, tick, output; tock, output;\nset load 0, set address 0, tick, output; tock, output;\n\nset in 3333, set address 3, tick, output; tock, output;\nset load 1, tick, output; tock, output;\nset load 0, tick, output; tock, output;\nset address 1, eval, output;\n\nset in 7777, tick, output; tock, output;\nset load 1, set address 7, tick, output; tock, output;\nset load 0, tick, output; tock, output;\nset address 3, eval, output;\nset address 7, eval, output;\n\nset load 0, set address 0, tick, output; tock, output;\nset address 1, eval, output;\nset address 2, eval, output;\nset address 3, eval, output;\nset address 4, eval, output;\nset address 5, eval, output;\nset address 6, eval, output;\nset address 7, eval, output;\n\nset load 1, set in %B0101010101010101, set address 0, tick, output; tock, output;\nset address 1, tick, output, tock, output;\nset address 2, tick, output, tock, output;\nset address 3, tick, output, tock, output;\nset address 4, tick, output, tock, output;\nset address 5, tick, output, tock, output;\nset address 6, tick, output, tock, output;\nset address 7, tick, output, tock, output;\n\nset load 0, set address 0, tick, output; tock, output;\nset address 1, eval, output;\nset address 2, eval, output;\nset address 3, eval, output;\nset address 4, eval, output;\nset address 5, eval, output;\nset address 6, eval, output;\nset address 7, eval, output;\n\nset load 1, set address 0, set in %B1010101010101010, tick, output; tock, output;\nset load 0, set address 0, tick, output; tock, output;\nset address 1, eval, output;\nset address 2, eval, output;\nset address 3, eval, output;\nset address 4, eval, output;\nset address 5, eval, output;\nset address 6, eval, output;\nset address 7, eval, output;\n\nset load 1, set address 0, set in %B0101010101010101, tick, output, tock, output;\nset address 1, set in %B1010101010101010, tick, output; tock, output;\nset load 0, set address 0, tick, output; tock, output;\nset address 1, eval, output;\nset address 2, eval, output;\nset address 3, eval, output;\nset address 4, eval, output;\nset address 5, eval, output;\nset address 6, eval, output;\nset address 7, eval, output;\n\nset load 1, set address 1, set in %B0101010101010101, tick, output, tock, output;\nset address 2, set in %B1010101010101010, tick, output;\ntock, output;\nset load 0, set address 0, tick, output; tock, output;\nset address 1, eval, output;\nset address 2, eval, output;\nset address 3, eval, output;\nset address 4, eval, output;\nset address 5, eval, output;\nset address 6, eval, output;\nset address 7, eval, output;\n\nset load 1, set address 2, set in %B0101010101010101, tick, output, tock, output;\nset address 3, set in %B1010101010101010, tick, output; tock, output;\nset load 0, set address 0, tick, output; tock, output;\nset address 1, eval, output;\nset address 2, eval, output;\nset address 3, eval, output;\nset address 4, eval, output;\nset address 5, eval, output;\nset address 6, eval, output;\nset address 7, eval, output;\n\nset load 1, set address 3, set in %B0101010101010101, tick, output, tock, output;\nset address 4, set in %B1010101010101010, tick, output; tock, output;\nset load 0, set address 0, tick, output; tock, output;\nset address 1, eval, output;\nset address 2, eval, output;\nset address 3, eval, output;\nset address 4, eval, output;\nset address 5, eval, output;\nset address 6, eval, output;\nset address 7, eval, output;\n\nset load 1, set address 4, set in %B0101010101010101, tick, output, tock, output;\nset address 5, set in %B1010101010101010, tick, output; tock, output;\nset load 0, set address 0, tick, output; tock, output;\nset address 1, eval, output;\nset address 2, eval, output;\nset address 3, eval, output;\nset address 4, eval, output;\nset address 5, eval, output;\nset address 6, eval, output;\nset address 7, eval, output;\n\nset load 1, set address 5, set in %B0101010101010101, tick, output, tock, output;\nset address 6, set in %B1010101010101010, tick, output; tock, output;\nset load 0, set address 0, tick, output; tock, output;\nset address 1, eval, output;\nset address 2, eval, output;\nset address 3, eval, output;\nset address 4, eval, output;\nset address 5, eval, output;\nset address 6, eval, output;\nset address 7, eval, output;\n\nset load 1, set address 6, set in %B0101010101010101, tick, output, tock, output;\nset address 7, set in %B1010101010101010, tick, output; tock, output;\nset load 0, set address 0, tick, output; tock, output;\nset address 1, eval, output;\nset address 2, eval, output;\nset address 3, eval, output;\nset address 4, eval, output;\nset address 5, eval, output;\nset address 6, eval, output;\nset address 7, eval, output;\n\nset load 1, set address 7, set in %B0101010101010101, tick, output, tock, output;\nset load 0, set address 0, tick, output; tock, output;\nset address 1, eval, output;\nset address 2, eval, output;\nset address 3, eval, output;\nset address 4, eval, output;\nset address 5, eval, output;\nset address 6, eval, output;\nset address 7, eval, output;`;\nexport const cmp = `| time |   in   |load |address|  out   |\n| 0+   |      0 |  0  |   0   |      0 |\n| 1    |      0 |  0  |   0   |      0 |\n| 1+   |      0 |  1  |   0   |      0 |\n| 2    |      0 |  1  |   0   |      0 |\n| 2+   |  11111 |  0  |   0   |      0 |\n| 3    |  11111 |  0  |   0   |      0 |\n| 3+   |  11111 |  1  |   1   |      0 |\n| 4    |  11111 |  1  |   1   |  11111 |\n| 4+   |  11111 |  0  |   0   |      0 |\n| 5    |  11111 |  0  |   0   |      0 |\n| 5+   |   3333 |  0  |   3   |      0 |\n| 6    |   3333 |  0  |   3   |      0 |\n| 6+   |   3333 |  1  |   3   |      0 |\n| 7    |   3333 |  1  |   3   |   3333 |\n| 7+   |   3333 |  0  |   3   |   3333 |\n| 8    |   3333 |  0  |   3   |   3333 |\n| 8    |   3333 |  0  |   1   |  11111 |\n| 8+   |   7777 |  0  |   1   |  11111 |\n| 9    |   7777 |  0  |   1   |  11111 |\n| 9+   |   7777 |  1  |   7   |      0 |\n| 10   |   7777 |  1  |   7   |   7777 |\n| 10+  |   7777 |  0  |   7   |   7777 |\n| 11   |   7777 |  0  |   7   |   7777 |\n| 11   |   7777 |  0  |   3   |   3333 |\n| 11   |   7777 |  0  |   7   |   7777 |\n| 11+  |   7777 |  0  |   0   |      0 |\n| 12   |   7777 |  0  |   0   |      0 |\n| 12   |   7777 |  0  |   1   |  11111 |\n| 12   |   7777 |  0  |   2   |      0 |\n| 12   |   7777 |  0  |   3   |   3333 |\n| 12   |   7777 |  0  |   4   |      0 |\n| 12   |   7777 |  0  |   5   |      0 |\n| 12   |   7777 |  0  |   6   |      0 |\n| 12   |   7777 |  0  |   7   |   7777 |\n| 12+  |  21845 |  1  |   0   |      0 |\n| 13   |  21845 |  1  |   0   |  21845 |\n| 13+  |  21845 |  1  |   1   |  11111 |\n| 14   |  21845 |  1  |   1   |  21845 |\n| 14+  |  21845 |  1  |   2   |      0 |\n| 15   |  21845 |  1  |   2   |  21845 |\n| 15+  |  21845 |  1  |   3   |   3333 |\n| 16   |  21845 |  1  |   3   |  21845 |\n| 16+  |  21845 |  1  |   4   |      0 |\n| 17   |  21845 |  1  |   4   |  21845 |\n| 17+  |  21845 |  1  |   5   |      0 |\n| 18   |  21845 |  1  |   5   |  21845 |\n| 18+  |  21845 |  1  |   6   |      0 |\n| 19   |  21845 |  1  |   6   |  21845 |\n| 19+  |  21845 |  1  |   7   |   7777 |\n| 20   |  21845 |  1  |   7   |  21845 |\n| 20+  |  21845 |  0  |   0   |  21845 |\n| 21   |  21845 |  0  |   0   |  21845 |\n| 21   |  21845 |  0  |   1   |  21845 |\n| 21   |  21845 |  0  |   2   |  21845 |\n| 21   |  21845 |  0  |   3   |  21845 |\n| 21   |  21845 |  0  |   4   |  21845 |\n| 21   |  21845 |  0  |   5   |  21845 |\n| 21   |  21845 |  0  |   6   |  21845 |\n| 21   |  21845 |  0  |   7   |  21845 |\n| 21+  | -21846 |  1  |   0   |  21845 |\n| 22   | -21846 |  1  |   0   | -21846 |\n| 22+  | -21846 |  0  |   0   | -21846 |\n| 23   | -21846 |  0  |   0   | -21846 |\n| 23   | -21846 |  0  |   1   |  21845 |\n| 23   | -21846 |  0  |   2   |  21845 |\n| 23   | -21846 |  0  |   3   |  21845 |\n| 23   | -21846 |  0  |   4   |  21845 |\n| 23   | -21846 |  0  |   5   |  21845 |\n| 23   | -21846 |  0  |   6   |  21845 |\n| 23   | -21846 |  0  |   7   |  21845 |\n| 23+  |  21845 |  1  |   0   | -21846 |\n| 24   |  21845 |  1  |   0   |  21845 |\n| 24+  | -21846 |  1  |   1   |  21845 |\n| 25   | -21846 |  1  |   1   | -21846 |\n| 25+  | -21846 |  0  |   0   |  21845 |\n| 26   | -21846 |  0  |   0   |  21845 |\n| 26   | -21846 |  0  |   1   | -21846 |\n| 26   | -21846 |  0  |   2   |  21845 |\n| 26   | -21846 |  0  |   3   |  21845 |\n| 26   | -21846 |  0  |   4   |  21845 |\n| 26   | -21846 |  0  |   5   |  21845 |\n| 26   | -21846 |  0  |   6   |  21845 |\n| 26   | -21846 |  0  |   7   |  21845 |\n| 26+  |  21845 |  1  |   1   | -21846 |\n| 27   |  21845 |  1  |   1   |  21845 |\n| 27+  | -21846 |  1  |   2   |  21845 |\n| 28   | -21846 |  1  |   2   | -21846 |\n| 28+  | -21846 |  0  |   0   |  21845 |\n| 29   | -21846 |  0  |   0   |  21845 |\n| 29   | -21846 |  0  |   1   |  21845 |\n| 29   | -21846 |  0  |   2   | -21846 |\n| 29   | -21846 |  0  |   3   |  21845 |\n| 29   | -21846 |  0  |   4   |  21845 |\n| 29   | -21846 |  0  |   5   |  21845 |\n| 29   | -21846 |  0  |   6   |  21845 |\n| 29   | -21846 |  0  |   7   |  21845 |\n| 29+  |  21845 |  1  |   2   | -21846 |\n| 30   |  21845 |  1  |   2   |  21845 |\n| 30+  | -21846 |  1  |   3   |  21845 |\n| 31   | -21846 |  1  |   3   | -21846 |\n| 31+  | -21846 |  0  |   0   |  21845 |\n| 32   | -21846 |  0  |   0   |  21845 |\n| 32   | -21846 |  0  |   1   |  21845 |\n| 32   | -21846 |  0  |   2   |  21845 |\n| 32   | -21846 |  0  |   3   | -21846 |\n| 32   | -21846 |  0  |   4   |  21845 |\n| 32   | -21846 |  0  |   5   |  21845 |\n| 32   | -21846 |  0  |   6   |  21845 |\n| 32   | -21846 |  0  |   7   |  21845 |\n| 32+  |  21845 |  1  |   3   | -21846 |\n| 33   |  21845 |  1  |   3   |  21845 |\n| 33+  | -21846 |  1  |   4   |  21845 |\n| 34   | -21846 |  1  |   4   | -21846 |\n| 34+  | -21846 |  0  |   0   |  21845 |\n| 35   | -21846 |  0  |   0   |  21845 |\n| 35   | -21846 |  0  |   1   |  21845 |\n| 35   | -21846 |  0  |   2   |  21845 |\n| 35   | -21846 |  0  |   3   |  21845 |\n| 35   | -21846 |  0  |   4   | -21846 |\n| 35   | -21846 |  0  |   5   |  21845 |\n| 35   | -21846 |  0  |   6   |  21845 |\n| 35   | -21846 |  0  |   7   |  21845 |\n| 35+  |  21845 |  1  |   4   | -21846 |\n| 36   |  21845 |  1  |   4   |  21845 |\n| 36+  | -21846 |  1  |   5   |  21845 |\n| 37   | -21846 |  1  |   5   | -21846 |\n| 37+  | -21846 |  0  |   0   |  21845 |\n| 38   | -21846 |  0  |   0   |  21845 |\n| 38   | -21846 |  0  |   1   |  21845 |\n| 38   | -21846 |  0  |   2   |  21845 |\n| 38   | -21846 |  0  |   3   |  21845 |\n| 38   | -21846 |  0  |   4   |  21845 |\n| 38   | -21846 |  0  |   5   | -21846 |\n| 38   | -21846 |  0  |   6   |  21845 |\n| 38   | -21846 |  0  |   7   |  21845 |\n| 38+  |  21845 |  1  |   5   | -21846 |\n| 39   |  21845 |  1  |   5   |  21845 |\n| 39+  | -21846 |  1  |   6   |  21845 |\n| 40   | -21846 |  1  |   6   | -21846 |\n| 40+  | -21846 |  0  |   0   |  21845 |\n| 41   | -21846 |  0  |   0   |  21845 |\n| 41   | -21846 |  0  |   1   |  21845 |\n| 41   | -21846 |  0  |   2   |  21845 |\n| 41   | -21846 |  0  |   3   |  21845 |\n| 41   | -21846 |  0  |   4   |  21845 |\n| 41   | -21846 |  0  |   5   |  21845 |\n| 41   | -21846 |  0  |   6   | -21846 |\n| 41   | -21846 |  0  |   7   |  21845 |\n| 41+  |  21845 |  1  |   6   | -21846 |\n| 42   |  21845 |  1  |   6   |  21845 |\n| 42+  | -21846 |  1  |   7   |  21845 |\n| 43   | -21846 |  1  |   7   | -21846 |\n| 43+  | -21846 |  0  |   0   |  21845 |\n| 44   | -21846 |  0  |   0   |  21845 |\n| 44   | -21846 |  0  |   1   |  21845 |\n| 44   | -21846 |  0  |   2   |  21845 |\n| 44   | -21846 |  0  |   3   |  21845 |\n| 44   | -21846 |  0  |   4   |  21845 |\n| 44   | -21846 |  0  |   5   |  21845 |\n| 44   | -21846 |  0  |   6   |  21845 |\n| 44   | -21846 |  0  |   7   | -21846 |\n| 44+  |  21845 |  1  |   7   | -21846 |\n| 45   |  21845 |  1  |   7   |  21845 |\n| 45+  |  21845 |  0  |   0   |  21845 |\n| 46   |  21845 |  0  |   0   |  21845 |\n| 46   |  21845 |  0  |   1   |  21845 |\n| 46   |  21845 |  0  |   2   |  21845 |\n| 46   |  21845 |  0  |   3   |  21845 |\n| 46   |  21845 |  0  |   4   |  21845 |\n| 46   |  21845 |  0  |   5   |  21845 |\n| 46   |  21845 |  0  |   6   |  21845 |\n| 46   |  21845 |  0  |   7   |  21845 |`;\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/03/a/RAM64.hdl\n/**\n * Memory of sixty four 16-bit registers.\n * If load is asserted, the value of the register selected by\n * address is set to in; Otherwise, the value does not change.\n * The value of the selected register is emitted by out.\n */\nCHIP RAM64 {\n    IN in[16], load, address[6];\n    OUT out[16];\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const tst = `output-list time%S1.4.1 in%D1.6.1 load%B2.1.2 address%D2.3.2 out%D1.6.1;\n\nset in 0, set load 0,\nset address 0, tick, output; tock, output;\nset load 1, tick, output; tock, output;\nset in 1313, set load 0, tick, output; tock, output;\nset load 1,\nset address 13, tick, output; tock, output;\nset load 0,\nset address 0, tick, output; tock, output;\nset in 4747, set address 47, tick, output; tock, output;\nset load 1, tick, output; tock, output;\nset load 0, tick, output; tock, output;\nset address 13, eval, output;\n\nset in 6363, tick, output; tock, output;\nset load 1,\nset address 63, tick, output; tock, output;\nset load 0, tick, output; tock, output;\nset address 47, eval, output;\n\nset address 63, eval, output;\n\nset load 0,\nset address %B101000, tick, output; tock, output;\nset address %B101001, eval, output;\nset address %B101010, eval, output;\nset address %B101011, eval, output;\nset address %B101100, eval, output;\nset address %B101101, eval, output;\nset address %B101110, eval, output;\nset address %B101111, eval, output;\n\nset load 1,\nset in %B0101010101010101, set address %B101000, tick, output; tock, output;\nset address %B101001, tick, output, tock, output;\nset address %B101010, tick, output, tock, output;\nset address %B101011, tick, output, tock, output;\nset address %B101100, tick, output, tock, output;\nset address %B101101, tick, output, tock, output;\nset address %B101110, tick, output, tock, output;\nset address %B101111, tick, output, tock, output;\n\nset load 0,\nset address %B101000, tick, output; tock, output;\nset address %B101001, eval, output;\nset address %B101010, eval, output;\nset address %B101011, eval, output;\nset address %B101100, eval, output;\nset address %B101101, eval, output;\nset address %B101110, eval, output;\nset address %B101111, eval, output;\n\nset load 1,\nset address %B101000, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B101000, tick, output; tock, output;\nset address %B101001, eval, output;\nset address %B101010, eval, output;\nset address %B101011, eval, output;\nset address %B101100, eval, output;\nset address %B101101, eval, output;\nset address %B101110, eval, output;\nset address %B101111, eval, output;\n\nset load 1,\nset address %B101000, set in %B0101010101010101, tick, output, tock, output;\nset address %B101001, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B101000, tick, output; tock, output;\nset address %B101001, eval, output;\nset address %B101010, eval, output;\nset address %B101011, eval, output;\nset address %B101100, eval, output;\nset address %B101101, eval, output;\nset address %B101110, eval, output;\nset address %B101111, eval, output;\n\nset load 1,\nset address %B101001, set in %B0101010101010101, tick, output, tock, output;\nset address %B101010, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B101000, tick, output; tock, output;\nset address %B101001, eval, output;\nset address %B101010, eval, output;\nset address %B101011, eval, output;\nset address %B101100, eval, output;\nset address %B101101, eval, output;\nset address %B101110, eval, output;\nset address %B101111, eval, output;\n\nset load 1,\nset address %B101010, set in %B0101010101010101, tick, output, tock, output;\nset address %B101011, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B101000, tick, output; tock, output;\nset address %B101001, eval, output;\nset address %B101010, eval, output;\nset address %B101011, eval, output;\nset address %B101100, eval, output;\nset address %B101101, eval, output;\nset address %B101110, eval, output;\nset address %B101111, eval, output;\n\nset load 1,\nset address %B101011, set in %B0101010101010101, tick, output, tock, output;\nset address %B101100, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B101000, tick, output; tock, output;\nset address %B101001, eval, output;\nset address %B101010, eval, output;\nset address %B101011, eval, output;\nset address %B101100, eval, output;\nset address %B101101, eval, output;\nset address %B101110, eval, output;\nset address %B101111, eval, output;\n\nset load 1,\nset address %B101100, set in %B0101010101010101, tick, output, tock, output;\nset address %B101101, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B101000, tick, output; tock, output;\nset address %B101001, eval, output;\nset address %B101010, eval, output;\nset address %B101011, eval, output;\nset address %B101100, eval, output;\nset address %B101101, eval, output;\nset address %B101110, eval, output;\nset address %B101111, eval, output;\n\nset load 1,\nset address %B101101, set in %B0101010101010101, tick, output, tock, output;\nset address %B101110, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B101000, tick, output; tock, output;\nset address %B101001, eval, output;\nset address %B101010, eval, output;\nset address %B101011, eval, output;\nset address %B101100, eval, output;\nset address %B101101, eval, output;\nset address %B101110, eval, output;\nset address %B101111, eval, output;\n\nset load 1,\nset address %B101110, set in %B0101010101010101, tick, output, tock, output;\nset address %B101111, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B101000, tick, output; tock, output;\nset address %B101001, eval, output;\nset address %B101010, eval, output;\nset address %B101011, eval, output;\nset address %B101100, eval, output;\nset address %B101101, eval, output;\nset address %B101110, eval, output;\nset address %B101111, eval, output;\n\nset load 1,\nset address %B101111, set in %B0101010101010101, tick, output, tock, output;\n\nset load 0,\nset address %B101000, tick, output; tock, output;\nset address %B101001, eval, output;\nset address %B101010, eval, output;\nset address %B101011, eval, output;\nset address %B101100, eval, output;\nset address %B101101, eval, output;\nset address %B101110, eval, output;\nset address %B101111, eval, output;\n\nset load 0,\nset address %B000101, tick, output; tock, output;\nset address %B001101, eval, output;\nset address %B010101, eval, output;\nset address %B011101, eval, output;\nset address %B100101, eval, output;\nset address %B101101, eval, output;\nset address %B110101, eval, output;\nset address %B111101, eval, output;\n\nset load 1,\nset in %B0101010101010101, set address %B000101, tick, output; tock, output;\nset address %B001101, tick, output, tock, output;\nset address %B010101, tick, output, tock, output;\nset address %B011101, tick, output, tock, output;\nset address %B100101, tick, output, tock, output;\nset address %B101101, tick, output, tock, output;\nset address %B110101, tick, output, tock, output;\nset address %B111101, tick, output, tock, output;\n\nset load 0,\nset address %B000101, tick, output; tock, output;\nset address %B001101, eval, output;\nset address %B010101, eval, output;\nset address %B011101, eval, output;\nset address %B100101, eval, output;\nset address %B101101, eval, output;\nset address %B110101, eval, output;\nset address %B111101, eval, output;\n\nset load 1,\nset address %B000101, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B000101, tick, output; tock, output;\nset address %B001101, eval, output;\nset address %B010101, eval, output;\nset address %B011101, eval, output;\nset address %B100101, eval, output;\nset address %B101101, eval, output;\nset address %B110101, eval, output;\nset address %B111101, eval, output;\n\nset load 1,\nset address %B000101, set in %B0101010101010101, tick, output, tock, output;\nset address %B001101, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B000101, tick, output; tock, output;\nset address %B001101, eval, output;\nset address %B010101, eval, output;\nset address %B011101, eval, output;\nset address %B100101, eval, output;\nset address %B101101, eval, output;\nset address %B110101, eval, output;\nset address %B111101, eval, output;\n\nset load 1,\nset address %B001101, set in %B0101010101010101, tick, output, tock, output;\nset address %B010101, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B000101, tick, output; tock, output;\nset address %B001101, eval, output;\nset address %B010101, eval, output;\nset address %B011101, eval, output;\nset address %B100101, eval, output;\nset address %B101101, eval, output;\nset address %B110101, eval, output;\nset address %B111101, eval, output;\n\nset load 1,\nset address %B010101, set in %B0101010101010101, tick, output, tock, output;\nset address %B011101, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B000101, tick, output; tock, output;\nset address %B001101, eval, output;\nset address %B010101, eval, output;\nset address %B011101, eval, output;\nset address %B100101, eval, output;\nset address %B101101, eval, output;\nset address %B110101, eval, output;\nset address %B111101, eval, output;\n\nset load 1,\nset address %B011101, set in %B0101010101010101, tick, output, tock, output;\nset address %B100101, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B000101, tick, output; tock, output;\nset address %B001101, eval, output;\nset address %B010101, eval, output;\nset address %B011101, eval, output;\nset address %B100101, eval, output;\nset address %B101101, eval, output;\nset address %B110101, eval, output;\nset address %B111101, eval, output;\n\nset load 1,\nset address %B100101, set in %B0101010101010101, tick, output, tock, output;\nset address %B101101, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B000101, tick, output; tock, output;\nset address %B001101, eval, output;\nset address %B010101, eval, output;\nset address %B011101, eval, output;\nset address %B100101, eval, output;\nset address %B101101, eval, output;\nset address %B110101, eval, output;\nset address %B111101, eval, output;\n\nset load 1,\nset address %B101101, set in %B0101010101010101, tick, output, tock, output;\nset address %B110101, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B000101, tick, output; tock, output;\nset address %B001101, eval, output;\nset address %B010101, eval, output;\nset address %B011101, eval, output;\nset address %B100101, eval, output;\nset address %B101101, eval, output;\nset address %B110101, eval, output;\nset address %B111101, eval, output;\n\nset load 1,\nset address %B110101, set in %B0101010101010101, tick, output, tock, output;\nset address %B111101, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B000101, tick, output; tock, output;\nset address %B001101, eval, output;\nset address %B010101, eval, output;\nset address %B011101, eval, output;\nset address %B100101, eval, output;\nset address %B101101, eval, output;\nset address %B110101, eval, output;\nset address %B111101, eval, output;\n\nset load 1,\nset address %B111101, set in %B0101010101010101, tick, output, tock, output;\n\nset load 0,\nset address %B000101, tick, output; tock, output;\nset address %B001101, eval, output;\nset address %B010101, eval, output;\nset address %B011101, eval, output;\nset address %B100101, eval, output;\nset address %B101101, eval, output;\nset address %B110101, eval, output;\nset address %B111101, eval, output;`;\n\nexport const cmp = `| time |   in   |load |address|  out   |\n| 0+   |      0 |  0  |    0  |      0 |\n| 1    |      0 |  0  |    0  |      0 |\n| 1+   |      0 |  1  |    0  |      0 |\n| 2    |      0 |  1  |    0  |      0 |\n| 2+   |   1313 |  0  |    0  |      0 |\n| 3    |   1313 |  0  |    0  |      0 |\n| 3+   |   1313 |  1  |   13  |      0 |\n| 4    |   1313 |  1  |   13  |   1313 |\n| 4+   |   1313 |  0  |    0  |      0 |\n| 5    |   1313 |  0  |    0  |      0 |\n| 5+   |   4747 |  0  |   47  |      0 |\n| 6    |   4747 |  0  |   47  |      0 |\n| 6+   |   4747 |  1  |   47  |      0 |\n| 7    |   4747 |  1  |   47  |   4747 |\n| 7+   |   4747 |  0  |   47  |   4747 |\n| 8    |   4747 |  0  |   47  |   4747 |\n| 8    |   4747 |  0  |   13  |   1313 |\n| 8+   |   6363 |  0  |   13  |   1313 |\n| 9    |   6363 |  0  |   13  |   1313 |\n| 9+   |   6363 |  1  |   63  |      0 |\n| 10   |   6363 |  1  |   63  |   6363 |\n| 10+  |   6363 |  0  |   63  |   6363 |\n| 11   |   6363 |  0  |   63  |   6363 |\n| 11   |   6363 |  0  |   47  |   4747 |\n| 11   |   6363 |  0  |   63  |   6363 |\n| 11+  |   6363 |  0  |   40  |      0 |\n| 12   |   6363 |  0  |   40  |      0 |\n| 12   |   6363 |  0  |   41  |      0 |\n| 12   |   6363 |  0  |   42  |      0 |\n| 12   |   6363 |  0  |   43  |      0 |\n| 12   |   6363 |  0  |   44  |      0 |\n| 12   |   6363 |  0  |   45  |      0 |\n| 12   |   6363 |  0  |   46  |      0 |\n| 12   |   6363 |  0  |   47  |   4747 |\n| 12+  |  21845 |  1  |   40  |      0 |\n| 13   |  21845 |  1  |   40  |  21845 |\n| 13+  |  21845 |  1  |   41  |      0 |\n| 14   |  21845 |  1  |   41  |  21845 |\n| 14+  |  21845 |  1  |   42  |      0 |\n| 15   |  21845 |  1  |   42  |  21845 |\n| 15+  |  21845 |  1  |   43  |      0 |\n| 16   |  21845 |  1  |   43  |  21845 |\n| 16+  |  21845 |  1  |   44  |      0 |\n| 17   |  21845 |  1  |   44  |  21845 |\n| 17+  |  21845 |  1  |   45  |      0 |\n| 18   |  21845 |  1  |   45  |  21845 |\n| 18+  |  21845 |  1  |   46  |      0 |\n| 19   |  21845 |  1  |   46  |  21845 |\n| 19+  |  21845 |  1  |   47  |   4747 |\n| 20   |  21845 |  1  |   47  |  21845 |\n| 20+  |  21845 |  0  |   40  |  21845 |\n| 21   |  21845 |  0  |   40  |  21845 |\n| 21   |  21845 |  0  |   41  |  21845 |\n| 21   |  21845 |  0  |   42  |  21845 |\n| 21   |  21845 |  0  |   43  |  21845 |\n| 21   |  21845 |  0  |   44  |  21845 |\n| 21   |  21845 |  0  |   45  |  21845 |\n| 21   |  21845 |  0  |   46  |  21845 |\n| 21   |  21845 |  0  |   47  |  21845 |\n| 21+  | -21846 |  1  |   40  |  21845 |\n| 22   | -21846 |  1  |   40  | -21846 |\n| 22+  | -21846 |  0  |   40  | -21846 |\n| 23   | -21846 |  0  |   40  | -21846 |\n| 23   | -21846 |  0  |   41  |  21845 |\n| 23   | -21846 |  0  |   42  |  21845 |\n| 23   | -21846 |  0  |   43  |  21845 |\n| 23   | -21846 |  0  |   44  |  21845 |\n| 23   | -21846 |  0  |   45  |  21845 |\n| 23   | -21846 |  0  |   46  |  21845 |\n| 23   | -21846 |  0  |   47  |  21845 |\n| 23+  |  21845 |  1  |   40  | -21846 |\n| 24   |  21845 |  1  |   40  |  21845 |\n| 24+  | -21846 |  1  |   41  |  21845 |\n| 25   | -21846 |  1  |   41  | -21846 |\n| 25+  | -21846 |  0  |   40  |  21845 |\n| 26   | -21846 |  0  |   40  |  21845 |\n| 26   | -21846 |  0  |   41  | -21846 |\n| 26   | -21846 |  0  |   42  |  21845 |\n| 26   | -21846 |  0  |   43  |  21845 |\n| 26   | -21846 |  0  |   44  |  21845 |\n| 26   | -21846 |  0  |   45  |  21845 |\n| 26   | -21846 |  0  |   46  |  21845 |\n| 26   | -21846 |  0  |   47  |  21845 |\n| 26+  |  21845 |  1  |   41  | -21846 |\n| 27   |  21845 |  1  |   41  |  21845 |\n| 27+  | -21846 |  1  |   42  |  21845 |\n| 28   | -21846 |  1  |   42  | -21846 |\n| 28+  | -21846 |  0  |   40  |  21845 |\n| 29   | -21846 |  0  |   40  |  21845 |\n| 29   | -21846 |  0  |   41  |  21845 |\n| 29   | -21846 |  0  |   42  | -21846 |\n| 29   | -21846 |  0  |   43  |  21845 |\n| 29   | -21846 |  0  |   44  |  21845 |\n| 29   | -21846 |  0  |   45  |  21845 |\n| 29   | -21846 |  0  |   46  |  21845 |\n| 29   | -21846 |  0  |   47  |  21845 |\n| 29+  |  21845 |  1  |   42  | -21846 |\n| 30   |  21845 |  1  |   42  |  21845 |\n| 30+  | -21846 |  1  |   43  |  21845 |\n| 31   | -21846 |  1  |   43  | -21846 |\n| 31+  | -21846 |  0  |   40  |  21845 |\n| 32   | -21846 |  0  |   40  |  21845 |\n| 32   | -21846 |  0  |   41  |  21845 |\n| 32   | -21846 |  0  |   42  |  21845 |\n| 32   | -21846 |  0  |   43  | -21846 |\n| 32   | -21846 |  0  |   44  |  21845 |\n| 32   | -21846 |  0  |   45  |  21845 |\n| 32   | -21846 |  0  |   46  |  21845 |\n| 32   | -21846 |  0  |   47  |  21845 |\n| 32+  |  21845 |  1  |   43  | -21846 |\n| 33   |  21845 |  1  |   43  |  21845 |\n| 33+  | -21846 |  1  |   44  |  21845 |\n| 34   | -21846 |  1  |   44  | -21846 |\n| 34+  | -21846 |  0  |   40  |  21845 |\n| 35   | -21846 |  0  |   40  |  21845 |\n| 35   | -21846 |  0  |   41  |  21845 |\n| 35   | -21846 |  0  |   42  |  21845 |\n| 35   | -21846 |  0  |   43  |  21845 |\n| 35   | -21846 |  0  |   44  | -21846 |\n| 35   | -21846 |  0  |   45  |  21845 |\n| 35   | -21846 |  0  |   46  |  21845 |\n| 35   | -21846 |  0  |   47  |  21845 |\n| 35+  |  21845 |  1  |   44  | -21846 |\n| 36   |  21845 |  1  |   44  |  21845 |\n| 36+  | -21846 |  1  |   45  |  21845 |\n| 37   | -21846 |  1  |   45  | -21846 |\n| 37+  | -21846 |  0  |   40  |  21845 |\n| 38   | -21846 |  0  |   40  |  21845 |\n| 38   | -21846 |  0  |   41  |  21845 |\n| 38   | -21846 |  0  |   42  |  21845 |\n| 38   | -21846 |  0  |   43  |  21845 |\n| 38   | -21846 |  0  |   44  |  21845 |\n| 38   | -21846 |  0  |   45  | -21846 |\n| 38   | -21846 |  0  |   46  |  21845 |\n| 38   | -21846 |  0  |   47  |  21845 |\n| 38+  |  21845 |  1  |   45  | -21846 |\n| 39   |  21845 |  1  |   45  |  21845 |\n| 39+  | -21846 |  1  |   46  |  21845 |\n| 40   | -21846 |  1  |   46  | -21846 |\n| 40+  | -21846 |  0  |   40  |  21845 |\n| 41   | -21846 |  0  |   40  |  21845 |\n| 41   | -21846 |  0  |   41  |  21845 |\n| 41   | -21846 |  0  |   42  |  21845 |\n| 41   | -21846 |  0  |   43  |  21845 |\n| 41   | -21846 |  0  |   44  |  21845 |\n| 41   | -21846 |  0  |   45  |  21845 |\n| 41   | -21846 |  0  |   46  | -21846 |\n| 41   | -21846 |  0  |   47  |  21845 |\n| 41+  |  21845 |  1  |   46  | -21846 |\n| 42   |  21845 |  1  |   46  |  21845 |\n| 42+  | -21846 |  1  |   47  |  21845 |\n| 43   | -21846 |  1  |   47  | -21846 |\n| 43+  | -21846 |  0  |   40  |  21845 |\n| 44   | -21846 |  0  |   40  |  21845 |\n| 44   | -21846 |  0  |   41  |  21845 |\n| 44   | -21846 |  0  |   42  |  21845 |\n| 44   | -21846 |  0  |   43  |  21845 |\n| 44   | -21846 |  0  |   44  |  21845 |\n| 44   | -21846 |  0  |   45  |  21845 |\n| 44   | -21846 |  0  |   46  |  21845 |\n| 44   | -21846 |  0  |   47  | -21846 |\n| 44+  |  21845 |  1  |   47  | -21846 |\n| 45   |  21845 |  1  |   47  |  21845 |\n| 45+  |  21845 |  0  |   40  |  21845 |\n| 46   |  21845 |  0  |   40  |  21845 |\n| 46   |  21845 |  0  |   41  |  21845 |\n| 46   |  21845 |  0  |   42  |  21845 |\n| 46   |  21845 |  0  |   43  |  21845 |\n| 46   |  21845 |  0  |   44  |  21845 |\n| 46   |  21845 |  0  |   45  |  21845 |\n| 46   |  21845 |  0  |   46  |  21845 |\n| 46   |  21845 |  0  |   47  |  21845 |\n| 46+  |  21845 |  0  |    5  |      0 |\n| 47   |  21845 |  0  |    5  |      0 |\n| 47   |  21845 |  0  |   13  |   1313 |\n| 47   |  21845 |  0  |   21  |      0 |\n| 47   |  21845 |  0  |   29  |      0 |\n| 47   |  21845 |  0  |   37  |      0 |\n| 47   |  21845 |  0  |   45  |  21845 |\n| 47   |  21845 |  0  |   53  |      0 |\n| 47   |  21845 |  0  |   61  |      0 |\n| 47+  |  21845 |  1  |    5  |      0 |\n| 48   |  21845 |  1  |    5  |  21845 |\n| 48+  |  21845 |  1  |   13  |   1313 |\n| 49   |  21845 |  1  |   13  |  21845 |\n| 49+  |  21845 |  1  |   21  |      0 |\n| 50   |  21845 |  1  |   21  |  21845 |\n| 50+  |  21845 |  1  |   29  |      0 |\n| 51   |  21845 |  1  |   29  |  21845 |\n| 51+  |  21845 |  1  |   37  |      0 |\n| 52   |  21845 |  1  |   37  |  21845 |\n| 52+  |  21845 |  1  |   45  |  21845 |\n| 53   |  21845 |  1  |   45  |  21845 |\n| 53+  |  21845 |  1  |   53  |      0 |\n| 54   |  21845 |  1  |   53  |  21845 |\n| 54+  |  21845 |  1  |   61  |      0 |\n| 55   |  21845 |  1  |   61  |  21845 |\n| 55+  |  21845 |  0  |    5  |  21845 |\n| 56   |  21845 |  0  |    5  |  21845 |\n| 56   |  21845 |  0  |   13  |  21845 |\n| 56   |  21845 |  0  |   21  |  21845 |\n| 56   |  21845 |  0  |   29  |  21845 |\n| 56   |  21845 |  0  |   37  |  21845 |\n| 56   |  21845 |  0  |   45  |  21845 |\n| 56   |  21845 |  0  |   53  |  21845 |\n| 56   |  21845 |  0  |   61  |  21845 |\n| 56+  | -21846 |  1  |    5  |  21845 |\n| 57   | -21846 |  1  |    5  | -21846 |\n| 57+  | -21846 |  0  |    5  | -21846 |\n| 58   | -21846 |  0  |    5  | -21846 |\n| 58   | -21846 |  0  |   13  |  21845 |\n| 58   | -21846 |  0  |   21  |  21845 |\n| 58   | -21846 |  0  |   29  |  21845 |\n| 58   | -21846 |  0  |   37  |  21845 |\n| 58   | -21846 |  0  |   45  |  21845 |\n| 58   | -21846 |  0  |   53  |  21845 |\n| 58   | -21846 |  0  |   61  |  21845 |\n| 58+  |  21845 |  1  |    5  | -21846 |\n| 59   |  21845 |  1  |    5  |  21845 |\n| 59+  | -21846 |  1  |   13  |  21845 |\n| 60   | -21846 |  1  |   13  | -21846 |\n| 60+  | -21846 |  0  |    5  |  21845 |\n| 61   | -21846 |  0  |    5  |  21845 |\n| 61   | -21846 |  0  |   13  | -21846 |\n| 61   | -21846 |  0  |   21  |  21845 |\n| 61   | -21846 |  0  |   29  |  21845 |\n| 61   | -21846 |  0  |   37  |  21845 |\n| 61   | -21846 |  0  |   45  |  21845 |\n| 61   | -21846 |  0  |   53  |  21845 |\n| 61   | -21846 |  0  |   61  |  21845 |\n| 61+  |  21845 |  1  |   13  | -21846 |\n| 62   |  21845 |  1  |   13  |  21845 |\n| 62+  | -21846 |  1  |   21  |  21845 |\n| 63   | -21846 |  1  |   21  | -21846 |\n| 63+  | -21846 |  0  |    5  |  21845 |\n| 64   | -21846 |  0  |    5  |  21845 |\n| 64   | -21846 |  0  |   13  |  21845 |\n| 64   | -21846 |  0  |   21  | -21846 |\n| 64   | -21846 |  0  |   29  |  21845 |\n| 64   | -21846 |  0  |   37  |  21845 |\n| 64   | -21846 |  0  |   45  |  21845 |\n| 64   | -21846 |  0  |   53  |  21845 |\n| 64   | -21846 |  0  |   61  |  21845 |\n| 64+  |  21845 |  1  |   21  | -21846 |\n| 65   |  21845 |  1  |   21  |  21845 |\n| 65+  | -21846 |  1  |   29  |  21845 |\n| 66   | -21846 |  1  |   29  | -21846 |\n| 66+  | -21846 |  0  |    5  |  21845 |\n| 67   | -21846 |  0  |    5  |  21845 |\n| 67   | -21846 |  0  |   13  |  21845 |\n| 67   | -21846 |  0  |   21  |  21845 |\n| 67   | -21846 |  0  |   29  | -21846 |\n| 67   | -21846 |  0  |   37  |  21845 |\n| 67   | -21846 |  0  |   45  |  21845 |\n| 67   | -21846 |  0  |   53  |  21845 |\n| 67   | -21846 |  0  |   61  |  21845 |\n| 67+  |  21845 |  1  |   29  | -21846 |\n| 68   |  21845 |  1  |   29  |  21845 |\n| 68+  | -21846 |  1  |   37  |  21845 |\n| 69   | -21846 |  1  |   37  | -21846 |\n| 69+  | -21846 |  0  |    5  |  21845 |\n| 70   | -21846 |  0  |    5  |  21845 |\n| 70   | -21846 |  0  |   13  |  21845 |\n| 70   | -21846 |  0  |   21  |  21845 |\n| 70   | -21846 |  0  |   29  |  21845 |\n| 70   | -21846 |  0  |   37  | -21846 |\n| 70   | -21846 |  0  |   45  |  21845 |\n| 70   | -21846 |  0  |   53  |  21845 |\n| 70   | -21846 |  0  |   61  |  21845 |\n| 70+  |  21845 |  1  |   37  | -21846 |\n| 71   |  21845 |  1  |   37  |  21845 |\n| 71+  | -21846 |  1  |   45  |  21845 |\n| 72   | -21846 |  1  |   45  | -21846 |\n| 72+  | -21846 |  0  |    5  |  21845 |\n| 73   | -21846 |  0  |    5  |  21845 |\n| 73   | -21846 |  0  |   13  |  21845 |\n| 73   | -21846 |  0  |   21  |  21845 |\n| 73   | -21846 |  0  |   29  |  21845 |\n| 73   | -21846 |  0  |   37  |  21845 |\n| 73   | -21846 |  0  |   45  | -21846 |\n| 73   | -21846 |  0  |   53  |  21845 |\n| 73   | -21846 |  0  |   61  |  21845 |\n| 73+  |  21845 |  1  |   45  | -21846 |\n| 74   |  21845 |  1  |   45  |  21845 |\n| 74+  | -21846 |  1  |   53  |  21845 |\n| 75   | -21846 |  1  |   53  | -21846 |\n| 75+  | -21846 |  0  |    5  |  21845 |\n| 76   | -21846 |  0  |    5  |  21845 |\n| 76   | -21846 |  0  |   13  |  21845 |\n| 76   | -21846 |  0  |   21  |  21845 |\n| 76   | -21846 |  0  |   29  |  21845 |\n| 76   | -21846 |  0  |   37  |  21845 |\n| 76   | -21846 |  0  |   45  |  21845 |\n| 76   | -21846 |  0  |   53  | -21846 |\n| 76   | -21846 |  0  |   61  |  21845 |\n| 76+  |  21845 |  1  |   53  | -21846 |\n| 77   |  21845 |  1  |   53  |  21845 |\n| 77+  | -21846 |  1  |   61  |  21845 |\n| 78   | -21846 |  1  |   61  | -21846 |\n| 78+  | -21846 |  0  |    5  |  21845 |\n| 79   | -21846 |  0  |    5  |  21845 |\n| 79   | -21846 |  0  |   13  |  21845 |\n| 79   | -21846 |  0  |   21  |  21845 |\n| 79   | -21846 |  0  |   29  |  21845 |\n| 79   | -21846 |  0  |   37  |  21845 |\n| 79   | -21846 |  0  |   45  |  21845 |\n| 79   | -21846 |  0  |   53  |  21845 |\n| 79   | -21846 |  0  |   61  | -21846 |\n| 79+  |  21845 |  1  |   61  | -21846 |\n| 80   |  21845 |  1  |   61  |  21845 |\n| 80+  |  21845 |  0  |    5  |  21845 |\n| 81   |  21845 |  0  |    5  |  21845 |\n| 81   |  21845 |  0  |   13  |  21845 |\n| 81   |  21845 |  0  |   21  |  21845 |\n| 81   |  21845 |  0  |   29  |  21845 |\n| 81   |  21845 |  0  |   37  |  21845 |\n| 81   |  21845 |  0  |   45  |  21845 |\n| 81   |  21845 |  0  |   53  |  21845 |\n| 81   |  21845 |  0  |   61  |  21845 |`;\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/03/b/RAM512.hdl\n/**\n * Memory of 512 16-bit registers.\n * If load is asserted, the value of the register selected by\n * address is set to in; Otherwise, the value does not change.\n * The value of the selected register is emitted by out.\n */\nCHIP RAM512 {\n    IN in[16], load, address[9];\n    OUT out[16];\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const tst = `output-list time%S1.4.1 in%D1.6.1 load%B2.1.2 address%D2.3.2 out%D1.6.1;\n\nset in 0, set load 0, set address 0, tick, output; tock, output;\nset load 1, tick, output; tock, output;\n\nset in 13099, set load 0, tick, output; tock, output;\nset load 1, set address 130, tick, output; tock, output;\nset load 0, set address 0, tick, output; tock, output;\n\nset in 4729, set address 472, tick, output; tock, output;\nset load 1, tick, output; tock, output;\nset load 0, tick, output; tock, output;\nset address 130, eval, output;\n\nset in 5119, tick, output; tock, output;\nset load 1, set address 511, tick, output; tock, output;\nset load 0, tick, output; tock, output;\nset address 472, eval, output;\nset address 511, eval, output;\n\nset load 0,\nset address %B010101000, tick, output; tock, output;\nset address %B010101001, eval, output;\nset address %B010101010, eval, output;\nset address %B010101011, eval, output;\nset address %B010101100, eval, output;\nset address %B010101101, eval, output;\nset address %B010101110, eval, output;\nset address %B010101111, eval, output;\n\nset load 1,\nset in %B0101010101010101, set address %B010101000, tick, output; tock, output;\nset address %B010101001, tick, output, tock, output;\nset address %B010101010, tick, output, tock, output;\nset address %B010101011, tick, output, tock, output;\nset address %B010101100, tick, output, tock, output;\nset address %B010101101, tick, output, tock, output;\nset address %B010101110, tick, output, tock, output;\nset address %B010101111, tick, output, tock, output;\n\nset load 0,\nset address %B010101000, tick, output; tock, output;\nset address %B010101001, eval, output;\nset address %B010101010, eval, output;\nset address %B010101011, eval, output;\nset address %B010101100, eval, output;\nset address %B010101101, eval, output;\nset address %B010101110, eval, output;\nset address %B010101111, eval, output;\n\nset load 1,\nset address %B010101000, set in %B1010101010101010, tick, output; tock, output;\n\nset load 0,\nset address %B010101000, tick, output; tock, output;\nset address %B010101001, eval, output;\nset address %B010101010, eval, output;\nset address %B010101011, eval, output;\nset address %B010101100, eval, output;\nset address %B010101101, eval, output;\nset address %B010101110, eval, output;\nset address %B010101111, eval, output;\n\nset load 1,\nset address %B010101000, set in %B0101010101010101, tick, output, tock, output;\nset address %B010101001, set in %B1010101010101010, tick, output; tock, output;\n\nset load 0,\nset address %B010101000, tick, output; tock, output;\nset address %B010101001, eval, output;\nset address %B010101010, eval, output;\nset address %B010101011, eval, output;\nset address %B010101100, eval, output;\nset address %B010101101, eval, output;\nset address %B010101110, eval, output;\nset address %B010101111, eval, output;\n\nset load 1,\nset address %B010101001, set in %B0101010101010101, tick, output, tock, output;\nset address %B010101010, set in %B1010101010101010, tick, output; tock, output;\n\nset load 0,\nset address %B010101000, tick, output; tock, output;\nset address %B010101001, eval, output;\nset address %B010101010, eval, output;\nset address %B010101011, eval, output;\nset address %B010101100, eval, output;\nset address %B010101101, eval, output;\nset address %B010101110, eval, output;\nset address %B010101111, eval, output;\n\nset load 1,\nset address %B010101010, set in %B0101010101010101, tick, output, tock, output;\nset address %B010101011, set in %B1010101010101010, tick, output; tock, output;\n\nset load 0,\nset address %B010101000, tick, output; tock, output;\nset address %B010101001, eval, output;\nset address %B010101010, eval, output;\nset address %B010101011, eval, output;\nset address %B010101100, eval, output;\nset address %B010101101, eval, output;\nset address %B010101110, eval, output;\nset address %B010101111, eval, output;\n\nset load 1,\nset address %B010101011, set in %B0101010101010101, tick, output, tock, output;\nset address %B010101100, set in %B1010101010101010, tick, output; tock, output;\n\nset load 0,\nset address %B010101000, tick, output; tock, output;\nset address %B010101001, eval, output;\nset address %B010101010, eval, output;\nset address %B010101011, eval, output;\nset address %B010101100, eval, output;\nset address %B010101101, eval, output;\nset address %B010101110, eval, output;\nset address %B010101111, eval, output;\n\nset load 1,\nset address %B010101100, set in %B0101010101010101, tick, output, tock, output;\nset address %B010101101, set in %B1010101010101010, tick, output; tock, output;\n\nset load 0,\nset address %B010101000, tick, output; tock, output;\nset address %B010101001, eval, output;\nset address %B010101010, eval, output;\nset address %B010101011, eval, output;\nset address %B010101100, eval, output;\nset address %B010101101, eval, output;\nset address %B010101110, eval, output;\nset address %B010101111, eval, output;\n\nset load 1,\nset address %B010101101, set in %B0101010101010101, tick, output, tock, output;\nset address %B010101110, set in %B1010101010101010, tick, output; tock, output;\n\nset load 0,\nset address %B010101000, tick, output; tock, output;\nset address %B010101001, eval, output;\nset address %B010101010, eval, output;\nset address %B010101011, eval, output;\nset address %B010101100, eval, output;\nset address %B010101101, eval, output;\nset address %B010101110, eval, output;\nset address %B010101111, eval, output;\n\nset load 1,\nset address %B010101110, set in %B0101010101010101, tick, output, tock, output;\nset address %B010101111, set in %B1010101010101010, tick, output; tock, output;\n\nset load 0,\nset address %B010101000, tick, output; tock, output;\nset address %B010101001, eval, output;\nset address %B010101010, eval, output;\nset address %B010101011, eval, output;\nset address %B010101100, eval, output;\nset address %B010101101, eval, output;\nset address %B010101110, eval, output;\nset address %B010101111, eval, output;\n\nset load 1,\nset address %B010101111, set in %B0101010101010101, tick, output, tock, output;\n\nset load 0,\nset address %B010101000, tick, output; tock, output;\nset address %B010101001, eval, output;\nset address %B010101010, eval, output;\nset address %B010101011, eval, output;\nset address %B010101100, eval, output;\nset address %B010101101, eval, output;\nset address %B010101110, eval, output;\nset address %B010101111, eval, output;\n\n\nset load 0,\nset address %B000101010, tick, output; tock, output;\nset address %B001101010, eval, output;\nset address %B010101010, eval, output;\nset address %B011101010, eval, output;\nset address %B100101010, eval, output;\nset address %B101101010, eval, output;\nset address %B110101010, eval, output;\nset address %B111101010, eval, output;\n\nset load 1,\nset in %B0101010101010101, set address %B000101010, tick, output; tock, output;\nset address %B001101010, tick, output, tock, output;\nset address %B010101010, tick, output, tock, output;\nset address %B011101010, tick, output, tock, output;\nset address %B100101010, tick, output, tock, output;\nset address %B101101010, tick, output, tock, output;\nset address %B110101010, tick, output, tock, output;\nset address %B111101010, tick, output, tock, output;\n\nset load 0,\nset address %B000101010, tick, output; tock, output;\nset address %B001101010, eval, output;\nset address %B010101010, eval, output;\nset address %B011101010, eval, output;\nset address %B100101010, eval, output;\nset address %B101101010, eval, output;\nset address %B110101010, eval, output;\nset address %B111101010, eval, output;\n\nset load 1,\nset address %B000101010, set in %B1010101010101010, tick, output; tock, output;\n\nset load 0,\nset address %B000101010, tick, output; tock, output;\nset address %B001101010, eval, output;\nset address %B010101010, eval, output;\nset address %B011101010, eval, output;\nset address %B100101010, eval, output;\nset address %B101101010, eval, output;\nset address %B110101010, eval, output;\nset address %B111101010, eval, output;\n\nset load 1,\nset address %B000101010, set in %B0101010101010101, tick, output, tock, output;\nset address %B001101010, set in %B1010101010101010, tick, output; tock, output;\n\nset load 0,\nset address %B000101010, tick, output; tock, output;\nset address %B001101010, eval, output;\nset address %B010101010, eval, output;\nset address %B011101010, eval, output;\nset address %B100101010, eval, output;\nset address %B101101010, eval, output;\nset address %B110101010, eval, output;\nset address %B111101010, eval, output;\n\nset load 1,\nset address %B001101010, set in %B0101010101010101, tick, output, tock, output;\nset address %B010101010, set in %B1010101010101010, tick, output; tock, output;\n\nset load 0,\nset address %B000101010, tick, output; tock, output;\nset address %B001101010, eval, output;\nset address %B010101010, eval, output;\nset address %B011101010, eval, output;\nset address %B100101010, eval, output;\nset address %B101101010, eval, output;\nset address %B110101010, eval, output;\nset address %B111101010, eval, output;\n\nset load 1,\nset address %B010101010, set in %B0101010101010101, tick, output, tock, output;\nset address %B011101010, set in %B1010101010101010, tick, output; tock, output;\n\nset load 0,\nset address %B000101010, tick, output; tock, output;\nset address %B001101010, eval, output;\nset address %B010101010, eval, output;\nset address %B011101010, eval, output;\nset address %B100101010, eval, output;\nset address %B101101010, eval, output;\nset address %B110101010, eval, output;\nset address %B111101010, eval, output;\n\nset load 1,\nset address %B011101010, set in %B0101010101010101, tick, output, tock, output;\nset address %B100101010, set in %B1010101010101010, tick, output; tock, output;\n\nset load 0,\nset address %B000101010, tick, output; tock, output;\nset address %B001101010, eval, output;\nset address %B010101010, eval, output;\nset address %B011101010, eval, output;\nset address %B100101010, eval, output;\nset address %B101101010, eval, output;\nset address %B110101010, eval, output;\nset address %B111101010, eval, output;\n\nset load 1,\nset address %B100101010, set in %B0101010101010101, tick, output, tock, output;\nset address %B101101010, set in %B1010101010101010, tick, output; tock, output;\n\nset load 0,\nset address %B000101010, tick, output; tock, output;\nset address %B001101010, eval, output;\nset address %B010101010, eval, output;\nset address %B011101010, eval, output;\nset address %B100101010, eval, output;\nset address %B101101010, eval, output;\nset address %B110101010, eval, output;\nset address %B111101010, eval, output;\n\nset load 1,\nset address %B101101010, set in %B0101010101010101, tick, output, tock, output;\nset address %B110101010, set in %B1010101010101010, tick, output; tock, output;\n\nset load 0,\nset address %B000101010, tick, output; tock, output;\nset address %B001101010, eval, output;\nset address %B010101010, eval, output;\nset address %B011101010, eval, output;\nset address %B100101010, eval, output;\nset address %B101101010, eval, output;\nset address %B110101010, eval, output;\nset address %B111101010, eval, output;\n\nset load 1,\nset address %B110101010, set in %B0101010101010101, tick, output, tock, output;\nset address %B111101010, set in %B1010101010101010, tick, output; tock, output;\n\nset load 0,\nset address %B000101010, tick, output; tock, output;\nset address %B001101010, eval, output;\nset address %B010101010, eval, output;\nset address %B011101010, eval, output;\nset address %B100101010, eval, output;\nset address %B101101010, eval, output;\nset address %B110101010, eval, output;\nset address %B111101010, eval, output;\n\nset load 1,\nset address %B111101010, set in %B0101010101010101, tick, output, tock, output;\n\nset load 0,\nset address %B000101010, tick, output; tock, output;\nset address %B001101010, eval, output;\nset address %B010101010, eval, output;\nset address %B011101010, eval, output;\nset address %B100101010, eval, output;\nset address %B101101010, eval, output;\nset address %B110101010, eval, output;\nset address %B111101010, eval, output;`;\nexport const cmp = `| time |   in   |load |address|  out   |\n| 0+   |      0 |  0  |    0  |      0 |\n| 1    |      0 |  0  |    0  |      0 |\n| 1+   |      0 |  1  |    0  |      0 |\n| 2    |      0 |  1  |    0  |      0 |\n| 2+   |  13099 |  0  |    0  |      0 |\n| 3    |  13099 |  0  |    0  |      0 |\n| 3+   |  13099 |  1  |  130  |      0 |\n| 4    |  13099 |  1  |  130  |  13099 |\n| 4+   |  13099 |  0  |    0  |      0 |\n| 5    |  13099 |  0  |    0  |      0 |\n| 5+   |   4729 |  0  |  472  |      0 |\n| 6    |   4729 |  0  |  472  |      0 |\n| 6+   |   4729 |  1  |  472  |      0 |\n| 7    |   4729 |  1  |  472  |   4729 |\n| 7+   |   4729 |  0  |  472  |   4729 |\n| 8    |   4729 |  0  |  472  |   4729 |\n| 8    |   4729 |  0  |  130  |  13099 |\n| 8+   |   5119 |  0  |  130  |  13099 |\n| 9    |   5119 |  0  |  130  |  13099 |\n| 9+   |   5119 |  1  |  511  |      0 |\n| 10   |   5119 |  1  |  511  |   5119 |\n| 10+  |   5119 |  0  |  511  |   5119 |\n| 11   |   5119 |  0  |  511  |   5119 |\n| 11   |   5119 |  0  |  472  |   4729 |\n| 11   |   5119 |  0  |  511  |   5119 |\n| 11+  |   5119 |  0  |  168  |      0 |\n| 12   |   5119 |  0  |  168  |      0 |\n| 12   |   5119 |  0  |  169  |      0 |\n| 12   |   5119 |  0  |  170  |      0 |\n| 12   |   5119 |  0  |  171  |      0 |\n| 12   |   5119 |  0  |  172  |      0 |\n| 12   |   5119 |  0  |  173  |      0 |\n| 12   |   5119 |  0  |  174  |      0 |\n| 12   |   5119 |  0  |  175  |      0 |\n| 12+  |  21845 |  1  |  168  |      0 |\n| 13   |  21845 |  1  |  168  |  21845 |\n| 13+  |  21845 |  1  |  169  |      0 |\n| 14   |  21845 |  1  |  169  |  21845 |\n| 14+  |  21845 |  1  |  170  |      0 |\n| 15   |  21845 |  1  |  170  |  21845 |\n| 15+  |  21845 |  1  |  171  |      0 |\n| 16   |  21845 |  1  |  171  |  21845 |\n| 16+  |  21845 |  1  |  172  |      0 |\n| 17   |  21845 |  1  |  172  |  21845 |\n| 17+  |  21845 |  1  |  173  |      0 |\n| 18   |  21845 |  1  |  173  |  21845 |\n| 18+  |  21845 |  1  |  174  |      0 |\n| 19   |  21845 |  1  |  174  |  21845 |\n| 19+  |  21845 |  1  |  175  |      0 |\n| 20   |  21845 |  1  |  175  |  21845 |\n| 20+  |  21845 |  0  |  168  |  21845 |\n| 21   |  21845 |  0  |  168  |  21845 |\n| 21   |  21845 |  0  |  169  |  21845 |\n| 21   |  21845 |  0  |  170  |  21845 |\n| 21   |  21845 |  0  |  171  |  21845 |\n| 21   |  21845 |  0  |  172  |  21845 |\n| 21   |  21845 |  0  |  173  |  21845 |\n| 21   |  21845 |  0  |  174  |  21845 |\n| 21   |  21845 |  0  |  175  |  21845 |\n| 21+  | -21846 |  1  |  168  |  21845 |\n| 22   | -21846 |  1  |  168  | -21846 |\n| 22+  | -21846 |  0  |  168  | -21846 |\n| 23   | -21846 |  0  |  168  | -21846 |\n| 23   | -21846 |  0  |  169  |  21845 |\n| 23   | -21846 |  0  |  170  |  21845 |\n| 23   | -21846 |  0  |  171  |  21845 |\n| 23   | -21846 |  0  |  172  |  21845 |\n| 23   | -21846 |  0  |  173  |  21845 |\n| 23   | -21846 |  0  |  174  |  21845 |\n| 23   | -21846 |  0  |  175  |  21845 |\n| 23+  |  21845 |  1  |  168  | -21846 |\n| 24   |  21845 |  1  |  168  |  21845 |\n| 24+  | -21846 |  1  |  169  |  21845 |\n| 25   | -21846 |  1  |  169  | -21846 |\n| 25+  | -21846 |  0  |  168  |  21845 |\n| 26   | -21846 |  0  |  168  |  21845 |\n| 26   | -21846 |  0  |  169  | -21846 |\n| 26   | -21846 |  0  |  170  |  21845 |\n| 26   | -21846 |  0  |  171  |  21845 |\n| 26   | -21846 |  0  |  172  |  21845 |\n| 26   | -21846 |  0  |  173  |  21845 |\n| 26   | -21846 |  0  |  174  |  21845 |\n| 26   | -21846 |  0  |  175  |  21845 |\n| 26+  |  21845 |  1  |  169  | -21846 |\n| 27   |  21845 |  1  |  169  |  21845 |\n| 27+  | -21846 |  1  |  170  |  21845 |\n| 28   | -21846 |  1  |  170  | -21846 |\n| 28+  | -21846 |  0  |  168  |  21845 |\n| 29   | -21846 |  0  |  168  |  21845 |\n| 29   | -21846 |  0  |  169  |  21845 |\n| 29   | -21846 |  0  |  170  | -21846 |\n| 29   | -21846 |  0  |  171  |  21845 |\n| 29   | -21846 |  0  |  172  |  21845 |\n| 29   | -21846 |  0  |  173  |  21845 |\n| 29   | -21846 |  0  |  174  |  21845 |\n| 29   | -21846 |  0  |  175  |  21845 |\n| 29+  |  21845 |  1  |  170  | -21846 |\n| 30   |  21845 |  1  |  170  |  21845 |\n| 30+  | -21846 |  1  |  171  |  21845 |\n| 31   | -21846 |  1  |  171  | -21846 |\n| 31+  | -21846 |  0  |  168  |  21845 |\n| 32   | -21846 |  0  |  168  |  21845 |\n| 32   | -21846 |  0  |  169  |  21845 |\n| 32   | -21846 |  0  |  170  |  21845 |\n| 32   | -21846 |  0  |  171  | -21846 |\n| 32   | -21846 |  0  |  172  |  21845 |\n| 32   | -21846 |  0  |  173  |  21845 |\n| 32   | -21846 |  0  |  174  |  21845 |\n| 32   | -21846 |  0  |  175  |  21845 |\n| 32+  |  21845 |  1  |  171  | -21846 |\n| 33   |  21845 |  1  |  171  |  21845 |\n| 33+  | -21846 |  1  |  172  |  21845 |\n| 34   | -21846 |  1  |  172  | -21846 |\n| 34+  | -21846 |  0  |  168  |  21845 |\n| 35   | -21846 |  0  |  168  |  21845 |\n| 35   | -21846 |  0  |  169  |  21845 |\n| 35   | -21846 |  0  |  170  |  21845 |\n| 35   | -21846 |  0  |  171  |  21845 |\n| 35   | -21846 |  0  |  172  | -21846 |\n| 35   | -21846 |  0  |  173  |  21845 |\n| 35   | -21846 |  0  |  174  |  21845 |\n| 35   | -21846 |  0  |  175  |  21845 |\n| 35+  |  21845 |  1  |  172  | -21846 |\n| 36   |  21845 |  1  |  172  |  21845 |\n| 36+  | -21846 |  1  |  173  |  21845 |\n| 37   | -21846 |  1  |  173  | -21846 |\n| 37+  | -21846 |  0  |  168  |  21845 |\n| 38   | -21846 |  0  |  168  |  21845 |\n| 38   | -21846 |  0  |  169  |  21845 |\n| 38   | -21846 |  0  |  170  |  21845 |\n| 38   | -21846 |  0  |  171  |  21845 |\n| 38   | -21846 |  0  |  172  |  21845 |\n| 38   | -21846 |  0  |  173  | -21846 |\n| 38   | -21846 |  0  |  174  |  21845 |\n| 38   | -21846 |  0  |  175  |  21845 |\n| 38+  |  21845 |  1  |  173  | -21846 |\n| 39   |  21845 |  1  |  173  |  21845 |\n| 39+  | -21846 |  1  |  174  |  21845 |\n| 40   | -21846 |  1  |  174  | -21846 |\n| 40+  | -21846 |  0  |  168  |  21845 |\n| 41   | -21846 |  0  |  168  |  21845 |\n| 41   | -21846 |  0  |  169  |  21845 |\n| 41   | -21846 |  0  |  170  |  21845 |\n| 41   | -21846 |  0  |  171  |  21845 |\n| 41   | -21846 |  0  |  172  |  21845 |\n| 41   | -21846 |  0  |  173  |  21845 |\n| 41   | -21846 |  0  |  174  | -21846 |\n| 41   | -21846 |  0  |  175  |  21845 |\n| 41+  |  21845 |  1  |  174  | -21846 |\n| 42   |  21845 |  1  |  174  |  21845 |\n| 42+  | -21846 |  1  |  175  |  21845 |\n| 43   | -21846 |  1  |  175  | -21846 |\n| 43+  | -21846 |  0  |  168  |  21845 |\n| 44   | -21846 |  0  |  168  |  21845 |\n| 44   | -21846 |  0  |  169  |  21845 |\n| 44   | -21846 |  0  |  170  |  21845 |\n| 44   | -21846 |  0  |  171  |  21845 |\n| 44   | -21846 |  0  |  172  |  21845 |\n| 44   | -21846 |  0  |  173  |  21845 |\n| 44   | -21846 |  0  |  174  |  21845 |\n| 44   | -21846 |  0  |  175  | -21846 |\n| 44+  |  21845 |  1  |  175  | -21846 |\n| 45   |  21845 |  1  |  175  |  21845 |\n| 45+  |  21845 |  0  |  168  |  21845 |\n| 46   |  21845 |  0  |  168  |  21845 |\n| 46   |  21845 |  0  |  169  |  21845 |\n| 46   |  21845 |  0  |  170  |  21845 |\n| 46   |  21845 |  0  |  171  |  21845 |\n| 46   |  21845 |  0  |  172  |  21845 |\n| 46   |  21845 |  0  |  173  |  21845 |\n| 46   |  21845 |  0  |  174  |  21845 |\n| 46   |  21845 |  0  |  175  |  21845 |\n| 46+  |  21845 |  0  |   42  |      0 |\n| 47   |  21845 |  0  |   42  |      0 |\n| 47   |  21845 |  0  |  106  |      0 |\n| 47   |  21845 |  0  |  170  |  21845 |\n| 47   |  21845 |  0  |  234  |      0 |\n| 47   |  21845 |  0  |  298  |      0 |\n| 47   |  21845 |  0  |  362  |      0 |\n| 47   |  21845 |  0  |  426  |      0 |\n| 47   |  21845 |  0  |  490  |      0 |\n| 47+  |  21845 |  1  |   42  |      0 |\n| 48   |  21845 |  1  |   42  |  21845 |\n| 48+  |  21845 |  1  |  106  |      0 |\n| 49   |  21845 |  1  |  106  |  21845 |\n| 49+  |  21845 |  1  |  170  |  21845 |\n| 50   |  21845 |  1  |  170  |  21845 |\n| 50+  |  21845 |  1  |  234  |      0 |\n| 51   |  21845 |  1  |  234  |  21845 |\n| 51+  |  21845 |  1  |  298  |      0 |\n| 52   |  21845 |  1  |  298  |  21845 |\n| 52+  |  21845 |  1  |  362  |      0 |\n| 53   |  21845 |  1  |  362  |  21845 |\n| 53+  |  21845 |  1  |  426  |      0 |\n| 54   |  21845 |  1  |  426  |  21845 |\n| 54+  |  21845 |  1  |  490  |      0 |\n| 55   |  21845 |  1  |  490  |  21845 |\n| 55+  |  21845 |  0  |   42  |  21845 |\n| 56   |  21845 |  0  |   42  |  21845 |\n| 56   |  21845 |  0  |  106  |  21845 |\n| 56   |  21845 |  0  |  170  |  21845 |\n| 56   |  21845 |  0  |  234  |  21845 |\n| 56   |  21845 |  0  |  298  |  21845 |\n| 56   |  21845 |  0  |  362  |  21845 |\n| 56   |  21845 |  0  |  426  |  21845 |\n| 56   |  21845 |  0  |  490  |  21845 |\n| 56+  | -21846 |  1  |   42  |  21845 |\n| 57   | -21846 |  1  |   42  | -21846 |\n| 57+  | -21846 |  0  |   42  | -21846 |\n| 58   | -21846 |  0  |   42  | -21846 |\n| 58   | -21846 |  0  |  106  |  21845 |\n| 58   | -21846 |  0  |  170  |  21845 |\n| 58   | -21846 |  0  |  234  |  21845 |\n| 58   | -21846 |  0  |  298  |  21845 |\n| 58   | -21846 |  0  |  362  |  21845 |\n| 58   | -21846 |  0  |  426  |  21845 |\n| 58   | -21846 |  0  |  490  |  21845 |\n| 58+  |  21845 |  1  |   42  | -21846 |\n| 59   |  21845 |  1  |   42  |  21845 |\n| 59+  | -21846 |  1  |  106  |  21845 |\n| 60   | -21846 |  1  |  106  | -21846 |\n| 60+  | -21846 |  0  |   42  |  21845 |\n| 61   | -21846 |  0  |   42  |  21845 |\n| 61   | -21846 |  0  |  106  | -21846 |\n| 61   | -21846 |  0  |  170  |  21845 |\n| 61   | -21846 |  0  |  234  |  21845 |\n| 61   | -21846 |  0  |  298  |  21845 |\n| 61   | -21846 |  0  |  362  |  21845 |\n| 61   | -21846 |  0  |  426  |  21845 |\n| 61   | -21846 |  0  |  490  |  21845 |\n| 61+  |  21845 |  1  |  106  | -21846 |\n| 62   |  21845 |  1  |  106  |  21845 |\n| 62+  | -21846 |  1  |  170  |  21845 |\n| 63   | -21846 |  1  |  170  | -21846 |\n| 63+  | -21846 |  0  |   42  |  21845 |\n| 64   | -21846 |  0  |   42  |  21845 |\n| 64   | -21846 |  0  |  106  |  21845 |\n| 64   | -21846 |  0  |  170  | -21846 |\n| 64   | -21846 |  0  |  234  |  21845 |\n| 64   | -21846 |  0  |  298  |  21845 |\n| 64   | -21846 |  0  |  362  |  21845 |\n| 64   | -21846 |  0  |  426  |  21845 |\n| 64   | -21846 |  0  |  490  |  21845 |\n| 64+  |  21845 |  1  |  170  | -21846 |\n| 65   |  21845 |  1  |  170  |  21845 |\n| 65+  | -21846 |  1  |  234  |  21845 |\n| 66   | -21846 |  1  |  234  | -21846 |\n| 66+  | -21846 |  0  |   42  |  21845 |\n| 67   | -21846 |  0  |   42  |  21845 |\n| 67   | -21846 |  0  |  106  |  21845 |\n| 67   | -21846 |  0  |  170  |  21845 |\n| 67   | -21846 |  0  |  234  | -21846 |\n| 67   | -21846 |  0  |  298  |  21845 |\n| 67   | -21846 |  0  |  362  |  21845 |\n| 67   | -21846 |  0  |  426  |  21845 |\n| 67   | -21846 |  0  |  490  |  21845 |\n| 67+  |  21845 |  1  |  234  | -21846 |\n| 68   |  21845 |  1  |  234  |  21845 |\n| 68+  | -21846 |  1  |  298  |  21845 |\n| 69   | -21846 |  1  |  298  | -21846 |\n| 69+  | -21846 |  0  |   42  |  21845 |\n| 70   | -21846 |  0  |   42  |  21845 |\n| 70   | -21846 |  0  |  106  |  21845 |\n| 70   | -21846 |  0  |  170  |  21845 |\n| 70   | -21846 |  0  |  234  |  21845 |\n| 70   | -21846 |  0  |  298  | -21846 |\n| 70   | -21846 |  0  |  362  |  21845 |\n| 70   | -21846 |  0  |  426  |  21845 |\n| 70   | -21846 |  0  |  490  |  21845 |\n| 70+  |  21845 |  1  |  298  | -21846 |\n| 71   |  21845 |  1  |  298  |  21845 |\n| 71+  | -21846 |  1  |  362  |  21845 |\n| 72   | -21846 |  1  |  362  | -21846 |\n| 72+  | -21846 |  0  |   42  |  21845 |\n| 73   | -21846 |  0  |   42  |  21845 |\n| 73   | -21846 |  0  |  106  |  21845 |\n| 73   | -21846 |  0  |  170  |  21845 |\n| 73   | -21846 |  0  |  234  |  21845 |\n| 73   | -21846 |  0  |  298  |  21845 |\n| 73   | -21846 |  0  |  362  | -21846 |\n| 73   | -21846 |  0  |  426  |  21845 |\n| 73   | -21846 |  0  |  490  |  21845 |\n| 73+  |  21845 |  1  |  362  | -21846 |\n| 74   |  21845 |  1  |  362  |  21845 |\n| 74+  | -21846 |  1  |  426  |  21845 |\n| 75   | -21846 |  1  |  426  | -21846 |\n| 75+  | -21846 |  0  |   42  |  21845 |\n| 76   | -21846 |  0  |   42  |  21845 |\n| 76   | -21846 |  0  |  106  |  21845 |\n| 76   | -21846 |  0  |  170  |  21845 |\n| 76   | -21846 |  0  |  234  |  21845 |\n| 76   | -21846 |  0  |  298  |  21845 |\n| 76   | -21846 |  0  |  362  |  21845 |\n| 76   | -21846 |  0  |  426  | -21846 |\n| 76   | -21846 |  0  |  490  |  21845 |\n| 76+  |  21845 |  1  |  426  | -21846 |\n| 77   |  21845 |  1  |  426  |  21845 |\n| 77+  | -21846 |  1  |  490  |  21845 |\n| 78   | -21846 |  1  |  490  | -21846 |\n| 78+  | -21846 |  0  |   42  |  21845 |\n| 79   | -21846 |  0  |   42  |  21845 |\n| 79   | -21846 |  0  |  106  |  21845 |\n| 79   | -21846 |  0  |  170  |  21845 |\n| 79   | -21846 |  0  |  234  |  21845 |\n| 79   | -21846 |  0  |  298  |  21845 |\n| 79   | -21846 |  0  |  362  |  21845 |\n| 79   | -21846 |  0  |  426  |  21845 |\n| 79   | -21846 |  0  |  490  | -21846 |\n| 79+  |  21845 |  1  |  490  | -21846 |\n| 80   |  21845 |  1  |  490  |  21845 |\n| 80+  |  21845 |  0  |   42  |  21845 |\n| 81   |  21845 |  0  |   42  |  21845 |\n| 81   |  21845 |  0  |  106  |  21845 |\n| 81   |  21845 |  0  |  170  |  21845 |\n| 81   |  21845 |  0  |  234  |  21845 |\n| 81   |  21845 |  0  |  298  |  21845 |\n| 81   |  21845 |  0  |  362  |  21845 |\n| 81   |  21845 |  0  |  426  |  21845 |\n| 81   |  21845 |  0  |  490  |  21845 |`;\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/03/b/RAM4K.hdl\n/**\n * Memory of 4K 16-bit registers.\n * If load is asserted, the value of the register selected by\n * address is set to in; Otherwise, the value does not change.\n * The value of the selected register is emitted by out.\n */\nCHIP RAM4K {\n    IN in[16], load, address[12];\n    OUT out[16];\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const tst = `output-list time%S1.4.1 in%D1.6.1 load%B2.1.2 address%D2.4.2 out%D1.6.1;\n\nset in 0, set load 0, set address 0, tick, output; tock, output;\nset load 1, tick, output; tock, output;\nset in 1111, set load 0, tick, output; tock, output;\nset load 1, set address 1111, tick, output; tock, output;\nset load 0, set address 0, tick, output; tock, output;\nset in 3513, set address 3513, tick, output; tock, output;\nset load 1, tick, output; tock, output;\nset load 0, tick, output; tock, output;\nset address 1111, eval, output;\n\nset in 4095, tick, output; tock, output;\nset load 1, set address 4095, tick, output; tock, output;\nset load 0, tick, output; tock, output;\nset address 3513, eval, output;\n\nset address 4095, eval, output;\n\nset load 0,\nset address %B101010101000, tick, output; tock, output;\nset address %B101010101001, eval, output;\nset address %B101010101010, eval, output;\nset address %B101010101011, eval, output;\nset address %B101010101100, eval, output;\nset address %B101010101101, eval, output;\nset address %B101010101110, eval, output;\nset address %B101010101111, eval, output;\n\nset load 1,\nset in %B0101010101010101, set address %B101010101000, tick, output; tock, output;\nset address %B101010101001, tick, output, tock, output;\nset address %B101010101010, tick, output, tock, output;\nset address %B101010101011, tick, output, tock, output;\nset address %B101010101100, tick, output, tock, output;\nset address %B101010101101, tick, output, tock, output;\nset address %B101010101110, tick, output, tock, output;\nset address %B101010101111, tick, output, tock, output;\n\nset load 0,\nset address %B101010101000, tick, output; tock, output;\nset address %B101010101001, eval, output;\nset address %B101010101010, eval, output;\nset address %B101010101011, eval, output;\nset address %B101010101100, eval, output;\nset address %B101010101101, eval, output;\nset address %B101010101110, eval, output;\nset address %B101010101111, eval, output;\n\nset load 1,\nset address %B101010101000, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B101010101000, tick, output; tock, output;\nset address %B101010101001, eval, output;\nset address %B101010101010, eval, output;\nset address %B101010101011, eval, output;\nset address %B101010101100, eval, output;\nset address %B101010101101, eval, output;\nset address %B101010101110, eval, output;\nset address %B101010101111, eval, output;\n\nset load 1,\nset address %B101010101000, set in %B0101010101010101, tick, output, tock, output;\nset address %B101010101001, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B101010101000, tick, output; tock, output;\nset address %B101010101001, eval, output;\nset address %B101010101010, eval, output;\nset address %B101010101011, eval, output;\nset address %B101010101100, eval, output;\nset address %B101010101101, eval, output;\nset address %B101010101110, eval, output;\nset address %B101010101111, eval, output;\n\nset load 1,\nset address %B101010101001, set in %B0101010101010101, tick, output, tock, output;\nset address %B101010101010, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B101010101000, tick, output; tock, output;\nset address %B101010101001, eval, output;\nset address %B101010101010, eval, output;\nset address %B101010101011, eval, output;\nset address %B101010101100, eval, output;\nset address %B101010101101, eval, output;\nset address %B101010101110, eval, output;\nset address %B101010101111, eval, output;\n\nset load 1,\nset address %B101010101010, set in %B0101010101010101, tick, output, tock, output;\nset address %B101010101011, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B101010101000, tick, output; tock, output;\nset address %B101010101001, eval, output;\nset address %B101010101010, eval, output;\nset address %B101010101011, eval, output;\nset address %B101010101100, eval, output;\nset address %B101010101101, eval, output;\nset address %B101010101110, eval, output;\nset address %B101010101111, eval, output;\n\nset load 1,\nset address %B101010101011, set in %B0101010101010101, tick, output, tock, output;\nset address %B101010101100, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B101010101000, tick, output; tock, output;\nset address %B101010101001, eval, output;\nset address %B101010101010, eval, output;\nset address %B101010101011, eval, output;\nset address %B101010101100, eval, output;\nset address %B101010101101, eval, output;\nset address %B101010101110, eval, output;\nset address %B101010101111, eval, output;\n\nset load 1,\nset address %B101010101100, set in %B0101010101010101, tick, output, tock, output;\nset address %B101010101101, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B101010101000, tick, output; tock, output;\nset address %B101010101001, eval, output;\nset address %B101010101010, eval, output;\nset address %B101010101011, eval, output;\nset address %B101010101100, eval, output;\nset address %B101010101101, eval, output;\nset address %B101010101110, eval, output;\nset address %B101010101111, eval, output;\n\nset load 1,\nset address %B101010101101, set in %B0101010101010101, tick, output, tock, output;\nset address %B101010101110, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B101010101000, tick, output; tock, output;\nset address %B101010101001, eval, output;\nset address %B101010101010, eval, output;\nset address %B101010101011, eval, output;\nset address %B101010101100, eval, output;\nset address %B101010101101, eval, output;\nset address %B101010101110, eval, output;\nset address %B101010101111, eval, output;\n\nset load 1,\nset address %B101010101110, set in %B0101010101010101, tick, output, tock, output;\nset address %B101010101111, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B101010101000, tick, output; tock, output;\nset address %B101010101001, eval, output;\nset address %B101010101010, eval, output;\nset address %B101010101011, eval, output;\nset address %B101010101100, eval, output;\nset address %B101010101101, eval, output;\nset address %B101010101110, eval, output;\nset address %B101010101111, eval, output;\n\nset load 1,\nset address %B101010101111, set in %B0101010101010101, tick, output, tock, output;\n\nset load 0,\nset address %B101010101000, tick, output; tock, output;\nset address %B101010101001, eval, output;\nset address %B101010101010, eval, output;\nset address %B101010101011, eval, output;\nset address %B101010101100, eval, output;\nset address %B101010101101, eval, output;\nset address %B101010101110, eval, output;\nset address %B101010101111, eval, output;\n\nset load 0,\nset address %B000101010101, tick, output; tock, output;\nset address %B001101010101, eval, output;\nset address %B010101010101, eval, output;\nset address %B011101010101, eval, output;\nset address %B100101010101, eval, output;\nset address %B101101010101, eval, output;\nset address %B110101010101, eval, output;\nset address %B111101010101, eval, output;\n\nset load 1,\nset in %B0101010101010101, set address %B000101010101, tick, output; tock, output;\nset address %B001101010101, tick, output, tock, output;\nset address %B010101010101, tick, output, tock, output;\nset address %B011101010101, tick, output, tock, output;\nset address %B100101010101, tick, output, tock, output;\nset address %B101101010101, tick, output, tock, output;\nset address %B110101010101, tick, output, tock, output;\nset address %B111101010101, tick, output, tock, output;\n\nset load 0,\nset address %B000101010101, tick, output; tock, output;\nset address %B001101010101, eval, output;\nset address %B010101010101, eval, output;\nset address %B011101010101, eval, output;\nset address %B100101010101, eval, output;\nset address %B101101010101, eval, output;\nset address %B110101010101, eval, output;\nset address %B111101010101, eval, output;\n\nset load 1,\nset address %B000101010101, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B000101010101, tick, output; tock, output;\nset address %B001101010101, eval, output;\nset address %B010101010101, eval, output;\nset address %B011101010101, eval, output;\nset address %B100101010101, eval, output;\nset address %B101101010101, eval, output;\nset address %B110101010101, eval, output;\nset address %B111101010101, eval, output;\n\nset load 1,\nset address %B000101010101, set in %B0101010101010101, tick, output, tock, output;\nset address %B001101010101, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B000101010101, tick, output; tock, output;\nset address %B001101010101, eval, output;\nset address %B010101010101, eval, output;\nset address %B011101010101, eval, output;\nset address %B100101010101, eval, output;\nset address %B101101010101, eval, output;\nset address %B110101010101, eval, output;\nset address %B111101010101, eval, output;\n\nset load 1,\nset address %B001101010101, set in %B0101010101010101, tick, output, tock, output;\nset address %B010101010101, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B000101010101, tick, output; tock, output;\nset address %B001101010101, eval, output;\nset address %B010101010101, eval, output;\nset address %B011101010101, eval, output;\nset address %B100101010101, eval, output;\nset address %B101101010101, eval, output;\nset address %B110101010101, eval, output;\nset address %B111101010101, eval, output;\n\nset load 1,\nset address %B010101010101, set in %B0101010101010101, tick, output, tock, output;\nset address %B011101010101, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B000101010101, tick, output; tock, output;\nset address %B001101010101, eval, output;\nset address %B010101010101, eval, output;\nset address %B011101010101, eval, output;\nset address %B100101010101, eval, output;\nset address %B101101010101, eval, output;\nset address %B110101010101, eval, output;\nset address %B111101010101, eval, output;\n\nset load 1,\nset address %B011101010101, set in %B0101010101010101, tick, output, tock, output;\nset address %B100101010101, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B000101010101, tick, output; tock, output;\nset address %B001101010101, eval, output;\nset address %B010101010101, eval, output;\nset address %B011101010101, eval, output;\nset address %B100101010101, eval, output;\nset address %B101101010101, eval, output;\nset address %B110101010101, eval, output;\nset address %B111101010101, eval, output;\n\nset load 1,\nset address %B100101010101, set in %B0101010101010101, tick, output, tock, output;\nset address %B101101010101, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B000101010101, tick, output; tock, output;\nset address %B001101010101, eval, output;\nset address %B010101010101, eval, output;\nset address %B011101010101, eval, output;\nset address %B100101010101, eval, output;\nset address %B101101010101, eval, output;\nset address %B110101010101, eval, output;\nset address %B111101010101, eval, output;\n\nset load 1,\nset address %B101101010101, set in %B0101010101010101, tick, output, tock, output;\nset address %B110101010101, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B000101010101, tick, output; tock, output;\nset address %B001101010101, eval, output;\nset address %B010101010101, eval, output;\nset address %B011101010101, eval, output;\nset address %B100101010101, eval, output;\nset address %B101101010101, eval, output;\nset address %B110101010101, eval, output;\nset address %B111101010101, eval, output;\n\nset load 1,\nset address %B110101010101, set in %B0101010101010101, tick, output, tock, output;\nset address %B111101010101, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B000101010101, tick, output; tock, output;\nset address %B001101010101, eval, output;\nset address %B010101010101, eval, output;\nset address %B011101010101, eval, output;\nset address %B100101010101, eval, output;\nset address %B101101010101, eval, output;\nset address %B110101010101, eval, output;\nset address %B111101010101, eval, output;\n\nset load 1,\nset address %B111101010101, set in %B0101010101010101, tick, output, tock, output;\n\nset load 0,\nset address %B000101010101, tick, output; tock, output;\nset address %B001101010101, eval, output;\nset address %B010101010101, eval, output;\nset address %B011101010101, eval, output;\nset address %B100101010101, eval, output;\nset address %B101101010101, eval, output;\nset address %B110101010101, eval, output;\nset address %B111101010101, eval, output;`;\nexport const cmp = `| time |   in   |load |address |  out   |\n| 0+   |      0 |  0  |     0  |      0 |\n| 1    |      0 |  0  |     0  |      0 |\n| 1+   |      0 |  1  |     0  |      0 |\n| 2    |      0 |  1  |     0  |      0 |\n| 2+   |   1111 |  0  |     0  |      0 |\n| 3    |   1111 |  0  |     0  |      0 |\n| 3+   |   1111 |  1  |  1111  |      0 |\n| 4    |   1111 |  1  |  1111  |   1111 |\n| 4+   |   1111 |  0  |     0  |      0 |\n| 5    |   1111 |  0  |     0  |      0 |\n| 5+   |   3513 |  0  |  3513  |      0 |\n| 6    |   3513 |  0  |  3513  |      0 |\n| 6+   |   3513 |  1  |  3513  |      0 |\n| 7    |   3513 |  1  |  3513  |   3513 |\n| 7+   |   3513 |  0  |  3513  |   3513 |\n| 8    |   3513 |  0  |  3513  |   3513 |\n| 8    |   3513 |  0  |  1111  |   1111 |\n| 8+   |   4095 |  0  |  1111  |   1111 |\n| 9    |   4095 |  0  |  1111  |   1111 |\n| 9+   |   4095 |  1  |  4095  |      0 |\n| 10   |   4095 |  1  |  4095  |   4095 |\n| 10+  |   4095 |  0  |  4095  |   4095 |\n| 11   |   4095 |  0  |  4095  |   4095 |\n| 11   |   4095 |  0  |  3513  |   3513 |\n| 11   |   4095 |  0  |  4095  |   4095 |\n| 11+  |   4095 |  0  |  2728  |      0 |\n| 12   |   4095 |  0  |  2728  |      0 |\n| 12   |   4095 |  0  |  2729  |      0 |\n| 12   |   4095 |  0  |  2730  |      0 |\n| 12   |   4095 |  0  |  2731  |      0 |\n| 12   |   4095 |  0  |  2732  |      0 |\n| 12   |   4095 |  0  |  2733  |      0 |\n| 12   |   4095 |  0  |  2734  |      0 |\n| 12   |   4095 |  0  |  2735  |      0 |\n| 12+  |  21845 |  1  |  2728  |      0 |\n| 13   |  21845 |  1  |  2728  |  21845 |\n| 13+  |  21845 |  1  |  2729  |      0 |\n| 14   |  21845 |  1  |  2729  |  21845 |\n| 14+  |  21845 |  1  |  2730  |      0 |\n| 15   |  21845 |  1  |  2730  |  21845 |\n| 15+  |  21845 |  1  |  2731  |      0 |\n| 16   |  21845 |  1  |  2731  |  21845 |\n| 16+  |  21845 |  1  |  2732  |      0 |\n| 17   |  21845 |  1  |  2732  |  21845 |\n| 17+  |  21845 |  1  |  2733  |      0 |\n| 18   |  21845 |  1  |  2733  |  21845 |\n| 18+  |  21845 |  1  |  2734  |      0 |\n| 19   |  21845 |  1  |  2734  |  21845 |\n| 19+  |  21845 |  1  |  2735  |      0 |\n| 20   |  21845 |  1  |  2735  |  21845 |\n| 20+  |  21845 |  0  |  2728  |  21845 |\n| 21   |  21845 |  0  |  2728  |  21845 |\n| 21   |  21845 |  0  |  2729  |  21845 |\n| 21   |  21845 |  0  |  2730  |  21845 |\n| 21   |  21845 |  0  |  2731  |  21845 |\n| 21   |  21845 |  0  |  2732  |  21845 |\n| 21   |  21845 |  0  |  2733  |  21845 |\n| 21   |  21845 |  0  |  2734  |  21845 |\n| 21   |  21845 |  0  |  2735  |  21845 |\n| 21+  | -21846 |  1  |  2728  |  21845 |\n| 22   | -21846 |  1  |  2728  | -21846 |\n| 22+  | -21846 |  0  |  2728  | -21846 |\n| 23   | -21846 |  0  |  2728  | -21846 |\n| 23   | -21846 |  0  |  2729  |  21845 |\n| 23   | -21846 |  0  |  2730  |  21845 |\n| 23   | -21846 |  0  |  2731  |  21845 |\n| 23   | -21846 |  0  |  2732  |  21845 |\n| 23   | -21846 |  0  |  2733  |  21845 |\n| 23   | -21846 |  0  |  2734  |  21845 |\n| 23   | -21846 |  0  |  2735  |  21845 |\n| 23+  |  21845 |  1  |  2728  | -21846 |\n| 24   |  21845 |  1  |  2728  |  21845 |\n| 24+  | -21846 |  1  |  2729  |  21845 |\n| 25   | -21846 |  1  |  2729  | -21846 |\n| 25+  | -21846 |  0  |  2728  |  21845 |\n| 26   | -21846 |  0  |  2728  |  21845 |\n| 26   | -21846 |  0  |  2729  | -21846 |\n| 26   | -21846 |  0  |  2730  |  21845 |\n| 26   | -21846 |  0  |  2731  |  21845 |\n| 26   | -21846 |  0  |  2732  |  21845 |\n| 26   | -21846 |  0  |  2733  |  21845 |\n| 26   | -21846 |  0  |  2734  |  21845 |\n| 26   | -21846 |  0  |  2735  |  21845 |\n| 26+  |  21845 |  1  |  2729  | -21846 |\n| 27   |  21845 |  1  |  2729  |  21845 |\n| 27+  | -21846 |  1  |  2730  |  21845 |\n| 28   | -21846 |  1  |  2730  | -21846 |\n| 28+  | -21846 |  0  |  2728  |  21845 |\n| 29   | -21846 |  0  |  2728  |  21845 |\n| 29   | -21846 |  0  |  2729  |  21845 |\n| 29   | -21846 |  0  |  2730  | -21846 |\n| 29   | -21846 |  0  |  2731  |  21845 |\n| 29   | -21846 |  0  |  2732  |  21845 |\n| 29   | -21846 |  0  |  2733  |  21845 |\n| 29   | -21846 |  0  |  2734  |  21845 |\n| 29   | -21846 |  0  |  2735  |  21845 |\n| 29+  |  21845 |  1  |  2730  | -21846 |\n| 30   |  21845 |  1  |  2730  |  21845 |\n| 30+  | -21846 |  1  |  2731  |  21845 |\n| 31   | -21846 |  1  |  2731  | -21846 |\n| 31+  | -21846 |  0  |  2728  |  21845 |\n| 32   | -21846 |  0  |  2728  |  21845 |\n| 32   | -21846 |  0  |  2729  |  21845 |\n| 32   | -21846 |  0  |  2730  |  21845 |\n| 32   | -21846 |  0  |  2731  | -21846 |\n| 32   | -21846 |  0  |  2732  |  21845 |\n| 32   | -21846 |  0  |  2733  |  21845 |\n| 32   | -21846 |  0  |  2734  |  21845 |\n| 32   | -21846 |  0  |  2735  |  21845 |\n| 32+  |  21845 |  1  |  2731  | -21846 |\n| 33   |  21845 |  1  |  2731  |  21845 |\n| 33+  | -21846 |  1  |  2732  |  21845 |\n| 34   | -21846 |  1  |  2732  | -21846 |\n| 34+  | -21846 |  0  |  2728  |  21845 |\n| 35   | -21846 |  0  |  2728  |  21845 |\n| 35   | -21846 |  0  |  2729  |  21845 |\n| 35   | -21846 |  0  |  2730  |  21845 |\n| 35   | -21846 |  0  |  2731  |  21845 |\n| 35   | -21846 |  0  |  2732  | -21846 |\n| 35   | -21846 |  0  |  2733  |  21845 |\n| 35   | -21846 |  0  |  2734  |  21845 |\n| 35   | -21846 |  0  |  2735  |  21845 |\n| 35+  |  21845 |  1  |  2732  | -21846 |\n| 36   |  21845 |  1  |  2732  |  21845 |\n| 36+  | -21846 |  1  |  2733  |  21845 |\n| 37   | -21846 |  1  |  2733  | -21846 |\n| 37+  | -21846 |  0  |  2728  |  21845 |\n| 38   | -21846 |  0  |  2728  |  21845 |\n| 38   | -21846 |  0  |  2729  |  21845 |\n| 38   | -21846 |  0  |  2730  |  21845 |\n| 38   | -21846 |  0  |  2731  |  21845 |\n| 38   | -21846 |  0  |  2732  |  21845 |\n| 38   | -21846 |  0  |  2733  | -21846 |\n| 38   | -21846 |  0  |  2734  |  21845 |\n| 38   | -21846 |  0  |  2735  |  21845 |\n| 38+  |  21845 |  1  |  2733  | -21846 |\n| 39   |  21845 |  1  |  2733  |  21845 |\n| 39+  | -21846 |  1  |  2734  |  21845 |\n| 40   | -21846 |  1  |  2734  | -21846 |\n| 40+  | -21846 |  0  |  2728  |  21845 |\n| 41   | -21846 |  0  |  2728  |  21845 |\n| 41   | -21846 |  0  |  2729  |  21845 |\n| 41   | -21846 |  0  |  2730  |  21845 |\n| 41   | -21846 |  0  |  2731  |  21845 |\n| 41   | -21846 |  0  |  2732  |  21845 |\n| 41   | -21846 |  0  |  2733  |  21845 |\n| 41   | -21846 |  0  |  2734  | -21846 |\n| 41   | -21846 |  0  |  2735  |  21845 |\n| 41+  |  21845 |  1  |  2734  | -21846 |\n| 42   |  21845 |  1  |  2734  |  21845 |\n| 42+  | -21846 |  1  |  2735  |  21845 |\n| 43   | -21846 |  1  |  2735  | -21846 |\n| 43+  | -21846 |  0  |  2728  |  21845 |\n| 44   | -21846 |  0  |  2728  |  21845 |\n| 44   | -21846 |  0  |  2729  |  21845 |\n| 44   | -21846 |  0  |  2730  |  21845 |\n| 44   | -21846 |  0  |  2731  |  21845 |\n| 44   | -21846 |  0  |  2732  |  21845 |\n| 44   | -21846 |  0  |  2733  |  21845 |\n| 44   | -21846 |  0  |  2734  |  21845 |\n| 44   | -21846 |  0  |  2735  | -21846 |\n| 44+  |  21845 |  1  |  2735  | -21846 |\n| 45   |  21845 |  1  |  2735  |  21845 |\n| 45+  |  21845 |  0  |  2728  |  21845 |\n| 46   |  21845 |  0  |  2728  |  21845 |\n| 46   |  21845 |  0  |  2729  |  21845 |\n| 46   |  21845 |  0  |  2730  |  21845 |\n| 46   |  21845 |  0  |  2731  |  21845 |\n| 46   |  21845 |  0  |  2732  |  21845 |\n| 46   |  21845 |  0  |  2733  |  21845 |\n| 46   |  21845 |  0  |  2734  |  21845 |\n| 46   |  21845 |  0  |  2735  |  21845 |\n| 46+  |  21845 |  0  |   341  |      0 |\n| 47   |  21845 |  0  |   341  |      0 |\n| 47   |  21845 |  0  |   853  |      0 |\n| 47   |  21845 |  0  |  1365  |      0 |\n| 47   |  21845 |  0  |  1877  |      0 |\n| 47   |  21845 |  0  |  2389  |      0 |\n| 47   |  21845 |  0  |  2901  |      0 |\n| 47   |  21845 |  0  |  3413  |      0 |\n| 47   |  21845 |  0  |  3925  |      0 |\n| 47+  |  21845 |  1  |   341  |      0 |\n| 48   |  21845 |  1  |   341  |  21845 |\n| 48+  |  21845 |  1  |   853  |      0 |\n| 49   |  21845 |  1  |   853  |  21845 |\n| 49+  |  21845 |  1  |  1365  |      0 |\n| 50   |  21845 |  1  |  1365  |  21845 |\n| 50+  |  21845 |  1  |  1877  |      0 |\n| 51   |  21845 |  1  |  1877  |  21845 |\n| 51+  |  21845 |  1  |  2389  |      0 |\n| 52   |  21845 |  1  |  2389  |  21845 |\n| 52+  |  21845 |  1  |  2901  |      0 |\n| 53   |  21845 |  1  |  2901  |  21845 |\n| 53+  |  21845 |  1  |  3413  |      0 |\n| 54   |  21845 |  1  |  3413  |  21845 |\n| 54+  |  21845 |  1  |  3925  |      0 |\n| 55   |  21845 |  1  |  3925  |  21845 |\n| 55+  |  21845 |  0  |   341  |  21845 |\n| 56   |  21845 |  0  |   341  |  21845 |\n| 56   |  21845 |  0  |   853  |  21845 |\n| 56   |  21845 |  0  |  1365  |  21845 |\n| 56   |  21845 |  0  |  1877  |  21845 |\n| 56   |  21845 |  0  |  2389  |  21845 |\n| 56   |  21845 |  0  |  2901  |  21845 |\n| 56   |  21845 |  0  |  3413  |  21845 |\n| 56   |  21845 |  0  |  3925  |  21845 |\n| 56+  | -21846 |  1  |   341  |  21845 |\n| 57   | -21846 |  1  |   341  | -21846 |\n| 57+  | -21846 |  0  |   341  | -21846 |\n| 58   | -21846 |  0  |   341  | -21846 |\n| 58   | -21846 |  0  |   853  |  21845 |\n| 58   | -21846 |  0  |  1365  |  21845 |\n| 58   | -21846 |  0  |  1877  |  21845 |\n| 58   | -21846 |  0  |  2389  |  21845 |\n| 58   | -21846 |  0  |  2901  |  21845 |\n| 58   | -21846 |  0  |  3413  |  21845 |\n| 58   | -21846 |  0  |  3925  |  21845 |\n| 58+  |  21845 |  1  |   341  | -21846 |\n| 59   |  21845 |  1  |   341  |  21845 |\n| 59+  | -21846 |  1  |   853  |  21845 |\n| 60   | -21846 |  1  |   853  | -21846 |\n| 60+  | -21846 |  0  |   341  |  21845 |\n| 61   | -21846 |  0  |   341  |  21845 |\n| 61   | -21846 |  0  |   853  | -21846 |\n| 61   | -21846 |  0  |  1365  |  21845 |\n| 61   | -21846 |  0  |  1877  |  21845 |\n| 61   | -21846 |  0  |  2389  |  21845 |\n| 61   | -21846 |  0  |  2901  |  21845 |\n| 61   | -21846 |  0  |  3413  |  21845 |\n| 61   | -21846 |  0  |  3925  |  21845 |\n| 61+  |  21845 |  1  |   853  | -21846 |\n| 62   |  21845 |  1  |   853  |  21845 |\n| 62+  | -21846 |  1  |  1365  |  21845 |\n| 63   | -21846 |  1  |  1365  | -21846 |\n| 63+  | -21846 |  0  |   341  |  21845 |\n| 64   | -21846 |  0  |   341  |  21845 |\n| 64   | -21846 |  0  |   853  |  21845 |\n| 64   | -21846 |  0  |  1365  | -21846 |\n| 64   | -21846 |  0  |  1877  |  21845 |\n| 64   | -21846 |  0  |  2389  |  21845 |\n| 64   | -21846 |  0  |  2901  |  21845 |\n| 64   | -21846 |  0  |  3413  |  21845 |\n| 64   | -21846 |  0  |  3925  |  21845 |\n| 64+  |  21845 |  1  |  1365  | -21846 |\n| 65   |  21845 |  1  |  1365  |  21845 |\n| 65+  | -21846 |  1  |  1877  |  21845 |\n| 66   | -21846 |  1  |  1877  | -21846 |\n| 66+  | -21846 |  0  |   341  |  21845 |\n| 67   | -21846 |  0  |   341  |  21845 |\n| 67   | -21846 |  0  |   853  |  21845 |\n| 67   | -21846 |  0  |  1365  |  21845 |\n| 67   | -21846 |  0  |  1877  | -21846 |\n| 67   | -21846 |  0  |  2389  |  21845 |\n| 67   | -21846 |  0  |  2901  |  21845 |\n| 67   | -21846 |  0  |  3413  |  21845 |\n| 67   | -21846 |  0  |  3925  |  21845 |\n| 67+  |  21845 |  1  |  1877  | -21846 |\n| 68   |  21845 |  1  |  1877  |  21845 |\n| 68+  | -21846 |  1  |  2389  |  21845 |\n| 69   | -21846 |  1  |  2389  | -21846 |\n| 69+  | -21846 |  0  |   341  |  21845 |\n| 70   | -21846 |  0  |   341  |  21845 |\n| 70   | -21846 |  0  |   853  |  21845 |\n| 70   | -21846 |  0  |  1365  |  21845 |\n| 70   | -21846 |  0  |  1877  |  21845 |\n| 70   | -21846 |  0  |  2389  | -21846 |\n| 70   | -21846 |  0  |  2901  |  21845 |\n| 70   | -21846 |  0  |  3413  |  21845 |\n| 70   | -21846 |  0  |  3925  |  21845 |\n| 70+  |  21845 |  1  |  2389  | -21846 |\n| 71   |  21845 |  1  |  2389  |  21845 |\n| 71+  | -21846 |  1  |  2901  |  21845 |\n| 72   | -21846 |  1  |  2901  | -21846 |\n| 72+  | -21846 |  0  |   341  |  21845 |\n| 73   | -21846 |  0  |   341  |  21845 |\n| 73   | -21846 |  0  |   853  |  21845 |\n| 73   | -21846 |  0  |  1365  |  21845 |\n| 73   | -21846 |  0  |  1877  |  21845 |\n| 73   | -21846 |  0  |  2389  |  21845 |\n| 73   | -21846 |  0  |  2901  | -21846 |\n| 73   | -21846 |  0  |  3413  |  21845 |\n| 73   | -21846 |  0  |  3925  |  21845 |\n| 73+  |  21845 |  1  |  2901  | -21846 |\n| 74   |  21845 |  1  |  2901  |  21845 |\n| 74+  | -21846 |  1  |  3413  |  21845 |\n| 75   | -21846 |  1  |  3413  | -21846 |\n| 75+  | -21846 |  0  |   341  |  21845 |\n| 76   | -21846 |  0  |   341  |  21845 |\n| 76   | -21846 |  0  |   853  |  21845 |\n| 76   | -21846 |  0  |  1365  |  21845 |\n| 76   | -21846 |  0  |  1877  |  21845 |\n| 76   | -21846 |  0  |  2389  |  21845 |\n| 76   | -21846 |  0  |  2901  |  21845 |\n| 76   | -21846 |  0  |  3413  | -21846 |\n| 76   | -21846 |  0  |  3925  |  21845 |\n| 76+  |  21845 |  1  |  3413  | -21846 |\n| 77   |  21845 |  1  |  3413  |  21845 |\n| 77+  | -21846 |  1  |  3925  |  21845 |\n| 78   | -21846 |  1  |  3925  | -21846 |\n| 78+  | -21846 |  0  |   341  |  21845 |\n| 79   | -21846 |  0  |   341  |  21845 |\n| 79   | -21846 |  0  |   853  |  21845 |\n| 79   | -21846 |  0  |  1365  |  21845 |\n| 79   | -21846 |  0  |  1877  |  21845 |\n| 79   | -21846 |  0  |  2389  |  21845 |\n| 79   | -21846 |  0  |  2901  |  21845 |\n| 79   | -21846 |  0  |  3413  |  21845 |\n| 79   | -21846 |  0  |  3925  | -21846 |\n| 79+  |  21845 |  1  |  3925  | -21846 |\n| 80   |  21845 |  1  |  3925  |  21845 |\n| 80+  |  21845 |  0  |   341  |  21845 |\n| 81   |  21845 |  0  |   341  |  21845 |\n| 81   |  21845 |  0  |   853  |  21845 |\n| 81   |  21845 |  0  |  1365  |  21845 |\n| 81   |  21845 |  0  |  1877  |  21845 |\n| 81   |  21845 |  0  |  2389  |  21845 |\n| 81   |  21845 |  0  |  2901  |  21845 |\n| 81   |  21845 |  0  |  3413  |  21845 |\n| 81   |  21845 |  0  |  3925  |  21845 |`;\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/03/b/RAM16K.hdl\n/**\n * Memory of 16K 16-bit registers.\n * If load is asserted, the value of the register selected by\n * address is set to in; Otherwise, the value does not change.\n * The value of the selected register is emitted by out.\n */\nCHIP RAM16K {\n    IN in[16], load, address[14];\n    OUT out[16];\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const tst = `output-list time%S1.4.1 in%D1.6.1 load%B2.1.2 address%D2.5.2 out%D1.6.1;\n\nset in 0, set load 0, set address 0, tick, output; tock, output;\nset load 1, tick, output; tock, output;\n\nset in 4321, set load 0, tick, output; tock, output;\nset load 1, set address 4321, tick, output; tock, output;\nset load 0, set address 0, tick, output; tock, output;\n\nset in 12345, set address 12345, tick, output; tock, output;\nset load 1, tick, output; tock, output;\nset load 0, tick, output; tock, output;\nset address 4321, eval, output;\n\nset in 16383, tick, output; tock, output;\nset load 1, set address 16383, tick, output; tock, output;\nset load 0, tick, output; tock, output;\nset address 12345, eval, output;\nset address 16383, eval, output;\n\nset load 0, set address %B10101010101000, tick, output;\ntock, output;\nset address %B10101010101001, eval, output;\nset address %B10101010101010, eval, output;\nset address %B10101010101011, eval, output;\nset address %B10101010101100, eval, output;\nset address %B10101010101101, eval, output;\nset address %B10101010101110, eval, output;\nset address %B10101010101111, eval, output;\n\nset load 1, set in %B0101010101010101, set address %B10101010101000, tick, output;\ntock, output;\nset address %B10101010101001, tick, output, tock, output;\nset address %B10101010101010, tick, output, tock, output;\nset address %B10101010101011, tick, output, tock, output;\nset address %B10101010101100, tick, output, tock, output;\nset address %B10101010101101, tick, output, tock, output;\nset address %B10101010101110, tick, output, tock, output;\nset address %B10101010101111, tick, output, tock, output;\n\nset load 0, set address %B10101010101000, tick, output;\ntock, output;\nset address %B10101010101001, eval, output;\nset address %B10101010101010, eval, output;\nset address %B10101010101011, eval, output;\nset address %B10101010101100, eval, output;\nset address %B10101010101101, eval, output;\nset address %B10101010101110, eval, output;\nset address %B10101010101111, eval, output;\n\nset load 1, set address %B10101010101000, set in %B1010101010101010, tick, output;\ntock, output;\n\nset load 0, set address %B10101010101000, tick, output;\ntock, output;\nset address %B10101010101001, eval, output;\nset address %B10101010101010, eval, output;\nset address %B10101010101011, eval, output;\nset address %B10101010101100, eval, output;\nset address %B10101010101101, eval, output;\nset address %B10101010101110, eval, output;\nset address %B10101010101111, eval, output;\n\nset load 1, set address %B10101010101000, set in %B0101010101010101, tick, output, tock, output;\nset address %B10101010101001, set in %B1010101010101010, tick, output;\ntock, output;\n\nset load 0, set address %B10101010101000, tick, output;\ntock, output;\nset address %B10101010101001, eval, output;\nset address %B10101010101010, eval, output;\nset address %B10101010101011, eval, output;\nset address %B10101010101100, eval, output;\nset address %B10101010101101, eval, output;\nset address %B10101010101110, eval, output;\nset address %B10101010101111, eval, output;\n\nset load 1, set address %B10101010101001, set in %B0101010101010101, tick, output, tock, output;\nset address %B10101010101010, set in %B1010101010101010, tick, output;\ntock, output;\n\nset load 0, set address %B10101010101000, tick, output; tock, output;\nset address %B10101010101001, eval, output;\nset address %B10101010101010, eval, output;\nset address %B10101010101011, eval, output;\nset address %B10101010101100, eval, output;\nset address %B10101010101101, eval, output;\nset address %B10101010101110, eval, output;\nset address %B10101010101111, eval, output;\n\nset load 1;\nset address %B10101010101010, set in %B0101010101010101, tick, output, tock, output;\nset address %B10101010101011, set in %B1010101010101010, tick, output; tock, output;\n\nset load 0, set address %B10101010101000, tick, output; tock, output;\nset address %B10101010101001, eval, output;\nset address %B10101010101010, eval, output;\nset address %B10101010101011, eval, output;\nset address %B10101010101100, eval, output;\nset address %B10101010101101, eval, output;\nset address %B10101010101110, eval, output;\nset address %B10101010101111, eval, output;\n\nset load 1,\nset address %B10101010101011, set in %B0101010101010101, tick, output, tock, output;\nset address %B10101010101100, set in %B1010101010101010, tick, output; tock, output;\n\nset load 0,\nset address %B10101010101000, tick, output; tock, output;\nset address %B10101010101001, eval, output;\nset address %B10101010101010, eval, output;\nset address %B10101010101011, eval, output;\nset address %B10101010101100, eval, output;\nset address %B10101010101101, eval, output;\nset address %B10101010101110, eval, output;\nset address %B10101010101111, eval, output;\n\nset load 1,\nset address %B10101010101100, set in %B0101010101010101, tick, output, tock, output;\nset address %B10101010101101, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B10101010101000, tick, output; tock, output;\nset address %B10101010101001, eval, output;\nset address %B10101010101010, eval, output;\nset address %B10101010101011, eval, output;\nset address %B10101010101100, eval, output;\nset address %B10101010101101, eval, output;\nset address %B10101010101110, eval, output;\nset address %B10101010101111, eval, output;\n\nset load 1,\nset address %B10101010101101, set in %B0101010101010101, tick, output, tock, output;\nset address %B10101010101110, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B10101010101000, tick, output; tock, output;\nset address %B10101010101001, eval, output;\nset address %B10101010101010, eval, output;\nset address %B10101010101011, eval, output;\nset address %B10101010101100, eval, output;\nset address %B10101010101101, eval, output;\nset address %B10101010101110, eval, output;\nset address %B10101010101111, eval, output;\n\nset load 1,\nset address %B10101010101110, set in %B0101010101010101, tick, output, tock, output;\nset address %B10101010101111, set in %B1010101010101010, tick, output; tock, output;\n\nset load 0,\nset address %B10101010101000, tick, output; tock, output;\nset address %B10101010101001, eval, output;\nset address %B10101010101010, eval, output;\nset address %B10101010101011, eval, output;\nset address %B10101010101100, eval, output;\nset address %B10101010101101, eval, output;\nset address %B10101010101110, eval, output;\nset address %B10101010101111, eval, output;\n\nset load 1,\nset address %B10101010101111, set in %B0101010101010101, tick, output, tock, output;\nset load 0,\nset address %B10101010101000, tick, output; tock, output;\nset address %B10101010101001, eval, output;\nset address %B10101010101010, eval, output;\nset address %B10101010101011, eval, output;\nset address %B10101010101100, eval, output;\nset address %B10101010101101, eval, output;\nset address %B10101010101110, eval, output;\nset address %B10101010101111, eval, output;\n\nset load 0,\nset address %B00010101010101, tick, output; tock, output;\nset address %B00110101010101, eval, output;\nset address %B01010101010101, eval, output;\nset address %B01110101010101, eval, output;\nset address %B10010101010101, eval, output;\nset address %B10110101010101, eval, output;\nset address %B11010101010101, eval, output;\nset address %B11110101010101, eval, output;\n\nset load 1,\nset in %B0101010101010101, set address %B00010101010101, tick, output; tock, output;\nset address %B00110101010101, tick, output, tock, output;\nset address %B01010101010101, tick, output, tock, output;\nset address %B01110101010101, tick, output, tock, output;\nset address %B10010101010101, tick, output, tock, output;\nset address %B10110101010101, tick, output, tock, output;\nset address %B11010101010101, tick, output, tock, output;\nset address %B11110101010101, tick, output, tock, output;\n\nset load 0,\nset address %B00010101010101, tick, output; tock, output;\nset address %B00110101010101, eval, output;\nset address %B01010101010101, eval, output;\nset address %B01110101010101, eval, output;\nset address %B10010101010101, eval, output;\nset address %B10110101010101, eval, output;\nset address %B11010101010101, eval, output;\nset address %B11110101010101, eval, output;\n\nset load 1,\nset address %B00010101010101, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B00010101010101, tick, output; tock, output;\nset address %B00110101010101, eval, output;\nset address %B01010101010101, eval, output;\nset address %B01110101010101, eval, output;\nset address %B10010101010101, eval, output;\nset address %B10110101010101, eval, output;\nset address %B11010101010101, eval, output;\nset address %B11110101010101, eval, output;\n\nset load 1,\nset address %B00010101010101, set in %B0101010101010101, tick, output, tock, output;\nset address %B00110101010101, set in %B1010101010101010, tick, output; tock, output;\n\nset load 0,\nset address %B00010101010101, tick, output; tock, output;\nset address %B00110101010101, eval, output;\nset address %B01010101010101, eval, output;\nset address %B01110101010101, eval, output;\nset address %B10010101010101, eval, output;\nset address %B10110101010101, eval, output;\nset address %B11010101010101, eval, output;\nset address %B11110101010101, eval, output;\n\nset load 1,\nset address %B00110101010101, set in %B0101010101010101, tick, output, tock, output;\nset address %B01010101010101, set in %B1010101010101010, tick, output; tock, output;\n\nset load 0,\nset address %B00010101010101, tick, output; tock, output;\nset address %B00110101010101, eval, output;\nset address %B01010101010101, eval, output;\nset address %B01110101010101, eval, output;\nset address %B10010101010101, eval, output;\nset address %B10110101010101, eval, output;\nset address %B11010101010101, eval, output;\nset address %B11110101010101, eval, output;\n\nset load 1,\nset address %B01010101010101, set in %B0101010101010101, tick, output, tock, output;\nset address %B01110101010101, set in %B1010101010101010, tick, output; tock, output;\n\nset load 0,\nset address %B00010101010101, tick, output; tock, output;\nset address %B00110101010101, eval, output;\nset address %B01010101010101, eval, output;\nset address %B01110101010101, eval, output;\nset address %B10010101010101, eval, output;\nset address %B10110101010101, eval, output;\nset address %B11010101010101, eval, output;\nset address %B11110101010101, eval, output;\n\nset load 1,\nset address %B01110101010101, set in %B0101010101010101, tick, output, tock, output;\nset address %B10010101010101, set in %B1010101010101010, tick, output; tock, output;\n\nset load 0,\nset address %B00010101010101, tick, output; tock, output;\nset address %B00110101010101, eval, output;\nset address %B01010101010101, eval, output;\nset address %B01110101010101, eval, output;\nset address %B10010101010101, eval, output;\nset address %B10110101010101, eval, output;\nset address %B11010101010101, eval, output;\nset address %B11110101010101, eval, output;\n\nset load 1,\nset address %B10010101010101, set in %B0101010101010101, tick, output, tock, output;\nset address %B10110101010101, set in %B1010101010101010, tick, output; tock, output;\n\nset load 0,\nset address %B00010101010101, tick, output; tock, output;\nset address %B00110101010101, eval, output;\nset address %B01010101010101, eval, output;\nset address %B01110101010101, eval, output;\nset address %B10010101010101, eval, output;\nset address %B10110101010101, eval, output;\nset address %B11010101010101, eval, output;\nset address %B11110101010101, eval, output;\n\nset load 1,\nset address %B10110101010101, set in %B0101010101010101, tick, output, tock, output;\nset address %B11010101010101, set in %B1010101010101010, tick, output; tock, output;\n\nset load 0,\nset address %B00010101010101, tick, output; tock, output;\nset address %B00110101010101, eval, output;\nset address %B01010101010101, eval, output;\nset address %B01110101010101, eval, output;\nset address %B10010101010101, eval, output;\nset address %B10110101010101, eval, output;\nset address %B11010101010101, eval, output;\nset address %B11110101010101, eval, output;\n\nset load 1,\nset address %B11010101010101, set in %B0101010101010101, tick, output, tock, output;\nset address %B11110101010101, set in %B1010101010101010, tick, output; tock, output;\nset load 0,\nset address %B00010101010101, tick, output; tock, output;\nset address %B00110101010101, eval, output;\nset address %B01010101010101, eval, output;\nset address %B01110101010101, eval, output;\nset address %B10010101010101, eval, output;\nset address %B10110101010101, eval, output;\nset address %B11010101010101, eval, output;\nset address %B11110101010101, eval, output;\n\nset load 1,\nset address %B11110101010101, set in %B0101010101010101, tick, output, tock, output;\nset load 0,\nset address %B00010101010101, tick, output; tock, output;\nset address %B00110101010101, eval, output;\nset address %B01010101010101, eval, output;\nset address %B01110101010101, eval, output;\nset address %B10010101010101, eval, output;\nset address %B10110101010101, eval, output;\nset address %B11010101010101, eval, output;\nset address %B11110101010101, eval, output;`;\nexport const cmp = `| time |   in   |load | address |  out   |\n| 0+   |      0 |  0  |      0  |      0 |\n| 1    |      0 |  0  |      0  |      0 |\n| 1+   |      0 |  1  |      0  |      0 |\n| 2    |      0 |  1  |      0  |      0 |\n| 2+   |   4321 |  0  |      0  |      0 |\n| 3    |   4321 |  0  |      0  |      0 |\n| 3+   |   4321 |  1  |   4321  |      0 |\n| 4    |   4321 |  1  |   4321  |   4321 |\n| 4+   |   4321 |  0  |      0  |      0 |\n| 5    |   4321 |  0  |      0  |      0 |\n| 5+   |  12345 |  0  |  12345  |      0 |\n| 6    |  12345 |  0  |  12345  |      0 |\n| 6+   |  12345 |  1  |  12345  |      0 |\n| 7    |  12345 |  1  |  12345  |  12345 |\n| 7+   |  12345 |  0  |  12345  |  12345 |\n| 8    |  12345 |  0  |  12345  |  12345 |\n| 8    |  12345 |  0  |   4321  |   4321 |\n| 8+   |  16383 |  0  |   4321  |   4321 |\n| 9    |  16383 |  0  |   4321  |   4321 |\n| 9+   |  16383 |  1  |  16383  |      0 |\n| 10   |  16383 |  1  |  16383  |  16383 |\n| 10+  |  16383 |  0  |  16383  |  16383 |\n| 11   |  16383 |  0  |  16383  |  16383 |\n| 11   |  16383 |  0  |  12345  |  12345 |\n| 11   |  16383 |  0  |  16383  |  16383 |\n| 11+  |  16383 |  0  |  10920  |      0 |\n| 12   |  16383 |  0  |  10920  |      0 |\n| 12   |  16383 |  0  |  10921  |      0 |\n| 12   |  16383 |  0  |  10922  |      0 |\n| 12   |  16383 |  0  |  10923  |      0 |\n| 12   |  16383 |  0  |  10924  |      0 |\n| 12   |  16383 |  0  |  10925  |      0 |\n| 12   |  16383 |  0  |  10926  |      0 |\n| 12   |  16383 |  0  |  10927  |      0 |\n| 12+  |  21845 |  1  |  10920  |      0 |\n| 13   |  21845 |  1  |  10920  |  21845 |\n| 13+  |  21845 |  1  |  10921  |      0 |\n| 14   |  21845 |  1  |  10921  |  21845 |\n| 14+  |  21845 |  1  |  10922  |      0 |\n| 15   |  21845 |  1  |  10922  |  21845 |\n| 15+  |  21845 |  1  |  10923  |      0 |\n| 16   |  21845 |  1  |  10923  |  21845 |\n| 16+  |  21845 |  1  |  10924  |      0 |\n| 17   |  21845 |  1  |  10924  |  21845 |\n| 17+  |  21845 |  1  |  10925  |      0 |\n| 18   |  21845 |  1  |  10925  |  21845 |\n| 18+  |  21845 |  1  |  10926  |      0 |\n| 19   |  21845 |  1  |  10926  |  21845 |\n| 19+  |  21845 |  1  |  10927  |      0 |\n| 20   |  21845 |  1  |  10927  |  21845 |\n| 20+  |  21845 |  0  |  10920  |  21845 |\n| 21   |  21845 |  0  |  10920  |  21845 |\n| 21   |  21845 |  0  |  10921  |  21845 |\n| 21   |  21845 |  0  |  10922  |  21845 |\n| 21   |  21845 |  0  |  10923  |  21845 |\n| 21   |  21845 |  0  |  10924  |  21845 |\n| 21   |  21845 |  0  |  10925  |  21845 |\n| 21   |  21845 |  0  |  10926  |  21845 |\n| 21   |  21845 |  0  |  10927  |  21845 |\n| 21+  | -21846 |  1  |  10920  |  21845 |\n| 22   | -21846 |  1  |  10920  | -21846 |\n| 22+  | -21846 |  0  |  10920  | -21846 |\n| 23   | -21846 |  0  |  10920  | -21846 |\n| 23   | -21846 |  0  |  10921  |  21845 |\n| 23   | -21846 |  0  |  10922  |  21845 |\n| 23   | -21846 |  0  |  10923  |  21845 |\n| 23   | -21846 |  0  |  10924  |  21845 |\n| 23   | -21846 |  0  |  10925  |  21845 |\n| 23   | -21846 |  0  |  10926  |  21845 |\n| 23   | -21846 |  0  |  10927  |  21845 |\n| 23+  |  21845 |  1  |  10920  | -21846 |\n| 24   |  21845 |  1  |  10920  |  21845 |\n| 24+  | -21846 |  1  |  10921  |  21845 |\n| 25   | -21846 |  1  |  10921  | -21846 |\n| 25+  | -21846 |  0  |  10920  |  21845 |\n| 26   | -21846 |  0  |  10920  |  21845 |\n| 26   | -21846 |  0  |  10921  | -21846 |\n| 26   | -21846 |  0  |  10922  |  21845 |\n| 26   | -21846 |  0  |  10923  |  21845 |\n| 26   | -21846 |  0  |  10924  |  21845 |\n| 26   | -21846 |  0  |  10925  |  21845 |\n| 26   | -21846 |  0  |  10926  |  21845 |\n| 26   | -21846 |  0  |  10927  |  21845 |\n| 26+  |  21845 |  1  |  10921  | -21846 |\n| 27   |  21845 |  1  |  10921  |  21845 |\n| 27+  | -21846 |  1  |  10922  |  21845 |\n| 28   | -21846 |  1  |  10922  | -21846 |\n| 28+  | -21846 |  0  |  10920  |  21845 |\n| 29   | -21846 |  0  |  10920  |  21845 |\n| 29   | -21846 |  0  |  10921  |  21845 |\n| 29   | -21846 |  0  |  10922  | -21846 |\n| 29   | -21846 |  0  |  10923  |  21845 |\n| 29   | -21846 |  0  |  10924  |  21845 |\n| 29   | -21846 |  0  |  10925  |  21845 |\n| 29   | -21846 |  0  |  10926  |  21845 |\n| 29   | -21846 |  0  |  10927  |  21845 |\n| 29+  |  21845 |  1  |  10922  | -21846 |\n| 30   |  21845 |  1  |  10922  |  21845 |\n| 30+  | -21846 |  1  |  10923  |  21845 |\n| 31   | -21846 |  1  |  10923  | -21846 |\n| 31+  | -21846 |  0  |  10920  |  21845 |\n| 32   | -21846 |  0  |  10920  |  21845 |\n| 32   | -21846 |  0  |  10921  |  21845 |\n| 32   | -21846 |  0  |  10922  |  21845 |\n| 32   | -21846 |  0  |  10923  | -21846 |\n| 32   | -21846 |  0  |  10924  |  21845 |\n| 32   | -21846 |  0  |  10925  |  21845 |\n| 32   | -21846 |  0  |  10926  |  21845 |\n| 32   | -21846 |  0  |  10927  |  21845 |\n| 32+  |  21845 |  1  |  10923  | -21846 |\n| 33   |  21845 |  1  |  10923  |  21845 |\n| 33+  | -21846 |  1  |  10924  |  21845 |\n| 34   | -21846 |  1  |  10924  | -21846 |\n| 34+  | -21846 |  0  |  10920  |  21845 |\n| 35   | -21846 |  0  |  10920  |  21845 |\n| 35   | -21846 |  0  |  10921  |  21845 |\n| 35   | -21846 |  0  |  10922  |  21845 |\n| 35   | -21846 |  0  |  10923  |  21845 |\n| 35   | -21846 |  0  |  10924  | -21846 |\n| 35   | -21846 |  0  |  10925  |  21845 |\n| 35   | -21846 |  0  |  10926  |  21845 |\n| 35   | -21846 |  0  |  10927  |  21845 |\n| 35+  |  21845 |  1  |  10924  | -21846 |\n| 36   |  21845 |  1  |  10924  |  21845 |\n| 36+  | -21846 |  1  |  10925  |  21845 |\n| 37   | -21846 |  1  |  10925  | -21846 |\n| 37+  | -21846 |  0  |  10920  |  21845 |\n| 38   | -21846 |  0  |  10920  |  21845 |\n| 38   | -21846 |  0  |  10921  |  21845 |\n| 38   | -21846 |  0  |  10922  |  21845 |\n| 38   | -21846 |  0  |  10923  |  21845 |\n| 38   | -21846 |  0  |  10924  |  21845 |\n| 38   | -21846 |  0  |  10925  | -21846 |\n| 38   | -21846 |  0  |  10926  |  21845 |\n| 38   | -21846 |  0  |  10927  |  21845 |\n| 38+  |  21845 |  1  |  10925  | -21846 |\n| 39   |  21845 |  1  |  10925  |  21845 |\n| 39+  | -21846 |  1  |  10926  |  21845 |\n| 40   | -21846 |  1  |  10926  | -21846 |\n| 40+  | -21846 |  0  |  10920  |  21845 |\n| 41   | -21846 |  0  |  10920  |  21845 |\n| 41   | -21846 |  0  |  10921  |  21845 |\n| 41   | -21846 |  0  |  10922  |  21845 |\n| 41   | -21846 |  0  |  10923  |  21845 |\n| 41   | -21846 |  0  |  10924  |  21845 |\n| 41   | -21846 |  0  |  10925  |  21845 |\n| 41   | -21846 |  0  |  10926  | -21846 |\n| 41   | -21846 |  0  |  10927  |  21845 |\n| 41+  |  21845 |  1  |  10926  | -21846 |\n| 42   |  21845 |  1  |  10926  |  21845 |\n| 42+  | -21846 |  1  |  10927  |  21845 |\n| 43   | -21846 |  1  |  10927  | -21846 |\n| 43+  | -21846 |  0  |  10920  |  21845 |\n| 44   | -21846 |  0  |  10920  |  21845 |\n| 44   | -21846 |  0  |  10921  |  21845 |\n| 44   | -21846 |  0  |  10922  |  21845 |\n| 44   | -21846 |  0  |  10923  |  21845 |\n| 44   | -21846 |  0  |  10924  |  21845 |\n| 44   | -21846 |  0  |  10925  |  21845 |\n| 44   | -21846 |  0  |  10926  |  21845 |\n| 44   | -21846 |  0  |  10927  | -21846 |\n| 44+  |  21845 |  1  |  10927  | -21846 |\n| 45   |  21845 |  1  |  10927  |  21845 |\n| 45+  |  21845 |  0  |  10920  |  21845 |\n| 46   |  21845 |  0  |  10920  |  21845 |\n| 46   |  21845 |  0  |  10921  |  21845 |\n| 46   |  21845 |  0  |  10922  |  21845 |\n| 46   |  21845 |  0  |  10923  |  21845 |\n| 46   |  21845 |  0  |  10924  |  21845 |\n| 46   |  21845 |  0  |  10925  |  21845 |\n| 46   |  21845 |  0  |  10926  |  21845 |\n| 46   |  21845 |  0  |  10927  |  21845 |\n| 46+  |  21845 |  0  |   1365  |      0 |\n| 47   |  21845 |  0  |   1365  |      0 |\n| 47   |  21845 |  0  |   3413  |      0 |\n| 47   |  21845 |  0  |   5461  |      0 |\n| 47   |  21845 |  0  |   7509  |      0 |\n| 47   |  21845 |  0  |   9557  |      0 |\n| 47   |  21845 |  0  |  11605  |      0 |\n| 47   |  21845 |  0  |  13653  |      0 |\n| 47   |  21845 |  0  |  15701  |      0 |\n| 47+  |  21845 |  1  |   1365  |      0 |\n| 48   |  21845 |  1  |   1365  |  21845 |\n| 48+  |  21845 |  1  |   3413  |      0 |\n| 49   |  21845 |  1  |   3413  |  21845 |\n| 49+  |  21845 |  1  |   5461  |      0 |\n| 50   |  21845 |  1  |   5461  |  21845 |\n| 50+  |  21845 |  1  |   7509  |      0 |\n| 51   |  21845 |  1  |   7509  |  21845 |\n| 51+  |  21845 |  1  |   9557  |      0 |\n| 52   |  21845 |  1  |   9557  |  21845 |\n| 52+  |  21845 |  1  |  11605  |      0 |\n| 53   |  21845 |  1  |  11605  |  21845 |\n| 53+  |  21845 |  1  |  13653  |      0 |\n| 54   |  21845 |  1  |  13653  |  21845 |\n| 54+  |  21845 |  1  |  15701  |      0 |\n| 55   |  21845 |  1  |  15701  |  21845 |\n| 55+  |  21845 |  0  |   1365  |  21845 |\n| 56   |  21845 |  0  |   1365  |  21845 |\n| 56   |  21845 |  0  |   3413  |  21845 |\n| 56   |  21845 |  0  |   5461  |  21845 |\n| 56   |  21845 |  0  |   7509  |  21845 |\n| 56   |  21845 |  0  |   9557  |  21845 |\n| 56   |  21845 |  0  |  11605  |  21845 |\n| 56   |  21845 |  0  |  13653  |  21845 |\n| 56   |  21845 |  0  |  15701  |  21845 |\n| 56+  | -21846 |  1  |   1365  |  21845 |\n| 57   | -21846 |  1  |   1365  | -21846 |\n| 57+  | -21846 |  0  |   1365  | -21846 |\n| 58   | -21846 |  0  |   1365  | -21846 |\n| 58   | -21846 |  0  |   3413  |  21845 |\n| 58   | -21846 |  0  |   5461  |  21845 |\n| 58   | -21846 |  0  |   7509  |  21845 |\n| 58   | -21846 |  0  |   9557  |  21845 |\n| 58   | -21846 |  0  |  11605  |  21845 |\n| 58   | -21846 |  0  |  13653  |  21845 |\n| 58   | -21846 |  0  |  15701  |  21845 |\n| 58+  |  21845 |  1  |   1365  | -21846 |\n| 59   |  21845 |  1  |   1365  |  21845 |\n| 59+  | -21846 |  1  |   3413  |  21845 |\n| 60   | -21846 |  1  |   3413  | -21846 |\n| 60+  | -21846 |  0  |   1365  |  21845 |\n| 61   | -21846 |  0  |   1365  |  21845 |\n| 61   | -21846 |  0  |   3413  | -21846 |\n| 61   | -21846 |  0  |   5461  |  21845 |\n| 61   | -21846 |  0  |   7509  |  21845 |\n| 61   | -21846 |  0  |   9557  |  21845 |\n| 61   | -21846 |  0  |  11605  |  21845 |\n| 61   | -21846 |  0  |  13653  |  21845 |\n| 61   | -21846 |  0  |  15701  |  21845 |\n| 61+  |  21845 |  1  |   3413  | -21846 |\n| 62   |  21845 |  1  |   3413  |  21845 |\n| 62+  | -21846 |  1  |   5461  |  21845 |\n| 63   | -21846 |  1  |   5461  | -21846 |\n| 63+  | -21846 |  0  |   1365  |  21845 |\n| 64   | -21846 |  0  |   1365  |  21845 |\n| 64   | -21846 |  0  |   3413  |  21845 |\n| 64   | -21846 |  0  |   5461  | -21846 |\n| 64   | -21846 |  0  |   7509  |  21845 |\n| 64   | -21846 |  0  |   9557  |  21845 |\n| 64   | -21846 |  0  |  11605  |  21845 |\n| 64   | -21846 |  0  |  13653  |  21845 |\n| 64   | -21846 |  0  |  15701  |  21845 |\n| 64+  |  21845 |  1  |   5461  | -21846 |\n| 65   |  21845 |  1  |   5461  |  21845 |\n| 65+  | -21846 |  1  |   7509  |  21845 |\n| 66   | -21846 |  1  |   7509  | -21846 |\n| 66+  | -21846 |  0  |   1365  |  21845 |\n| 67   | -21846 |  0  |   1365  |  21845 |\n| 67   | -21846 |  0  |   3413  |  21845 |\n| 67   | -21846 |  0  |   5461  |  21845 |\n| 67   | -21846 |  0  |   7509  | -21846 |\n| 67   | -21846 |  0  |   9557  |  21845 |\n| 67   | -21846 |  0  |  11605  |  21845 |\n| 67   | -21846 |  0  |  13653  |  21845 |\n| 67   | -21846 |  0  |  15701  |  21845 |\n| 67+  |  21845 |  1  |   7509  | -21846 |\n| 68   |  21845 |  1  |   7509  |  21845 |\n| 68+  | -21846 |  1  |   9557  |  21845 |\n| 69   | -21846 |  1  |   9557  | -21846 |\n| 69+  | -21846 |  0  |   1365  |  21845 |\n| 70   | -21846 |  0  |   1365  |  21845 |\n| 70   | -21846 |  0  |   3413  |  21845 |\n| 70   | -21846 |  0  |   5461  |  21845 |\n| 70   | -21846 |  0  |   7509  |  21845 |\n| 70   | -21846 |  0  |   9557  | -21846 |\n| 70   | -21846 |  0  |  11605  |  21845 |\n| 70   | -21846 |  0  |  13653  |  21845 |\n| 70   | -21846 |  0  |  15701  |  21845 |\n| 70+  |  21845 |  1  |   9557  | -21846 |\n| 71   |  21845 |  1  |   9557  |  21845 |\n| 71+  | -21846 |  1  |  11605  |  21845 |\n| 72   | -21846 |  1  |  11605  | -21846 |\n| 72+  | -21846 |  0  |   1365  |  21845 |\n| 73   | -21846 |  0  |   1365  |  21845 |\n| 73   | -21846 |  0  |   3413  |  21845 |\n| 73   | -21846 |  0  |   5461  |  21845 |\n| 73   | -21846 |  0  |   7509  |  21845 |\n| 73   | -21846 |  0  |   9557  |  21845 |\n| 73   | -21846 |  0  |  11605  | -21846 |\n| 73   | -21846 |  0  |  13653  |  21845 |\n| 73   | -21846 |  0  |  15701  |  21845 |\n| 73+  |  21845 |  1  |  11605  | -21846 |\n| 74   |  21845 |  1  |  11605  |  21845 |\n| 74+  | -21846 |  1  |  13653  |  21845 |\n| 75   | -21846 |  1  |  13653  | -21846 |\n| 75+  | -21846 |  0  |   1365  |  21845 |\n| 76   | -21846 |  0  |   1365  |  21845 |\n| 76   | -21846 |  0  |   3413  |  21845 |\n| 76   | -21846 |  0  |   5461  |  21845 |\n| 76   | -21846 |  0  |   7509  |  21845 |\n| 76   | -21846 |  0  |   9557  |  21845 |\n| 76   | -21846 |  0  |  11605  |  21845 |\n| 76   | -21846 |  0  |  13653  | -21846 |\n| 76   | -21846 |  0  |  15701  |  21845 |\n| 76+  |  21845 |  1  |  13653  | -21846 |\n| 77   |  21845 |  1  |  13653  |  21845 |\n| 77+  | -21846 |  1  |  15701  |  21845 |\n| 78   | -21846 |  1  |  15701  | -21846 |\n| 78+  | -21846 |  0  |   1365  |  21845 |\n| 79   | -21846 |  0  |   1365  |  21845 |\n| 79   | -21846 |  0  |   3413  |  21845 |\n| 79   | -21846 |  0  |   5461  |  21845 |\n| 79   | -21846 |  0  |   7509  |  21845 |\n| 79   | -21846 |  0  |   9557  |  21845 |\n| 79   | -21846 |  0  |  11605  |  21845 |\n| 79   | -21846 |  0  |  13653  |  21845 |\n| 79   | -21846 |  0  |  15701  | -21846 |\n| 79+  |  21845 |  1  |  15701  | -21846 |\n| 80   |  21845 |  1  |  15701  |  21845 |\n| 80+  |  21845 |  0  |   1365  |  21845 |\n| 81   |  21845 |  0  |   1365  |  21845 |\n| 81   |  21845 |  0  |   3413  |  21845 |\n| 81   |  21845 |  0  |   5461  |  21845 |\n| 81   |  21845 |  0  |   7509  |  21845 |\n| 81   |  21845 |  0  |   9557  |  21845 |\n| 81   |  21845 |  0  |  11605  |  21845 |\n| 81   |  21845 |  0  |  13653  |  21845 |\n| 81   |  21845 |  0  |  15701  |  21845 |`;\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/05/Memory.hdl\n/** \n * The Memory chip implements the complete address space of the Hack data memory,\n * including the RAM and memory mapped I/O.\n * Outputs the value of the memory location specified by the address input.\n * If (load == 1), sets the memory location specified by the address input\n * to the value of the in input.\n * Address space rules:\n * Only the upper 16K + 8K + 1 words of the memory are used.\n * Access to address 0 to 16383 results in accessing the RAM;\n * Access to address 16384 to 24575 results in accessing the Screen memory map;\n * Access to address 24576 results in accessing the Keyboard memory map.\n */ \nCHIP Memory {\n    IN in[16], load, address[15];\n    OUT out[16];\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const tst = `output-list in%D1.6.1 load%B2.1.2 address%B1.15.1 out%D1.6.1;\n\n// Set RAM[0] = -1\nset address 0,\nset in   -1, set load 1, tick, output; tock, output;\n\n// RAM[0] holds value\nset in 9999, set load 0, tick, output; tock, output;\n\n// Did not also write to upper RAM or Screen\nset address %X2000, eval, output;\nset address %X4000, eval, output;\n\n// Set RAM[0x2000] = 2222\nset address %X2000,\nset in 2222, set load 1, tick, output; tock, output;\n\n// RAM[0x2000] holds value\nset in 9999, set load 0, tick, output; tock, output;\n\n// Did not also write to lower RAM or Screen\nset address 0, eval, output;\nset address %X4000, eval, output;\n\nset load 0,\t// Low order address bits connected\nset address %X0001, eval, output;\nset address %X0002, eval, output;\nset address %X0004, eval, output;\nset address %X0008, eval, output;\nset address %X0010, eval, output;\nset address %X0020, eval, output;\nset address %X0040, eval, output;\nset address %X0080, eval, output;\nset address %X0100, eval, output;\nset address %X0200, eval, output;\nset address %X0400, eval, output;\nset address %X0800, eval, output;\nset address %X1000, eval, output;\nset address %X2000, eval, output;\n\n// RAM[1234] = 1234\nset address %X1234,\nset in 1234, set load 1, tick, output; tock, output;\n\n// Did not also write to upper RAM or Screen \nset load 0,\nset address %X2234, eval, output;\nset address %X6234, eval, output;\n\n// RAM[0x2345] = 2345\nset address %X2345,\nset in 2345, set load 1, tick, output; tock, output;\n\n// Did not also write to lower RAM or Screen \nset load 0,\nset address %X0345, eval, output;\nset address %X4345, eval, output;\n\n// Keyboard test\n\n// set address 24576,\n// echo \"Click the Keyboard icon and hold down the 'K' key (uppercase) until you see the next message (it should appear shortly after that) ...\",\n// It's important to keep holding the key down since if the system is busy,\n// the memory will zero itself before being outputted.\n\n/*\nset Keyboard 'K';\nwhile out <> 75 {\n    eval,\n}\nclear-echo, output;\noutput;\n*/\n\n// Screen test\n\nset load 1, set in -1, set address %X4FCF, tick, tock, output;\nset address %X504F, tick, tock, output;\n\n// Did not also write to lower or upper RAM\nset address %X0FCF, eval, output;\nset address %X2FCF, eval, output;\n\nset load 0,\t\t\t\t// Low order address bits connected\nset address %X4FCE, eval, output;\nset address %X4FCD, eval, output;\nset address %X4FCB, eval, output;\nset address %X4FC7, eval, output;\nset address %X4FDF, eval, output;\nset address %X4FEF, eval, output;\nset address %X4F8F, eval, output;\nset address %X4F4F, eval, output;\nset address %X4ECF, eval, output;\nset address %X4DCF, eval, output;\nset address %X4BCF, eval, output;\nset address %X47CF, eval, output;\nset address %X5FCF, eval, output;\n\n\nset load 0, set address 24576,\necho \"Make sure you see ONLY two horizontal lines in the middle of the screen. Change Keyboard to 'Y' (uppercase) to continue ...\";\n\n/*\nwhile out <> 89 {\n    eval;\n}\n*/\nclear-echo;`;\nexport const cmp = `|   in   |load |     address     |  out   |\n|     -1 |  1  | 000000000000000 |      0 |\n|     -1 |  1  | 000000000000000 |     -1 |\n|   9999 |  0  | 000000000000000 |     -1 |\n|   9999 |  0  | 000000000000000 |     -1 |\n|   9999 |  0  | 010000000000000 |      0 |\n|   9999 |  0  | 100000000000000 |      0 |\n|   2222 |  1  | 010000000000000 |      0 |\n|   2222 |  1  | 010000000000000 |   2222 |\n|   9999 |  0  | 010000000000000 |   2222 |\n|   9999 |  0  | 010000000000000 |   2222 |\n|   9999 |  0  | 000000000000000 |     -1 |\n|   9999 |  0  | 100000000000000 |      0 |\n|   9999 |  0  | 000000000000001 |      0 |\n|   9999 |  0  | 000000000000010 |      0 |\n|   9999 |  0  | 000000000000100 |      0 |\n|   9999 |  0  | 000000000001000 |      0 |\n|   9999 |  0  | 000000000010000 |      0 |\n|   9999 |  0  | 000000000100000 |      0 |\n|   9999 |  0  | 000000001000000 |      0 |\n|   9999 |  0  | 000000010000000 |      0 |\n|   9999 |  0  | 000000100000000 |      0 |\n|   9999 |  0  | 000001000000000 |      0 |\n|   9999 |  0  | 000010000000000 |      0 |\n|   9999 |  0  | 000100000000000 |      0 |\n|   9999 |  0  | 001000000000000 |      0 |\n|   9999 |  0  | 010000000000000 |   2222 |\n|   1234 |  1  | 001001000110100 |      0 |\n|   1234 |  1  | 001001000110100 |   1234 |\n|   1234 |  0  | 010001000110100 |      0 |\n|   1234 |  0  | 110001000110100 |      0 |\n|   2345 |  1  | 010001101000101 |      0 |\n|   2345 |  1  | 010001101000101 |   2345 |\n|   2345 |  0  | 000001101000101 |      0 |\n|   2345 |  0  | 100001101000101 |      0 |\n|     -1 |  1  | 100111111001111 |     -1 |\n|     -1 |  1  | 101000001001111 |     -1 |\n|     -1 |  1  | 000111111001111 |      0 |\n|     -1 |  1  | 010111111001111 |      0 |\n|     -1 |  0  | 100111111001110 |      0 |\n|     -1 |  0  | 100111111001101 |      0 |\n|     -1 |  0  | 100111111001011 |      0 |\n|     -1 |  0  | 100111111000111 |      0 |\n|     -1 |  0  | 100111111011111 |      0 |\n|     -1 |  0  | 100111111101111 |      0 |\n|     -1 |  0  | 100111110001111 |      0 |\n|     -1 |  0  | 100111101001111 |      0 |\n|     -1 |  0  | 100111011001111 |      0 |\n|     -1 |  0  | 100110111001111 |      0 |\n|     -1 |  0  | 100101111001111 |      0 |\n|     -1 |  0  | 100011111001111 |      0 |\n|     -1 |  0  | 101111111001111 |      0 |`;\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/05/Computer.hdl\n/**\n * The HACK computer, consisting of CPU, ROM and RAM.\n * When reset is 0, the program stored in the ROM executes.\n * When reset is 1, the program's execution restarts. \n * Thus, to start running the currently loaded program,\n * set reset to 1, and then set it to 0. \n * From this point onwards, the user is at the mercy of the software:\n * Depending on the program's code, and whether the code is correct,\n * the screen may show some output, the user may be expected to enter\n * some input using the keyboard, or the program may do some procerssing. \n */\nCHIP Computer {\n    IN reset;\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const tst = `output-list time%S1.4.1 reset%B2.1.2 ARegister[]%D1.7.1 DRegister[]%D1.7.1 PC[]%D0.4.0 RAM16K[0]%D1.7.1 RAM16K[1]%D1.7.1 RAM16K[2]%D1.7.1;\n\n// Load a program written in the Hack machine language.\n// The program computes the maximum of RAM[0] and RAM[1] \n// and writes the result in RAM[2].\n\nROM32K load Max.hack,\n\n// first run: compute max(3,5)\nset Memory[0] 3,\nset Memory[1] 5,\noutput;\n\nrepeat 14 {\n    tick, tock, output;\n}\n\n// reset the PC\nset reset 1,\ntick, tock, output;\n\n// second run: compute max(23456,12345)\nset reset 0,\nset Memory[0] 23456,\nset Memory[1] 12345,\noutput;\n\n// The run on these inputs needs less cycles (different branching)\nrepeat 10 {\n    tick, tock, output;\n}\n`;\nexport const hack = `0000000000000000\n1111110000010000\n0000000000000001\n1111010011010000\n0000000000001010\n1110001100000001\n0000000000000001\n1111110000010000\n0000000000001100\n1110101010000111\n0000000000000000\n1111110000010000\n0000000000000010\n1110001100001000\n0000000000001110\n1110101010000111`;\nexport const cmp = `| time |reset|ARegister|DRegister|PC[]|RAM16K[0]|RAM16K[1]|RAM16K[2]|\n| 0    |  0  |       0 |       0 |   0|       3 |       5 |       0 |\n| 1    |  0  |       0 |       0 |   1|       3 |       5 |       0 |\n| 2    |  0  |       0 |       3 |   2|       3 |       5 |       0 |\n| 3    |  0  |       1 |       3 |   3|       3 |       5 |       0 |\n| 4    |  0  |       1 |      -2 |   4|       3 |       5 |       0 |\n| 5    |  0  |      10 |      -2 |   5|       3 |       5 |       0 |\n| 6    |  0  |      10 |      -2 |   6|       3 |       5 |       0 |\n| 7    |  0  |       1 |      -2 |   7|       3 |       5 |       0 |\n| 8    |  0  |       1 |       5 |   8|       3 |       5 |       0 |\n| 9    |  0  |      12 |       5 |   9|       3 |       5 |       0 |\n| 10   |  0  |      12 |       5 |  12|       3 |       5 |       0 |\n| 11   |  0  |       2 |       5 |  13|       3 |       5 |       0 |\n| 12   |  0  |       2 |       5 |  14|       3 |       5 |       5 |\n| 13   |  0  |      14 |       5 |  15|       3 |       5 |       5 |\n| 14   |  0  |      14 |       5 |  14|       3 |       5 |       5 |\n| 15   |  1  |      14 |       5 |   0|       3 |       5 |       5 |\n| 15   |  0  |      14 |       5 |   0|   23456 |   12345 |       5 |\n| 16   |  0  |       0 |       5 |   1|   23456 |   12345 |       5 |\n| 17   |  0  |       0 |   23456 |   2|   23456 |   12345 |       5 |\n| 18   |  0  |       1 |   23456 |   3|   23456 |   12345 |       5 |\n| 19   |  0  |       1 |   11111 |   4|   23456 |   12345 |       5 |\n| 20   |  0  |      10 |   11111 |   5|   23456 |   12345 |       5 |\n| 21   |  0  |      10 |   11111 |  10|   23456 |   12345 |       5 |\n| 22   |  0  |       0 |   11111 |  11|   23456 |   12345 |       5 |\n| 23   |  0  |       0 |   23456 |  12|   23456 |   12345 |       5 |\n| 24   |  0  |       2 |   23456 |  13|   23456 |   12345 |       5 |\n| 25   |  0  |       2 |   23456 |  14|   23456 |   12345 |   23456 |`;\n","import { FileSystem, reset } from \"@davidsouther/jiffies/lib/esm/fs.js\";\n\nimport * as Memory from \"./01_memory.js\";\nimport * as CPU from \"./02_cpu.js\";\nimport * as Computer from \"./03_computer.js\";\nimport * as Screen from \"./04_screen.js\";\nimport * as Keyboard from \"./05_keyboard.js\";\nimport * as DRegister from \"./06_d_register.js\";\nimport * as ARegister from \"./07_a_register.js\";\nimport * as ROM32K from \"./08_rom32k.js\";\n\nexport const CHIPS = {\n  Memory: {\n    \"Memory.hdl\": Memory.hdl,\n    \"Memory.tst\": Memory.tst,\n    \"Memory.cmp\": Memory.cmp,\n  },\n  CPU: {\n    \"CPU.hdl\": CPU.hdl,\n    \"CPU.tst\": CPU.tst,\n    \"CPU.cmp\": CPU.cmp,\n  },\n  Computer: {\n    \"Computer.hdl\": Computer.hdl,\n    \"Computer.tst\": Computer.tst,\n    \"Computer.cmp\": Computer.cmp,\n  },\n};\n\nexport const BUILTIN_CHIPS = {\n  Screen: Screen.hdl,\n  Keyboard: Keyboard.hdl,\n  DRegister: DRegister.hdl,\n  ARegister: ARegister.hdl,\n  ROM32K: ROM32K.hdl,\n};\n\nexport async function resetFiles(fs: FileSystem): Promise<void> {\n  await fs.pushd(\"/projects/05\");\n  await reset(fs, CHIPS);\n  await fs.popd();\n\n  // Add files needed for the test scripts to run\n  await fs.pushd(\"/test\");\n  await fs.writeFile(\"Max.hack\", Computer.hack);\n  await fs.popd();\n}\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/05/CPU.hdl\n/**\n * The Hack Central Processing unit (CPU).\n * Parses the binary code in the instruction input and executes it according to the\n * Hack machine language specification. In the case of a C-instruction, computes the\n * function specified by the instruction. If the instruction specifies to read a memory\n * value, the inM input is expected to contain this value. If the instruction specifies\n * to write a value to the memory, sets the outM output to this value, sets the addressM\n * output to the target address, and asserts the writeM output (when writeM == 0, any\n * value may appear in outM).\n * If the reset input is 0, computes the address of the next instruction and sets the\n * pc output to that value. If the reset input is 1, sets pc to 0.\n * Note: The outM and writeM outputs are combinational: they are affected by the\n * instruction's execution during the current cycle. The addressM and pc outputs are\n * clocked: although they are affected by the instruction's execution, they commit to\n * their new values only in the next cycle.\n */\nCHIP CPU {\n\n    IN  inM[16],         // M value input  (M = contents of RAM[A])\n        instruction[16], // Instruction for execution\n        reset;           // Signals whether to restart the current\n                         // program (reset==1) or continue executing\n                         // the current program (reset==0).\n\n    OUT outM[16],        // M value output\n        writeM,          // Write to M? \n        addressM[15],    // Address in data memory (of M)\n        pc[15];          // Address of next instruction\n\n    PARTS:\n    //// Replace this comment with your code.\n}`;\nexport const tst = `output-list time%S0.4.0 inM%D0.6.0 instruction%B0.16.0 reset%B2.1.2 outM%D1.6.0 writeM%B3.1.3 addressM%D0.5.0 pc%D0.5.0 DRegister[]%D1.6.1;\n\n\nset instruction %B0011000000111001, // @12345\ntick, output, tock, output;\n\nset instruction %B1110110000010000, // D=A\ntick, output, tock, output;\n\nset instruction %B0101101110100000, // @23456\ntick, output, tock, output;\n\nset instruction %B1110000111010000, // D=A-D\ntick, output, tock, output;\n\nset instruction %B0000001111101000, // @1000\ntick, output, tock, output;\n\nset instruction %B1110001100001000, // M=D\ntick, output, tock, output;\n\nset instruction %B0000001111101001, // @1001\ntick, output, tock, output;\n\nset instruction %B1110001110011000, // MD=D-1\ntick, output, tock, output;\n\nset instruction %B0000001111101000, // @1000\ntick, output, tock, output;\n\nset instruction %B1111010011010000, // D=D-M\nset inM 11111,\ntick, output, tock, output;\n\nset instruction %B0000000000001110, // @14\ntick, output, tock, output;\n\nset instruction %B1110001100000100, // D;jlt\ntick, output, tock, output;\n\nset instruction %B0000001111100111, // @999\ntick, output, tock, output;\n\nset instruction %B1110110111100000, // A=A+1\ntick, output, tock, output;\n\nset instruction %B1110001100001000, // M=D\ntick, output, tock, output;\n\nset instruction %B0000000000010101, // @21\ntick, output, tock, output;\n\nset instruction %B1110011111000010, // D+1;jeq\ntick, output, tock, output;\n\nset instruction %B0000000000000010, // @2\ntick, output, tock, output;\n\nset instruction %B1110000010010000, // D=D+A\ntick, output, tock, output;\n\nset instruction %B0000001111101000, // @1000\ntick, output, tock, output;\n\nset instruction %B1110111010010000, // D=-1\ntick, output, tock, output;\n\nset instruction %B1110001100000001, // D;JGT\ntick, output, tock, output;\n\nset instruction %B1110001100000010, // D;JEQ\ntick, output, tock, output;\n\nset instruction %B1110001100000011, // D;JGE\ntick, output, tock, output;\n\nset instruction %B1110001100000100, // D;JLT\ntick, output, tock, output;\n\nset instruction %B1110001100000101, // D;JNE\ntick, output, tock, output;\n\nset instruction %B1110001100000110, // D;JLE\ntick, output, tock, output;\n\nset instruction %B1110001100000111, // D;JMP\ntick, output, tock, output;\n\nset instruction %B1110101010010000, // D=0\ntick, output, tock, output;\n\nset instruction %B1110001100000001, // D;JGT\ntick, output, tock, output;\n\nset instruction %B1110001100000010, // D;JEQ\ntick, output, tock, output;\n\nset instruction %B1110001100000011, // D;JGE\ntick, output, tock, output;\n\nset instruction %B1110001100000100, // D;JLT\ntick, output, tock, output;\n\nset instruction %B1110001100000101, // D;JNE\ntick, output, tock, output;\n\nset instruction %B1110001100000110, // D;JLE\ntick, output, tock, output;\n\nset instruction %B1110001100000111, // D;JMP\ntick, output, tock, output;\n\nset instruction %B1110111111010000, // D=1\ntick, output, tock, output;\n\nset instruction %B1110001100000001, // D;JGT\ntick, output, tock, output;\n\nset instruction %B1110001100000010, // D;JEQ\ntick, output, tock, output;\n\nset instruction %B1110001100000011, // D;JGE\ntick, output, tock, output;\n\nset instruction %B1110001100000100, // D;JLT\ntick, output, tock, output;\n\nset instruction %B1110001100000101, // D;JNE\ntick, output, tock, output;\n\nset instruction %B1110001100000110, // D;JLE\ntick, output, tock, output;\n\nset instruction %B1110001100000111, // D;JMP\ntick, output, tock, output;\n\nset reset 1;\ntick, output, tock, output;\n\nset instruction %B0111111111111111, // @32767\nset reset 0;\ntick, output, tock, output;`;\nexport const cmp = `|time| inM  |  instruction   |reset| outM  |writeM |addre| pc  |DRegiste|\n|0+  |     0|0011000000111001|  0  |*******|   0   |    0|    0|      0 |\n|1   |     0|0011000000111001|  0  |*******|   0   |12345|    1|      0 |\n|1+  |     0|1110110000010000|  0  |*******|   0   |12345|    1|      0 |\n|2   |     0|1110110000010000|  0  |*******|   0   |12345|    2|  12345 |\n|2+  |     0|0101101110100000|  0  |*******|   0   |12345|    2|  12345 |\n|3   |     0|0101101110100000|  0  |*******|   0   |23456|    3|  12345 |\n|3+  |     0|1110000111010000|  0  |*******|   0   |23456|    3|  12345 |\n|4   |     0|1110000111010000|  0  |*******|   0   |23456|    4|  11111 |\n|4+  |     0|0000001111101000|  0  |*******|   0   |23456|    4|  11111 |\n|5   |     0|0000001111101000|  0  |*******|   0   | 1000|    5|  11111 |\n|5+  |     0|1110001100001000|  0  |  11111|   1   | 1000|    5|  11111 |\n|6   |     0|1110001100001000|  0  |  11111|   1   | 1000|    6|  11111 |\n|6+  |     0|0000001111101001|  0  |*******|   0   | 1000|    6|  11111 |\n|7   |     0|0000001111101001|  0  |*******|   0   | 1001|    7|  11111 |\n|7+  |     0|1110001110011000|  0  |  11110|   1   | 1001|    7|  11111 |\n|8   |     0|1110001110011000|  0  |  11109|   1   | 1001|    8|  11110 |\n|8+  |     0|0000001111101000|  0  |*******|   0   | 1001|    8|  11110 |\n|9   |     0|0000001111101000|  0  |*******|   0   | 1000|    9|  11110 |\n|9+  | 11111|1111010011010000|  0  |*******|   0   | 1000|    9|  11110 |\n|10  | 11111|1111010011010000|  0  |*******|   0   | 1000|   10|     -1 |\n|10+ | 11111|0000000000001110|  0  |*******|   0   | 1000|   10|     -1 |\n|11  | 11111|0000000000001110|  0  |*******|   0   |   14|   11|     -1 |\n|11+ | 11111|1110001100000100|  0  |*******|   0   |   14|   11|     -1 |\n|12  | 11111|1110001100000100|  0  |*******|   0   |   14|   14|     -1 |\n|12+ | 11111|0000001111100111|  0  |*******|   0   |   14|   14|     -1 |\n|13  | 11111|0000001111100111|  0  |*******|   0   |  999|   15|     -1 |\n|13+ | 11111|1110110111100000|  0  |*******|   0   |  999|   15|     -1 |\n|14  | 11111|1110110111100000|  0  |*******|   0   | 1000|   16|     -1 |\n|14+ | 11111|1110001100001000|  0  |     -1|   1   | 1000|   16|     -1 |\n|15  | 11111|1110001100001000|  0  |     -1|   1   | 1000|   17|     -1 |\n|15+ | 11111|0000000000010101|  0  |*******|   0   | 1000|   17|     -1 |\n|16  | 11111|0000000000010101|  0  |*******|   0   |   21|   18|     -1 |\n|16+ | 11111|1110011111000010|  0  |*******|   0   |   21|   18|     -1 |\n|17  | 11111|1110011111000010|  0  |*******|   0   |   21|   21|     -1 |\n|17+ | 11111|0000000000000010|  0  |*******|   0   |   21|   21|     -1 |\n|18  | 11111|0000000000000010|  0  |*******|   0   |    2|   22|     -1 |\n|18+ | 11111|1110000010010000|  0  |*******|   0   |    2|   22|     -1 |\n|19  | 11111|1110000010010000|  0  |*******|   0   |    2|   23|      1 |\n|19+ | 11111|0000001111101000|  0  |*******|   0   |    2|   23|      1 |\n|20  | 11111|0000001111101000|  0  |*******|   0   | 1000|   24|      1 |\n|20+ | 11111|1110111010010000|  0  |*******|   0   | 1000|   24|      1 |\n|21  | 11111|1110111010010000|  0  |*******|   0   | 1000|   25|     -1 |\n|21+ | 11111|1110001100000001|  0  |*******|   0   | 1000|   25|     -1 |\n|22  | 11111|1110001100000001|  0  |*******|   0   | 1000|   26|     -1 |\n|22+ | 11111|1110001100000010|  0  |*******|   0   | 1000|   26|     -1 |\n|23  | 11111|1110001100000010|  0  |*******|   0   | 1000|   27|     -1 |\n|23+ | 11111|1110001100000011|  0  |*******|   0   | 1000|   27|     -1 |\n|24  | 11111|1110001100000011|  0  |*******|   0   | 1000|   28|     -1 |\n|24+ | 11111|1110001100000100|  0  |*******|   0   | 1000|   28|     -1 |\n|25  | 11111|1110001100000100|  0  |*******|   0   | 1000| 1000|     -1 |\n|25+ | 11111|1110001100000101|  0  |*******|   0   | 1000| 1000|     -1 |\n|26  | 11111|1110001100000101|  0  |*******|   0   | 1000| 1000|     -1 |\n|26+ | 11111|1110001100000110|  0  |*******|   0   | 1000| 1000|     -1 |\n|27  | 11111|1110001100000110|  0  |*******|   0   | 1000| 1000|     -1 |\n|27+ | 11111|1110001100000111|  0  |*******|   0   | 1000| 1000|     -1 |\n|28  | 11111|1110001100000111|  0  |*******|   0   | 1000| 1000|     -1 |\n|28+ | 11111|1110101010010000|  0  |*******|   0   | 1000| 1000|     -1 |\n|29  | 11111|1110101010010000|  0  |*******|   0   | 1000| 1001|      0 |\n|29+ | 11111|1110001100000001|  0  |*******|   0   | 1000| 1001|      0 |\n|30  | 11111|1110001100000001|  0  |*******|   0   | 1000| 1002|      0 |\n|30+ | 11111|1110001100000010|  0  |*******|   0   | 1000| 1002|      0 |\n|31  | 11111|1110001100000010|  0  |*******|   0   | 1000| 1000|      0 |\n|31+ | 11111|1110001100000011|  0  |*******|   0   | 1000| 1000|      0 |\n|32  | 11111|1110001100000011|  0  |*******|   0   | 1000| 1000|      0 |\n|32+ | 11111|1110001100000100|  0  |*******|   0   | 1000| 1000|      0 |\n|33  | 11111|1110001100000100|  0  |*******|   0   | 1000| 1001|      0 |\n|33+ | 11111|1110001100000101|  0  |*******|   0   | 1000| 1001|      0 |\n|34  | 11111|1110001100000101|  0  |*******|   0   | 1000| 1002|      0 |\n|34+ | 11111|1110001100000110|  0  |*******|   0   | 1000| 1002|      0 |\n|35  | 11111|1110001100000110|  0  |*******|   0   | 1000| 1000|      0 |\n|35+ | 11111|1110001100000111|  0  |*******|   0   | 1000| 1000|      0 |\n|36  | 11111|1110001100000111|  0  |*******|   0   | 1000| 1000|      0 |\n|36+ | 11111|1110111111010000|  0  |*******|   0   | 1000| 1000|      0 |\n|37  | 11111|1110111111010000|  0  |*******|   0   | 1000| 1001|      1 |\n|37+ | 11111|1110001100000001|  0  |*******|   0   | 1000| 1001|      1 |\n|38  | 11111|1110001100000001|  0  |*******|   0   | 1000| 1000|      1 |\n|38+ | 11111|1110001100000010|  0  |*******|   0   | 1000| 1000|      1 |\n|39  | 11111|1110001100000010|  0  |*******|   0   | 1000| 1001|      1 |\n|39+ | 11111|1110001100000011|  0  |*******|   0   | 1000| 1001|      1 |\n|40  | 11111|1110001100000011|  0  |*******|   0   | 1000| 1000|      1 |\n|40+ | 11111|1110001100000100|  0  |*******|   0   | 1000| 1000|      1 |\n|41  | 11111|1110001100000100|  0  |*******|   0   | 1000| 1001|      1 |\n|41+ | 11111|1110001100000101|  0  |*******|   0   | 1000| 1001|      1 |\n|42  | 11111|1110001100000101|  0  |*******|   0   | 1000| 1000|      1 |\n|42+ | 11111|1110001100000110|  0  |*******|   0   | 1000| 1000|      1 |\n|43  | 11111|1110001100000110|  0  |*******|   0   | 1000| 1001|      1 |\n|43+ | 11111|1110001100000111|  0  |*******|   0   | 1000| 1001|      1 |\n|44  | 11111|1110001100000111|  0  |*******|   0   | 1000| 1000|      1 |\n|44+ | 11111|1110001100000111|  1  |*******|   0   | 1000| 1000|      1 |\n|45  | 11111|1110001100000111|  1  |*******|   0   | 1000|    0|      1 |\n|45+ | 11111|0111111111111111|  0  |*******|   0   | 1000|    0|      1 |\n|46  | 11111|0111111111111111|  0  |*******|   0   |32767|    1|      1 |`;\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/05/Screen.hdl\n/**\n * The Screen (memory map).\n * Same functionality as a 16-bit 8K RAM:\n * If load is asserted, the value of the register selected by\n * address is set to in; Otherwise, the value does not change.\n * The value of the selected register is emitted by out.\n *\n * This built-in implementation has the side effect of continuously \n * refreshing a visual 256 by 512 black-and-white screen, simulated \n * by the simulator. Each row in the visual screen is represented \n * by 32 consecutive 16-bit words, starting at the top left corner \n * of the visual screen. Thus the pixel at row r from the top and \n * column c from the left (0<=r<256, 0<=c<512) reflects the c%16 \n * bit (counting from LSB to MSB) of the word found in Screen[r*32+c/16]. \n */\nCHIP Screen {\n    IN  in[16],    // what to write\n    load,          // write-enable bit\n    address[13];   // where to read/write\n    OUT out[16];   // Screen value at the given address\n\n    PARTS:\n    BUILTIN Screen;\n    CLOCKED in, load;\n}`;\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/05/Keyboard.hdl\n/**\n * The keyboard (memory map).\n * Outputs the character code of the currently pressed key,\n * or 0 if no key is pressed.\n *\n * This built-in implementation has a visualization side effect.\n */\nCHIP Keyboard {\n    OUT out[16];\n\n    PARTS:\n    BUILTIN Keyboard;\n}`;\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/05/DRegister.hdl\n/**\n * A 16-bit register named DRegister with the same functionality\n * of the Register chip:\n * If load is asserted, the register's value is set to in;\n * Otherwise, the register maintains its current value.\n * out(t+1) = (load(t), in(t), out(t))\n *\n * This built-in implementation has a visualization side effect.\n */\nCHIP DRegister {\n    IN  in[16], load;\n    OUT out[16];\n\n    PARTS:\n    BUILTIN DRegister;\n    CLOCKED in, load;\n}`;\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/05/ARegister.hdl\n/**\n * A 16-bit register named ARegister with the same functionality\n * of the Register chip:\n * If load is asserted, the register's value is set to in;\n * Otherwise, the register maintains its current value.\n * out(t+1) = (load(t), in(t), out(t))\n *\n * This built-in implementation has a visualization side effect.\n */\n CHIP ARegister {\n    IN  in[16], load;\n    OUT out[16];\n\n    PARTS:\n    BUILTIN ARegister;\n    CLOCKED in, load;\n}`;\n","export const hdl = `// This file is part of www.nand2tetris.org\n// and the book \"The Elements of Computing Systems\"\n// by Nisan and Schocken, MIT Press.\n// File name: projects/05/ROM32K.hdl\n/**\n * Read-Only memory (ROM) of 32K registers, each 16-bit wide.\n * Facilitates data read, as follows:\n *     out(t) = ROM32K[address(t)](t)\n * In words: the chip outputs the value stored at the \n * memory location specified by address.\n *\n * Can be used as the instruction memory of the Hack computer.\n * To that end, the built-in chip implementation supports the handling \n * of the \"ROM32K load Xxx\" script command, where Xxx is the name of a\n * text file containing a program written in the binary Hack machine language.\n * When the simulator encounters such a command in a test script,\n * the file's contents is loaded into the simulated ROM32K chip.\n */\n CHIP ROM32K {\n    IN  address[15];\n    OUT out[16];\n\n    PARTS:\n    BUILTIN ROM32K;\n}`;\n","import { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\n\nimport * as project_01 from \"./project_01/index.js\";\nimport * as project_02 from \"./project_02/index.js\";\nimport * as project_03 from \"./project_03/index.js\";\nimport * as project_05 from \"./project_05/index.js\";\n\n/**\n * Duplicated for web from node:path.\n * A parsed path object generated by path.parse() or consumed by path.format().\n */\nexport interface ParsedPath {\n  /** The root of the path such as '/' or 'c:\\' */\n  root: string;\n  /** The full directory path such as '/home/user/dir' or 'c:\\path\\dir' */\n  dir: string;\n  /** The file name including extension (if any) such as 'index.html' */\n  base: string;\n  /** The file extension (if any) such as '.html' */\n  ext: string;\n  /** The file name without extension (if any) such as 'index' */\n  name: string;\n}\n\nexport type Assignment = ParsedPath;\n\nexport const ChipProjects = {\n  \"01\": project_01,\n  \"02\": project_02,\n  \"03\": project_03,\n  \"05\": project_05,\n};\n\nlet reset = false;\nexport const resetFiles = async (fs: FileSystem) => {\n  if (reset) return; // React will double-render a call to resetFiles in useEffect.\n  reset = true;\n  await project_01.resetFiles(fs);\n  await project_02.resetFiles(fs);\n  await project_03.resetFiles(fs);\n  await project_05.resetFiles(fs);\n  reset = false;\n};\n\nexport const BUILTIN_CHIP_PROJECTS: Record<\n  \"01\" | \"02\" | \"03\" | \"05\",\n  string[]\n> = {\n  \"01\": [\"Nand\"],\n  \"02\": [],\n  \"03\": [\"DFF\"],\n  \"05\": [\"Screen\", \"Keyboard\", \"DRegister\", \"ARegister\", \"ROM32K\"],\n};\n\nexport const CHIP_PROJECTS: Record<\"01\" | \"02\" | \"03\" | \"05\", string[]> = {\n  \"01\": [\n    \"Not\",\n    \"And\",\n    \"Or\",\n    \"XOr\",\n    \"Mux\",\n    \"DMux\",\n    \"Not16\",\n    \"And16\",\n    \"Or16\",\n    \"Mux16\",\n    \"Mux4Way16\",\n    \"Mux8Way16\",\n    \"DMux4Way\",\n    \"DMux8Way\",\n    \"Or8Way\",\n  ],\n  \"02\": [\n    \"HalfAdder\",\n    \"FullAdder\",\n    \"Add16\",\n    \"Inc16\",\n    \"ALU\",\n    // \"ALUAll\", // Special secret undocumented ALU tests\n  ],\n  \"03\": [\"Bit\", \"Register\", \"PC\", \"RAM8\", \"RAM64\", \"RAM512\", \"RAM4K\", \"RAM16K\"],\n  \"05\": [\"Memory\", \"CPU\", \"Computer\"],\n};\n\nexport const CHIP_ORDER: Partial<Record<\"01\" | \"02\" | \"03\" | \"05\", string[]>> =\n  {\n    \"05\": [\n      \"Memory\",\n      \"CPU\",\n      \"Computer\",\n      \"Screen\",\n      \"Keyboard\",\n      \"DRegister\",\n      \"ARegister\",\n      \"ROM32K\",\n    ],\n  };\n\nexport const ASM_PROJECTS: Record<\"06\", string[]> = {\n  \"06\": [\"Add\", \"Max\", \"Rectangle\", \"Pong\"],\n};\n\nexport const Assignments = {\n  ...project_01.CHIPS,\n  ...project_02.CHIPS,\n  ...project_03.CHIPS,\n  ...project_05.CHIPS,\n};\n"],"names":["CHIPS","Not","And","Or","XOr","Mux","DMux","Not16","And16","Or16","Mux16","Mux4Way16","Mux8Way16","DMux4Way","DMux8Way","Or8Way","BUILTIN_CHIPS","Nand","resetFiles","fs","pushd","reset","popd","HalfAdder","FullAdder","Add16","Inc16","ALUNoStat","ALU","ALUAll","Bit","Register","map","inn","load","join","n","PC","RAM8","RAM64","RAM512","RAM4K","RAM16K","DFF","hack","Memory","CPU","Computer","Screen","Keyboard","DRegister","ARegister","ROM32K","writeFile","ChipProjects","project_01","project_02","project_03","project_05","BUILTIN_CHIP_PROJECTS","CHIP_PROJECTS","CHIP_ORDER","ASM_PROJECTS","Assignments"],"sourceRoot":""}