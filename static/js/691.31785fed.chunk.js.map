{"version":3,"file":"static/js/691.31785fed.chunk.js","mappings":"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","sources":["../../simulator/src/chip/builder.ts","../../simulator/src/chip/builtins/computer/computer.tsx","../../simulator/src/chip/builtins/logic/and.ts","../../simulator/src/chip/builtins/logic/dmux.ts","../../simulator/src/chip/builtins/logic/mux.ts","../../simulator/src/chip/builtins/logic/nand.ts","../../simulator/src/chip/builtins/logic/not.ts","../../simulator/src/chip/builtins/logic/or.ts","../../simulator/src/chip/builtins/logic/xor.ts","../../simulator/src/chip/builtins/arithmetic/add_16.ts","../../simulator/src/chip/builtins/arithmetic/alu.tsx","../../simulator/src/chip/builtins/arithmetic/half_adder.ts","../../simulator/src/chip/builtins/arithmetic/full_adder.ts","../../simulator/src/chip/builtins/arithmetic/inc16.ts","../../simulator/src/chip/builtins/sequential/dff.ts","../../simulator/src/chip/builtins/index.ts","../../simulator/src/chip/builtins/sequential/bit.tsx","../../simulator/src/chip/builtins/sequential/ram.tsx","../../simulator/src/languages/grammars/hdl.ohm.js","../../simulator/src/languages/hdl.ts"],"sourcesContent":["import { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport {\n  Err,\n  isErr,\n  isOk,\n  Ok,\n  Result,\n} from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { HDL, HdlParse } from \"../languages/hdl.js\";\nimport { getBuiltinChip, hasBuiltinChip } from \"./builtins/index.js\";\nimport { Chip, Connection } from \"./chip.js\";\n\nfunction pinWidth(start: number, end: number | undefined): number | undefined {\n  if (end === undefined) {\n    return undefined;\n  }\n  if (end >= start) {\n    return end - start + 1;\n  }\n  if (start > 0 && end === 0) {\n    return 1;\n  }\n  throw new Error(`Bus specification has start > end (${start} > ${end})`);\n}\n\nexport async function parse(\n  code: string\n): Promise<Result<Chip, Error | { message: string; shortMessage: string }>> {\n  const parsed = HDL.parse(code.toString());\n  if (isErr(parsed)) return parsed;\n  return build(Ok(parsed));\n}\n\nexport async function loadChip(\n  name: string,\n  fs?: FileSystem\n): Promise<Result<Chip>> {\n  if (hasBuiltinChip(name) || fs === undefined) {\n    return getBuiltinChip(name);\n  }\n  try {\n    const file = await fs.readFile(`${name}.hdl`);\n    const maybeParsedHDL = HDL.parse(file);\n    const chip = isOk(maybeParsedHDL)\n      ? build(Ok(maybeParsedHDL), fs)\n      : Err(new Error(\"HDL Was not parsed\"));\n    return chip;\n  } catch (e) {\n    return Err(new Error(`Could not load chip ${name}.hdl` /*, { cause: e }*/));\n  }\n}\n\nexport async function build(\n  parts: HdlParse,\n  fs?: FileSystem\n): Promise<Result<Chip, Error>> {\n  if (parts.parts === \"BUILTIN\") {\n    return getBuiltinChip(parts.name.toString());\n  }\n\n  const buildChip = new Chip(\n    parts.ins.map(({ pin, width }) => ({ pin: pin.toString(), width })),\n    parts.outs.map(({ pin, width }) => ({ pin: pin.toString(), width })),\n    parts.name.toString(),\n    [],\n    parts.clocked\n  );\n\n  for (const part of parts.parts) {\n    const builtin = await loadChip(part.name.toString(), fs);\n    if (isErr(builtin)) return builtin;\n    const partChip = Ok(builtin);\n\n    const wires = part.wires.map<Connection>(({ lhs, rhs }) => ({\n      to: {\n        name: lhs.pin.toString(),\n        start: lhs.start ?? 0,\n        width: pinWidth(lhs.start ?? 0, lhs.end),\n      },\n      from: {\n        name: rhs.pin.toString(),\n        start: rhs.start ?? 0,\n        width: pinWidth(rhs.start ?? 0, rhs.end),\n      },\n    }));\n\n    try {\n      buildChip.wire(partChip, wires);\n    } catch (e) {\n      return Err(e as Error);\n    }\n  }\n\n  return Ok(buildChip);\n}\n","import { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport { Chip, ClockedChip, ConstantBus, HIGH, LOW, Pin } from \"../../chip.js\";\nimport { RAM, RAM16K } from \"../sequential/ram.js\";\nimport {\n  CPUInput,\n  CPUState,\n  cpuTick,\n  cpuTock,\n  emptyState,\n} from \"../../../cpu/cpu.js\";\nimport { int10 } from \"../../../util/twos.js\";\nimport { load } from \"../../../fs.js\";\nimport {\n  KEYBOARD_OFFSET,\n  KeyboardAdapter,\n  SCREEN_OFFSET,\n  SCREEN_SIZE,\n} from \"../../../cpu/memory.js\";\n\nexport class ROM32K extends RAM {\n  constructor() {\n    super(16, \"ROM\");\n  }\n\n  override async load(fs: FileSystem, path: string) {\n    try {\n      (await load(fs, path)).map((v, i) => (this.at(i).busVoltage = v));\n    } catch (cause) {\n      // throw new Error(`ROM32K Failed to load file ${path}`, { cause });\n      throw new Error(`ROM32K Failed to load file ${path}`);\n    }\n  }\n}\n\nexport class Screen extends RAM {\n  static readonly SIZE = SCREEN_SIZE;\n  static readonly OFFSET = SCREEN_OFFSET;\n\n  constructor() {\n    super(13, \"Screen\");\n  }\n}\n\nexport class Keyboard extends Chip implements KeyboardAdapter {\n  static readonly OFFSET = KEYBOARD_OFFSET;\n\n  constructor() {\n    super([], [\"out[16]\"], \"Keyboard\");\n  }\n\n  getKey() {\n    return this.out().busVoltage;\n  }\n\n  setKey(key: number) {\n    this.out().busVoltage = key & 0xffff;\n  }\n\n  clearKey() {\n    this.out().busVoltage = 0;\n  }\n}\n\nexport class Memory extends ClockedChip {\n  private ram = new RAM16K();\n  private screen = new Screen();\n  private keyboard = new Keyboard();\n  private address = 0;\n\n  constructor() {\n    super([\"in[16]\", \"load\", \"address[15])\"], [\"out[16]\"], \"Memory\");\n    this.parts.add(this.keyboard);\n    this.parts.add(this.screen);\n    this.parts.add(this.ram);\n  }\n\n  override tick() {\n    const load = this.in(\"load\").voltage();\n    this.address = this.in(\"address\").busVoltage;\n    if (load) {\n      const inn = this.in().busVoltage;\n      if (this.address >= Keyboard.OFFSET) {\n        // Keyboard, do nothing\n      } else if (this.address >= Screen.OFFSET) {\n        this.screen.at(this.address - Screen.OFFSET).busVoltage = inn;\n      } else {\n        this.ram.at(this.address).busVoltage = inn;\n      }\n    }\n  }\n\n  override tock() {\n    this.eval();\n  }\n\n  override eval() {\n    if (!this.ram) return;\n    this.address = this.in(\"address\").busVoltage;\n    let out = 0;\n    if (this.address >= Keyboard.OFFSET) {\n      // Keyboard, do nothing\n      out = this.keyboard?.out().busVoltage ?? 0;\n    } else if (this.address >= Screen.OFFSET) {\n      out = this.screen?.at(this.address - Screen.OFFSET).busVoltage ?? 0;\n    } else {\n      out = this.ram?.at(this.address).busVoltage ?? 0;\n    }\n    this.out().busVoltage = out;\n  }\n\n  override in(pin?: string): Pin {\n    if (pin?.startsWith(\"RAM16K\")) {\n      const idx = int10(pin.match(/\\[(?<idx>\\d+)]/)?.groups?.idx ?? \"0\");\n      return this.ram.at(idx);\n    }\n    if (pin?.startsWith(\"Screen\")) {\n      const idx = int10(pin.match(/\\[(?<idx>\\d+)]/)?.groups?.idx ?? \"0\");\n      return this.screen.at(idx);\n    }\n    return super.in(pin);\n  }\n\n  override get(name: string, offset = 0): Pin | undefined {\n    if (name.startsWith(\"RAM16K\")) {\n      return this.at(offset & 0x3fff);\n    }\n    if (name.startsWith(\"Screen\")) {\n      return this.at(offset & (0x1fff + Screen.OFFSET));\n    }\n    if (name.startsWith(\"Keyboard\")) {\n      return this.at(Keyboard.OFFSET);\n    }\n    if (name.startsWith(\"Memory\")) {\n      return this.at(offset);\n    }\n    return super.get(name, offset);\n  }\n\n  at(offset: number): Pin {\n    if (offset >= Keyboard.OFFSET) {\n      return this.keyboard.out();\n    }\n    if (offset >= Screen.OFFSET) {\n      return this.screen.at(offset - Screen.OFFSET);\n    } else {\n      return this.ram.at(offset);\n    }\n  }\n\n  override reset(): void {\n    this.address = 0;\n    this.ram.reset();\n    this.screen.reset();\n    super.reset();\n  }\n}\n\nexport class CPU extends ClockedChip {\n  private _state: CPUState = emptyState();\n\n  get state(): CPUState {\n    return this._state;\n  }\n\n  constructor() {\n    super(\n      [\"inM[16]\", \"instruction[16]\", \"reset\"],\n      [\"outM[16]\", \"writeM\", \"addressM[15]\", \"pc[15]\"]\n    );\n  }\n\n  override tick(): void {\n    const [state, writeM] = cpuTick(this.cpuInput(), this._state);\n    this._state = state;\n    this.out(\"writeM\").pull(writeM ? HIGH : LOW);\n    this.out(\"outM\").busVoltage = this._state.ALU ?? 0;\n}\n\n  override tock(): void {\n    if (!this._state) return; // Skip initial tock\n    const [output, state] = cpuTock(this.cpuInput(), this._state);\n    this._state = state;\n\n    this.out(\"addressM\").busVoltage = output.addressM ?? 0;\n    this.out(\"outM\").busVoltage = output.outM ?? 0;\n    this.out(\"writeM\").pull(output.writeM ? HIGH : LOW);\n    this.out(\"pc\").busVoltage = this._state?.PC ?? 0;\n  }\n\n  private cpuInput(): CPUInput {\n    const inM = this.in(\"inM\").busVoltage;\n    const instruction = this.in(\"instruction\").busVoltage;\n    const reset = this.in(\"reset\").busVoltage === 1;\n    return { inM, instruction, reset };\n  }\n\n  override get(pin: string, offset?: number): Pin | undefined {\n    if (pin?.startsWith(\"ARegister\")) {\n      return new ConstantBus(\"ARegister\", this._state.A);\n    }\n    if (pin?.startsWith(\"DRegister\")) {\n      return new ConstantBus(\"DRegister\", this._state.D);\n    }\n    if (pin?.startsWith(\"PC\")) {\n      return new ConstantBus(\"PC\", this._state.PC);\n    }\n    return super.get(pin, offset);\n  }\n\n  override reset() {\n    this._state = emptyState();\n\n    // This is a bit of a hack, but because super.reset() does ticktock,\n    // we need to set PC to -1, so that it will be 0 after the reset\n    this._state.PC = -1;\n\n    super.reset();\n  }\n}\n\nexport class Computer extends Chip {\n  #cpu = new CPU();\n  #ram = new Memory();\n  #rom = new ROM32K();\n\n  constructor() {\n    super([\"reset\"], []);\n\n    this.wire(this.#cpu, [\n      { from: { name: \"reset\", start: 0 }, to: { name: \"reset\", start: 0 } },\n      {\n        from: { name: \"instruction\", start: 0 },\n        to: { name: \"instruction\", start: 0 },\n      },\n      { from: { name: \"oldOutM\", start: 0 }, to: { name: \"inM\", start: 0 } },\n      { from: { name: \"writeM\", start: 0 }, to: { name: \"writeM\", start: 0 } },\n      {\n        from: { name: \"addressM\", start: 0 },\n        to: { name: \"addressM\", start: 0 },\n      },\n      { from: { name: \"newInM\", start: 0 }, to: { name: \"outM\", start: 0 } },\n      { from: { name: \"pc\", start: 0 }, to: { name: \"pc\", start: 0 } },\n    ]);\n\n    this.wire(this.#rom, [\n      { from: { name: \"pc\", start: 0 }, to: { name: \"address\", start: 0 } },\n      {\n        from: { name: \"instruction\", start: 0 },\n        to: { name: \"out\", start: 0 },\n      },\n    ]);\n\n    this.wire(this.#ram, [\n      { from: { name: \"newInM\", start: 0 }, to: { name: \"in\", start: 0 } },\n      { from: { name: \"writeM\", start: 0 }, to: { name: \"load\", start: 0 } },\n      {\n        from: { name: \"addressM\", start: 0 },\n        to: { name: \"address\", start: 0 },\n      },\n      { from: { name: \"oldOutM\", start: 0 }, to: { name: \"out\", start: 0 } },\n    ]);\n  }\n\n  override eval() {\n    super.eval();\n  }\n\n  override get(name: string, offset?: number): Pin | undefined {\n    if (\n      name.startsWith(\"PC\") ||\n      name.startsWith(\"ARegister\") ||\n      name.startsWith(\"DRegister\")\n    ) {\n      return this.#cpu.get(name);\n    }\n    if (name.startsWith(\"RAM16K\")) {\n      return this.#ram.get(name, offset);\n    }\n    return super.get(name, offset);\n  }\n\n  override async load(fs: FileSystem, path: string): Promise<void> {\n    return await this.#rom.load(fs, path);\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function and(a: Voltage, b: Voltage): [Voltage] {\n  return [a === 1 && b === 1 ? HIGH : LOW];\n}\n\nexport function and16(a: number, b: number): [number] {\n  return [a & b & 0xffff];\n}\n\nexport class And extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [n] = and(a, b);\n    this.out().pull(n);\n  }\n}\n\nexport class And16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const [n] = and16(a, b);\n    this.out().busVoltage = n;\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function dmux(inn: Voltage, sel: Voltage): [Voltage, Voltage] {\n  const a = sel === LOW && inn === HIGH ? HIGH : LOW;\n  const b = sel === HIGH && inn === HIGH ? HIGH : LOW;\n  return [a, b];\n}\n\nexport function dmux4way(\n  inn: Voltage,\n  sel: number\n): [Voltage, Voltage, Voltage, Voltage] {\n  const a = sel === 0b00 && inn === HIGH ? HIGH : LOW;\n  const b = sel === 0b01 && inn === HIGH ? HIGH : LOW;\n  const c = sel === 0b10 && inn === HIGH ? HIGH : LOW;\n  const d = sel === 0b11 && inn === HIGH ? HIGH : LOW;\n  return [a, b, c, d];\n}\n\nexport function dmux8way(\n  inn: Voltage,\n  sel: number\n): [Voltage, Voltage, Voltage, Voltage, Voltage, Voltage, Voltage, Voltage] {\n  const a = sel === 0b000 && inn === HIGH ? HIGH : LOW;\n  const b = sel === 0b001 && inn === HIGH ? HIGH : LOW;\n  const c = sel === 0b010 && inn === HIGH ? HIGH : LOW;\n  const d = sel === 0b011 && inn === HIGH ? HIGH : LOW;\n  const e = sel === 0b100 && inn === HIGH ? HIGH : LOW;\n  const f = sel === 0b101 && inn === HIGH ? HIGH : LOW;\n  const g = sel === 0b110 && inn === HIGH ? HIGH : LOW;\n  const h = sel === 0b111 && inn === HIGH ? HIGH : LOW;\n  return [a, b, c, d, e, f, g, h];\n}\n\nexport class DMux extends Chip {\n  constructor() {\n    super([\"in\", \"sel\"], [\"a\", \"b\"]);\n  }\n\n  override eval() {\n    const inn = this.in(\"in\").voltage();\n    const sel = this.in(\"sel\").voltage();\n\n    const [a, b] = dmux(inn, sel);\n    this.out(\"a\").pull(a);\n    this.out(\"b\").pull(b);\n  }\n}\n\nexport class DMux4Way extends Chip {\n  constructor() {\n    super([\"in\", \"sel[2]\"], [\"a\", \"b\", \"c\", \"d\"]);\n  }\n\n  override eval() {\n    const inn = this.in(\"in\").voltage();\n    const sel = this.in(\"sel\").busVoltage;\n\n    const [a, b, c, d] = dmux4way(inn, sel);\n    this.out(\"a\").pull(a);\n    this.out(\"b\").pull(b);\n    this.out(\"c\").pull(c);\n    this.out(\"d\").pull(d);\n  }\n}\n\nexport class DMux8Way extends Chip {\n  constructor() {\n    super([\"in\", \"sel[3]\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]);\n  }\n\n  override eval() {\n    const inn = this.in(\"in\").voltage();\n    const sel = this.in(\"sel\").busVoltage;\n\n    const [a, b, c, d, e, f, g, h] = dmux8way(inn, sel);\n    this.out(\"a\").pull(a);\n    this.out(\"b\").pull(b);\n    this.out(\"c\").pull(c);\n    this.out(\"d\").pull(d);\n    this.out(\"e\").pull(e);\n    this.out(\"f\").pull(f);\n    this.out(\"g\").pull(g);\n    this.out(\"h\").pull(h);\n  }\n}\n","import { Chip, LOW, Voltage } from \"../../chip.js\";\n\nexport function mux(a: Voltage, b: Voltage, sel: Voltage): [Voltage] {\n  return [sel === LOW ? a : b];\n}\n\nexport function mux16(a: number, b: number, sel: Voltage): [number] {\n  return [sel === LOW ? a : b];\n}\n\nexport function mux16_4(\n  a: number,\n  b: number,\n  c: number,\n  d: number,\n  sel: number\n): [number] {\n  const s2 = (sel & 0b01) as Voltage;\n  return (sel & 0b10) === 0b00 ? mux16(a, b, s2) : mux16(c, d, s2);\n}\n\nexport function mux16_8(\n  a: number,\n  b: number,\n  c: number,\n  d: number,\n  e: number,\n  f: number,\n  g: number,\n  h: number,\n  sel: number\n): [number] {\n  const s2 = (sel & 0b11) as Voltage;\n  return (sel & 0b100) === 0b000\n    ? mux16_4(a, b, c, d, s2)\n    : mux16_4(e, f, g, h, s2);\n}\n\nexport class Mux extends Chip {\n  constructor() {\n    super([\"a\", \"b\", \"sel\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const sel = this.in(\"sel\").voltage();\n\n    const [set] = mux(a, b, sel);\n    this.out().pull(set);\n  }\n}\n\nexport class Mux16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\", \"sel\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const sel = this.in(\"sel\").voltage();\n    const [out] = mux16(a, b, sel);\n    this.out().busVoltage = out;\n  }\n}\n\nexport class Mux4Way16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\", \"c[16]\", \"d[16]\", \"sel[2]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const c = this.in(\"c\").busVoltage;\n    const d = this.in(\"d\").busVoltage;\n    const sel = this.in(\"sel\").busVoltage;\n    const [out] = mux16_4(a, b, c, d, sel);\n\n    this.out().busVoltage = out;\n  }\n}\n\nexport class Mux8Way16 extends Chip {\n  constructor() {\n    super(\n      [\n        \"a[16]\",\n        \"b[16]\",\n        \"c[16]\",\n        \"d[16]\",\n        \"e[16]\",\n        \"f[16]\",\n        \"g[16]\",\n        \"h[16]\",\n        \"sel[3]\",\n      ],\n      [\"out[16]\"]\n    );\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const c = this.in(\"c\").busVoltage;\n    const d = this.in(\"d\").busVoltage;\n    const e = this.in(\"e\").busVoltage;\n    const f = this.in(\"f\").busVoltage;\n    const g = this.in(\"g\").busVoltage;\n    const h = this.in(\"h\").busVoltage;\n    const sel = this.in(\"sel\").busVoltage;\n    const [out] = mux16_8(a, b, c, d, e, f, g, h, sel);\n\n    this.out().busVoltage = out;\n  }\n}\n","import { nand16 } from \"../../../util/twos.js\";\nimport { HIGH, LOW, Chip, Voltage } from \"../../chip.js\";\n\nexport function nand(a: Voltage, b: Voltage): [Voltage] {\n  return [a === 1 && b === 1 ? LOW : HIGH];\n}\n\nexport class Nand extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [out] = nand(a, b);\n    this.out().pull(out);\n  }\n}\n\nexport class Nand16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    this.out().busVoltage = nand16(a, b);\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function not(inn: Voltage): [Voltage] {\n  return [inn === LOW ? HIGH : LOW];\n}\n\nexport function not16(inn: number): [number] {\n  return [~inn & 0xffff];\n}\n\nexport class Not extends Chip {\n  constructor() {\n    super([\"in\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"in\").voltage();\n    const [out] = not(a);\n    this.out().pull(out);\n  }\n}\n\nexport class Not16 extends Chip {\n  constructor() {\n    super([\"in[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const [n] = not16(this.in().busVoltage);\n    this.out().busVoltage = n;\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function or(a: Voltage, b: Voltage): [Voltage] {\n  return [a === 1 || b === 1 ? HIGH : LOW];\n}\n\nexport function or16(a: number, b: number): [number] {\n  return [(a | b) & 0xffff];\n}\n\nexport function or8way(a: number): [Voltage] {\n  return [(a & 0xff) === 0 ? LOW : HIGH];\n}\n\nexport class Or extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [out] = or(a, b);\n    this.out().pull(out);\n  }\n}\n\nexport class Or16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const [out] = or16(a, b);\n    this.out().busVoltage = out;\n  }\n}\n\nexport class Or8way extends Chip {\n  constructor() {\n    super([\"in[8]\"], [\"out\"], \"Or8way\");\n  }\n\n  override eval() {\n    const inn = this.in().busVoltage;\n    const [out] = or8way(inn);\n    this.out().pull(out);\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function xor(a: Voltage, b: Voltage): [Voltage] {\n  return [(a === HIGH && b === LOW) || (a === LOW && b === HIGH) ? HIGH : LOW];\n}\n\nexport function xor16(a: number, b: number): [number] {\n  return [(a ^ b) & 0xffff];\n}\n\nexport class Xor extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"out\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [out] = xor(a, b);\n    this.out().pull(out);\n  }\n}\n\nexport class Xor16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const [out] = xor16(a, b);\n    this.out().busVoltage = out;\n  }\n}\n","import { Chip } from \"../../chip.js\";\n\nexport function add16(a: number, b: number): [number] {\n  return [(a + b) & 0xffff];\n}\n\nexport class Add16 extends Chip {\n  constructor() {\n    super([\"a[16]\", \"b[16]\"], [\"out[16]\"], \"Add16\");\n  }\n\n  override eval() {\n    const a = this.in(\"a\").busVoltage;\n    const b = this.in(\"b\").busVoltage;\n    const [out] = add16(a, b);\n    this.out().busVoltage = out;\n  }\n}\n","import { alu, alua, COMMANDS_OP, Flags } from \"../../../cpu/alu.js\";\nimport { Chip, HIGH, LOW } from \"../../chip.js\";\n\nexport class ALUNoStat extends Chip {\n  constructor() {\n    super(\n      [\n        \"x[16]\",\n        \"y[16]\", // 16-bit inputs\n        \"zx\", // zero the x input?\n        \"nx\", // negate the x input?\n        \"zy\", // zero the y input?\n        \"ny\", // negate the y input?\n        \"f\", // compute out = x + y (if 1) or x & y (if 0)\n        \"no\", // negate the out output?\n      ],\n      [\n        \"out[16]\", // 16-bit output\n      ],\n      \"ALU\"\n    );\n  }\n\n  override eval() {\n    const x = this.in(\"x\").busVoltage;\n    const y = this.in(\"y\").busVoltage;\n    const zx = this.in(\"zx\").busVoltage << 5;\n    const nx = this.in(\"nx\").busVoltage << 4;\n    const zy = this.in(\"zy\").busVoltage << 3;\n    const ny = this.in(\"ny\").busVoltage << 2;\n    const f = this.in(\"f\").busVoltage << 1;\n    const no = this.in(\"no\").busVoltage << 0;\n    const op = zx + nx + zy + ny + f + no;\n\n    const [out] = alu(op, x, y);\n\n    this.out().busVoltage = out;\n  }\n}\n\nexport class ALU extends Chip {\n  constructor() {\n    super(\n      [\n        \"x[16]\",\n        \"y[16]\", // 16-bit inputs\n        \"zx\", // zero the x input?\n        \"nx\", // negate the x input?\n        \"zy\", // zero the y input?\n        \"ny\", // negate the y input?\n        \"f\", // compute out = x + y (if 1) or x & y (if 0)\n        \"no\", // negate the out output?\n      ],\n      [\n        \"out[16]\", // 16-bit output\n        \"zr\", // 1 if (out === 0), 0 otherwise\n        \"ng\", // 1 if (out < 0),  0 otherwise\n      ],\n      \"ALU\"\n    );\n  }\n\n  override eval() {\n    const x = this.in(\"x\").busVoltage;\n    const y = this.in(\"y\").busVoltage;\n    const zx = this.in(\"zx\").busVoltage << 5;\n    const nx = this.in(\"nx\").busVoltage << 4;\n    const zy = this.in(\"zy\").busVoltage << 3;\n    const ny = this.in(\"ny\").busVoltage << 2;\n    const f = this.in(\"f\").busVoltage << 1;\n    const no = this.in(\"no\").busVoltage << 0;\n    const op = zx + nx + zy + ny + f + no;\n\n    const [out, flags] = alu(op, x, y);\n\n    const ng = flags === Flags.Negative ? HIGH : LOW;\n    const zr = flags === Flags.Zero ? HIGH : LOW;\n    this.out(\"out\").busVoltage = out;\n    this.out(\"ng\").pull(ng);\n    this.out(\"zr\").pull(zr);\n  }\n\n  op(): COMMANDS_OP {\n    const zx = this.in(\"zx\").busVoltage << 5;\n    const nx = this.in(\"nx\").busVoltage << 4;\n    const zy = this.in(\"zy\").busVoltage << 3;\n    const ny = this.in(\"ny\").busVoltage << 2;\n    const f = this.in(\"f\").busVoltage << 1;\n    const no = this.in(\"no\").busVoltage << 0;\n    const op = zx + nx + zy + ny + f + no;\n    return op as COMMANDS_OP;\n  }\n}\n\nexport class ALUAll extends Chip {\n  constructor() {\n    super(\n      [\n        \"x[16]\",\n        \"y[16]\", // 16-bit inputs\n        \"zx\", // zero the x input?\n        \"nx\", // negate the x input?\n        \"zy\", // zero the y input?\n        \"ny\", // negate the y input?\n        \"f\", // compute out = x + y (if 1) or x & y (if 0)\n        \"no\", // negate the out output?\n      ],\n      [\n        \"out[16]\", // 16-bit output\n        \"zr\", // 1 if (out === 0), 0 otherwise\n        \"ng\", // 1 if (out < 0),  0 otherwise\n      ],\n      \"ALU\"\n    );\n  }\n\n  override eval() {\n    const x = this.in(\"x\").busVoltage;\n    const y = this.in(\"y\").busVoltage;\n    const zx = this.in(\"zx\").busVoltage << 5;\n    const nx = this.in(\"nx\").busVoltage << 4;\n    const zy = this.in(\"zy\").busVoltage << 3;\n    const ny = this.in(\"ny\").busVoltage << 2;\n    const f = this.in(\"f\").busVoltage << 1;\n    const no = this.in(\"no\").busVoltage << 0;\n    const op = zx + nx + zy + ny + f + no;\n\n    const [out, flags] = alua(op, x, y);\n\n    const ng = flags === Flags.Negative ? HIGH : LOW;\n    const zr = flags === Flags.Zero ? HIGH : LOW;\n    this.out(\"out\").busVoltage = out;\n    this.out(\"ng\").pull(ng);\n    this.out(\"zr\").pull(zr);\n  }\n\n  op(): COMMANDS_OP {\n    const zx = this.in(\"zx\").busVoltage << 5;\n    const nx = this.in(\"nx\").busVoltage << 4;\n    const zy = this.in(\"zy\").busVoltage << 3;\n    const ny = this.in(\"ny\").busVoltage << 2;\n    const f = this.in(\"f\").busVoltage << 1;\n    const no = this.in(\"no\").busVoltage << 0;\n    const op = zx + nx + zy + ny + f + no;\n    return op as COMMANDS_OP;\n  }\n}\n","import { Chip, HIGH, LOW, Voltage } from \"../../chip.js\";\n\nexport function halfAdder(a: Voltage, b: Voltage): [Voltage, Voltage] {\n  const sum = (a === 1 && b === 0) || (a === 0 && b === 1) ? HIGH : LOW;\n  const car = a === 1 && b === 1 ? HIGH : LOW;\n\n  return [sum, car];\n}\n\nexport class HalfAdder extends Chip {\n  constructor() {\n    super([\"a\", \"b\"], [\"sum\", \"carry\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const [sum, carry] = halfAdder(a, b);\n    this.out(\"sum\").pull(sum);\n    this.out(\"carry\").pull(carry);\n  }\n}\n","import { Chip, Voltage } from \"../../chip.js\";\nimport { or } from \"../logic/or.js\";\nimport { halfAdder } from \"./half_adder.js\";\n\nexport function fullAdder(\n  a: Voltage,\n  b: Voltage,\n  c: Voltage\n): [Voltage, Voltage] {\n  const [s, ca] = halfAdder(a, b);\n  const [sum, cb] = halfAdder(s, c);\n  const [carry] = or(ca, cb);\n\n  return [sum, carry];\n}\n\nexport class FullAdder extends Chip {\n  constructor() {\n    super([\"a\", \"b\", \"c\"], [\"sum\", \"carry\"]);\n  }\n\n  override eval() {\n    const a = this.in(\"a\").voltage();\n    const b = this.in(\"b\").voltage();\n    const c = this.in(\"c\").voltage();\n    const [sum, carry] = fullAdder(a, b, c);\n    this.out(\"sum\").pull(sum);\n    this.out(\"carry\").pull(carry);\n  }\n}\n","import { Chip } from \"../../chip.js\";\nimport { add16 } from \"./add_16.js\";\n\nexport function inc16(n: number): [number] {\n  return add16(n, 1);\n}\n\nexport class Inc16 extends Chip {\n  constructor() {\n    super([\"in[16]\"], [\"out[16]\"], \"Inc16\");\n  }\n\n  override eval() {\n    const a = this.in().busVoltage;\n    const [out] = inc16(a);\n    this.out().busVoltage = out;\n  }\n}\n","import { ClockedChip } from \"../../chip.js\";\n\nexport class DFF extends ClockedChip {\n  constructor(name?: string) {\n    super([\"in\"], [\"out\"], name, [\"t\"]);\n  }\n\n  override tick() {\n    // Read in into t\n    const t = this.in().voltage();\n    this.pin(\"t\").pull(t);\n  }\n\n  override tock() {\n    // write t into out\n    const t = this.pin(\"t\").voltage();\n    this.out().pull(t);\n  }\n}\n","import { Err, Ok, Result } from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { Chip } from \"../chip.js\";\n\nimport { And, And16 } from \"./logic/and.js\";\nimport { DMux, DMux4Way, DMux8Way } from \"./logic/dmux.js\";\nimport { Mux, Mux16, Mux4Way16, Mux8Way16 } from \"./logic/mux.js\";\nimport { Nand, Nand16 } from \"./logic/nand.js\";\nimport { Not, Not16 } from \"./logic/not.js\";\nimport { Or, Or16, Or8way } from \"./logic/or.js\";\nimport { Xor, Xor16 } from \"./logic/xor.js\";\n\nimport { Add16 } from \"./arithmetic/add_16.js\";\nimport { ALU, ALUNoStat } from \"./arithmetic/alu.js\";\nimport { FullAdder } from \"./arithmetic/full_adder.js\";\nimport { HalfAdder } from \"./arithmetic/half_adder.js\";\nimport { Inc16 } from \"./arithmetic/inc16.js\";\n\nimport {\n  Computer,\n  CPU,\n  Keyboard,\n  Memory,\n  ROM32K,\n  Screen,\n} from \"./computer/computer.js\";\nimport { Bit, PC, Register, VRegister } from \"./sequential/bit.js\";\nimport { DFF } from \"./sequential/dff.js\";\nimport { RAM16K, RAM4K, RAM512, RAM64, RAM8 } from \"./sequential/ram.js\";\n\nexport {\n  And,\n  And16,\n  DMux,\n  Mux,\n  Mux16,\n  Mux4Way16,\n  Mux8Way16,\n  Nand,\n  Nand16,\n  Not,\n  Not16,\n  Or,\n  Or16,\n  Or8way,\n  Xor,\n  Xor16,\n  HalfAdder,\n  FullAdder,\n  Add16,\n  Inc16,\n  ALU,\n  Bit,\n  Register,\n  VRegister as ARegister,\n  VRegister as DRegister,\n  DFF,\n  RAM8,\n  RAM64,\n  RAM512,\n  RAM4K,\n  RAM16K,\n};\n\nexport const REGISTRY = new Map<string, () => Chip>(\n  (\n    [\n      [\"Nand\", Nand],\n      [\"Nand16\", Nand16],\n      [\"Not\", Not],\n      [\"Not16\", Not16],\n      [\"And\", And],\n      [\"And16\", And16],\n      [\"Or\", Or],\n      [\"Or16\", Or16],\n      [\"Or8Way\", Or8way],\n      [\"XOr\", Xor],\n      [\"XOr16\", Xor16],\n      [\"Xor\", Xor],\n      [\"Xor16\", Xor16],\n      [\"Mux\", Mux],\n      [\"Mux16\", Mux16],\n      [\"Mux4Way16\", Mux4Way16],\n      [\"Mux8Way16\", Mux8Way16],\n      [\"DMux\", DMux],\n      [\"DMux4Way\", DMux4Way],\n      [\"DMux8Way\", DMux8Way],\n      [\"HalfAdder\", HalfAdder],\n      [\"FullAdder\", FullAdder],\n      [\"Add16\", Add16],\n      [\"Inc16\", Inc16],\n      [\"ALU\", ALU],\n      [\"ALUNoStat\", ALUNoStat],\n      [\"DFF\", DFF],\n      [\"Bit\", Bit],\n      [\"Register\", Register],\n      [\"ARegister\", Register],\n      [\"DRegister\", Register],\n      [\"PC\", PC],\n      [\"RAM8\", RAM8],\n      [\"RAM64\", RAM64],\n      [\"RAM512\", RAM512],\n      [\"RAM4K\", RAM4K],\n      [\"RAM16K\", RAM16K],\n      [\"ROM32K\", ROM32K],\n      [\"Screen\", Screen],\n      [\"Keyboard\", Keyboard],\n      [\"CPU\", CPU],\n      [\"Computer\", Computer],\n      [\"Memory\", Memory],\n      [\"ARegister\", VRegister],\n      [\"DRegister\", VRegister],\n    ] as [string, { new (): Chip }][]\n  ).map(([name, ChipCtor]) => [\n    name,\n    () => {\n      const chip = new ChipCtor();\n      chip.name = name;\n      return chip;\n    },\n  ])\n);\n\nexport function hasBuiltinChip(name: string): boolean {\n  return REGISTRY.has(name);\n}\n\nexport function getBuiltinChip(name: string): Result<Chip> {\n  const chip = REGISTRY.get(name);\n  return chip\n    ? Ok(chip())\n    : Err(new Error(`Chip ${name} not in builtin registry`));\n}\n","import { ClockedChip, HIGH, LOW, Pin, Voltage } from \"../../chip.js\";\n\nexport class Bit extends ClockedChip {\n  bit: Voltage = LOW;\n\n  constructor(name?: string) {\n    super([\"in\", \"load\"], [\"out\"], name);\n  }\n\n  override tick() {\n    if (this.in(\"load\").voltage() === HIGH) {\n      this.bit = this.in().voltage();\n    }\n  }\n\n  override tock() {\n    this.out().pull(this.bit ?? 0);\n  }\n\n  override reset() {\n    this.bit = LOW;\n    super.reset();\n  }\n}\n\nexport class Register extends ClockedChip {\n  bits = 0x00;\n\n  constructor(name?: string) {\n    super([\"in[16]\", \"load\"], [\"out[16]\"], name);\n  }\n\n  override tick() {\n    if (this.in(\"load\").voltage() === HIGH) {\n      this.bits = this.in().busVoltage & 0xffff;\n    }\n  }\n\n  override tock() {\n    this.out().busVoltage = this.bits & 0xffff;\n  }\n\n  override get(name: string, offset?: number): Pin | undefined {\n    return name === this.name ? this.out() : super.get(name, offset);\n  }\n\n  override reset() {\n    this.bits = 0x00;\n    super.reset();\n  }\n}\n\nexport class VRegister extends Register {}\n\nexport class PC extends ClockedChip {\n  bits = 0x00;\n\n  constructor(name?: string) {\n    super([\"in[16]\", \"load\", \"inc\", \"reset\"], [\"out[16]\"], name);\n  }\n\n  override tick() {\n    if (this.in(\"reset\").voltage() === HIGH) {\n      this.bits = 0;\n    } else if (this.in(\"load\").voltage() === HIGH) {\n      this.bits = this.in().busVoltage & 0xffff;\n    } else if (this.in(\"inc\").voltage() === HIGH) {\n      this.bits += 1;\n    }\n  }\n\n  override tock() {\n    this.out().busVoltage = this.bits & 0xffff;\n  }\n\n  override get(name: string, offset?: number): Pin | undefined {\n    return name === this.name ? this.out() : super.get(name, offset);\n  }\n\n  override reset() {\n    this.bits = 0x00;\n    super.reset();\n  }\n}\n","import { Bus, ClockedChip, Pin } from \"../../chip.js\";\nimport { assert } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { Memory, Memory as MemoryChip } from \"../../../cpu/memory.js\";\n\nexport class RAM extends ClockedChip {\n  protected _memory: MemoryChip;\n  private _nextData = 0;\n  private _address = 0;\n\n  get memory() {\n    return this._memory;\n  }\n  get address() {\n    return this._address;\n  }\n\n  constructor(readonly width: number, name?: string) {\n    super([\"in[16]\", \"load\", `address[${width}]`], [`out[16]`], name);\n    this._memory = new MemoryChip(Math.pow(2, this.width));\n  }\n\n  override tick() {\n    const load = this.in(\"load\").voltage();\n    this._address = this.in(\"address\").busVoltage;\n    if (load) {\n      this._nextData = this.in().busVoltage;\n      this._memory.set(this._address, this._nextData);\n    }\n  }\n\n  override tock() {\n    this.out().busVoltage = this._memory?.get(this._address) ?? 0;\n  }\n\n  override eval() {\n    const address = this.in(\"address\").busVoltage;\n    this.out().busVoltage = this._memory?.get(address) ?? 0;\n  }\n\n  at(idx: number): Pin {\n    assert(\n      idx < this._memory.size,\n      () => `Request out of bounds (${idx} >= ${this._memory.size})`\n    );\n    return new RamBus(`${this.name}[${idx}]`, idx, this._memory);\n  }\n\n  override reset(): void {\n    this._memory.reset();\n    super.reset();\n  }\n}\n\nexport class RamBus extends Bus {\n  constructor(\n    name: string,\n    private readonly index: number,\n    private ram: Memory\n  ) {\n    super(name);\n  }\n\n  override get busVoltage(): number {\n    return this.ram.get(this.index);\n  }\n\n  override set busVoltage(num: number) {\n    this.ram.set(this.index, num);\n  }\n}\n\nexport class RAM8 extends RAM {\n  constructor(name?: string) {\n    super(3, name);\n  }\n}\n\nexport class RAM64 extends RAM {\n  constructor(name?: string) {\n    super(6, name);\n  }\n}\n\nexport class RAM512 extends RAM {\n  constructor(name?: string) {\n    super(9, name);\n  }\n}\n\nexport class RAM4K extends RAM {\n  constructor(name?: string) {\n    super(12, name);\n  }\n}\n\nexport class RAM16K extends RAM {\n  constructor(name?: string) {\n    super(14, name);\n  }\n}\n","const hdl = `\nHdl <: Base{\n  Root := Chip\n  Chip = \"CHIP\" Name OpenBrace ChipBody CloseBrace\n  ChipBody = InList? OutList? PartList ClockedList?\n  InList = \"IN\" PinList Semi\n  OutList = \"OUT\" PinList Semi\n  PartList = BuiltinPart | Parts\n  PinList = List<PinDecl, Comma>\n  PinDecl = Name PinWidth?\n  PinWidth = OpenSquare decNumber CloseSquare\n  BuiltinPart = \"BUILTIN\" Semi\n  Parts = \"PARTS:\" Part*\n  Part = Name \"(\" Wires \")\" Semi\n  Wires = List<Wire, Comma>\n  Wire = WireSide Equal (WireSide | True | False) \n  WireSide = Name SubBus? \n  SubBus = OpenSquare decNumber subBusRest? CloseSquare\n  subBusRest = \"..\" decNumber\n  ClockedList = \"CLOCKED\" SimplePinList Semi\n  SimplePinList = List<Name, Comma>\n}`;\nexport default hdl;\n","/** Reads and parses HDL chip descriptions. */\nimport ohm from \"ohm-js\";\nimport { grammars, baseSemantics } from \"./base.js\";\nimport { makeParser } from \"./base.js\";\n\nexport interface PinIndex {\n  start?: number | undefined;\n  end?: number | undefined;\n}\n\nexport interface PinParts extends PinIndex {\n  pin: string;\n}\n\nexport interface PinDeclaration {\n  pin: string | string;\n  width: number;\n}\n\nexport interface Wire {\n  lhs: PinParts;\n  rhs: PinParts;\n}\n\nexport interface Part {\n  name: string;\n  wires: Wire[];\n}\n\nexport interface HdlParse {\n  name: string;\n  ins: PinDeclaration[];\n  outs: PinDeclaration[];\n  clocked: string[];\n  parts: \"BUILTIN\" | Part[];\n}\n\nimport hdlGrammar from \"./grammars/hdl.ohm.js\";\nexport const grammar = ohm.grammar(hdlGrammar, grammars);\n\nexport const hdlSemantics = grammar.extendSemantics(baseSemantics);\n\nhdlSemantics.addAttribute<PinIndex>(\"SubBus\", {\n  SubBus(_a, startNode, endNode, _b) {\n    const start = startNode.value;\n    const end = endNode.child(0)?.child(1)?.value ?? start;\n    return { start, end };\n  },\n});\n\nhdlSemantics.addAttribute<PinParts>(\"WireSide\", {\n  WireSide({ name }, index) {\n    const { start, end } = (index.child(0)?.SubBus as PinIndex) ?? {\n      start: undefined,\n      end: undefined,\n    };\n    return { pin: name, start, end };\n  },\n});\n\nhdlSemantics.addAttribute<Wire>(\"Wire\", {\n  Wire(left, _, right) {\n    const rhs: PinParts = right.isTerminal()\n      ? { pin: right.sourceString }\n      : right.WireSide;\n    return { lhs: left.WireSide as PinParts, rhs };\n  },\n});\n\nhdlSemantics.addAttribute<Wire[]>(\"Wires\", {\n  Wires(list) {\n    return list.asIteration().children.map((node) => node.Wire as Wire);\n  },\n});\n\nhdlSemantics.addAttribute<Part>(\"Part\", {\n  Part({ name }, _a, { Wires }, _b, _c) {\n    return { name: name as string, wires: Wires as Wire[] };\n  },\n});\n\nhdlSemantics.addAttribute<Part[] | \"BUILTIN\">(\"Parts\", {\n  Parts(_, parts) {\n    return parts.children.map((c) => c.Part);\n  },\n  BuiltinPart(_a, _b) {\n    return \"BUILTIN\";\n  },\n});\n\nhdlSemantics.addAttribute<\"BUILTIN\" | Part[]>(\"PartList\", {\n  PartList(list) {\n    return list.Parts;\n  },\n});\n\nhdlSemantics.addAttribute<string[]>(\"Clocked\", {\n  ClockedList(_a, clocked, _b) {\n    return (\n      clocked\n        .asIteration()\n        .children.map(\n          ({ sourceString }: { sourceString: string }) => sourceString\n        ) ?? []\n    );\n  },\n});\n\nhdlSemantics.addAttribute<PinDeclaration>(\"PinDecl\", {\n  PinDecl({ name }, width) {\n    return {\n      pin: name,\n      width: width.child(0)?.child(1)?.value ?? 1,\n    };\n  },\n});\n\nhdlSemantics.addAttribute<PinDeclaration[]>(\"PinList\", {\n  PinList(list) {\n    return list\n      .asIteration()\n      .children.map((node) => node.PinDecl as PinDeclaration);\n  },\n});\n\nhdlSemantics.addAttribute<HdlParse>(\"Chip\", {\n  Chip(_a, { name }, _b, body, _c) {\n    return {\n      name,\n      ins: body.child(0).child(0)?.child(1)?.PinList ?? [],\n      outs: body.child(1).child(0)?.child(1)?.PinList ?? [],\n      parts: body.child(2).PartList ?? [],\n      clocked: body.child(3).child(0)?.Clocked,\n    };\n  },\n});\n\nhdlSemantics.addAttribute<HdlParse>(\"Root\", {\n  Root(root) {\n    return root.child(0)?.Chip;\n  },\n});\n\nexport const HDL = {\n  parser: grammar,\n  grammar: hdlGrammar,\n  semantics: hdlSemantics,\n  parse: makeParser<HdlParse>(grammar, hdlSemantics, (n) => n.Chip),\n};\n"],"names":["pinWidth","start","end","undefined","Error","async","loadChip","name","fs","hasBuiltinChip","getBuiltinChip","file","readFile","maybeParsedHDL","HDL","isOk","build","Ok","Err","e","parts","toString","buildChip","Chip","ins","map","pin","width","outs","clocked","part","builtin","isErr","partChip","wires","lhs","rhs","to","from","wire","ROM32K","RAM","constructor","super","path","load","v","i","this","at","busVoltage","cause","Screen","static","SCREEN_SIZE","SCREEN_OFFSET","Keyboard","KEYBOARD_OFFSET","getKey","out","setKey","key","clearKey","Memory","ClockedChip","ram","RAM16K","screen","keyboard","address","add","tick","in","voltage","inn","OFFSET","tock","eval","startsWith","idx","int10","match","groups","get","offset","reset","CPU","_state","emptyState","state","writeM","cpuTick","cpuInput","pull","HIGH","LOW","ALU","output","cpuTock","addressM","outM","PC","inM","instruction","ConstantBus","A","D","Computer","And","a","b","n","and","And16","and16","DMux","sel","dmux","DMux4Way","c","d","dmux4way","DMux8Way","f","g","h","dmux8way","mux16","mux16_4","s2","Mux","set","mux","Mux16","Mux4Way16","Mux8Way16","mux16_8","Nand","nand","Nand16","nand16","Not","Not16","or","Or","Or16","or16","Or8way","Xor","xor","Xor16","xor16","add16","Add16","ALUNoStat","x","y","op","alu","flags","ng","Flags","zr","halfAdder","HalfAdder","sum","carry","FullAdder","s","ca","cb","fullAdder","Inc16","DFF","t","REGISTRY","Map","Bit","Register","RAM8","RAM64","RAM512","RAM4K","VRegister","ChipCtor","chip","has","bit","bits","_memory","_nextData","_address","memory","MemoryChip","Math","pow","assert","size","RamBus","Bus","index","num","grammar","ohm","hdlGrammar","grammars","hdlSemantics","extendSemantics","baseSemantics","addAttribute","SubBus","_a","startNode","endNode","_b","value","child","WireSide","Wire","left","_","right","isTerminal","sourceString","Wires","list","asIteration","children","node","Part","_c","Parts","BuiltinPart","PartList","ClockedList","PinDecl","PinList","body","Clocked","Root","root","parser","semantics","parse","makeParser"],"sourceRoot":""}