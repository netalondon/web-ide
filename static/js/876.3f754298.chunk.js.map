{"version":3,"file":"static/js/876.3f754298.chunk.js","mappings":"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","sources":["../../components/src/chips/alu.tsx","../../components/src/chips/visualizations.tsx","../../components/src/pin_display.ts","../../components/src/pinout.tsx","../../components/src/stores/chip.store.ts","pages/chip.tsx"],"sourcesContent":["import {\n  COMMANDS_ALU,\n  COMMANDS_OP,\n  Flags,\n} from \"@nand2tetris/simulator/cpu/alu.js\";\n\nexport const ALUComponent = ({\n  A,\n  op,\n  D,\n  out,\n  flag,\n}: {\n  A: number;\n  op: COMMANDS_OP;\n  D: number;\n  out: number;\n  flag: keyof typeof Flags;\n}) => (\n  <div>\n    <span>ALU</span>\n    <svg width=\"250\" height=\"250\" xmlns=\"http://www.w3.org/2000/svg\">\n      <g>\n        <rect x=\"1\" y=\"20\" height=\"85\" width=\"70\" fill=\"black\" />\n        <rect x=\"1\" y=\"145\" height=\"85\" width=\"70\" fill=\"black\" />\n        <rect x=\"180\" y=\"95\" height=\"60\" width=\"70\" fill=\"black\" />\n        <polygon\n          points=\"70,10 180,85 180,165 70,240 70,135 90,125 70,115\"\n          stroke=\"#000\"\n          fill=\"#6D97AB\"\n        />\n        <text\n          xmlSpace=\"preserve\"\n          textAnchor=\"middle\"\n          fontFamily=\"Noto Sans JP\"\n          fontSize=\"14\"\n          strokeWidth=\"0\"\n          id=\"svg_9\"\n          y=\"63\"\n          x=\"35\"\n          stroke=\"white\"\n          fill=\"#ffffff\"\n        >\n          {A}\n        </text>\n        <text\n          xmlSpace=\"preserve\"\n          textAnchor=\"middle\"\n          fontFamily=\"Noto Sans JP\"\n          fontSize=\"14\"\n          id=\"svg_10\"\n          y=\"188\"\n          x=\"35\"\n          strokeWidth=\"0\"\n          stroke=\"white\"\n          fill=\"#ffffff\"\n        >\n          {D}\n        </text>\n        <text\n          xmlSpace=\"preserve\"\n          textAnchor=\"middle\"\n          fontFamily=\"Noto Sans JP\"\n          fontSize=\"14\"\n          id=\"svg_11\"\n          y=\"125\"\n          x=\"215\"\n          strokeWidth=\"0\"\n          stroke=\"white\"\n          fill=\"#ffffff\"\n        >\n          {out}\n        </text>\n        <text\n          xmlSpace=\"preserve\"\n          textAnchor=\"middle\"\n          fontFamily=\"Noto Sans JP\"\n          fontSize=\"14\"\n          id=\"svg_13\"\n          y=\"125\"\n          x=\"135\"\n          strokeWidth=\"0\"\n          stroke=\"white\"\n          fill=\"#ffffff\"\n        >\n          {COMMANDS_ALU.op[op] ?? \"(??)\"}\n        </text>\n      </g>\n    </svg>\n  </div>\n);\n","import {\n  CPU,\n  Keyboard,\n  ROM32K,\n  Screen,\n} from \"@nand2tetris/simulator/chip/builtins/computer/computer.js\";\nimport { ALU } from \"@nand2tetris/simulator/chip/builtins/index.js\";\nimport {\n  PC,\n  Register,\n} from \"@nand2tetris/simulator/chip/builtins/sequential/bit.js\";\nimport {\n  RAM,\n  RAM8,\n} from \"@nand2tetris/simulator/chip/builtins/sequential/ram.js\";\nimport { Chip, HIGH } from \"@nand2tetris/simulator/chip/chip.js\";\nimport { Flags } from \"@nand2tetris/simulator/cpu/alu.js\";\nimport { decode } from \"@nand2tetris/simulator/cpu/cpu.js\";\nimport { ReactElement } from \"react\";\nimport { ALUComponent } from \"./alu.js\";\nimport { Keyboard as KeyboardComponent } from \"./keyboard.js\";\nimport { Memory as MemoryComponent } from \"./memory.js\";\nimport { RegisterComponent } from \"./register.js\";\nimport { Screen as ScreenComponent } from \"./screen.js\";\n\nexport function getBuiltinVisualization(part: Chip): ReactElement | undefined {\n  switch (part.name) {\n    case \"Register\":\n    case \"ARegister\":\n    case \"DRegister\":\n    case \"PC\":\n    case \"KEYBOARD\":\n    case \"RAM8\":\n    case \"RAM64\":\n    case \"RAM512\":\n    case \"RAM4K\":\n    case \"RAM16K\":\n    case \"ROM32K\":\n    case \"Screen\":\n    case \"Memory\":\n    default:\n      return undefined;\n  }\n}\n\nexport function makeVisualization(\n  chip: Chip,\n  updateAction?: () => void\n): ReactElement | undefined {\n  if (chip instanceof ALU) {\n    return (\n      <ALUComponent\n        A={chip.in(\"x\").busVoltage}\n        op={chip.op()}\n        D={chip.in(\"y\").busVoltage}\n        out={chip.out().busVoltage}\n        flag={\n          (chip.out(\"zr\").voltage() === HIGH\n            ? Flags.Zero\n            : chip.out(\"ng\").voltage() === HIGH\n            ? Flags.Negative\n            : Flags.Positive) as keyof typeof Flags\n        }\n      />\n    );\n  }\n  if (chip instanceof Register) {\n    return (\n      <RegisterComponent\n        name={chip.name ?? `Chip ${chip.id}`}\n        bits={chip.bits}\n      />\n    );\n  }\n  if (chip instanceof PC) {\n    return <RegisterComponent name=\"PC\" bits={chip.bits} />;\n  }\n  if (chip instanceof Keyboard) {\n    return <KeyboardComponent keyboard={chip} update={updateAction} />;\n  }\n  if (chip instanceof Screen) {\n    return <ScreenComponent memory={chip.memory} />;\n  }\n  if (chip instanceof RAM) {\n    return (\n      <MemoryComponent\n        name={chip.name}\n        memory={chip.memory}\n        format={chip instanceof ROM32K ? \"asm\" : \"dec\"}\n        highlight={chip.address}\n      />\n    );\n  }\n  if (chip instanceof RAM8) {\n    return <span>RAM {chip.width}</span>;\n  }\n  if (chip instanceof CPU) {\n    const bits = decode(chip.in(\"instruction\").busVoltage);\n    return (\n      <>\n        <RegisterComponent name={\"A\"} bits={chip.state.A} />\n        <RegisterComponent name={\"D\"} bits={chip.state.D} />\n        <RegisterComponent name={\"PC\"} bits={chip.state.PC} />\n        <ALUComponent\n          A={bits.am ? chip.in(\"inM\").busVoltage : chip.state.A}\n          D={chip.state.D}\n          out={chip.state.ALU}\n          op={bits.op}\n          flag={chip.state.flag as keyof typeof Flags}\n        />\n      </>\n    );\n  }\n\n  const vis = [...chip.parts]\n    .map((chip) => makeVisualization(chip, updateAction))\n    .filter((v) => v !== undefined);\n  return vis.length > 0 ? <>{vis}</> : undefined;\n}\n\nexport function makeVisualizationsWithId(\n  chip: {\n    parts: Chip[];\n  },\n  updateAction?: () => void\n): [string, ReactElement][] {\n  return [...chip.parts]\n    .map((part, i): [string, ReactElement | undefined] => [\n      `${part.id}_${i}`,\n      makeVisualization(part, updateAction),\n    ])\n    .filter(([_, v]) => v !== undefined) as [string, ReactElement][];\n}\n","import { Ok, isOk } from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport {\n  REGISTRY as BUILTIN_REGISTRY,\n  getBuiltinChip,\n} from \"@nand2tetris/simulator/chip/builtins/index.js\";\n\nexport class ChipDisplayInfo {\n  signBehaviors: Map<string, boolean> = new Map();\n\n  public constructor(chipName: string, unsigned?: string[]) {\n    if (BUILTIN_REGISTRY.has(chipName)) {\n      const chip = getBuiltinChip(chipName);\n      if (isOk(chip)) {\n        const pins = Array.from(Ok(chip).ins.entries()).concat(\n          Array.from(Ok(chip).outs.entries())\n        );\n        for (const pin of pins) {\n          this.signBehaviors.set(\n            pin.name,\n            !unsigned || !unsigned.includes(pin.name)\n          );\n        }\n      }\n    }\n  }\n\n  public isSigned(pin: string) {\n    return this.signBehaviors.get(pin);\n  }\n}\n\nconst UNSIGNED_PINS = new Map<string, string[]>([\n  [\"Mux4Way16\", [\"sel\"]],\n  [\"Mux8Way16\", [\"sel\"]],\n  [\"DMux4Way\", [\"sel\"]],\n  [\"DMux8Way\", [\"sel\"]],\n  [\"RAM8\", [\"address\"]],\n  [\"RAM64\", [\"address\"]],\n  [\"RAM512\", [\"address\"]],\n  [\"RAM4K\", [\"address\"]],\n  [\"RAM16K\", [\"address\"]],\n  [\"Screen\", [\"address\"]],\n  [\"Memory\", [\"address\"]],\n  [\"CPU\", [\"addressM\", \"pc\"]],\n]);\n\nexport const getDisplayInfo = (chipName: string) =>\n  new ChipDisplayInfo(chipName, UNSIGNED_PINS.get(chipName));\n","// import { plural, Trans } from \"@lingui/macro\";\nimport {\n  Pin as ChipPin,\n  Pins,\n  Voltage,\n} from \"@nand2tetris/simulator/chip/chip.js\";\nimport { range } from \"@davidsouther/jiffies/lib/esm/range.js\";\nimport { ChipSim } from \"./stores/chip.store.js\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ChipDisplayInfo, getDisplayInfo } from \"./pin_display.js\";\n\nexport const PinContext = createContext({});\n\nexport interface ImmPin {\n  bits: [number, Voltage][];\n  pin: ChipPin;\n}\n\nexport function reducePin(pin: ChipPin) {\n  return {\n    pin,\n    bits: range(0, pin.width)\n      .map((i) => [i, pin.voltage(i)] as [number, Voltage])\n      .reverse(),\n  };\n}\n\nexport function reducePins(pins: Pins): ImmPin[] {\n  return [...pins.entries()].map(reducePin);\n}\n\nexport interface PinoutPins {\n  pins: ImmPin[];\n  toggle?: (pin: ChipPin, bit?: number) => void;\n}\n\nexport const FullPinout = (props: {\n  sim: ChipSim;\n  toggle: (pin: ChipPin, i: number | undefined) => void;\n  setInputValid: (pending: boolean) => void;\n  hideInternal?: boolean;\n}) => {\n  const { inPins, outPins, internalPins } = props.sim;\n  const displayInfo = getDisplayInfo(props.sim.chip[0].name ?? \"\");\n  return (\n    <>\n      <style>{`\n        table.pinout th {\n          font-weight: bold;\n        }\n\n        table.pinout tbody td:first-child {\n          text-align: right;\n          --font-size: 1rem;\n          width: 0;\n          white-space: nowrap;\n          border-right: var(--border-width) solid var(--table-border-color);\n        }\n\n        table.pinout tbody button {\n          --font-size: 0.875em;\n          font-family: var(--font-family-monospace);\n          max-width: 2em;\n        }\n        `}</style>\n      <table className=\"pinout\">\n        <tbody>\n          <PinoutBlock\n            pins={inPins}\n            header=\"Input pins\"\n            toggle={props.toggle}\n            setInputValid={props.setInputValid}\n            displayInfo={displayInfo}\n          />\n          <PinoutBlock\n            pins={outPins}\n            header=\"Output pins\"\n            disabled={props.sim.pending}\n            enableEdit={false}\n            displayInfo={displayInfo}\n          />\n          {!props.hideInternal && (\n            <PinoutBlock\n              pins={internalPins}\n              header=\"Internal pins\"\n              disabled={props.sim.pending}\n              enableEdit={false}\n              displayInfo={displayInfo}\n            />\n          )}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport const PinoutBlock = (\n  props: PinoutPins & {\n    header: string;\n    disabled?: boolean;\n    enableEdit?: boolean;\n    setInputValid?: (valid: boolean) => void;\n    displayInfo: ChipDisplayInfo;\n  }\n) => (\n  <>\n    {props.pins.length > 0 && (\n      <tr>\n        <th colSpan={2}>{props.header}</th>\n      </tr>\n    )}\n    {[...props.pins].map((immPin) => (\n      <tr key={immPin.pin.name}>\n        <td>{immPin.pin.name}</td>\n        <td>\n          <Pin\n            pin={immPin}\n            toggle={props.toggle}\n            disabled={props.disabled}\n            enableEdit={props.enableEdit}\n            signed={props.displayInfo.isSigned(immPin.pin.name)}\n            setInputValid={props.setInputValid}\n            internal={props.header === \"Internal pins\" ? true : false}\n          />\n        </td>\n      </tr>\n    ))}\n  </>\n);\n\nexport const Pinout = ({\n  pins,\n  toggle,\n}: {\n  pins: ImmPin[];\n  toggle?: (pin: ChipPin, bit?: number) => void;\n}) => {\n  if (pins.length === 0) {\n    return <>None</>;\n  }\n  return (\n    <table className=\"pinout\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Value</th>\n        </tr>\n      </thead>\n      <tbody>\n        {[...pins].map((immPin) => (\n          <tr key={immPin.pin.name}>\n            <td>{immPin.pin.name}</td>\n            <td>\n              <Pin pin={immPin} toggle={toggle} internal />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nconst Pin = ({\n  pin,\n  toggle,\n  disabled = false,\n  enableEdit = true,\n  signed = true,\n  setInputValid,\n  internal = false,\n}: {\n  pin: ImmPin;\n  toggle: ((pin: ChipPin, bit?: number) => void) | undefined;\n  disabled?: boolean;\n  enableEdit?: boolean;\n  signed?: boolean;\n  setInputValid?: (valid: boolean) => void;\n  internal: boolean;\n}) => {\n  const [isBin, setIsBin] = useState(true);\n  let inputValid = true;\n  const [decimal, setDecimal] = useState(\"\");\n\n  const toggleBin = () => {\n    setIsBin(!isBin);\n  };\n\n  const resetDispatcher = useContext(PinContext);\n  if (resetDispatcher instanceof PinResetDispatcher) {\n    resetDispatcher.registerCallback(() => {\n      setIsBin(true);\n    });\n  }\n\n  const setInputValidity = (valid: boolean) => {\n    inputValid = valid;\n    setInputValid?.(valid);\n  };\n\n  const handleDecimalChange = (value: string) => {\n    const positive = value.replace(/[^\\d]/g, \"\");\n    const numeric = signed && value[0] === \"-\" ? `-${positive}` : positive;\n\n    setDecimal(numeric);\n    if (isNaN(parseInt(numeric))) {\n      setInputValidity(false);\n    } else {\n      const newValue = parseInt(numeric);\n      if (\n        (!signed && newValue >= Math.pow(2, pin.bits.length)) ||\n        (signed &&\n          (newValue >= Math.pow(2, pin.bits.length - 1) ||\n            newValue < -Math.pow(2, pin.bits.length - 1)))\n      ) {\n        setInputValidity(false);\n      } else {\n        updatePins(newValue);\n        setInputValidity(true);\n      }\n    }\n  };\n\n  const updatePins = (n: number) => {\n    for (let i = 0; i < pin.bits.length; i++) {\n      if (pin.bits[pin.bits.length - i - 1][1] !== ((n >> i) & 1)) {\n        toggle?.(pin.pin, i);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (!isBin && inputValid) {\n      let value = 0;\n      if (signed && pin.bits[0][1]) {\n        // negative\n        for (const [i, v] of pin.bits) {\n          if (i < pin.bits.length - 1 && !v) {\n            value += 2 ** i;\n          }\n        }\n        value = -value - 1;\n      } else {\n        // positive\n        const limit = signed ? pin.bits.length - 1 : pin.bits.length;\n        for (const [i, v] of pin.bits) {\n          if (i < limit && v) {\n            value += 2 ** i;\n          }\n        }\n      }\n      setDecimal(value.toString());\n    }\n  }, [pin, isBin]);\n\n  return (\n    <div\n      style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }}\n    >\n      <fieldset role=\"group\" style={{ width: `${pin.bits.length}rem` }}>\n        {isBin ? (\n          pin.bits.map(([i, v]) => (\n            <button\n              key={i}\n              disabled={disabled}\n              style={internal ? { backgroundColor: \"grey\" } : {}}\n              onClick={() => toggle?.(pin.pin, i)}\n              data-testid={`pin-${i}`}\n            >\n              {v}\n            </button>\n          ))\n        ) : (\n          <input\n            className=\"colored\"\n            value={decimal}\n            onChange={(e) => {\n              handleDecimalChange(e.target.value);\n            }}\n            disabled={!enableEdit}\n          />\n        )}\n      </fieldset>\n      {pin.bits.length > 1 && (\n        <>\n          <div style={{ width: \"1em\" }} />\n          <button\n            style={{ maxWidth: \"3em\", margin: 0 }}\n            onClick={() => toggleBin()}\n          >\n            {isBin ? \"dec\" : \"bin\"}\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport class PinResetDispatcher {\n  private callbacks: (() => void)[] = [];\n\n  registerCallback(callback: () => void) {\n    this.callbacks.push(callback);\n  }\n\n  reset() {\n    for (const callback of this.callbacks) {\n      callback();\n    }\n  }\n}\n","import { display } from \"@davidsouther/jiffies/lib/esm/display.js\";\nimport { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs.js\";\nimport { Err, isErr, Ok } from \"@davidsouther/jiffies/lib/esm/result.js\";\nimport { Dispatch, MutableRefObject, useContext, useMemo, useRef } from \"react\";\n\nimport { build as buildChip } from \"@nand2tetris/simulator/chip/builder.js\";\nimport {\n  getBuiltinChip,\n  REGISTRY,\n} from \"@nand2tetris/simulator/chip/builtins/index.js\";\nimport {\n  Chip,\n  Chip as SimChip,\n  Low,\n  Pin,\n} from \"@nand2tetris/simulator/chip/chip.js\";\nimport { Clock } from \"@nand2tetris/simulator/chip/clock.js\";\nimport { Span } from \"@nand2tetris/simulator/languages/base.js\";\nimport { HDL } from \"@nand2tetris/simulator/languages/hdl.js\";\nimport { TST } from \"@nand2tetris/simulator/languages/tst.js\";\nimport {\n  BUILTIN_CHIP_PROJECTS,\n  CHIP_ORDER,\n  CHIP_PROJECTS,\n  ChipProjects,\n} from \"@nand2tetris/projects/index.js\";\nimport { ChipTest } from \"@nand2tetris/simulator/tst.js\";\n\nimport { ImmPin, reducePins } from \"../pinout.js\";\nimport { useImmerReducer } from \"../react.js\";\n\nimport { BaseContext } from \"./base.context.js\";\nimport { assert } from \"@davidsouther/jiffies/lib/esm/assert.js\";\nimport { compare } from \"../compare.js\";\n\nexport const PROJECT_NAMES = [\n  [\"01\", `Project 1`],\n  [\"02\", `Project 2`],\n  [\"03\", `Project 3`],\n  [\"05\", `Project 5`],\n];\n\nfunction getChips(project: keyof typeof CHIP_PROJECTS) {\n  return project in CHIP_ORDER\n    ? (CHIP_ORDER as Record<typeof project, string[]>)[project]\n    : BUILTIN_CHIP_PROJECTS[project].concat(CHIP_PROJECTS[project]);\n}\n\nfunction findDropdowns(storage: Record<string, string>) {\n  const project =\n    (storage[\"/chip/project\"] as keyof typeof CHIP_PROJECTS) ?? \"01\";\n  const chips = getChips(project);\n  const chipName = storage[\"/chip/chip\"] ?? CHIP_PROJECTS[project][0];\n  return { project, chips, chipName };\n}\n\nfunction makeHdl(name: string) {\n  return `CHIP ${name} {\n  IN in;\n  OUT out;\n  PARTS:\n}`;\n}\n\nfunction makeTst() {\n  return `repeat 10 {\n  tick,\n  tock;\n}`;\n}\n\nfunction makeCmp() {\n  return `| in|out|`;\n}\n\nexport function isBuiltinOnly(chipName: string) {\n  return Object.values(BUILTIN_CHIP_PROJECTS).flat().includes(chipName);\n}\n\nfunction getTemplate(project: keyof typeof CHIP_PROJECTS, chipName: string) {\n  if (isBuiltinOnly(chipName)) {\n    return (ChipProjects[project].BUILTIN_CHIPS as Record<string, string>)[\n      chipName\n    ];\n  }\n\n  return (\n    ChipProjects[project].CHIPS as Record<string, Record<string, string>>\n  )[chipName][`${chipName}.hdl`] as string;\n}\n\nfunction getBuiltinCode(project: keyof typeof CHIP_PROJECTS, chipName: string) {\n  const template = getTemplate(project, chipName);\n  if (isBuiltinOnly(chipName)) {\n    return template;\n  }\n  const bodyComment = \"//// Replace this comment with your code.\";\n  const builtinLine = `BUILTIN ${chipName};`;\n  const builtinCode = template.includes(bodyComment)\n    ? template.replace(bodyComment, builtinLine)\n    : template.replace(\"PARTS:\", `PARTS:\\n    ${builtinLine}`);\n  return builtinCode;\n}\n\nexport interface ChipPageState {\n  files: Files;\n  sim: ChipSim;\n  controls: ControlsState;\n}\n\nexport interface ChipSim {\n  clocked: boolean;\n  inPins: ImmPin[];\n  outPins: ImmPin[];\n  internalPins: ImmPin[];\n  chip: [Chip];\n  pending: boolean;\n  invalid: boolean;\n}\n\nexport interface Files {\n  hdl: string;\n  cmp: string;\n  tst: string;\n  out: string;\n}\n\nexport interface ControlsState {\n  project: keyof typeof CHIP_PROJECTS;\n  chips: string[];\n  chipName: string;\n  hasBuiltin: boolean;\n  builtinOnly: boolean;\n  runningTest: boolean;\n  span?: Span;\n  error: string;\n}\n\nfunction reduceChip(chip: SimChip, pending = false, invalid = false): ChipSim {\n  return {\n    clocked: chip.clocked,\n    inPins: reducePins(chip.ins),\n    outPins: reducePins(chip.outs),\n    internalPins: reducePins(chip.pins),\n    chip: [chip],\n    pending,\n    invalid,\n  };\n}\n\nconst clock = Clock.get();\n\nexport type ChipStoreDispatch = Dispatch<{\n  action: keyof ReturnType<typeof makeChipStore>[\"reducers\"];\n  payload?: unknown;\n}>;\n\nexport function makeChipStore(\n  fs: FileSystem,\n  setStatus: (status: string) => void,\n  storage: Record<string, string>,\n  dispatch: MutableRefObject<ChipStoreDispatch>\n) {\n  const dropdowns = findDropdowns(storage);\n  let { project, chipName } = dropdowns;\n  const { chips } = dropdowns;\n  let chip = new Low();\n  let test = new ChipTest();\n  let usingBuiltin = false;\n  let builtinOnly = false;\n\n  const reducers = {\n    setFiles(\n      state: ChipPageState,\n      {\n        hdl = state.files.hdl,\n        tst = state.files.tst,\n        cmp = state.files.cmp,\n        out = \"\",\n      }: {\n        hdl?: string;\n        tst?: string;\n        cmp?: string;\n        out?: string;\n      }\n    ) {\n      state.files.hdl = hdl;\n      state.files.tst = tst;\n      state.files.cmp = cmp;\n      state.files.out = out;\n    },\n\n    updateChip(\n      state: ChipPageState,\n      payload?: {\n        pending?: boolean;\n        invalid?: boolean;\n        chipName?: string;\n        error?: string;\n      }\n    ) {\n      state.sim = reduceChip(\n        chip,\n        payload?.pending ?? state.sim.pending,\n        payload?.invalid ?? state.sim.invalid\n      );\n      state.controls.error = state.sim.invalid\n        ? payload?.error ?? state.controls.error\n        : \"\";\n      state.controls.chips = getChips(state.controls.project);\n      state.controls.chipName = state.sim.invalid\n        ? payload?.chipName ?? chipName\n        : chip.name ?? payload?.chipName ?? chipName;\n      if (!state.controls.chips.includes(state.controls.chipName)) {\n        state.controls.chips = [\n          ...state.controls.chips,\n          state.controls.chipName,\n        ];\n      }\n    },\n\n    setProject(state: ChipPageState, project: keyof typeof CHIP_PROJECTS) {\n      const chips = getChips(project);\n      const chipName =\n        state.controls.chipName && chips.includes(state.controls.chipName)\n          ? state.controls.chipName\n          : chips[0];\n      state.controls.project = project;\n      state.controls.chips = chips;\n      this.setChip(state, chipName);\n    },\n\n    setChip(state: ChipPageState, chipName: string) {\n      state.controls.chipName = chipName;\n      state.controls.hasBuiltin = REGISTRY.has(chipName);\n      state.controls.builtinOnly = isBuiltinOnly(chipName);\n    },\n\n    testRunning(state: ChipPageState) {\n      state.controls.runningTest = true;\n    },\n\n    testFinished(state: ChipPageState) {\n      state.controls.runningTest = false;\n      const passed = compare(state.files.cmp.trim(), state.files.out.trim());\n      setStatus(\n        passed\n          ? `Simulation successful: The output file is identical to the compare file`\n          : `Simulation error: The output file differs from the compare file`\n      );\n    },\n\n    updateTestStep(state: ChipPageState) {\n      state.files.out = test?.log() ?? \"\";\n      if (test?.currentStep?.span) {\n        state.controls.span = test.currentStep.span;\n      } else {\n        if (test.done) {\n          const end = state.files.tst.length;\n          state.controls.span = {\n            start: end - 1,\n            end,\n          };\n        }\n      }\n      this.updateChip(state, {\n        pending: state.sim.pending,\n        invalid: state.sim.invalid,\n      });\n    },\n  };\n\n  const actions = {\n    setProject(p: keyof typeof CHIP_PROJECTS) {\n      project = storage[\"/chip/project\"] = p;\n      dispatch.current({ action: \"setProject\", payload: project });\n      this.setChip(CHIP_PROJECTS[project][0]);\n    },\n\n    async setChip(chip: string, project = storage[\"/chip/project\"] ?? \"01\") {\n      chipName = storage[\"/chip/chip\"] = chip;\n      dispatch.current({ action: \"setChip\", payload: chipName });\n      builtinOnly = isBuiltinOnly(chipName);\n\n      if (builtinOnly) {\n        dispatch.current({\n          action: \"setFiles\",\n          payload: { hdl: \"\", tst: \"\", cmp: \"\" },\n        });\n        this.useBuiltin();\n        return;\n      }\n      await this.loadChip(project, chipName);\n      if (usingBuiltin) {\n        this.useBuiltin();\n      }\n    },\n\n    reset() {\n      Clock.get().reset();\n      chip.reset();\n      test.reset();\n      dispatch.current({ action: \"setFiles\", payload: {} });\n      dispatch.current({ action: \"updateChip\" });\n    },\n\n    async updateFiles({\n      hdl,\n      tst,\n      cmp,\n    }: {\n      hdl?: string;\n      tst?: string;\n      cmp: string;\n    }) {\n      dispatch.current({ action: \"setFiles\", payload: { hdl, tst, cmp } });\n      try {\n        if (hdl) {\n          await this.compileChip(hdl);\n        }\n        if (tst) {\n          this.compileTest(tst);\n        }\n      } catch (e) {\n        setStatus(display(e));\n      }\n    },\n\n    async compileChip(hdl: string) {\n      chip.remove();\n      const maybeParsed = HDL.parse(hdl);\n      if (isErr(maybeParsed)) {\n        setStatus(\"Failed to parse chip\");\n        dispatch.current({\n          action: \"updateChip\",\n          payload: { invalid: true, error: display(Err(maybeParsed)) },\n        });\n        return;\n      }\n      const maybeChip = await buildChip(Ok(maybeParsed));\n      if (isErr(maybeChip)) {\n        const error = display(Err(maybeChip));\n        setStatus(error);\n        dispatch.current({\n          action: \"updateChip\",\n          payload: { invalid: true, error },\n        });\n        return;\n      }\n      setStatus(`Compiled ${chip.name}`);\n      this.replaceChip(Ok(maybeChip));\n    },\n\n    replaceChip(nextChip: SimChip) {\n      // Store current inPins\n      const inPins = chip.ins;\n      for (const [pin, { busVoltage }] of inPins) {\n        const nextPin = nextChip.ins.get(pin);\n        if (nextPin) {\n          nextPin.busVoltage = busVoltage;\n        }\n      }\n      clock.reset();\n      nextChip.eval();\n      chip = nextChip;\n      chip.reset();\n      test = test.with(chip).reset();\n      dispatch.current({ action: \"updateChip\", payload: { invalid: false } });\n      dispatch.current({ action: \"updateTestStep\" });\n    },\n\n    async loadChip(project: string, name: string) {\n      storage[\"/chip/chip\"] = name;\n      const fsName = (ext: string) =>\n        `/projects/${project}/${name}/${name}.${ext}`;\n\n      const [hdl, tst, cmp] = await Promise.all([\n        fs.readFile(fsName(\"hdl\")).catch(() => makeHdl(name)),\n        fs.readFile(fsName(\"tst\")).catch((e) => {\n          return makeTst();\n        }),\n        fs.readFile(fsName(\"cmp\")).catch(() => makeCmp()),\n      ]);\n\n      dispatch.current({ action: \"setFiles\", payload: { hdl, tst, cmp } });\n      await this.compileChip(hdl);\n      this.compileTest(tst);\n    },\n\n    async saveChip(hdl: string, prj = project, name = chipName) {\n      dispatch.current({ action: \"setFiles\", payload: { hdl } });\n      const path = `/projects/${prj}/${name}/${name}.hdl`;\n      await fs.writeFile(path, hdl);\n      setStatus(`Saved ${path}`);\n    },\n\n    toggle(pin: Pin, i: number | undefined) {\n      if (i !== undefined) {\n        pin.busVoltage = pin.busVoltage ^ (1 << i);\n      } else {\n        if (pin.width === 1) {\n          pin.toggle();\n        } else {\n          pin.busVoltage += 1;\n        }\n      }\n      dispatch.current({ action: \"updateChip\", payload: { pending: true } });\n    },\n\n    eval() {\n      chip.eval();\n      dispatch.current({ action: \"updateChip\", payload: { pending: false } });\n    },\n\n    clock() {\n      clock.toggle();\n      if (clock.isLow) {\n        clock.frame();\n      }\n      dispatch.current({ action: \"updateChip\" });\n    },\n\n    async useBuiltin(doUseBuiltin = true, oldHdl?: string) {\n      if (!doUseBuiltin) {\n        if (!builtinOnly) {\n          usingBuiltin = false;\n        }\n        await this.loadChip(project, chipName);\n        return;\n      }\n      if (!builtinOnly) {\n        usingBuiltin = true;\n      }\n      const builtinName = chipName;\n      const nextChip = getBuiltinChip(builtinName);\n      if (isErr(nextChip)) {\n        setStatus(\n          `Failed to load builtin ${builtinName}: ${display(Err(nextChip))}`\n        );\n        return;\n      }\n\n      // Save hdl code that will be overwritten by the switch\n      if (oldHdl) {\n        await this.saveChip(oldHdl, project, chipName);\n      }\n\n      const hdl = getBuiltinCode(project, builtinName);\n      dispatch.current({ action: \"setFiles\", payload: { hdl } });\n      this.replaceChip(Ok(nextChip));\n    },\n\n    async initialize() {\n      await this.setChip(chipName, project);\n    },\n\n    compileTest(file: string) {\n      dispatch.current({ action: \"setFiles\", payload: { tst: file } });\n      const tst = TST.parse(file);\n\n      if (isErr(tst)) {\n        setStatus(`Failed to parse test`);\n        return false;\n      }\n      setStatus(`Parsed tst`);\n\n      test = ChipTest.from(Ok(tst)).with(chip).reset();\n      test.setFileSystem(fs);\n      dispatch.current({ action: \"updateTestStep\" });\n      return true;\n    },\n\n    async runTest(file: string) {\n      if (!this.compileTest(file)) {\n        return;\n      }\n      dispatch.current({ action: \"testRunning\" });\n\n      fs.pushd(\"/samples\");\n      await test.run();\n      fs.popd();\n\n      dispatch.current({ action: \"updateTestStep\" });\n      dispatch.current({ action: \"testFinished\" });\n    },\n\n    tick(): boolean {\n      return this.stepTest();\n    },\n\n    stepTest(): boolean {\n      assert(test.chipId === chip.id, \"Test and chip out of sync\");\n      const done = test.step();\n      dispatch.current({ action: \"updateTestStep\" });\n      if (done) {\n        dispatch.current({ action: \"testFinished\" });\n      }\n      return done;\n    },\n  };\n\n  const initialState: ChipPageState = (() => {\n    const controls: ControlsState = {\n      project,\n      chips,\n      chipName,\n      hasBuiltin: REGISTRY.has(chipName),\n      builtinOnly: isBuiltinOnly(chipName),\n      runningTest: false,\n      error: \"\",\n    };\n\n    const maybeChip = getBuiltinChip(controls.chipName);\n    if (isErr(maybeChip)) {\n      setStatus(display(Err(maybeChip)));\n      chip = new Low();\n    } else {\n      chip = Ok(maybeChip);\n    }\n\n    const sim = reduceChip(chip);\n\n    return {\n      controls,\n      files: {\n        hdl: \"\",\n        cmp: \"\",\n        tst: \"\",\n        out: \"\",\n      },\n      sim,\n    };\n  })();\n\n  return { initialState, reducers, actions };\n}\n\nexport function useChipPageStore() {\n  const { fs, setStatus, storage } = useContext(BaseContext);\n\n  const dispatch = useRef<ChipStoreDispatch>(() => undefined);\n\n  const { initialState, reducers, actions } = useMemo(\n    () => makeChipStore(fs, setStatus, storage, dispatch),\n    [fs, setStatus, storage, dispatch]\n  );\n\n  const [state, dispatcher] = useImmerReducer(reducers, initialState);\n  dispatch.current = dispatcher;\n\n  return { state, dispatch, actions };\n}\n","import { Trans } from \"@lingui/macro\";\nimport {\n  CSSProperties,\n  ReactNode,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\n\nimport \"./chip.scss\";\n\nimport { makeVisualizationsWithId } from \"@nand2tetris/components/chips/visualizations.js\";\nimport { Clockface } from \"@nand2tetris/components/clockface.js\";\nimport { DiffTable } from \"@nand2tetris/components/difftable.js\";\nimport {\n  FullPinout,\n  PinContext,\n  PinResetDispatcher,\n} from \"@nand2tetris/components/pinout.js\";\nimport { useStateInitializer } from \"@nand2tetris/components/react.js\";\nimport { Runbar } from \"@nand2tetris/components/runbar.js\";\nimport { BaseContext } from \"@nand2tetris/components/stores/base.context.js\";\nimport {\n  Files,\n  PROJECT_NAMES,\n  isBuiltinOnly,\n  useChipPageStore,\n} from \"@nand2tetris/components/stores/chip.store.js\";\nimport { CHIP_PROJECTS } from \"@nand2tetris/projects/index.js\";\nimport { CMP } from \"@nand2tetris/simulator/languages/cmp.js\";\nimport { HDL } from \"@nand2tetris/simulator/languages/hdl.js\";\nimport { TST } from \"@nand2tetris/simulator/languages/tst.js\";\nimport { Timer } from \"@nand2tetris/simulator/timer.js\";\nimport { AppContext } from \"../App.context\";\nimport { Icon } from \"../pico/icon\";\nimport { Editor } from \"../shell/editor\";\nimport { Accordian, Panel } from \"../shell/panel\";\n\nexport const Chip = () => {\n  const { fs, setStatus } = useContext(BaseContext);\n  const { filePicker, tracking } = useContext(AppContext);\n  const { state, actions, dispatch } = useChipPageStore();\n\n  const [hdl, setHdl] = useStateInitializer(state.files.hdl);\n  const [tst, setTst] = useStateInitializer(state.files.tst);\n  const [cmp, setCmp] = useStateInitializer(state.files.cmp);\n  const [out] = useStateInitializer(state.files.out);\n\n  useEffect(() => {\n    actions.initialize();\n  }, [actions]);\n\n  useEffect(() => {\n    tracking.trackPage(\"/chip\");\n  }, [tracking]);\n\n  const saveChip = () => {\n    actions.saveChip(hdl);\n  };\n\n  useEffect(() => {\n    tracking.trackEvent(\"action\", \"setProject\", state.controls.project);\n    tracking.trackEvent(\"action\", \"setChip\", state.controls.chipName);\n  }, []);\n\n  const setProject = useCallback(\n    (project: keyof typeof CHIP_PROJECTS) => {\n      actions.setProject(project);\n      tracking.trackEvent(\"action\", \"setProject\", project);\n    },\n    [actions, tracking]\n  );\n\n  const setChip = useCallback(\n    (chip: string) => {\n      actions.setChip(chip);\n      tracking.trackEvent(\"action\", \"setChip\", chip);\n      pinResetDispatcher.reset();\n    },\n    [actions, tracking]\n  );\n\n  const doEval = useCallback(() => {\n    actions.eval();\n    tracking.trackEvent(\"action\", \"eval\");\n  }, [actions, tracking]);\n\n  const compile = useRef<(files?: Partial<Files>) => void>(() => undefined);\n  compile.current = async (files: Partial<Files> = {}) => {\n    await actions.updateFiles({\n      hdl: files.hdl,\n      tst: files.tst ?? tst,\n      cmp: files.cmp ?? cmp,\n    });\n  };\n\n  const loadTest = useCallback(async () => {\n    try {\n      const path = await filePicker.select();\n      const tst = await fs.readFile(path);\n      await compile.current({ tst });\n    } catch (e) {\n      console.error(e);\n      setStatus(`Failed to load into memory`);\n    }\n  }, [filePicker, setStatus, fs, compile]);\n\n  const runner = useRef<Timer>();\n  useEffect(() => {\n    runner.current = new (class ChipTimer extends Timer {\n      async reset(): Promise<void> {\n        await compile.current();\n        await actions.reset();\n      }\n\n      override finishFrame(): void {\n        super.finishFrame();\n        dispatch.current({ action: \"updateTestStep\" });\n      }\n\n      async tick(): Promise<boolean> {\n        return await actions.stepTest();\n      }\n\n      toggle(): void {\n        dispatch.current({ action: \"updateTestStep\" });\n      }\n    })();\n\n    return () => {\n      runner.current?.stop();\n    };\n  }, [compile, actions, dispatch]);\n\n  const clockActions = useMemo(\n    () => ({\n      toggle() {\n        actions.clock();\n        tracking.trackEvent(\"action\", \"toggleClock\");\n      },\n      reset() {\n        tracking.trackEvent(\"action\", \"resetClock\");\n        actions.reset();\n      },\n    }),\n    [actions]\n  );\n\n  const [useBuiltin, setUseBuiltin] = useState(false);\n  const toggleUseBuiltin = () => {\n    if (useBuiltin) {\n      setUseBuiltin(false);\n      actions.useBuiltin(false);\n    } else {\n      setUseBuiltin(true);\n      actions.useBuiltin(true, hdl);\n    }\n    pinResetDispatcher.reset();\n  };\n\n  const selectors = (\n    <>\n      <fieldset role=\"group\">\n        <select\n          value={state.controls.project}\n          onChange={({ target: { value } }) => {\n            setProject(value as keyof typeof CHIP_PROJECTS);\n          }}\n          data-testid=\"project-picker\"\n        >\n          {PROJECT_NAMES.map(([number, label]) => (\n            <option key={number} value={number}>\n              {label}\n            </option>\n          ))}\n        </select>\n        <select\n          value={state.controls.chipName}\n          onChange={({ target: { value } }) => {\n            setChip(value);\n          }}\n          data-testid=\"chip-picker\"\n        >\n          {state.controls.chips.map((chip) => (\n            <option\n              key={chip}\n              value={chip}\n              style={isBuiltinOnly(chip) ? { color: \"rgb(170, 170, 170)\" } : {}}\n            >\n              {`${chip} ${isBuiltinOnly(chip) ? \"(given)\" : \"\"}`}\n            </option>\n          ))}\n        </select>\n        <button className=\"flex-0\" onClick={saveChip} disabled={useBuiltin}>\n          <Trans>Save</Trans>\n        </button>\n      </fieldset>\n    </>\n  );\n  const hdlPanel = (\n    <Panel\n      className=\"_hdl_panel\"\n      header={\n        <>\n          <div tabIndex={0}>HDL</div>\n          <fieldset>\n            {state.controls.hasBuiltin && !state.controls.builtinOnly && (\n              <label>\n                <input\n                  type=\"checkbox\"\n                  role=\"switch\"\n                  checked={useBuiltin}\n                  onChange={toggleUseBuiltin}\n                />\n                <Trans>Builtin</Trans>\n              </label>\n            )}\n          </fieldset>\n          {selectors}\n        </>\n      }\n    >\n      <Editor\n        className=\"flex-1\"\n        value={hdl}\n        onChange={(source) => {\n          setHdl(source);\n          compile.current(\n            useBuiltin || state.controls.builtinOnly ? {} : { hdl: source }\n          );\n        }}\n        grammar={HDL.parser}\n        language={\"hdl\"}\n        disabled={useBuiltin || state.controls.builtinOnly}\n      />\n    </Panel>\n  );\n\n  const [inputValid, setInputValid] = useState(true);\n\n  const chipButtons = (\n    <fieldset role=\"group\">\n      <button\n        onClick={doEval}\n        onKeyDown={doEval}\n        disabled={!state.sim.pending || !inputValid}\n      >\n        <Trans>Eval</Trans>\n      </button>\n      <button\n        onClick={clockActions.toggle}\n        style={{ maxWidth: \"initial\" }}\n        disabled={!state.sim.clocked}\n      >\n        <Trans>Clock</Trans>:{\"\\u00a0\"}\n        <Clockface />\n      </button>\n      <button\n        onClick={clockActions.reset}\n        style={{ maxWidth: \"initial\" }}\n        disabled={!state.sim.clocked}\n      >\n        <Trans>Reset</Trans>\n      </button>\n    </fieldset>\n  );\n\n  const visualizations: [string, ReactNode][] = makeVisualizationsWithId(\n    {\n      parts: state.sim.chip,\n    },\n    () => {\n      dispatch.current({ action: \"updateChip\" });\n    }\n  );\n\n  const pinResetDispatcher = new PinResetDispatcher();\n\n  const pinsPanel = (\n    <Panel\n      className=\"_parts_panel\"\n      header={\n        <>\n          <div>\n            <Trans>Chip</Trans> {state.controls.chipName}\n          </div>\n          {chipButtons}\n        </>\n      }\n    >\n      {state.sim.invalid ? (\n        <Trans>Syntax errors in the HDL code</Trans>\n      ) : (\n        <>\n          <PinContext.Provider value={pinResetDispatcher}>\n            <FullPinout\n              sim={state.sim}\n              toggle={actions.toggle}\n              setInputValid={setInputValid}\n              hideInternal={state.controls.builtinOnly || useBuiltin}\n            />\n          </PinContext.Provider>\n          {visualizations.length > 0 && (\n            <Accordian summary={<Trans>Visualization</Trans>} open={true}>\n              <main>{visualizations.map(([_, v]) => v)}</main>\n            </Accordian>\n          )}\n        </>\n      )}\n    </Panel>\n  );\n\n  const [selectedTestTab, doSetSelectedTestTab] = useState<\n    \"tst\" | \"cmp\" | \"out\"\n  >(\"tst\");\n\n  const setSelectedTestTab = useCallback(\n    (tab: typeof selectedTestTab) => {\n      doSetSelectedTestTab(tab);\n      tracking.trackEvent(\"tab\", \"change\", tab);\n    },\n    [tracking]\n  );\n\n  const testPanel = (\n    <Panel\n      className=\"_test_panel\"\n      header={\n        <>\n          <div className=\"flex-1\">\n            <Trans>Test</Trans>\n          </div>\n          <div className=\"flex-2\">\n            {runner.current && <Runbar runner={runner.current} />}\n          </div>\n          <div>\n            <button onClick={loadTest}>\n              <Icon name=\"upload_file\" />{\" \"}\n            </button>\n          </div>\n        </>\n      }\n    >\n      <div role=\"tablist\" style={{ \"--tab-count\": \"3\" } as CSSProperties}>\n        <div\n          role=\"tab\"\n          id=\"test-tab-tst\"\n          aria-controls=\"test-tabpanel-tst\"\n          aria-selected={selectedTestTab === \"tst\"}\n        >\n          <label>\n            <input\n              type=\"radio\"\n              name=\"test-tabs\"\n              aria-controls=\"test-tabpanel-tst\"\n              value=\"tst\"\n              checked={selectedTestTab === \"tst\"}\n              onChange={() => setSelectedTestTab(\"tst\")}\n            />\n            Test Script\n          </label>\n        </div>\n        <div\n          role=\"tabpanel\"\n          aria-labelledby=\"test-tab-tst\"\n          id=\"test-tabpanel-tst\"\n        >\n          <Editor\n            value={tst}\n            onChange={setTst}\n            grammar={TST.parser}\n            language={\"tst\"}\n            highlight={state.controls.span}\n            disabled={state.controls.builtinOnly}\n          />\n        </div>\n        <div\n          role=\"tab\"\n          id=\"test-tab-cmp\"\n          aria-controls=\"test-tablpanel-cmp\"\n          aria-selected={selectedTestTab === \"cmp\"}\n        >\n          <label>\n            <input\n              type=\"radio\"\n              name=\"test-tabs\"\n              aria-controls=\"test-tabpanel-cmp\"\n              value=\"cmp\"\n              checked={selectedTestTab === \"cmp\"}\n              onChange={() => setSelectedTestTab(\"cmp\")}\n            />\n            Compare File\n          </label>\n        </div>\n        <div\n          role=\"tabpanel\"\n          aria-labelledby=\"test-tab-cmp\"\n          id=\"test-tabpanel-cmp\"\n          style={{ position: \"relative\" }}\n        >\n          <Editor\n            value={cmp}\n            onChange={setCmp}\n            grammar={CMP.parser}\n            language={\"cmp\"}\n            disabled={state.controls.builtinOnly}\n          />\n        </div>\n        <div\n          role=\"tab\"\n          id=\"test-tab-out\"\n          aria-controls=\"test-tabpanel-out\"\n          aria-selected={selectedTestTab === \"out\"}\n        >\n          <label>\n            <input\n              type=\"radio\"\n              name=\"test-tabs\"\n              aria-controls=\"test-tabpanel-out\"\n              value=\"out\"\n              checked={selectedTestTab === \"out\"}\n              onChange={() => setSelectedTestTab(\"out\")}\n            />\n            Output File\n          </label>\n        </div>\n        <div\n          role=\"tabpanel\"\n          id=\"test-tabpanel-out\"\n          aria-labelledby=\"test-tab-out\"\n        >\n          <DiffTable cmp={cmp} out={out} />\n        </div>\n      </div>\n    </Panel>\n  );\n\n  return (\n    <div className=\"ChipPage grid\">\n      {hdlPanel}\n      {pinsPanel}\n      {testPanel}\n    </div>\n  );\n};\n\nexport default Chip;\n"],"names":["ALUComponent","A","op","D","out","flag","_jsxs","children","_jsx","width","height","xmlns","x","y","fill","points","stroke","xmlSpace","textAnchor","fontFamily","fontSize","strokeWidth","id","COMMANDS_ALU","makeVisualization","chip","updateAction","ALU","in","busVoltage","voltage","HIGH","Flags","Register","RegisterComponent","name","bits","PC","Keyboard","KeyboardComponent","keyboard","update","Screen","ScreenComponent","memory","RAM","MemoryComponent","format","ROM32K","highlight","address","RAM8","CPU","decode","state","am","vis","parts","map","filter","v","undefined","length","ChipDisplayInfo","signBehaviors","Map","constructor","chipName","unsigned","BUILTIN_REGISTRY","getBuiltinChip","isOk","pins","Array","from","Ok","ins","entries","concat","outs","pin","this","set","includes","isSigned","get","UNSIGNED_PINS","PinContext","createContext","reducePin","range","i","reverse","reducePins","FullPinout","props","inPins","outPins","internalPins","sim","displayInfo","className","PinoutBlock","header","toggle","setInputValid","disabled","pending","enableEdit","hideInternal","colSpan","immPin","Pin","signed","internal","isBin","setIsBin","useState","inputValid","decimal","setDecimal","resetDispatcher","useContext","PinResetDispatcher","registerCallback","setInputValidity","valid","updatePins","n","useEffect","value","limit","toString","style","display","flexDirection","alignItems","role","backgroundColor","onClick","onChange","e","positive","replace","numeric","isNaN","parseInt","newValue","Math","pow","handleDecimalChange","target","maxWidth","margin","callbacks","callback","push","reset","PROJECT_NAMES","getChips","project","CHIP_ORDER","BUILTIN_CHIP_PROJECTS","CHIP_PROJECTS","isBuiltinOnly","Object","values","flat","getBuiltinCode","template","ChipProjects","BUILTIN_CHIPS","CHIPS","getTemplate","bodyComment","builtinLine","reduceChip","invalid","clocked","clock","Clock","makeChipStore","fs","setStatus","storage","dispatch","dropdowns","chips","findDropdowns","Low","test","ChipTest","usingBuiltin","builtinOnly","reducers","setFiles","hdl","files","tst","cmp","updateChip","payload","controls","error","setProject","setChip","hasBuiltin","REGISTRY","testRunning","runningTest","testFinished","passed","compare","trim","updateTestStep","log","currentStep","span","done","end","start","actions","p","current","action","async","useBuiltin","loadChip","compileChip","compileTest","remove","maybeParsed","HDL","isErr","Err","maybeChip","buildChip","replaceChip","nextChip","nextPin","eval","with","fsName","ext","Promise","all","readFile","catch","makeHdl","prj","path","writeFile","isLow","frame","oldHdl","builtinName","saveChip","file","TST","setFileSystem","pushd","run","popd","tick","stepTest","assert","chipId","step","initialState","Chip","BaseContext","filePicker","tracking","AppContext","useRef","useMemo","dispatcher","useImmerReducer","useChipPageStore","setHdl","useStateInitializer","setTst","setCmp","initialize","trackPage","trackEvent","useCallback","pinResetDispatcher","doEval","compile","updateFiles","loadTest","select","console","runner","Timer","finishFrame","super","stop","clockActions","setUseBuiltin","selectors","number","label","color","hdlPanel","tabIndex","type","checked","source","grammar","language","chipButtons","onKeyDown","visualizations","part","_","makeVisualizationsWithId","pinsPanel","Provider","summary","open","selectedTestTab","doSetSelectedTestTab","setSelectedTestTab","tab","testPanel","position","CMP"],"sourceRoot":""}