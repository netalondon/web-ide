{"version":3,"file":"static/js/255.e46a7b16.chunk.js","mappings":"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","sources":["../../simulator/src/testing/mult.ts","../../components/src/stores/cpu.store.ts","shell/test_panel.tsx","pages/cpu.tsx"],"sourcesContent":["export const JACK = `\nwhile (R0 > 0) {\n    R2 = R2 + R1\n    R0 = R0 - 1\n}`;\n\nexport const ASM = `\n@R2\nM=0\n(LOOP)\n  @R0\n  D=M\n  @END\n  D;JEQ\n\n  @R1\n  D=M\n  @R2\n  D=D+M\n  M=D\n\n  @R0\n  M=M-1\n  @LOOP\n  0;JMP\n(END)\n  @END\n  0;JMP\n`;\n\nexport const HACK = new Int16Array([\n  0x0002, // @R2\n  0xda88, // M=0\n  0x0000, // (LOOP) @R0\n  0xfc10, // D=M\n  0x000f, // @END\n  0xd302, // D;JEQ\n  0x0001, // @R1\n  0xfc10, // D=M\n  0x0002, // @R2\n  0xf090, // D=D+M\n  0xd308, // M=D\n  0x0000, // @R0\n  0xfc88, // M=M-1\n  0x0002, // @LOOP\n  0xda87, // 0;JMP\n  0x000f, // (END) @END\n  0xda87, // 0;JMP\n]);\n","import { FileSystem } from \"@davidsouther/jiffies/lib/esm/fs\";\nimport {\n  KeyboardAdapter,\n  MemoryAdapter,\n  MemoryKeyboard,\n  ROM,\n  SubMemory,\n} from \"@nand2tetris/simulator/cpu/memory.js\";\nimport { Span } from \"@nand2tetris/simulator/languages/base.js\";\nimport { HACK } from \"@nand2tetris/simulator/testing/mult.js\";\nimport { CPUTest } from \"@nand2tetris/simulator/tst.js\";\nimport { Dispatch, MutableRefObject, useContext, useMemo, useRef } from \"react\";\nimport { useImmerReducer } from \"../react.js\";\nimport { BaseContext } from \"./base.context.js\";\n\nexport interface CpuSim {\n  A: number;\n  D: number;\n  PC: number;\n  RAM: MemoryAdapter;\n  ROM: MemoryAdapter;\n  Screen: MemoryAdapter;\n  Keyboard: KeyboardAdapter;\n}\n\nexport interface CPUTestSim {\n  useTest: boolean;\n  highlight: Span | undefined;\n}\n\nexport interface CpuPageState {\n  sim: CpuSim;\n  test: CPUTestSim;\n}\n\nclass ImmMemory extends SubMemory {\n  constructor(\n    parent: MemoryAdapter,\n    private dispatch: MutableRefObject<CpuStoreDispatch>\n  ) {\n    super(parent, parent.size, 0);\n  }\n\n  override async load(fs: FileSystem, path: string): Promise<void> {\n    await super.load(fs, path);\n    this.dispatch.current({ action: \"update\" });\n  }\n}\n\nfunction reduceCPUTest(\n  cpuTest: CPUTest,\n  dispatch: MutableRefObject<CpuStoreDispatch>\n): CpuSim {\n  const RAM = new ImmMemory(cpuTest.cpu.RAM, dispatch);\n  const ROM = new ImmMemory(cpuTest.cpu.ROM, dispatch);\n  const Screen = new ImmMemory(cpuTest.cpu.Screen, dispatch);\n  const Keyboard = new MemoryKeyboard(new ImmMemory(cpuTest.cpu.RAM, dispatch));\n\n  return {\n    A: cpuTest.cpu.A,\n    D: cpuTest.cpu.D,\n    PC: cpuTest.cpu.PC,\n    RAM,\n    ROM,\n    Screen,\n    Keyboard,\n  };\n}\n\nexport type CpuStoreDispatch = Dispatch<{\n  action: keyof ReturnType<typeof makeCpuStore>[\"reducers\"];\n  payload?: unknown;\n}>;\n\nexport function makeCpuStore(\n  fs: FileSystem,\n  setStatus: (status: string) => void,\n  storage: Record<string, string>,\n  dispatch: MutableRefObject<CpuStoreDispatch>\n) {\n  const test = new CPUTest(new ROM(HACK));\n  let useTest = false;\n\n  const reducers = {\n    update(state: CpuPageState) {\n      state.sim = reduceCPUTest(test, dispatch);\n      state.test.useTest = useTest;\n      state.test.highlight = test.currentStep?.span;\n    },\n  };\n\n  const actions = {\n    tick() {\n      if (useTest) {\n        test.step();\n      } else {\n        test.cpu.tick();\n      }\n    },\n\n    resetRAM() {\n      // test.cpu.RAM.set(0, 3);\n      // test.cpu.RAM.set(1, 2);\n      test.cpu.RAM.loadBytes([]);\n      dispatch.current({ action: \"update\" });\n      setStatus(\"Reset RAM\");\n    },\n\n    toggleUseTest() {\n      useTest = !useTest;\n      dispatch.current({ action: \"update\" });\n    },\n\n    resetCPU() {\n      test.reset();\n      dispatch.current({ action: \"update\" });\n      setStatus(\"Reset CPU\");\n    },\n\n    reset() {\n      this.resetRAM();\n      this.resetCPU();\n      setStatus(\"Reset CPU & RAM\");\n    },\n  };\n\n  const initialState = {\n    sim: reduceCPUTest(test, dispatch),\n    test: {\n      useTest,\n      highlight: test.currentStep?.span,\n    },\n  };\n\n  return { initialState, reducers, actions };\n}\n\nexport function useCpuPageStore() {\n  const { fs, setStatus, storage } = useContext(BaseContext);\n\n  const dispatch = useRef<CpuStoreDispatch>(() => undefined);\n\n  const { initialState, reducers, actions } = useMemo(\n    () => makeCpuStore(fs, setStatus, storage, dispatch),\n    [fs, setStatus, storage, dispatch]\n  );\n\n  const [state, dispatcher] = useImmerReducer(reducers, initialState);\n  dispatch.current = dispatcher;\n\n  return { state, dispatch, actions };\n}\n","import {\n  CSSProperties,\n  Dispatch,\n  RefObject,\n  useCallback,\n  useContext,\n  useState,\n} from \"react\";\nimport { Trans } from \"@lingui/macro\";\nimport { DiffTable } from \"@nand2tetris/components/difftable.js\";\nimport { Runbar } from \"@nand2tetris/components/runbar.js\";\nimport { CMP } from \"@nand2tetris/simulator/languages/cmp.js\";\nimport { BaseContext } from \"@nand2tetris/components/stores/base.context.js\";\nimport { Timer } from \"@nand2tetris/simulator/timer.js\";\nimport { TST } from \"@nand2tetris/simulator/languages/tst.js\";\nimport { AppContext } from \"../App.context\";\nimport { Editor } from \"./editor\";\nimport { Panel } from \"./panel\";\nimport { Span } from \"@nand2tetris/simulator/languages/base\";\n\nexport const TestPanel = ({\n  runner,\n  tst: [tst, setTst, tstHighlight],\n  cmp: [cmp, setCmp],\n  out: [out],\n  disabled = false,\n}: {\n  runner: RefObject<Timer | undefined>;\n  tst: [string, Dispatch<string>, Span | undefined];\n  cmp: [string, Dispatch<string>];\n  out: [string, Dispatch<string>];\n  disabled?: boolean;\n}) => {\n  const { fs, setStatus } = useContext(BaseContext);\n  const { filePicker, tracking } = useContext(AppContext);\n\n  const [selectedTestTab, doSetSelectedTestTab] = useState<\n    \"tst\" | \"cmp\" | \"out\"\n  >(\"tst\");\n\n  const setSelectedTestTab = useCallback(\n    (tab: typeof selectedTestTab) => {\n      doSetSelectedTestTab(tab);\n      tracking.trackEvent(\"tab\", \"change\", tab);\n    },\n    [tracking]\n  );\n\n  const loadTest = useCallback(async () => {\n    try {\n      const path = await filePicker.select();\n      const tst = await fs.readFile(path);\n      setTst(tst);\n      // await compile.current({ tst });\n    } catch (e) {\n      console.error(e);\n      setStatus(`Failed to load test`);\n    }\n  }, [filePicker, setStatus, fs]);\n\n  return (\n    <Panel\n      className=\"_test_panel\"\n      header={\n        <>\n          <div className=\"flex-0\">\n            <Trans>Test</Trans>\n          </div>\n          <div className=\"flex-1\">\n            {runner.current && <Runbar runner={runner.current} />}\n          </div>\n          <div>\n            <fieldset role=\"group\">\n              <button onClick={loadTest}>📂</button>\n            </fieldset>\n          </div>\n        </>\n      }\n    >\n      <div role=\"tablist\" style={{ \"--tab-count\": \"3\" } as CSSProperties}>\n        <div\n          role=\"tab\"\n          id=\"test-tab-tst\"\n          aria-controls=\"test-tabpanel-tst\"\n          aria-selected={selectedTestTab === \"tst\"}\n        >\n          <label>\n            <input\n              type=\"radio\"\n              name=\"test-tabs\"\n              aria-controls=\"test-tabpanel-tst\"\n              value=\"tst\"\n              checked={selectedTestTab === \"tst\"}\n              onChange={() => setSelectedTestTab(\"tst\")}\n            />\n            Test Script\n          </label>\n        </div>\n        <div\n          role=\"tabpanel\"\n          aria-labelledby=\"test-tab-tst\"\n          id=\"test-tabpanel-tst\"\n        >\n          <Editor\n            value={tst}\n            onChange={setTst}\n            grammar={TST.parser}\n            language={\"tst\"}\n            highlight={tstHighlight}\n            disabled={disabled}\n          />\n        </div>\n        <div\n          role=\"tab\"\n          id=\"test-tab-cmp\"\n          aria-controls=\"test-tablpanel-cmp\"\n          aria-selected={selectedTestTab === \"cmp\"}\n        >\n          <label>\n            <input\n              type=\"radio\"\n              name=\"test-tabs\"\n              aria-controls=\"test-tabpanel-cmp\"\n              value=\"cmp\"\n              checked={selectedTestTab === \"cmp\"}\n              onChange={() => setSelectedTestTab(\"cmp\")}\n            />\n            Compare File\n          </label>\n        </div>\n        <div\n          role=\"tabpanel\"\n          aria-labelledby=\"test-tab-cmp\"\n          id=\"test-tabpanel-cmp\"\n          style={{ position: \"relative\" }}\n        >\n          <Editor\n            value={cmp}\n            onChange={setCmp}\n            grammar={CMP.parser}\n            language={\"cmp\"}\n            disabled={disabled}\n          />\n        </div>\n        <div\n          role=\"tab\"\n          id=\"test-tab-out\"\n          aria-controls=\"test-tabpanel-out\"\n          aria-selected={selectedTestTab === \"out\"}\n        >\n          <label>\n            <input\n              type=\"radio\"\n              name=\"test-tabs\"\n              aria-controls=\"test-tabpanel-out\"\n              value=\"out\"\n              checked={selectedTestTab === \"out\"}\n              onChange={() => setSelectedTestTab(\"out\")}\n            />\n            Output File\n          </label>\n        </div>\n        <div\n          role=\"tabpanel\"\n          id=\"test-tabpanel-out\"\n          aria-labelledby=\"test-tab-out\"\n        >\n          <DiffTable cmp={cmp} out={out} />\n        </div>\n      </div>\n    </Panel>\n  );\n};\n","import { Timer } from \"@nand2tetris/simulator/timer.js\";\n\nimport MemoryComponent from \"@nand2tetris/components/chips/memory.js\";\nimport { Screen } from \"@nand2tetris/components/chips/screen.js\";\nimport { Keyboard } from \"@nand2tetris/components/chips/keyboard\";\nimport { useCpuPageStore } from \"@nand2tetris/components/stores/cpu.store\";\nimport { useEffect, useRef, useState } from \"react\";\n\nimport \"./cpu.scss\";\nimport { TestPanel } from \"src/shell/test_panel\";\nimport { Panel } from \"src/shell/panel\";\n\nexport const CPU = () => {\n  const { state, actions, dispatch } = useCpuPageStore();\n\n  const [tst, setTst] = useState(\"repeat {\\n\\tticktock;\\n}\");\n  const [out, setOut] = useState(\"\");\n  const [cmp, setCmp] = useState(\"\");\n\n  const runner = useRef<Timer>();\n  useEffect(() => {\n    runner.current = new (class ChipTimer extends Timer {\n      override tick() {\n        actions.tick();\n        return false;\n      }\n\n      override finishFrame() {\n        dispatch.current({ action: \"update\" });\n      }\n\n      override reset() {\n        actions.reset();\n      }\n\n      override toggle() {\n        dispatch.current({ action: \"update\" });\n      }\n    })();\n\n    return () => {\n      runner.current?.stop();\n    };\n  }, [actions, dispatch]);\n\n  return (\n    <div className=\"CpuPage grid\">\n      <MemoryComponent\n        name=\"ROM\"\n        memory={state.sim.ROM}\n        highlight={state.sim.PC}\n        format=\"asm\"\n        editable={false}\n      />\n      <MemoryComponent name=\"RAM\" memory={state.sim.RAM} format=\"hex\" />\n      <Panel className=\"IO\">\n        <div>\n          <label>\n            <input\n              type=\"checkbox\"\n              onChange={actions.toggleUseTest}\n              checked={state.test.useTest}\n              role=\"switch\"\n            />\n            Use Test Script\n          </label>\n        </div>\n        <Screen memory={state.sim.Screen}></Screen>\n        <Keyboard keyboard={state.sim.Keyboard} />\n        <div>\n          <dl>\n            <dt>PC</dt>\n            <dd>{state.sim.PC}</dd>\n            <dt>A</dt>\n            <dd>{state.sim.A}</dd>\n            <dt>D</dt>\n            <dd>{state.sim.D}</dd>\n          </dl>\n        </div>\n      </Panel>\n      <TestPanel\n        disabled={!state.test.useTest}\n        runner={runner}\n        tst={[tst, setTst, state.test.highlight]}\n        out={[out, setOut]}\n        cmp={[cmp, setCmp]}\n      />\n    </div>\n  );\n};\n\nexport default CPU;\n"],"names":["HACK","Int16Array","ImmMemory","parent","dispatch","size","fs","path","this","current","action","SubMemory","reduceCPUTest","cpuTest","RAM","cpu","ROM","Screen","Keyboard","MemoryKeyboard","A","D","PC","useCpuPageStore","useContext","BaseContext","setStatus","storage","useRef","useMemo","test","CPUTest","useTest","reducers","update","state","sim","highlight","currentStep","span","actions","tick","step","resetRAM","loadBytes","toggleUseTest","resetCPU","reset","initialState","makeCpuStore","useImmerReducer","dispatcher","TestPanel","runner","tst","setTst","tstHighlight","cmp","setCmp","out","disabled","AppContext","filePicker","tracking","useState","selectedTestTab","doSetSelectedTestTab","setSelectedTestTab","useCallback","tab","trackEvent","loadTest","select","readFile","console","error","className","header","role","onClick","style","id","type","name","value","checked","onChange","grammar","TST","language","position","CMP","CPU","setOut","useEffect","Timer","stop","memory","format","editable","keyboard"],"sourceRoot":""}